Created by PLY version 3.4 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> source_text
Rule 1     source_text -> description
Rule 2     description -> definitions
Rule 3     definitions -> definitions definition
Rule 4     definitions -> definition
Rule 5     definition -> moduledef
Rule 6     definition -> pragma
Rule 7     pragma -> LPAREN TIMES ID EQUALS expression TIMES RPAREN
Rule 8     pragma -> LPAREN TIMES ID TIMES RPAREN
Rule 9     moduledef -> MODULE modulename paramlist portlist items ENDMODULE
Rule 10    modulename -> ID
Rule 11    modulename -> SENS_OR
Rule 12    paramlist -> DELAY LPAREN params RPAREN
Rule 13    paramlist -> empty
Rule 14    params -> params_begin param_end
Rule 15    params_begin -> params_begin param
Rule 16    params_begin -> param
Rule 17    params -> param_end
Rule 18    param -> PARAMETER param_substitution_list COMMA
Rule 19    param -> PARAMETER SIGNED param_substitution_list COMMA
Rule 20    param -> PARAMETER width param_substitution_list COMMA
Rule 21    param -> PARAMETER SIGNED width param_substitution_list COMMA
Rule 22    param -> PARAMETER INTEGER param_substitution_list COMMA
Rule 23    param_end -> PARAMETER param_substitution_list
Rule 24    param_end -> PARAMETER SIGNED param_substitution_list
Rule 25    param_end -> PARAMETER width param_substitution_list
Rule 26    param_end -> PARAMETER SIGNED width param_substitution_list
Rule 27    param_end -> PARAMETER INTEGER param_substitution_list
Rule 28    portlist -> LPAREN ports RPAREN SEMICOLON
Rule 29    portlist -> LPAREN ioports RPAREN SEMICOLON
Rule 30    portlist -> LPAREN RPAREN SEMICOLON
Rule 31    portlist -> SEMICOLON
Rule 32    ports -> ports COMMA portname
Rule 33    ports -> portname
Rule 34    portname -> ID
Rule 35    sigtypes -> sigtypes sigtype
Rule 36    sigtypes -> sigtype
Rule 37    sigtype -> INPUT
Rule 38    sigtype -> OUTPUT
Rule 39    sigtype -> INOUT
Rule 40    sigtype -> TRI
Rule 41    sigtype -> REG
Rule 42    sigtype -> LOGIC
Rule 43    sigtype -> WIRE
Rule 44    sigtype -> SIGNED
Rule 45    sigtype -> SUPPLY0
Rule 46    sigtype -> SUPPLY1
Rule 47    ioports -> ioports COMMA ioport
Rule 48    ioports -> ioport_head
Rule 49    ioport -> sigtypes portname
Rule 50    ioport -> sigtypes width portname
Rule 51    ioport_head -> sigtypes portname
Rule 52    ioport_head -> sigtypes width portname
Rule 53    ioport -> portname
Rule 54    width -> LBRACKET expression COLON expression RBRACKET
Rule 55    length -> LBRACKET expression COLON expression RBRACKET
Rule 56    items -> items item
Rule 57    items -> item
Rule 58    items -> empty
Rule 59    item -> standard_item
Rule 60    item -> generate
Rule 61    standard_item -> decl
Rule 62    standard_item -> integerdecl
Rule 63    standard_item -> realdecl
Rule 64    standard_item -> declassign
Rule 65    standard_item -> parameterdecl
Rule 66    standard_item -> localparamdecl
Rule 67    standard_item -> genvardecl
Rule 68    standard_item -> assignment
Rule 69    standard_item -> always
Rule 70    standard_item -> always_ff
Rule 71    standard_item -> always_comb
Rule 72    standard_item -> initial
Rule 73    standard_item -> instance
Rule 74    standard_item -> function
Rule 75    standard_item -> task
Rule 76    standard_item -> pragma
Rule 77    decl -> sigtypes declnamelist SEMICOLON
Rule 78    decl -> sigtypes width declnamelist SEMICOLON
Rule 79    declnamelist -> declnamelist COMMA declname
Rule 80    declnamelist -> declname
Rule 81    declname -> ID
Rule 82    declname -> ID length
Rule 83    declassign -> sigtypes declassign_element SEMICOLON
Rule 84    declassign -> sigtypes width declassign_element SEMICOLON
Rule 85    declassign_element -> ID EQUALS rvalue
Rule 86    declassign_element -> delays ID EQUALS delays rvalue
Rule 87    integerdecl -> INTEGER integernamelist SEMICOLON
Rule 88    integerdecl -> INTEGER SIGNED integernamelist SEMICOLON
Rule 89    integernamelist -> integernamelist COMMA integername
Rule 90    integernamelist -> integername
Rule 91    integername -> ID
Rule 92    realdecl -> REAL realnamelist SEMICOLON
Rule 93    realnamelist -> realnamelist COMMA realname
Rule 94    realnamelist -> realname
Rule 95    realname -> ID
Rule 96    parameterdecl -> PARAMETER param_substitution_list SEMICOLON
Rule 97    parameterdecl -> PARAMETER SIGNED param_substitution_list SEMICOLON
Rule 98    parameterdecl -> PARAMETER width param_substitution_list SEMICOLON
Rule 99    parameterdecl -> PARAMETER SIGNED width param_substitution_list SEMICOLON
Rule 100   parameterdecl -> PARAMETER INTEGER param_substitution_list SEMICOLON
Rule 101   localparamdecl -> LOCALPARAM param_substitution_list SEMICOLON
Rule 102   localparamdecl -> LOCALPARAM SIGNED param_substitution_list SEMICOLON
Rule 103   localparamdecl -> LOCALPARAM width param_substitution_list SEMICOLON
Rule 104   localparamdecl -> LOCALPARAM SIGNED width param_substitution_list SEMICOLON
Rule 105   localparamdecl -> LOCALPARAM INTEGER param_substitution_list SEMICOLON
Rule 106   param_substitution_list -> param_substitution_list COMMA param_substitution
Rule 107   param_substitution_list -> param_substitution
Rule 108   param_substitution -> ID EQUALS rvalue
Rule 109   assignment -> ASSIGN lvalue EQUALS rvalue SEMICOLON
Rule 110   assignment -> ASSIGN delays lvalue EQUALS delays rvalue SEMICOLON
Rule 111   lpartselect -> pointer LBRACKET expression COLON expression RBRACKET
Rule 112   lpartselect -> pointer LBRACKET expression PLUSCOLON expression RBRACKET
Rule 113   lpartselect -> pointer LBRACKET expression MINUSCOLON expression RBRACKET
Rule 114   lpartselect -> identifier LBRACKET expression COLON expression RBRACKET
Rule 115   lpartselect -> identifier LBRACKET expression PLUSCOLON expression RBRACKET
Rule 116   lpartselect -> identifier LBRACKET expression MINUSCOLON expression RBRACKET
Rule 117   lpointer -> pointer
Rule 118   lconcat -> LBRACE lconcatlist RBRACE
Rule 119   lconcatlist -> lconcatlist COMMA lconcat_one
Rule 120   lconcatlist -> lconcat_one
Rule 121   lconcat_one -> identifier
Rule 122   lconcat_one -> lpartselect
Rule 123   lconcat_one -> lpointer
Rule 124   lconcat_one -> lconcat
Rule 125   lvalue -> lpartselect
Rule 126   lvalue -> lpointer
Rule 127   lvalue -> lconcat
Rule 128   lvalue -> identifier
Rule 129   rvalue -> expression
Rule 130   expression -> MINUS expression
Rule 131   expression -> PLUS expression
Rule 132   expression -> LNOT expression
Rule 133   expression -> NOT expression
Rule 134   expression -> AND expression
Rule 135   expression -> NAND expression
Rule 136   expression -> NOR expression
Rule 137   expression -> OR expression
Rule 138   expression -> XOR expression
Rule 139   expression -> XNOR expression
Rule 140   expression -> expression POWER expression
Rule 141   expression -> expression TIMES expression
Rule 142   expression -> expression DIVIDE expression
Rule 143   expression -> expression MOD expression
Rule 144   expression -> expression PLUS expression
Rule 145   expression -> expression MINUS expression
Rule 146   expression -> expression LSHIFT expression
Rule 147   expression -> expression RSHIFT expression
Rule 148   expression -> expression LSHIFTA expression
Rule 149   expression -> expression RSHIFTA expression
Rule 150   expression -> expression LT expression
Rule 151   expression -> expression GT expression
Rule 152   expression -> expression LE expression
Rule 153   expression -> expression GE expression
Rule 154   expression -> expression EQ expression
Rule 155   expression -> expression NE expression
Rule 156   expression -> expression EQL expression
Rule 157   expression -> expression NEL expression
Rule 158   expression -> expression AND expression
Rule 159   expression -> expression XOR expression
Rule 160   expression -> expression XNOR expression
Rule 161   expression -> expression OR expression
Rule 162   expression -> expression LAND expression
Rule 163   expression -> expression LOR expression
Rule 164   expression -> expression COND expression COLON expression
Rule 165   expression -> LPAREN expression RPAREN
Rule 166   expression -> concat
Rule 167   expression -> repeat
Rule 168   expression -> partselect
Rule 169   expression -> pointer
Rule 170   expression -> functioncall
Rule 171   expression -> systemcall
Rule 172   expression -> identifier
Rule 173   expression -> const_expression
Rule 174   concat -> LBRACE concatlist RBRACE
Rule 175   concatlist -> concatlist COMMA expression
Rule 176   concatlist -> expression
Rule 177   repeat -> LBRACE expression concat RBRACE
Rule 178   partselect -> identifier LBRACKET expression COLON expression RBRACKET
Rule 179   partselect -> identifier LBRACKET expression PLUSCOLON expression RBRACKET
Rule 180   partselect -> identifier LBRACKET expression MINUSCOLON expression RBRACKET
Rule 181   partselect -> pointer LBRACKET expression COLON expression RBRACKET
Rule 182   partselect -> pointer LBRACKET expression PLUSCOLON expression RBRACKET
Rule 183   partselect -> pointer LBRACKET expression MINUSCOLON expression RBRACKET
Rule 184   pointer -> identifier LBRACKET expression RBRACKET
Rule 185   pointer -> pointer LBRACKET expression RBRACKET
Rule 186   const_expression -> intnumber
Rule 187   const_expression -> floatnumber
Rule 188   const_expression -> stringliteral
Rule 189   floatnumber -> FLOATNUMBER
Rule 190   intnumber -> INTNUMBER_DEC
Rule 191   intnumber -> SIGNED_INTNUMBER_DEC
Rule 192   intnumber -> INTNUMBER_BIN
Rule 193   intnumber -> SIGNED_INTNUMBER_BIN
Rule 194   intnumber -> INTNUMBER_OCT
Rule 195   intnumber -> SIGNED_INTNUMBER_OCT
Rule 196   intnumber -> INTNUMBER_HEX
Rule 197   intnumber -> SIGNED_INTNUMBER_HEX
Rule 198   stringliteral -> STRING_LITERAL
Rule 199   always -> ALWAYS senslist always_statement
Rule 200   always_ff -> ALWAYS_FF senslist always_statement
Rule 201   always_comb -> ALWAYS_COMB senslist always_statement
Rule 202   senslist -> AT LPAREN edgesigs RPAREN
Rule 203   edgesig -> POSEDGE edgesig_base
Rule 204   edgesig -> NEGEDGE edgesig_base
Rule 205   edgesig_base -> identifier
Rule 206   edgesig_base -> pointer
Rule 207   edgesigs -> edgesigs SENS_OR edgesig
Rule 208   edgesigs -> edgesig
Rule 209   senslist -> empty
Rule 210   senslist -> AT levelsig
Rule 211   senslist -> AT LPAREN levelsigs RPAREN
Rule 212   levelsig -> levelsig_base
Rule 213   levelsig_base -> identifier
Rule 214   levelsig_base -> pointer
Rule 215   levelsig_base -> partselect
Rule 216   levelsigs -> levelsigs SENS_OR levelsig
Rule 217   levelsigs -> levelsigs COMMA levelsig
Rule 218   levelsigs -> levelsig
Rule 219   senslist -> AT TIMES
Rule 220   senslist -> AT LPAREN TIMES RPAREN
Rule 221   basic_statement -> if_statement
Rule 222   basic_statement -> case_statement
Rule 223   basic_statement -> casex_statement
Rule 224   basic_statement -> unique_case_statement
Rule 225   basic_statement -> for_statement
Rule 226   basic_statement -> while_statement
Rule 227   basic_statement -> event_statement
Rule 228   basic_statement -> wait_statement
Rule 229   basic_statement -> forever_statement
Rule 230   basic_statement -> block
Rule 231   basic_statement -> namedblock
Rule 232   basic_statement -> parallelblock
Rule 233   basic_statement -> blocking_substitution
Rule 234   basic_statement -> nonblocking_substitution
Rule 235   basic_statement -> single_statement
Rule 236   always_statement -> basic_statement
Rule 237   blocking_substitution -> delays lvalue EQUALS delays rvalue SEMICOLON
Rule 238   blocking_substitution_base -> delays lvalue EQUALS delays rvalue
Rule 239   nonblocking_substitution -> delays lvalue LE delays rvalue SEMICOLON
Rule 240   delays -> DELAY LPAREN expression RPAREN
Rule 241   delays -> DELAY identifier
Rule 242   delays -> DELAY intnumber
Rule 243   delays -> DELAY floatnumber
Rule 244   delays -> empty
Rule 245   block -> BEGIN block_statements END
Rule 246   block -> BEGIN END
Rule 247   block_statements -> block_statements block_statement
Rule 248   block_statements -> block_statement
Rule 249   block_statement -> basic_statement
Rule 250   namedblock -> BEGIN COLON ID namedblock_statements END
Rule 251   namedblock -> BEGIN COLON ID END
Rule 252   namedblock_statements -> namedblock_statements namedblock_statement
Rule 253   namedblock_statements -> namedblock_statement
Rule 254   namedblock_statement -> basic_statement
Rule 255   namedblock_statement -> decl
Rule 256   namedblock_statement -> integerdecl
Rule 257   namedblock_statement -> realdecl
Rule 258   namedblock_statement -> parameterdecl
Rule 259   namedblock_statement -> localparamdecl
Rule 260   parallelblock -> FORK block_statements JOIN
Rule 261   parallelblock -> FORK JOIN
Rule 262   if_statement -> IF LPAREN cond RPAREN true_statement ELSE else_statement
Rule 263   if_statement -> IF LPAREN cond RPAREN true_statement
Rule 264   if_statement -> delays IF LPAREN cond RPAREN true_statement ELSE else_statement
Rule 265   if_statement -> delays IF LPAREN cond RPAREN true_statement
Rule 266   cond -> expression
Rule 267   ifcontent_statement -> basic_statement
Rule 268   true_statement -> ifcontent_statement
Rule 269   else_statement -> ifcontent_statement
Rule 270   for_statement -> FOR LPAREN forpre forcond forpost RPAREN forcontent_statement
Rule 271   forpre -> blocking_substitution
Rule 272   forpre -> SEMICOLON
Rule 273   forcond -> cond SEMICOLON
Rule 274   forcond -> SEMICOLON
Rule 275   forpost -> blocking_substitution_base
Rule 276   forpost -> empty
Rule 277   forcontent_statement -> basic_statement
Rule 278   while_statement -> WHILE LPAREN cond RPAREN whilecontent_statement
Rule 279   whilecontent_statement -> basic_statement
Rule 280   case_statement -> CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE
Rule 281   casex_statement -> CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE
Rule 282   unique_case_statement -> UNIQUE CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE
Rule 283   case_comp -> expression
Rule 284   casecontent_statements -> casecontent_statements casecontent_statement
Rule 285   casecontent_statements -> casecontent_statement
Rule 286   casecontent_statement -> casecontent_condition COLON basic_statement
Rule 287   casecontent_condition -> casecontent_condition COMMA expression
Rule 288   casecontent_condition -> expression
Rule 289   casecontent_statement -> DEFAULT COLON basic_statement
Rule 290   initial -> INITIAL initial_statement
Rule 291   initial_statement -> basic_statement
Rule 292   event_statement -> senslist SEMICOLON
Rule 293   wait_statement -> WAIT LPAREN cond RPAREN waitcontent_statement
Rule 294   waitcontent_statement -> basic_statement
Rule 295   waitcontent_statement -> SEMICOLON
Rule 296   forever_statement -> FOREVER basic_statement
Rule 297   instance -> ID parameterlist instance_bodylist SEMICOLON
Rule 298   instance -> SENS_OR parameterlist instance_bodylist SEMICOLON
Rule 299   instance_bodylist -> instance_bodylist COMMA instance_body
Rule 300   instance_bodylist -> instance_body
Rule 301   instance_body -> ID LPAREN instance_ports RPAREN
Rule 302   instance_body -> ID width LPAREN instance_ports RPAREN
Rule 303   instance -> ID instance_bodylist_noname SEMICOLON
Rule 304   instance -> SENS_OR instance_bodylist_noname SEMICOLON
Rule 305   instance_bodylist_noname -> instance_bodylist_noname COMMA instance_body_noname
Rule 306   instance_bodylist_noname -> instance_body_noname
Rule 307   instance_body_noname -> LPAREN instance_ports RPAREN
Rule 308   parameterlist -> DELAY LPAREN param_args RPAREN
Rule 309   parameterlist -> DELAY LPAREN param_args_noname RPAREN
Rule 310   parameterlist -> empty
Rule 311   param_args_noname -> param_args_noname COMMA param_arg_noname
Rule 312   param_args_noname -> param_arg_noname
Rule 313   param_args -> param_args COMMA param_arg
Rule 314   param_args -> param_arg
Rule 315   param_args -> empty
Rule 316   param_arg_noname -> expression
Rule 317   param_arg -> DOT ID LPAREN expression RPAREN
Rule 318   instance_ports -> instance_ports_list
Rule 319   instance_ports -> instance_ports_arg
Rule 320   instance_ports_list -> instance_ports_list COMMA instance_port_list
Rule 321   instance_ports_list -> instance_port_list
Rule 322   instance_ports_list -> empty
Rule 323   instance_port_list -> expression
Rule 324   instance_ports_arg -> instance_ports_arg COMMA instance_port_arg
Rule 325   instance_ports_arg -> instance_port_arg
Rule 326   instance_port_arg -> DOT ID LPAREN identifier RPAREN
Rule 327   instance_port_arg -> DOT ID LPAREN expression RPAREN
Rule 328   instance_port_arg -> DOT ID LPAREN RPAREN
Rule 329   genvardecl -> GENVAR genvarlist SEMICOLON
Rule 330   genvarlist -> genvarlist COMMA genvar
Rule 331   genvarlist -> genvar
Rule 332   genvar -> ID
Rule 333   generate -> GENERATE generate_items ENDGENERATE
Rule 334   generate_items -> empty
Rule 335   generate_items -> generate_items generate_item
Rule 336   generate_items -> generate_item
Rule 337   generate_item -> standard_item
Rule 338   generate_item -> generate_if
Rule 339   generate_item -> generate_for
Rule 340   generate_block -> BEGIN generate_items END
Rule 341   generate_block -> BEGIN COLON ID generate_items END
Rule 342   generate_if -> IF LPAREN cond RPAREN gif_true_item ELSE gif_false_item
Rule 343   generate_if -> IF LPAREN cond RPAREN gif_true_item
Rule 344   gif_true_item -> generate_item
Rule 345   gif_true_item -> generate_block
Rule 346   gif_false_item -> generate_item
Rule 347   gif_false_item -> generate_block
Rule 348   generate_for -> FOR LPAREN forpre forcond forpost RPAREN generate_forcontent
Rule 349   generate_forcontent -> generate_item
Rule 350   generate_forcontent -> generate_block
Rule 351   systemcall -> DOLLER ID
Rule 352   systemcall -> DOLLER ID LPAREN sysargs RPAREN
Rule 353   systemcall -> DOLLER SIGNED LPAREN sysargs RPAREN
Rule 354   sysargs -> sysargs COMMA sysarg
Rule 355   sysargs -> sysarg
Rule 356   sysargs -> empty
Rule 357   sysarg -> expression
Rule 358   function -> FUNCTION width ID SEMICOLON function_statement ENDFUNCTION
Rule 359   function -> FUNCTION ID SEMICOLON function_statement ENDFUNCTION
Rule 360   function_statement -> funcvardecls function_calc
Rule 361   funcvardecls -> funcvardecls funcvardecl
Rule 362   funcvardecls -> funcvardecl
Rule 363   funcvardecl -> decl
Rule 364   funcvardecl -> integerdecl
Rule 365   function_calc -> blocking_substitution
Rule 366   function_calc -> if_statement
Rule 367   function_calc -> for_statement
Rule 368   function_calc -> while_statement
Rule 369   function_calc -> case_statement
Rule 370   function_calc -> casex_statement
Rule 371   function_calc -> block
Rule 372   function_calc -> namedblock
Rule 373   functioncall -> identifier LPAREN func_args RPAREN
Rule 374   func_args -> func_args COMMA expression
Rule 375   func_args -> expression
Rule 376   func_args -> empty
Rule 377   task -> TASK ID SEMICOLON task_statement ENDTASK
Rule 378   task_statement -> taskvardecls task_calc
Rule 379   taskvardecls -> taskvardecls taskvardecl
Rule 380   taskvardecls -> taskvardecl
Rule 381   taskvardecls -> empty
Rule 382   taskvardecl -> decl
Rule 383   taskvardecl -> integerdecl
Rule 384   task_calc -> blocking_substitution
Rule 385   task_calc -> if_statement
Rule 386   task_calc -> for_statement
Rule 387   task_calc -> while_statement
Rule 388   task_calc -> case_statement
Rule 389   task_calc -> casex_statement
Rule 390   task_calc -> block
Rule 391   task_calc -> namedblock
Rule 392   identifier -> ID
Rule 393   identifier -> scope ID
Rule 394   scope -> identifier DOT
Rule 395   scope -> pointer DOT
Rule 396   disable -> DISABLE ID
Rule 397   single_statement -> DELAY expression SEMICOLON
Rule 398   single_statement -> systemcall SEMICOLON
Rule 399   single_statement -> disable SEMICOLON
Rule 400   empty -> <empty>

Terminals, with rules where they appear

ALWAYS               : 199
ALWAYS_COMB          : 201
ALWAYS_FF            : 200
AND                  : 134 158
ASSIGN               : 109 110
AT                   : 202 210 211 219 220
BEGIN                : 245 246 250 251 340 341
CASE                 : 280 282
CASEX                : 281
COLON                : 54 55 111 114 164 178 181 250 251 286 289 341
COMMA                : 18 19 20 21 22 32 47 79 89 93 106 119 175 217 287 299 305 311 313 320 324 330 354 374
COND                 : 164
DEFAULT              : 289
DELAY                : 12 240 241 242 243 308 309 397
DISABLE              : 396
DIVIDE               : 142
DOLLER               : 351 352 353
DOT                  : 317 326 327 328 394 395
ELSE                 : 262 264 342
END                  : 245 246 250 251 340 341
ENDCASE              : 280 281 282
ENDFUNCTION          : 358 359
ENDGENERATE          : 333
ENDMODULE            : 9
ENDTASK              : 377
EQ                   : 154
EQL                  : 156
EQUALS               : 7 85 86 108 109 110 237 238
FLOATNUMBER          : 189
FOR                  : 270 348
FOREVER              : 296
FORK                 : 260 261
FUNCTION             : 358 359
GE                   : 153
GENERATE             : 333
GENVAR               : 329
GT                   : 151
ID                   : 7 8 10 34 81 82 85 86 91 95 108 250 251 297 301 302 303 317 326 327 328 332 341 351 352 358 359 377 392 393 396
IF                   : 262 263 264 265 342 343
INITIAL              : 290
INOUT                : 39
INPUT                : 37
INTEGER              : 22 27 87 88 100 105
INTNUMBER_BIN        : 192
INTNUMBER_DEC        : 190
INTNUMBER_HEX        : 196
INTNUMBER_OCT        : 194
JOIN                 : 260 261
LAND                 : 162
LBRACE               : 118 174 177
LBRACKET             : 54 55 111 112 113 114 115 116 178 179 180 181 182 183 184 185
LE                   : 152 239
LNOT                 : 132
LOCALPARAM           : 101 102 103 104 105
LOGIC                : 42
LOR                  : 163
LPAREN               : 7 8 12 28 29 30 165 202 211 220 240 262 263 264 265 270 278 280 281 282 293 301 302 307 308 309 317 326 327 328 342 343 348 352 353 373
LSHIFT               : 146
LSHIFTA              : 148
LT                   : 150
MINUS                : 130 145
MINUSCOLON           : 113 116 180 183
MOD                  : 143
MODULE               : 9
NAND                 : 135
NE                   : 155
NEGEDGE              : 204
NEL                  : 157
NOR                  : 136
NOT                  : 133
OR                   : 137 161
OUTPUT               : 38
PARAMETER            : 18 19 20 21 22 23 24 25 26 27 96 97 98 99 100
PLUS                 : 131 144
PLUSCOLON            : 112 115 179 182
POSEDGE              : 203
POWER                : 140
RBRACE               : 118 174 177
RBRACKET             : 54 55 111 112 113 114 115 116 178 179 180 181 182 183 184 185
REAL                 : 92
REG                  : 41
RPAREN               : 7 8 12 28 29 30 165 202 211 220 240 262 263 264 265 270 278 280 281 282 293 301 302 307 308 309 317 326 327 328 342 343 348 352 353 373
RSHIFT               : 147
RSHIFTA              : 149
SEMICOLON            : 28 29 30 31 77 78 83 84 87 88 92 96 97 98 99 100 101 102 103 104 105 109 110 237 239 272 273 274 292 295 297 298 303 304 329 358 359 377 397 398 399
SENS_OR              : 11 207 216 298 304
SIGNED               : 19 21 24 26 44 88 97 99 102 104 353
SIGNED_INTNUMBER_BIN : 193
SIGNED_INTNUMBER_DEC : 191
SIGNED_INTNUMBER_HEX : 197
SIGNED_INTNUMBER_OCT : 195
STRING_LITERAL       : 198
SUPPLY0              : 45
SUPPLY1              : 46
TASK                 : 377
TIMES                : 7 7 8 8 141 219 220
TRI                  : 40
UNIQUE               : 282
WAIT                 : 293
WHILE                : 278
WIRE                 : 43
XNOR                 : 139 160
XOR                  : 138 159
error                : 

Nonterminals, with rules where they appear

always               : 69
always_comb          : 71
always_ff            : 70
always_statement     : 199 200 201
assignment           : 68
basic_statement      : 236 249 254 267 277 279 286 289 291 294 296
block                : 230 371 390
block_statement      : 247 248
block_statements     : 245 247 260
blocking_substitution : 233 271 365 384
blocking_substitution_base : 275
case_comp            : 280 281 282
case_statement       : 222 369 388
casecontent_condition : 286 287
casecontent_statement : 284 285
casecontent_statements : 280 281 282 284
casex_statement      : 223 370 389
concat               : 166 177
concatlist           : 174 175
cond                 : 262 263 264 265 273 278 293 342 343
const_expression     : 173
decl                 : 61 255 363 382
declassign           : 64
declassign_element   : 83 84
declname             : 79 80
declnamelist         : 77 78 79
definition           : 3 4
definitions          : 2 3
delays               : 86 86 110 110 237 237 238 238 239 239 264 265
description          : 1
disable              : 399
edgesig              : 207 208
edgesig_base         : 203 204
edgesigs             : 202 207
else_statement       : 262 264
empty                : 13 58 209 244 276 310 315 322 334 356 376 381
event_statement      : 227
expression           : 7 54 54 55 55 111 111 112 112 113 113 114 114 115 115 116 116 129 130 131 132 133 134 135 136 137 138 139 140 140 141 141 142 142 143 143 144 144 145 145 146 146 147 147 148 148 149 149 150 150 151 151 152 152 153 153 154 154 155 155 156 156 157 157 158 158 159 159 160 160 161 161 162 162 163 163 164 164 164 165 175 176 177 178 178 179 179 180 180 181 181 182 182 183 183 184 185 240 266 283 287 288 316 317 323 327 357 374 375 397
floatnumber          : 187 243
for_statement        : 225 367 386
forcond              : 270 348
forcontent_statement : 270
forever_statement    : 229
forpost              : 270 348
forpre               : 270 348
func_args            : 373 374
function             : 74
function_calc        : 360
function_statement   : 358 359
functioncall         : 170
funcvardecl          : 361 362
funcvardecls         : 360 361
generate             : 60
generate_block       : 345 347 350
generate_for         : 339
generate_forcontent  : 348
generate_if          : 338
generate_item        : 335 336 344 346 349
generate_items       : 333 335 340 341
genvar               : 330 331
genvardecl           : 67
genvarlist           : 329 330
gif_false_item       : 342
gif_true_item        : 342 343
identifier           : 114 115 116 121 128 172 178 179 180 184 205 213 241 326 373 394
if_statement         : 221 366 385
ifcontent_statement  : 268 269
initial              : 72
initial_statement    : 290
instance             : 73
instance_body        : 299 300
instance_body_noname : 305 306
instance_bodylist    : 297 298 299
instance_bodylist_noname : 303 304 305
instance_port_arg    : 324 325
instance_port_list   : 320 321
instance_ports       : 301 302 307
instance_ports_arg   : 319 324
instance_ports_list  : 318 320
integerdecl          : 62 256 364 383
integername          : 89 90
integernamelist      : 87 88 89
intnumber            : 186 242
ioport               : 47
ioport_head          : 48
ioports              : 29 47
item                 : 56 57
items                : 9 56
lconcat              : 124 127
lconcat_one          : 119 120
lconcatlist          : 118 119
length               : 82
levelsig             : 210 216 217 218
levelsig_base        : 212
levelsigs            : 211 216 217
localparamdecl       : 66 259
lpartselect          : 122 125
lpointer             : 123 126
lvalue               : 109 110 237 238 239
moduledef            : 5
modulename           : 9
namedblock           : 231 372 391
namedblock_statement : 252 253
namedblock_statements : 250 252
nonblocking_substitution : 234
parallelblock        : 232
param                : 15 16
param_arg            : 313 314
param_arg_noname     : 311 312
param_args           : 308 313
param_args_noname    : 309 311
param_end            : 14 17
param_substitution   : 106 107
param_substitution_list : 18 19 20 21 22 23 24 25 26 27 96 97 98 99 100 101 102 103 104 105 106
parameterdecl        : 65 258
parameterlist        : 297 298
paramlist            : 9
params               : 12
params_begin         : 14 15
partselect           : 168 215
pointer              : 111 112 113 117 169 181 182 183 185 206 214 395
portlist             : 9
portname             : 32 33 49 50 51 52 53
ports                : 28 32
pragma               : 6 76
realdecl             : 63 257
realname             : 93 94
realnamelist         : 92 93
repeat               : 167
rvalue               : 85 86 108 109 110 237 238 239
scope                : 393
senslist             : 199 200 201 292
sigtype              : 35 36
sigtypes             : 35 49 50 51 52 77 78 83 84
single_statement     : 235
source_text          : 0
standard_item        : 59 337
stringliteral        : 188
sysarg               : 354 355
sysargs              : 352 353 354
systemcall           : 171 398
task                 : 75
task_calc            : 378
task_statement       : 377
taskvardecl          : 379 380
taskvardecls         : 378 379
true_statement       : 262 263 264 265
unique_case_statement : 224
wait_statement       : 228
waitcontent_statement : 293
while_statement      : 226 368 387
whilecontent_statement : 278
width                : 20 21 25 26 50 52 78 84 98 99 103 104 302 358

Parsing method: LALR

state 0

    (0) S' -> . source_text
    (1) source_text -> . description
    (2) description -> . definitions
    (3) definitions -> . definitions definition
    (4) definitions -> . definition
    (5) definition -> . moduledef
    (6) definition -> . pragma
    (9) moduledef -> . MODULE modulename paramlist portlist items ENDMODULE
    (7) pragma -> . LPAREN TIMES ID EQUALS expression TIMES RPAREN
    (8) pragma -> . LPAREN TIMES ID TIMES RPAREN

    MODULE          shift and go to state 7
    LPAREN          shift and go to state 8

    source_text                    shift and go to state 1
    description                    shift and go to state 2
    definitions                    shift and go to state 3
    definition                     shift and go to state 4
    moduledef                      shift and go to state 5
    pragma                         shift and go to state 6

state 1

    (0) S' -> source_text .



state 2

    (1) source_text -> description .

    $end            reduce using rule 1 (source_text -> description .)


state 3

    (2) description -> definitions .
    (3) definitions -> definitions . definition
    (5) definition -> . moduledef
    (6) definition -> . pragma
    (9) moduledef -> . MODULE modulename paramlist portlist items ENDMODULE
    (7) pragma -> . LPAREN TIMES ID EQUALS expression TIMES RPAREN
    (8) pragma -> . LPAREN TIMES ID TIMES RPAREN

    $end            reduce using rule 2 (description -> definitions .)
    MODULE          shift and go to state 7
    LPAREN          shift and go to state 8

    definition                     shift and go to state 9
    moduledef                      shift and go to state 5
    pragma                         shift and go to state 6

state 4

    (4) definitions -> definition .

    MODULE          reduce using rule 4 (definitions -> definition .)
    LPAREN          reduce using rule 4 (definitions -> definition .)
    $end            reduce using rule 4 (definitions -> definition .)


state 5

    (5) definition -> moduledef .

    MODULE          reduce using rule 5 (definition -> moduledef .)
    LPAREN          reduce using rule 5 (definition -> moduledef .)
    $end            reduce using rule 5 (definition -> moduledef .)


state 6

    (6) definition -> pragma .

    MODULE          reduce using rule 6 (definition -> pragma .)
    LPAREN          reduce using rule 6 (definition -> pragma .)
    $end            reduce using rule 6 (definition -> pragma .)


state 7

    (9) moduledef -> MODULE . modulename paramlist portlist items ENDMODULE
    (10) modulename -> . ID
    (11) modulename -> . SENS_OR

    ID              shift and go to state 11
    SENS_OR         shift and go to state 12

    modulename                     shift and go to state 10

state 8

    (7) pragma -> LPAREN . TIMES ID EQUALS expression TIMES RPAREN
    (8) pragma -> LPAREN . TIMES ID TIMES RPAREN

    TIMES           shift and go to state 13


state 9

    (3) definitions -> definitions definition .

    MODULE          reduce using rule 3 (definitions -> definitions definition .)
    LPAREN          reduce using rule 3 (definitions -> definitions definition .)
    $end            reduce using rule 3 (definitions -> definitions definition .)


state 10

    (9) moduledef -> MODULE modulename . paramlist portlist items ENDMODULE
    (12) paramlist -> . DELAY LPAREN params RPAREN
    (13) paramlist -> . empty
    (400) empty -> .

    DELAY           shift and go to state 15
    LPAREN          reduce using rule 400 (empty -> .)
    SEMICOLON       reduce using rule 400 (empty -> .)

    paramlist                      shift and go to state 14
    empty                          shift and go to state 16

state 11

    (10) modulename -> ID .

    DELAY           reduce using rule 10 (modulename -> ID .)
    LPAREN          reduce using rule 10 (modulename -> ID .)
    SEMICOLON       reduce using rule 10 (modulename -> ID .)


state 12

    (11) modulename -> SENS_OR .

    DELAY           reduce using rule 11 (modulename -> SENS_OR .)
    LPAREN          reduce using rule 11 (modulename -> SENS_OR .)
    SEMICOLON       reduce using rule 11 (modulename -> SENS_OR .)


state 13

    (7) pragma -> LPAREN TIMES . ID EQUALS expression TIMES RPAREN
    (8) pragma -> LPAREN TIMES . ID TIMES RPAREN

    ID              shift and go to state 17


state 14

    (9) moduledef -> MODULE modulename paramlist . portlist items ENDMODULE
    (28) portlist -> . LPAREN ports RPAREN SEMICOLON
    (29) portlist -> . LPAREN ioports RPAREN SEMICOLON
    (30) portlist -> . LPAREN RPAREN SEMICOLON
    (31) portlist -> . SEMICOLON

    LPAREN          shift and go to state 19
    SEMICOLON       shift and go to state 20

    portlist                       shift and go to state 18

state 15

    (12) paramlist -> DELAY . LPAREN params RPAREN

    LPAREN          shift and go to state 21


state 16

    (13) paramlist -> empty .

    LPAREN          reduce using rule 13 (paramlist -> empty .)
    SEMICOLON       reduce using rule 13 (paramlist -> empty .)


state 17

    (7) pragma -> LPAREN TIMES ID . EQUALS expression TIMES RPAREN
    (8) pragma -> LPAREN TIMES ID . TIMES RPAREN

    EQUALS          shift and go to state 23
    TIMES           shift and go to state 22


state 18

    (9) moduledef -> MODULE modulename paramlist portlist . items ENDMODULE
    (56) items -> . items item
    (57) items -> . item
    (58) items -> . empty
    (59) item -> . standard_item
    (60) item -> . generate
    (400) empty -> .
    (61) standard_item -> . decl
    (62) standard_item -> . integerdecl
    (63) standard_item -> . realdecl
    (64) standard_item -> . declassign
    (65) standard_item -> . parameterdecl
    (66) standard_item -> . localparamdecl
    (67) standard_item -> . genvardecl
    (68) standard_item -> . assignment
    (69) standard_item -> . always
    (70) standard_item -> . always_ff
    (71) standard_item -> . always_comb
    (72) standard_item -> . initial
    (73) standard_item -> . instance
    (74) standard_item -> . function
    (75) standard_item -> . task
    (76) standard_item -> . pragma
    (333) generate -> . GENERATE generate_items ENDGENERATE
    (77) decl -> . sigtypes declnamelist SEMICOLON
    (78) decl -> . sigtypes width declnamelist SEMICOLON
    (87) integerdecl -> . INTEGER integernamelist SEMICOLON
    (88) integerdecl -> . INTEGER SIGNED integernamelist SEMICOLON
    (92) realdecl -> . REAL realnamelist SEMICOLON
    (83) declassign -> . sigtypes declassign_element SEMICOLON
    (84) declassign -> . sigtypes width declassign_element SEMICOLON
    (96) parameterdecl -> . PARAMETER param_substitution_list SEMICOLON
    (97) parameterdecl -> . PARAMETER SIGNED param_substitution_list SEMICOLON
    (98) parameterdecl -> . PARAMETER width param_substitution_list SEMICOLON
    (99) parameterdecl -> . PARAMETER SIGNED width param_substitution_list SEMICOLON
    (100) parameterdecl -> . PARAMETER INTEGER param_substitution_list SEMICOLON
    (101) localparamdecl -> . LOCALPARAM param_substitution_list SEMICOLON
    (102) localparamdecl -> . LOCALPARAM SIGNED param_substitution_list SEMICOLON
    (103) localparamdecl -> . LOCALPARAM width param_substitution_list SEMICOLON
    (104) localparamdecl -> . LOCALPARAM SIGNED width param_substitution_list SEMICOLON
    (105) localparamdecl -> . LOCALPARAM INTEGER param_substitution_list SEMICOLON
    (329) genvardecl -> . GENVAR genvarlist SEMICOLON
    (109) assignment -> . ASSIGN lvalue EQUALS rvalue SEMICOLON
    (110) assignment -> . ASSIGN delays lvalue EQUALS delays rvalue SEMICOLON
    (199) always -> . ALWAYS senslist always_statement
    (200) always_ff -> . ALWAYS_FF senslist always_statement
    (201) always_comb -> . ALWAYS_COMB senslist always_statement
    (290) initial -> . INITIAL initial_statement
    (297) instance -> . ID parameterlist instance_bodylist SEMICOLON
    (298) instance -> . SENS_OR parameterlist instance_bodylist SEMICOLON
    (303) instance -> . ID instance_bodylist_noname SEMICOLON
    (304) instance -> . SENS_OR instance_bodylist_noname SEMICOLON
    (358) function -> . FUNCTION width ID SEMICOLON function_statement ENDFUNCTION
    (359) function -> . FUNCTION ID SEMICOLON function_statement ENDFUNCTION
    (377) task -> . TASK ID SEMICOLON task_statement ENDTASK
    (7) pragma -> . LPAREN TIMES ID EQUALS expression TIMES RPAREN
    (8) pragma -> . LPAREN TIMES ID TIMES RPAREN
    (35) sigtypes -> . sigtypes sigtype
    (36) sigtypes -> . sigtype
    (37) sigtype -> . INPUT
    (38) sigtype -> . OUTPUT
    (39) sigtype -> . INOUT
    (40) sigtype -> . TRI
    (41) sigtype -> . REG
    (42) sigtype -> . LOGIC
    (43) sigtype -> . WIRE
    (44) sigtype -> . SIGNED
    (45) sigtype -> . SUPPLY0
    (46) sigtype -> . SUPPLY1

  ! shift/reduce conflict for GENERATE resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for REAL resolved as shift
  ! shift/reduce conflict for PARAMETER resolved as shift
  ! shift/reduce conflict for LOCALPARAM resolved as shift
  ! shift/reduce conflict for GENVAR resolved as shift
  ! shift/reduce conflict for ASSIGN resolved as shift
  ! shift/reduce conflict for ALWAYS resolved as shift
  ! shift/reduce conflict for ALWAYS_FF resolved as shift
  ! shift/reduce conflict for ALWAYS_COMB resolved as shift
  ! shift/reduce conflict for INITIAL resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for SENS_OR resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for TASK resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for INPUT resolved as shift
  ! shift/reduce conflict for OUTPUT resolved as shift
  ! shift/reduce conflict for INOUT resolved as shift
  ! shift/reduce conflict for TRI resolved as shift
  ! shift/reduce conflict for REG resolved as shift
  ! shift/reduce conflict for LOGIC resolved as shift
  ! shift/reduce conflict for WIRE resolved as shift
  ! shift/reduce conflict for SIGNED resolved as shift
  ! shift/reduce conflict for SUPPLY0 resolved as shift
  ! shift/reduce conflict for SUPPLY1 resolved as shift
    ENDMODULE       reduce using rule 400 (empty -> .)
    GENERATE        shift and go to state 45
    INTEGER         shift and go to state 47
    REAL            shift and go to state 49
    PARAMETER       shift and go to state 50
    LOCALPARAM      shift and go to state 51
    GENVAR          shift and go to state 52
    ASSIGN          shift and go to state 53
    ALWAYS          shift and go to state 54
    ALWAYS_FF       shift and go to state 55
    ALWAYS_COMB     shift and go to state 56
    INITIAL         shift and go to state 57
    ID              shift and go to state 58
    SENS_OR         shift and go to state 59
    FUNCTION        shift and go to state 60
    TASK            shift and go to state 61
    LPAREN          shift and go to state 8
    INPUT           shift and go to state 63
    OUTPUT          shift and go to state 64
    INOUT           shift and go to state 65
    TRI             shift and go to state 66
    REG             shift and go to state 67
    LOGIC           shift and go to state 68
    WIRE            shift and go to state 69
    SIGNED          shift and go to state 48
    SUPPLY0         shift and go to state 70
    SUPPLY1         shift and go to state 71

  ! GENERATE        [ reduce using rule 400 (empty -> .) ]
  ! INTEGER         [ reduce using rule 400 (empty -> .) ]
  ! REAL            [ reduce using rule 400 (empty -> .) ]
  ! PARAMETER       [ reduce using rule 400 (empty -> .) ]
  ! LOCALPARAM      [ reduce using rule 400 (empty -> .) ]
  ! GENVAR          [ reduce using rule 400 (empty -> .) ]
  ! ASSIGN          [ reduce using rule 400 (empty -> .) ]
  ! ALWAYS          [ reduce using rule 400 (empty -> .) ]
  ! ALWAYS_FF       [ reduce using rule 400 (empty -> .) ]
  ! ALWAYS_COMB     [ reduce using rule 400 (empty -> .) ]
  ! INITIAL         [ reduce using rule 400 (empty -> .) ]
  ! ID              [ reduce using rule 400 (empty -> .) ]
  ! SENS_OR         [ reduce using rule 400 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 400 (empty -> .) ]
  ! TASK            [ reduce using rule 400 (empty -> .) ]
  ! LPAREN          [ reduce using rule 400 (empty -> .) ]
  ! INPUT           [ reduce using rule 400 (empty -> .) ]
  ! OUTPUT          [ reduce using rule 400 (empty -> .) ]
  ! INOUT           [ reduce using rule 400 (empty -> .) ]
  ! TRI             [ reduce using rule 400 (empty -> .) ]
  ! REG             [ reduce using rule 400 (empty -> .) ]
  ! LOGIC           [ reduce using rule 400 (empty -> .) ]
  ! WIRE            [ reduce using rule 400 (empty -> .) ]
  ! SIGNED          [ reduce using rule 400 (empty -> .) ]
  ! SUPPLY0         [ reduce using rule 400 (empty -> .) ]
  ! SUPPLY1         [ reduce using rule 400 (empty -> .) ]

    items                          shift and go to state 24
    item                           shift and go to state 25
    empty                          shift and go to state 26
    standard_item                  shift and go to state 27
    generate                       shift and go to state 28
    decl                           shift and go to state 29
    integerdecl                    shift and go to state 30
    realdecl                       shift and go to state 31
    declassign                     shift and go to state 32
    parameterdecl                  shift and go to state 33
    localparamdecl                 shift and go to state 34
    genvardecl                     shift and go to state 35
    assignment                     shift and go to state 36
    always                         shift and go to state 37
    always_ff                      shift and go to state 38
    always_comb                    shift and go to state 39
    initial                        shift and go to state 40
    instance                       shift and go to state 41
    function                       shift and go to state 42
    task                           shift and go to state 43
    pragma                         shift and go to state 44
    sigtypes                       shift and go to state 46
    sigtype                        shift and go to state 62

state 19

    (28) portlist -> LPAREN . ports RPAREN SEMICOLON
    (29) portlist -> LPAREN . ioports RPAREN SEMICOLON
    (30) portlist -> LPAREN . RPAREN SEMICOLON
    (32) ports -> . ports COMMA portname
    (33) ports -> . portname
    (47) ioports -> . ioports COMMA ioport
    (48) ioports -> . ioport_head
    (34) portname -> . ID
    (51) ioport_head -> . sigtypes portname
    (52) ioport_head -> . sigtypes width portname
    (35) sigtypes -> . sigtypes sigtype
    (36) sigtypes -> . sigtype
    (37) sigtype -> . INPUT
    (38) sigtype -> . OUTPUT
    (39) sigtype -> . INOUT
    (40) sigtype -> . TRI
    (41) sigtype -> . REG
    (42) sigtype -> . LOGIC
    (43) sigtype -> . WIRE
    (44) sigtype -> . SIGNED
    (45) sigtype -> . SUPPLY0
    (46) sigtype -> . SUPPLY1

    RPAREN          shift and go to state 73
    ID              shift and go to state 77
    INPUT           shift and go to state 63
    OUTPUT          shift and go to state 64
    INOUT           shift and go to state 65
    TRI             shift and go to state 66
    REG             shift and go to state 67
    LOGIC           shift and go to state 68
    WIRE            shift and go to state 69
    SIGNED          shift and go to state 48
    SUPPLY0         shift and go to state 70
    SUPPLY1         shift and go to state 71

    ports                          shift and go to state 72
    ioports                        shift and go to state 74
    portname                       shift and go to state 75
    ioport_head                    shift and go to state 76
    sigtypes                       shift and go to state 78
    sigtype                        shift and go to state 62

state 20

    (31) portlist -> SEMICOLON .

    GENERATE        reduce using rule 31 (portlist -> SEMICOLON .)
    INTEGER         reduce using rule 31 (portlist -> SEMICOLON .)
    REAL            reduce using rule 31 (portlist -> SEMICOLON .)
    PARAMETER       reduce using rule 31 (portlist -> SEMICOLON .)
    LOCALPARAM      reduce using rule 31 (portlist -> SEMICOLON .)
    GENVAR          reduce using rule 31 (portlist -> SEMICOLON .)
    ASSIGN          reduce using rule 31 (portlist -> SEMICOLON .)
    ALWAYS          reduce using rule 31 (portlist -> SEMICOLON .)
    ALWAYS_FF       reduce using rule 31 (portlist -> SEMICOLON .)
    ALWAYS_COMB     reduce using rule 31 (portlist -> SEMICOLON .)
    INITIAL         reduce using rule 31 (portlist -> SEMICOLON .)
    ID              reduce using rule 31 (portlist -> SEMICOLON .)
    SENS_OR         reduce using rule 31 (portlist -> SEMICOLON .)
    FUNCTION        reduce using rule 31 (portlist -> SEMICOLON .)
    TASK            reduce using rule 31 (portlist -> SEMICOLON .)
    LPAREN          reduce using rule 31 (portlist -> SEMICOLON .)
    INPUT           reduce using rule 31 (portlist -> SEMICOLON .)
    OUTPUT          reduce using rule 31 (portlist -> SEMICOLON .)
    INOUT           reduce using rule 31 (portlist -> SEMICOLON .)
    TRI             reduce using rule 31 (portlist -> SEMICOLON .)
    REG             reduce using rule 31 (portlist -> SEMICOLON .)
    LOGIC           reduce using rule 31 (portlist -> SEMICOLON .)
    WIRE            reduce using rule 31 (portlist -> SEMICOLON .)
    SIGNED          reduce using rule 31 (portlist -> SEMICOLON .)
    SUPPLY0         reduce using rule 31 (portlist -> SEMICOLON .)
    SUPPLY1         reduce using rule 31 (portlist -> SEMICOLON .)
    ENDMODULE       reduce using rule 31 (portlist -> SEMICOLON .)


state 21

    (12) paramlist -> DELAY LPAREN . params RPAREN
    (14) params -> . params_begin param_end
    (17) params -> . param_end
    (15) params_begin -> . params_begin param
    (16) params_begin -> . param
    (23) param_end -> . PARAMETER param_substitution_list
    (24) param_end -> . PARAMETER SIGNED param_substitution_list
    (25) param_end -> . PARAMETER width param_substitution_list
    (26) param_end -> . PARAMETER SIGNED width param_substitution_list
    (27) param_end -> . PARAMETER INTEGER param_substitution_list
    (18) param -> . PARAMETER param_substitution_list COMMA
    (19) param -> . PARAMETER SIGNED param_substitution_list COMMA
    (20) param -> . PARAMETER width param_substitution_list COMMA
    (21) param -> . PARAMETER SIGNED width param_substitution_list COMMA
    (22) param -> . PARAMETER INTEGER param_substitution_list COMMA

    PARAMETER       shift and go to state 83

    params                         shift and go to state 79
    params_begin                   shift and go to state 80
    param_end                      shift and go to state 81
    param                          shift and go to state 82

state 22

    (8) pragma -> LPAREN TIMES ID TIMES . RPAREN

    RPAREN          shift and go to state 84


state 23

    (7) pragma -> LPAREN TIMES ID EQUALS . expression TIMES RPAREN
    (130) expression -> . MINUS expression
    (131) expression -> . PLUS expression
    (132) expression -> . LNOT expression
    (133) expression -> . NOT expression
    (134) expression -> . AND expression
    (135) expression -> . NAND expression
    (136) expression -> . NOR expression
    (137) expression -> . OR expression
    (138) expression -> . XOR expression
    (139) expression -> . XNOR expression
    (140) expression -> . expression POWER expression
    (141) expression -> . expression TIMES expression
    (142) expression -> . expression DIVIDE expression
    (143) expression -> . expression MOD expression
    (144) expression -> . expression PLUS expression
    (145) expression -> . expression MINUS expression
    (146) expression -> . expression LSHIFT expression
    (147) expression -> . expression RSHIFT expression
    (148) expression -> . expression LSHIFTA expression
    (149) expression -> . expression RSHIFTA expression
    (150) expression -> . expression LT expression
    (151) expression -> . expression GT expression
    (152) expression -> . expression LE expression
    (153) expression -> . expression GE expression
    (154) expression -> . expression EQ expression
    (155) expression -> . expression NE expression
    (156) expression -> . expression EQL expression
    (157) expression -> . expression NEL expression
    (158) expression -> . expression AND expression
    (159) expression -> . expression XOR expression
    (160) expression -> . expression XNOR expression
    (161) expression -> . expression OR expression
    (162) expression -> . expression LAND expression
    (163) expression -> . expression LOR expression
    (164) expression -> . expression COND expression COLON expression
    (165) expression -> . LPAREN expression RPAREN
    (166) expression -> . concat
    (167) expression -> . repeat
    (168) expression -> . partselect
    (169) expression -> . pointer
    (170) expression -> . functioncall
    (171) expression -> . systemcall
    (172) expression -> . identifier
    (173) expression -> . const_expression
    (174) concat -> . LBRACE concatlist RBRACE
    (177) repeat -> . LBRACE expression concat RBRACE
    (178) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (179) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (180) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (181) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (182) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (183) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (184) pointer -> . identifier LBRACKET expression RBRACKET
    (185) pointer -> . pointer LBRACKET expression RBRACKET
    (373) functioncall -> . identifier LPAREN func_args RPAREN
    (351) systemcall -> . DOLLER ID
    (352) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (353) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (392) identifier -> . ID
    (393) identifier -> . scope ID
    (186) const_expression -> . intnumber
    (187) const_expression -> . floatnumber
    (188) const_expression -> . stringliteral
    (394) scope -> . identifier DOT
    (395) scope -> . pointer DOT
    (190) intnumber -> . INTNUMBER_DEC
    (191) intnumber -> . SIGNED_INTNUMBER_DEC
    (192) intnumber -> . INTNUMBER_BIN
    (193) intnumber -> . SIGNED_INTNUMBER_BIN
    (194) intnumber -> . INTNUMBER_OCT
    (195) intnumber -> . SIGNED_INTNUMBER_OCT
    (196) intnumber -> . INTNUMBER_HEX
    (197) intnumber -> . SIGNED_INTNUMBER_HEX
    (189) floatnumber -> . FLOATNUMBER
    (198) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 88
    PLUS            shift and go to state 89
    LNOT            shift and go to state 90
    NOT             shift and go to state 91
    AND             shift and go to state 92
    NAND            shift and go to state 93
    NOR             shift and go to state 94
    OR              shift and go to state 95
    XOR             shift and go to state 96
    XNOR            shift and go to state 97
    LPAREN          shift and go to state 85
    LBRACE          shift and go to state 106
    DOLLER          shift and go to state 107
    ID              shift and go to state 86
    INTNUMBER_DEC   shift and go to state 112
    SIGNED_INTNUMBER_DEC shift and go to state 113
    INTNUMBER_BIN   shift and go to state 114
    SIGNED_INTNUMBER_BIN shift and go to state 115
    INTNUMBER_OCT   shift and go to state 116
    SIGNED_INTNUMBER_OCT shift and go to state 117
    INTNUMBER_HEX   shift and go to state 118
    SIGNED_INTNUMBER_HEX shift and go to state 119
    FLOATNUMBER     shift and go to state 120
    STRING_LITERAL  shift and go to state 121

    expression                     shift and go to state 87
    concat                         shift and go to state 98
    repeat                         shift and go to state 99
    partselect                     shift and go to state 100
    pointer                        shift and go to state 101
    functioncall                   shift and go to state 102
    systemcall                     shift and go to state 103
    identifier                     shift and go to state 104
    const_expression               shift and go to state 105
    scope                          shift and go to state 108
    intnumber                      shift and go to state 109
    floatnumber                    shift and go to state 110
    stringliteral                  shift and go to state 111

state 24

    (9) moduledef -> MODULE modulename paramlist portlist items . ENDMODULE
    (56) items -> items . item
    (59) item -> . standard_item
    (60) item -> . generate
    (61) standard_item -> . decl
    (62) standard_item -> . integerdecl
    (63) standard_item -> . realdecl
    (64) standard_item -> . declassign
    (65) standard_item -> . parameterdecl
    (66) standard_item -> . localparamdecl
    (67) standard_item -> . genvardecl
    (68) standard_item -> . assignment
    (69) standard_item -> . always
    (70) standard_item -> . always_ff
    (71) standard_item -> . always_comb
    (72) standard_item -> . initial
    (73) standard_item -> . instance
    (74) standard_item -> . function
    (75) standard_item -> . task
    (76) standard_item -> . pragma
    (333) generate -> . GENERATE generate_items ENDGENERATE
    (77) decl -> . sigtypes declnamelist SEMICOLON
    (78) decl -> . sigtypes width declnamelist SEMICOLON
    (87) integerdecl -> . INTEGER integernamelist SEMICOLON
    (88) integerdecl -> . INTEGER SIGNED integernamelist SEMICOLON
    (92) realdecl -> . REAL realnamelist SEMICOLON
    (83) declassign -> . sigtypes declassign_element SEMICOLON
    (84) declassign -> . sigtypes width declassign_element SEMICOLON
    (96) parameterdecl -> . PARAMETER param_substitution_list SEMICOLON
    (97) parameterdecl -> . PARAMETER SIGNED param_substitution_list SEMICOLON
    (98) parameterdecl -> . PARAMETER width param_substitution_list SEMICOLON
    (99) parameterdecl -> . PARAMETER SIGNED width param_substitution_list SEMICOLON
    (100) parameterdecl -> . PARAMETER INTEGER param_substitution_list SEMICOLON
    (101) localparamdecl -> . LOCALPARAM param_substitution_list SEMICOLON
    (102) localparamdecl -> . LOCALPARAM SIGNED param_substitution_list SEMICOLON
    (103) localparamdecl -> . LOCALPARAM width param_substitution_list SEMICOLON
    (104) localparamdecl -> . LOCALPARAM SIGNED width param_substitution_list SEMICOLON
    (105) localparamdecl -> . LOCALPARAM INTEGER param_substitution_list SEMICOLON
    (329) genvardecl -> . GENVAR genvarlist SEMICOLON
    (109) assignment -> . ASSIGN lvalue EQUALS rvalue SEMICOLON
    (110) assignment -> . ASSIGN delays lvalue EQUALS delays rvalue SEMICOLON
    (199) always -> . ALWAYS senslist always_statement
    (200) always_ff -> . ALWAYS_FF senslist always_statement
    (201) always_comb -> . ALWAYS_COMB senslist always_statement
    (290) initial -> . INITIAL initial_statement
    (297) instance -> . ID parameterlist instance_bodylist SEMICOLON
    (298) instance -> . SENS_OR parameterlist instance_bodylist SEMICOLON
    (303) instance -> . ID instance_bodylist_noname SEMICOLON
    (304) instance -> . SENS_OR instance_bodylist_noname SEMICOLON
    (358) function -> . FUNCTION width ID SEMICOLON function_statement ENDFUNCTION
    (359) function -> . FUNCTION ID SEMICOLON function_statement ENDFUNCTION
    (377) task -> . TASK ID SEMICOLON task_statement ENDTASK
    (7) pragma -> . LPAREN TIMES ID EQUALS expression TIMES RPAREN
    (8) pragma -> . LPAREN TIMES ID TIMES RPAREN
    (35) sigtypes -> . sigtypes sigtype
    (36) sigtypes -> . sigtype
    (37) sigtype -> . INPUT
    (38) sigtype -> . OUTPUT
    (39) sigtype -> . INOUT
    (40) sigtype -> . TRI
    (41) sigtype -> . REG
    (42) sigtype -> . LOGIC
    (43) sigtype -> . WIRE
    (44) sigtype -> . SIGNED
    (45) sigtype -> . SUPPLY0
    (46) sigtype -> . SUPPLY1

    ENDMODULE       shift and go to state 122
    GENERATE        shift and go to state 45
    INTEGER         shift and go to state 47
    REAL            shift and go to state 49
    PARAMETER       shift and go to state 50
    LOCALPARAM      shift and go to state 51
    GENVAR          shift and go to state 52
    ASSIGN          shift and go to state 53
    ALWAYS          shift and go to state 54
    ALWAYS_FF       shift and go to state 55
    ALWAYS_COMB     shift and go to state 56
    INITIAL         shift and go to state 57
    ID              shift and go to state 58
    SENS_OR         shift and go to state 59
    FUNCTION        shift and go to state 60
    TASK            shift and go to state 61
    LPAREN          shift and go to state 8
    INPUT           shift and go to state 63
    OUTPUT          shift and go to state 64
    INOUT           shift and go to state 65
    TRI             shift and go to state 66
    REG             shift and go to state 67
    LOGIC           shift and go to state 68
    WIRE            shift and go to state 69
    SIGNED          shift and go to state 48
    SUPPLY0         shift and go to state 70
    SUPPLY1         shift and go to state 71

    item                           shift and go to state 123
    standard_item                  shift and go to state 27
    generate                       shift and go to state 28
    decl                           shift and go to state 29
    integerdecl                    shift and go to state 30
    realdecl                       shift and go to state 31
    declassign                     shift and go to state 32
    parameterdecl                  shift and go to state 33
    localparamdecl                 shift and go to state 34
    genvardecl                     shift and go to state 35
    assignment                     shift and go to state 36
    always                         shift and go to state 37
    always_ff                      shift and go to state 38
    always_comb                    shift and go to state 39
    initial                        shift and go to state 40
    instance                       shift and go to state 41
    function                       shift and go to state 42
    task                           shift and go to state 43
    pragma                         shift and go to state 44
    sigtypes                       shift and go to state 46
    sigtype                        shift and go to state 62

state 25

    (57) items -> item .

    ENDMODULE       reduce using rule 57 (items -> item .)
    GENERATE        reduce using rule 57 (items -> item .)
    INTEGER         reduce using rule 57 (items -> item .)
    REAL            reduce using rule 57 (items -> item .)
    PARAMETER       reduce using rule 57 (items -> item .)
    LOCALPARAM      reduce using rule 57 (items -> item .)
    GENVAR          reduce using rule 57 (items -> item .)
    ASSIGN          reduce using rule 57 (items -> item .)
    ALWAYS          reduce using rule 57 (items -> item .)
    ALWAYS_FF       reduce using rule 57 (items -> item .)
    ALWAYS_COMB     reduce using rule 57 (items -> item .)
    INITIAL         reduce using rule 57 (items -> item .)
    ID              reduce using rule 57 (items -> item .)
    SENS_OR         reduce using rule 57 (items -> item .)
    FUNCTION        reduce using rule 57 (items -> item .)
    TASK            reduce using rule 57 (items -> item .)
    LPAREN          reduce using rule 57 (items -> item .)
    INPUT           reduce using rule 57 (items -> item .)
    OUTPUT          reduce using rule 57 (items -> item .)
    INOUT           reduce using rule 57 (items -> item .)
    TRI             reduce using rule 57 (items -> item .)
    REG             reduce using rule 57 (items -> item .)
    LOGIC           reduce using rule 57 (items -> item .)
    WIRE            reduce using rule 57 (items -> item .)
    SIGNED          reduce using rule 57 (items -> item .)
    SUPPLY0         reduce using rule 57 (items -> item .)
    SUPPLY1         reduce using rule 57 (items -> item .)


state 26

    (58) items -> empty .

    ENDMODULE       reduce using rule 58 (items -> empty .)
    GENERATE        reduce using rule 58 (items -> empty .)
    INTEGER         reduce using rule 58 (items -> empty .)
    REAL            reduce using rule 58 (items -> empty .)
    PARAMETER       reduce using rule 58 (items -> empty .)
    LOCALPARAM      reduce using rule 58 (items -> empty .)
    GENVAR          reduce using rule 58 (items -> empty .)
    ASSIGN          reduce using rule 58 (items -> empty .)
    ALWAYS          reduce using rule 58 (items -> empty .)
    ALWAYS_FF       reduce using rule 58 (items -> empty .)
    ALWAYS_COMB     reduce using rule 58 (items -> empty .)
    INITIAL         reduce using rule 58 (items -> empty .)
    ID              reduce using rule 58 (items -> empty .)
    SENS_OR         reduce using rule 58 (items -> empty .)
    FUNCTION        reduce using rule 58 (items -> empty .)
    TASK            reduce using rule 58 (items -> empty .)
    LPAREN          reduce using rule 58 (items -> empty .)
    INPUT           reduce using rule 58 (items -> empty .)
    OUTPUT          reduce using rule 58 (items -> empty .)
    INOUT           reduce using rule 58 (items -> empty .)
    TRI             reduce using rule 58 (items -> empty .)
    REG             reduce using rule 58 (items -> empty .)
    LOGIC           reduce using rule 58 (items -> empty .)
    WIRE            reduce using rule 58 (items -> empty .)
    SIGNED          reduce using rule 58 (items -> empty .)
    SUPPLY0         reduce using rule 58 (items -> empty .)
    SUPPLY1         reduce using rule 58 (items -> empty .)


state 27

    (59) item -> standard_item .

    ENDMODULE       reduce using rule 59 (item -> standard_item .)
    GENERATE        reduce using rule 59 (item -> standard_item .)
    INTEGER         reduce using rule 59 (item -> standard_item .)
    REAL            reduce using rule 59 (item -> standard_item .)
    PARAMETER       reduce using rule 59 (item -> standard_item .)
    LOCALPARAM      reduce using rule 59 (item -> standard_item .)
    GENVAR          reduce using rule 59 (item -> standard_item .)
    ASSIGN          reduce using rule 59 (item -> standard_item .)
    ALWAYS          reduce using rule 59 (item -> standard_item .)
    ALWAYS_FF       reduce using rule 59 (item -> standard_item .)
    ALWAYS_COMB     reduce using rule 59 (item -> standard_item .)
    INITIAL         reduce using rule 59 (item -> standard_item .)
    ID              reduce using rule 59 (item -> standard_item .)
    SENS_OR         reduce using rule 59 (item -> standard_item .)
    FUNCTION        reduce using rule 59 (item -> standard_item .)
    TASK            reduce using rule 59 (item -> standard_item .)
    LPAREN          reduce using rule 59 (item -> standard_item .)
    INPUT           reduce using rule 59 (item -> standard_item .)
    OUTPUT          reduce using rule 59 (item -> standard_item .)
    INOUT           reduce using rule 59 (item -> standard_item .)
    TRI             reduce using rule 59 (item -> standard_item .)
    REG             reduce using rule 59 (item -> standard_item .)
    LOGIC           reduce using rule 59 (item -> standard_item .)
    WIRE            reduce using rule 59 (item -> standard_item .)
    SIGNED          reduce using rule 59 (item -> standard_item .)
    SUPPLY0         reduce using rule 59 (item -> standard_item .)
    SUPPLY1         reduce using rule 59 (item -> standard_item .)


state 28

    (60) item -> generate .

    ENDMODULE       reduce using rule 60 (item -> generate .)
    GENERATE        reduce using rule 60 (item -> generate .)
    INTEGER         reduce using rule 60 (item -> generate .)
    REAL            reduce using rule 60 (item -> generate .)
    PARAMETER       reduce using rule 60 (item -> generate .)
    LOCALPARAM      reduce using rule 60 (item -> generate .)
    GENVAR          reduce using rule 60 (item -> generate .)
    ASSIGN          reduce using rule 60 (item -> generate .)
    ALWAYS          reduce using rule 60 (item -> generate .)
    ALWAYS_FF       reduce using rule 60 (item -> generate .)
    ALWAYS_COMB     reduce using rule 60 (item -> generate .)
    INITIAL         reduce using rule 60 (item -> generate .)
    ID              reduce using rule 60 (item -> generate .)
    SENS_OR         reduce using rule 60 (item -> generate .)
    FUNCTION        reduce using rule 60 (item -> generate .)
    TASK            reduce using rule 60 (item -> generate .)
    LPAREN          reduce using rule 60 (item -> generate .)
    INPUT           reduce using rule 60 (item -> generate .)
    OUTPUT          reduce using rule 60 (item -> generate .)
    INOUT           reduce using rule 60 (item -> generate .)
    TRI             reduce using rule 60 (item -> generate .)
    REG             reduce using rule 60 (item -> generate .)
    LOGIC           reduce using rule 60 (item -> generate .)
    WIRE            reduce using rule 60 (item -> generate .)
    SIGNED          reduce using rule 60 (item -> generate .)
    SUPPLY0         reduce using rule 60 (item -> generate .)
    SUPPLY1         reduce using rule 60 (item -> generate .)


state 29

    (61) standard_item -> decl .

    ENDMODULE       reduce using rule 61 (standard_item -> decl .)
    GENERATE        reduce using rule 61 (standard_item -> decl .)
    INTEGER         reduce using rule 61 (standard_item -> decl .)
    REAL            reduce using rule 61 (standard_item -> decl .)
    PARAMETER       reduce using rule 61 (standard_item -> decl .)
    LOCALPARAM      reduce using rule 61 (standard_item -> decl .)
    GENVAR          reduce using rule 61 (standard_item -> decl .)
    ASSIGN          reduce using rule 61 (standard_item -> decl .)
    ALWAYS          reduce using rule 61 (standard_item -> decl .)
    ALWAYS_FF       reduce using rule 61 (standard_item -> decl .)
    ALWAYS_COMB     reduce using rule 61 (standard_item -> decl .)
    INITIAL         reduce using rule 61 (standard_item -> decl .)
    ID              reduce using rule 61 (standard_item -> decl .)
    SENS_OR         reduce using rule 61 (standard_item -> decl .)
    FUNCTION        reduce using rule 61 (standard_item -> decl .)
    TASK            reduce using rule 61 (standard_item -> decl .)
    LPAREN          reduce using rule 61 (standard_item -> decl .)
    INPUT           reduce using rule 61 (standard_item -> decl .)
    OUTPUT          reduce using rule 61 (standard_item -> decl .)
    INOUT           reduce using rule 61 (standard_item -> decl .)
    TRI             reduce using rule 61 (standard_item -> decl .)
    REG             reduce using rule 61 (standard_item -> decl .)
    LOGIC           reduce using rule 61 (standard_item -> decl .)
    WIRE            reduce using rule 61 (standard_item -> decl .)
    SIGNED          reduce using rule 61 (standard_item -> decl .)
    SUPPLY0         reduce using rule 61 (standard_item -> decl .)
    SUPPLY1         reduce using rule 61 (standard_item -> decl .)
    ENDGENERATE     reduce using rule 61 (standard_item -> decl .)
    IF              reduce using rule 61 (standard_item -> decl .)
    FOR             reduce using rule 61 (standard_item -> decl .)
    ELSE            reduce using rule 61 (standard_item -> decl .)
    END             reduce using rule 61 (standard_item -> decl .)


state 30

    (62) standard_item -> integerdecl .

    ENDMODULE       reduce using rule 62 (standard_item -> integerdecl .)
    GENERATE        reduce using rule 62 (standard_item -> integerdecl .)
    INTEGER         reduce using rule 62 (standard_item -> integerdecl .)
    REAL            reduce using rule 62 (standard_item -> integerdecl .)
    PARAMETER       reduce using rule 62 (standard_item -> integerdecl .)
    LOCALPARAM      reduce using rule 62 (standard_item -> integerdecl .)
    GENVAR          reduce using rule 62 (standard_item -> integerdecl .)
    ASSIGN          reduce using rule 62 (standard_item -> integerdecl .)
    ALWAYS          reduce using rule 62 (standard_item -> integerdecl .)
    ALWAYS_FF       reduce using rule 62 (standard_item -> integerdecl .)
    ALWAYS_COMB     reduce using rule 62 (standard_item -> integerdecl .)
    INITIAL         reduce using rule 62 (standard_item -> integerdecl .)
    ID              reduce using rule 62 (standard_item -> integerdecl .)
    SENS_OR         reduce using rule 62 (standard_item -> integerdecl .)
    FUNCTION        reduce using rule 62 (standard_item -> integerdecl .)
    TASK            reduce using rule 62 (standard_item -> integerdecl .)
    LPAREN          reduce using rule 62 (standard_item -> integerdecl .)
    INPUT           reduce using rule 62 (standard_item -> integerdecl .)
    OUTPUT          reduce using rule 62 (standard_item -> integerdecl .)
    INOUT           reduce using rule 62 (standard_item -> integerdecl .)
    TRI             reduce using rule 62 (standard_item -> integerdecl .)
    REG             reduce using rule 62 (standard_item -> integerdecl .)
    LOGIC           reduce using rule 62 (standard_item -> integerdecl .)
    WIRE            reduce using rule 62 (standard_item -> integerdecl .)
    SIGNED          reduce using rule 62 (standard_item -> integerdecl .)
    SUPPLY0         reduce using rule 62 (standard_item -> integerdecl .)
    SUPPLY1         reduce using rule 62 (standard_item -> integerdecl .)
    ENDGENERATE     reduce using rule 62 (standard_item -> integerdecl .)
    IF              reduce using rule 62 (standard_item -> integerdecl .)
    FOR             reduce using rule 62 (standard_item -> integerdecl .)
    ELSE            reduce using rule 62 (standard_item -> integerdecl .)
    END             reduce using rule 62 (standard_item -> integerdecl .)


state 31

    (63) standard_item -> realdecl .

    ENDMODULE       reduce using rule 63 (standard_item -> realdecl .)
    GENERATE        reduce using rule 63 (standard_item -> realdecl .)
    INTEGER         reduce using rule 63 (standard_item -> realdecl .)
    REAL            reduce using rule 63 (standard_item -> realdecl .)
    PARAMETER       reduce using rule 63 (standard_item -> realdecl .)
    LOCALPARAM      reduce using rule 63 (standard_item -> realdecl .)
    GENVAR          reduce using rule 63 (standard_item -> realdecl .)
    ASSIGN          reduce using rule 63 (standard_item -> realdecl .)
    ALWAYS          reduce using rule 63 (standard_item -> realdecl .)
    ALWAYS_FF       reduce using rule 63 (standard_item -> realdecl .)
    ALWAYS_COMB     reduce using rule 63 (standard_item -> realdecl .)
    INITIAL         reduce using rule 63 (standard_item -> realdecl .)
    ID              reduce using rule 63 (standard_item -> realdecl .)
    SENS_OR         reduce using rule 63 (standard_item -> realdecl .)
    FUNCTION        reduce using rule 63 (standard_item -> realdecl .)
    TASK            reduce using rule 63 (standard_item -> realdecl .)
    LPAREN          reduce using rule 63 (standard_item -> realdecl .)
    INPUT           reduce using rule 63 (standard_item -> realdecl .)
    OUTPUT          reduce using rule 63 (standard_item -> realdecl .)
    INOUT           reduce using rule 63 (standard_item -> realdecl .)
    TRI             reduce using rule 63 (standard_item -> realdecl .)
    REG             reduce using rule 63 (standard_item -> realdecl .)
    LOGIC           reduce using rule 63 (standard_item -> realdecl .)
    WIRE            reduce using rule 63 (standard_item -> realdecl .)
    SIGNED          reduce using rule 63 (standard_item -> realdecl .)
    SUPPLY0         reduce using rule 63 (standard_item -> realdecl .)
    SUPPLY1         reduce using rule 63 (standard_item -> realdecl .)
    ENDGENERATE     reduce using rule 63 (standard_item -> realdecl .)
    IF              reduce using rule 63 (standard_item -> realdecl .)
    FOR             reduce using rule 63 (standard_item -> realdecl .)
    ELSE            reduce using rule 63 (standard_item -> realdecl .)
    END             reduce using rule 63 (standard_item -> realdecl .)


state 32

    (64) standard_item -> declassign .

    ENDMODULE       reduce using rule 64 (standard_item -> declassign .)
    GENERATE        reduce using rule 64 (standard_item -> declassign .)
    INTEGER         reduce using rule 64 (standard_item -> declassign .)
    REAL            reduce using rule 64 (standard_item -> declassign .)
    PARAMETER       reduce using rule 64 (standard_item -> declassign .)
    LOCALPARAM      reduce using rule 64 (standard_item -> declassign .)
    GENVAR          reduce using rule 64 (standard_item -> declassign .)
    ASSIGN          reduce using rule 64 (standard_item -> declassign .)
    ALWAYS          reduce using rule 64 (standard_item -> declassign .)
    ALWAYS_FF       reduce using rule 64 (standard_item -> declassign .)
    ALWAYS_COMB     reduce using rule 64 (standard_item -> declassign .)
    INITIAL         reduce using rule 64 (standard_item -> declassign .)
    ID              reduce using rule 64 (standard_item -> declassign .)
    SENS_OR         reduce using rule 64 (standard_item -> declassign .)
    FUNCTION        reduce using rule 64 (standard_item -> declassign .)
    TASK            reduce using rule 64 (standard_item -> declassign .)
    LPAREN          reduce using rule 64 (standard_item -> declassign .)
    INPUT           reduce using rule 64 (standard_item -> declassign .)
    OUTPUT          reduce using rule 64 (standard_item -> declassign .)
    INOUT           reduce using rule 64 (standard_item -> declassign .)
    TRI             reduce using rule 64 (standard_item -> declassign .)
    REG             reduce using rule 64 (standard_item -> declassign .)
    LOGIC           reduce using rule 64 (standard_item -> declassign .)
    WIRE            reduce using rule 64 (standard_item -> declassign .)
    SIGNED          reduce using rule 64 (standard_item -> declassign .)
    SUPPLY0         reduce using rule 64 (standard_item -> declassign .)
    SUPPLY1         reduce using rule 64 (standard_item -> declassign .)
    ENDGENERATE     reduce using rule 64 (standard_item -> declassign .)
    IF              reduce using rule 64 (standard_item -> declassign .)
    FOR             reduce using rule 64 (standard_item -> declassign .)
    ELSE            reduce using rule 64 (standard_item -> declassign .)
    END             reduce using rule 64 (standard_item -> declassign .)


state 33

    (65) standard_item -> parameterdecl .

    ENDMODULE       reduce using rule 65 (standard_item -> parameterdecl .)
    GENERATE        reduce using rule 65 (standard_item -> parameterdecl .)
    INTEGER         reduce using rule 65 (standard_item -> parameterdecl .)
    REAL            reduce using rule 65 (standard_item -> parameterdecl .)
    PARAMETER       reduce using rule 65 (standard_item -> parameterdecl .)
    LOCALPARAM      reduce using rule 65 (standard_item -> parameterdecl .)
    GENVAR          reduce using rule 65 (standard_item -> parameterdecl .)
    ASSIGN          reduce using rule 65 (standard_item -> parameterdecl .)
    ALWAYS          reduce using rule 65 (standard_item -> parameterdecl .)
    ALWAYS_FF       reduce using rule 65 (standard_item -> parameterdecl .)
    ALWAYS_COMB     reduce using rule 65 (standard_item -> parameterdecl .)
    INITIAL         reduce using rule 65 (standard_item -> parameterdecl .)
    ID              reduce using rule 65 (standard_item -> parameterdecl .)
    SENS_OR         reduce using rule 65 (standard_item -> parameterdecl .)
    FUNCTION        reduce using rule 65 (standard_item -> parameterdecl .)
    TASK            reduce using rule 65 (standard_item -> parameterdecl .)
    LPAREN          reduce using rule 65 (standard_item -> parameterdecl .)
    INPUT           reduce using rule 65 (standard_item -> parameterdecl .)
    OUTPUT          reduce using rule 65 (standard_item -> parameterdecl .)
    INOUT           reduce using rule 65 (standard_item -> parameterdecl .)
    TRI             reduce using rule 65 (standard_item -> parameterdecl .)
    REG             reduce using rule 65 (standard_item -> parameterdecl .)
    LOGIC           reduce using rule 65 (standard_item -> parameterdecl .)
    WIRE            reduce using rule 65 (standard_item -> parameterdecl .)
    SIGNED          reduce using rule 65 (standard_item -> parameterdecl .)
    SUPPLY0         reduce using rule 65 (standard_item -> parameterdecl .)
    SUPPLY1         reduce using rule 65 (standard_item -> parameterdecl .)
    ENDGENERATE     reduce using rule 65 (standard_item -> parameterdecl .)
    IF              reduce using rule 65 (standard_item -> parameterdecl .)
    FOR             reduce using rule 65 (standard_item -> parameterdecl .)
    ELSE            reduce using rule 65 (standard_item -> parameterdecl .)
    END             reduce using rule 65 (standard_item -> parameterdecl .)


state 34

    (66) standard_item -> localparamdecl .

    ENDMODULE       reduce using rule 66 (standard_item -> localparamdecl .)
    GENERATE        reduce using rule 66 (standard_item -> localparamdecl .)
    INTEGER         reduce using rule 66 (standard_item -> localparamdecl .)
    REAL            reduce using rule 66 (standard_item -> localparamdecl .)
    PARAMETER       reduce using rule 66 (standard_item -> localparamdecl .)
    LOCALPARAM      reduce using rule 66 (standard_item -> localparamdecl .)
    GENVAR          reduce using rule 66 (standard_item -> localparamdecl .)
    ASSIGN          reduce using rule 66 (standard_item -> localparamdecl .)
    ALWAYS          reduce using rule 66 (standard_item -> localparamdecl .)
    ALWAYS_FF       reduce using rule 66 (standard_item -> localparamdecl .)
    ALWAYS_COMB     reduce using rule 66 (standard_item -> localparamdecl .)
    INITIAL         reduce using rule 66 (standard_item -> localparamdecl .)
    ID              reduce using rule 66 (standard_item -> localparamdecl .)
    SENS_OR         reduce using rule 66 (standard_item -> localparamdecl .)
    FUNCTION        reduce using rule 66 (standard_item -> localparamdecl .)
    TASK            reduce using rule 66 (standard_item -> localparamdecl .)
    LPAREN          reduce using rule 66 (standard_item -> localparamdecl .)
    INPUT           reduce using rule 66 (standard_item -> localparamdecl .)
    OUTPUT          reduce using rule 66 (standard_item -> localparamdecl .)
    INOUT           reduce using rule 66 (standard_item -> localparamdecl .)
    TRI             reduce using rule 66 (standard_item -> localparamdecl .)
    REG             reduce using rule 66 (standard_item -> localparamdecl .)
    LOGIC           reduce using rule 66 (standard_item -> localparamdecl .)
    WIRE            reduce using rule 66 (standard_item -> localparamdecl .)
    SIGNED          reduce using rule 66 (standard_item -> localparamdecl .)
    SUPPLY0         reduce using rule 66 (standard_item -> localparamdecl .)
    SUPPLY1         reduce using rule 66 (standard_item -> localparamdecl .)
    ENDGENERATE     reduce using rule 66 (standard_item -> localparamdecl .)
    IF              reduce using rule 66 (standard_item -> localparamdecl .)
    FOR             reduce using rule 66 (standard_item -> localparamdecl .)
    ELSE            reduce using rule 66 (standard_item -> localparamdecl .)
    END             reduce using rule 66 (standard_item -> localparamdecl .)


state 35

    (67) standard_item -> genvardecl .

    ENDMODULE       reduce using rule 67 (standard_item -> genvardecl .)
    GENERATE        reduce using rule 67 (standard_item -> genvardecl .)
    INTEGER         reduce using rule 67 (standard_item -> genvardecl .)
    REAL            reduce using rule 67 (standard_item -> genvardecl .)
    PARAMETER       reduce using rule 67 (standard_item -> genvardecl .)
    LOCALPARAM      reduce using rule 67 (standard_item -> genvardecl .)
    GENVAR          reduce using rule 67 (standard_item -> genvardecl .)
    ASSIGN          reduce using rule 67 (standard_item -> genvardecl .)
    ALWAYS          reduce using rule 67 (standard_item -> genvardecl .)
    ALWAYS_FF       reduce using rule 67 (standard_item -> genvardecl .)
    ALWAYS_COMB     reduce using rule 67 (standard_item -> genvardecl .)
    INITIAL         reduce using rule 67 (standard_item -> genvardecl .)
    ID              reduce using rule 67 (standard_item -> genvardecl .)
    SENS_OR         reduce using rule 67 (standard_item -> genvardecl .)
    FUNCTION        reduce using rule 67 (standard_item -> genvardecl .)
    TASK            reduce using rule 67 (standard_item -> genvardecl .)
    LPAREN          reduce using rule 67 (standard_item -> genvardecl .)
    INPUT           reduce using rule 67 (standard_item -> genvardecl .)
    OUTPUT          reduce using rule 67 (standard_item -> genvardecl .)
    INOUT           reduce using rule 67 (standard_item -> genvardecl .)
    TRI             reduce using rule 67 (standard_item -> genvardecl .)
    REG             reduce using rule 67 (standard_item -> genvardecl .)
    LOGIC           reduce using rule 67 (standard_item -> genvardecl .)
    WIRE            reduce using rule 67 (standard_item -> genvardecl .)
    SIGNED          reduce using rule 67 (standard_item -> genvardecl .)
    SUPPLY0         reduce using rule 67 (standard_item -> genvardecl .)
    SUPPLY1         reduce using rule 67 (standard_item -> genvardecl .)
    ENDGENERATE     reduce using rule 67 (standard_item -> genvardecl .)
    IF              reduce using rule 67 (standard_item -> genvardecl .)
    FOR             reduce using rule 67 (standard_item -> genvardecl .)
    ELSE            reduce using rule 67 (standard_item -> genvardecl .)
    END             reduce using rule 67 (standard_item -> genvardecl .)


state 36

    (68) standard_item -> assignment .

    ENDMODULE       reduce using rule 68 (standard_item -> assignment .)
    GENERATE        reduce using rule 68 (standard_item -> assignment .)
    INTEGER         reduce using rule 68 (standard_item -> assignment .)
    REAL            reduce using rule 68 (standard_item -> assignment .)
    PARAMETER       reduce using rule 68 (standard_item -> assignment .)
    LOCALPARAM      reduce using rule 68 (standard_item -> assignment .)
    GENVAR          reduce using rule 68 (standard_item -> assignment .)
    ASSIGN          reduce using rule 68 (standard_item -> assignment .)
    ALWAYS          reduce using rule 68 (standard_item -> assignment .)
    ALWAYS_FF       reduce using rule 68 (standard_item -> assignment .)
    ALWAYS_COMB     reduce using rule 68 (standard_item -> assignment .)
    INITIAL         reduce using rule 68 (standard_item -> assignment .)
    ID              reduce using rule 68 (standard_item -> assignment .)
    SENS_OR         reduce using rule 68 (standard_item -> assignment .)
    FUNCTION        reduce using rule 68 (standard_item -> assignment .)
    TASK            reduce using rule 68 (standard_item -> assignment .)
    LPAREN          reduce using rule 68 (standard_item -> assignment .)
    INPUT           reduce using rule 68 (standard_item -> assignment .)
    OUTPUT          reduce using rule 68 (standard_item -> assignment .)
    INOUT           reduce using rule 68 (standard_item -> assignment .)
    TRI             reduce using rule 68 (standard_item -> assignment .)
    REG             reduce using rule 68 (standard_item -> assignment .)
    LOGIC           reduce using rule 68 (standard_item -> assignment .)
    WIRE            reduce using rule 68 (standard_item -> assignment .)
    SIGNED          reduce using rule 68 (standard_item -> assignment .)
    SUPPLY0         reduce using rule 68 (standard_item -> assignment .)
    SUPPLY1         reduce using rule 68 (standard_item -> assignment .)
    ENDGENERATE     reduce using rule 68 (standard_item -> assignment .)
    IF              reduce using rule 68 (standard_item -> assignment .)
    FOR             reduce using rule 68 (standard_item -> assignment .)
    ELSE            reduce using rule 68 (standard_item -> assignment .)
    END             reduce using rule 68 (standard_item -> assignment .)


state 37

    (69) standard_item -> always .

    ENDMODULE       reduce using rule 69 (standard_item -> always .)
    GENERATE        reduce using rule 69 (standard_item -> always .)
    INTEGER         reduce using rule 69 (standard_item -> always .)
    REAL            reduce using rule 69 (standard_item -> always .)
    PARAMETER       reduce using rule 69 (standard_item -> always .)
    LOCALPARAM      reduce using rule 69 (standard_item -> always .)
    GENVAR          reduce using rule 69 (standard_item -> always .)
    ASSIGN          reduce using rule 69 (standard_item -> always .)
    ALWAYS          reduce using rule 69 (standard_item -> always .)
    ALWAYS_FF       reduce using rule 69 (standard_item -> always .)
    ALWAYS_COMB     reduce using rule 69 (standard_item -> always .)
    INITIAL         reduce using rule 69 (standard_item -> always .)
    ID              reduce using rule 69 (standard_item -> always .)
    SENS_OR         reduce using rule 69 (standard_item -> always .)
    FUNCTION        reduce using rule 69 (standard_item -> always .)
    TASK            reduce using rule 69 (standard_item -> always .)
    LPAREN          reduce using rule 69 (standard_item -> always .)
    INPUT           reduce using rule 69 (standard_item -> always .)
    OUTPUT          reduce using rule 69 (standard_item -> always .)
    INOUT           reduce using rule 69 (standard_item -> always .)
    TRI             reduce using rule 69 (standard_item -> always .)
    REG             reduce using rule 69 (standard_item -> always .)
    LOGIC           reduce using rule 69 (standard_item -> always .)
    WIRE            reduce using rule 69 (standard_item -> always .)
    SIGNED          reduce using rule 69 (standard_item -> always .)
    SUPPLY0         reduce using rule 69 (standard_item -> always .)
    SUPPLY1         reduce using rule 69 (standard_item -> always .)
    ENDGENERATE     reduce using rule 69 (standard_item -> always .)
    IF              reduce using rule 69 (standard_item -> always .)
    FOR             reduce using rule 69 (standard_item -> always .)
    ELSE            reduce using rule 69 (standard_item -> always .)
    END             reduce using rule 69 (standard_item -> always .)


state 38

    (70) standard_item -> always_ff .

    ENDMODULE       reduce using rule 70 (standard_item -> always_ff .)
    GENERATE        reduce using rule 70 (standard_item -> always_ff .)
    INTEGER         reduce using rule 70 (standard_item -> always_ff .)
    REAL            reduce using rule 70 (standard_item -> always_ff .)
    PARAMETER       reduce using rule 70 (standard_item -> always_ff .)
    LOCALPARAM      reduce using rule 70 (standard_item -> always_ff .)
    GENVAR          reduce using rule 70 (standard_item -> always_ff .)
    ASSIGN          reduce using rule 70 (standard_item -> always_ff .)
    ALWAYS          reduce using rule 70 (standard_item -> always_ff .)
    ALWAYS_FF       reduce using rule 70 (standard_item -> always_ff .)
    ALWAYS_COMB     reduce using rule 70 (standard_item -> always_ff .)
    INITIAL         reduce using rule 70 (standard_item -> always_ff .)
    ID              reduce using rule 70 (standard_item -> always_ff .)
    SENS_OR         reduce using rule 70 (standard_item -> always_ff .)
    FUNCTION        reduce using rule 70 (standard_item -> always_ff .)
    TASK            reduce using rule 70 (standard_item -> always_ff .)
    LPAREN          reduce using rule 70 (standard_item -> always_ff .)
    INPUT           reduce using rule 70 (standard_item -> always_ff .)
    OUTPUT          reduce using rule 70 (standard_item -> always_ff .)
    INOUT           reduce using rule 70 (standard_item -> always_ff .)
    TRI             reduce using rule 70 (standard_item -> always_ff .)
    REG             reduce using rule 70 (standard_item -> always_ff .)
    LOGIC           reduce using rule 70 (standard_item -> always_ff .)
    WIRE            reduce using rule 70 (standard_item -> always_ff .)
    SIGNED          reduce using rule 70 (standard_item -> always_ff .)
    SUPPLY0         reduce using rule 70 (standard_item -> always_ff .)
    SUPPLY1         reduce using rule 70 (standard_item -> always_ff .)
    ENDGENERATE     reduce using rule 70 (standard_item -> always_ff .)
    IF              reduce using rule 70 (standard_item -> always_ff .)
    FOR             reduce using rule 70 (standard_item -> always_ff .)
    ELSE            reduce using rule 70 (standard_item -> always_ff .)
    END             reduce using rule 70 (standard_item -> always_ff .)


state 39

    (71) standard_item -> always_comb .

    ENDMODULE       reduce using rule 71 (standard_item -> always_comb .)
    GENERATE        reduce using rule 71 (standard_item -> always_comb .)
    INTEGER         reduce using rule 71 (standard_item -> always_comb .)
    REAL            reduce using rule 71 (standard_item -> always_comb .)
    PARAMETER       reduce using rule 71 (standard_item -> always_comb .)
    LOCALPARAM      reduce using rule 71 (standard_item -> always_comb .)
    GENVAR          reduce using rule 71 (standard_item -> always_comb .)
    ASSIGN          reduce using rule 71 (standard_item -> always_comb .)
    ALWAYS          reduce using rule 71 (standard_item -> always_comb .)
    ALWAYS_FF       reduce using rule 71 (standard_item -> always_comb .)
    ALWAYS_COMB     reduce using rule 71 (standard_item -> always_comb .)
    INITIAL         reduce using rule 71 (standard_item -> always_comb .)
    ID              reduce using rule 71 (standard_item -> always_comb .)
    SENS_OR         reduce using rule 71 (standard_item -> always_comb .)
    FUNCTION        reduce using rule 71 (standard_item -> always_comb .)
    TASK            reduce using rule 71 (standard_item -> always_comb .)
    LPAREN          reduce using rule 71 (standard_item -> always_comb .)
    INPUT           reduce using rule 71 (standard_item -> always_comb .)
    OUTPUT          reduce using rule 71 (standard_item -> always_comb .)
    INOUT           reduce using rule 71 (standard_item -> always_comb .)
    TRI             reduce using rule 71 (standard_item -> always_comb .)
    REG             reduce using rule 71 (standard_item -> always_comb .)
    LOGIC           reduce using rule 71 (standard_item -> always_comb .)
    WIRE            reduce using rule 71 (standard_item -> always_comb .)
    SIGNED          reduce using rule 71 (standard_item -> always_comb .)
    SUPPLY0         reduce using rule 71 (standard_item -> always_comb .)
    SUPPLY1         reduce using rule 71 (standard_item -> always_comb .)
    ENDGENERATE     reduce using rule 71 (standard_item -> always_comb .)
    IF              reduce using rule 71 (standard_item -> always_comb .)
    FOR             reduce using rule 71 (standard_item -> always_comb .)
    ELSE            reduce using rule 71 (standard_item -> always_comb .)
    END             reduce using rule 71 (standard_item -> always_comb .)


state 40

    (72) standard_item -> initial .

    ENDMODULE       reduce using rule 72 (standard_item -> initial .)
    GENERATE        reduce using rule 72 (standard_item -> initial .)
    INTEGER         reduce using rule 72 (standard_item -> initial .)
    REAL            reduce using rule 72 (standard_item -> initial .)
    PARAMETER       reduce using rule 72 (standard_item -> initial .)
    LOCALPARAM      reduce using rule 72 (standard_item -> initial .)
    GENVAR          reduce using rule 72 (standard_item -> initial .)
    ASSIGN          reduce using rule 72 (standard_item -> initial .)
    ALWAYS          reduce using rule 72 (standard_item -> initial .)
    ALWAYS_FF       reduce using rule 72 (standard_item -> initial .)
    ALWAYS_COMB     reduce using rule 72 (standard_item -> initial .)
    INITIAL         reduce using rule 72 (standard_item -> initial .)
    ID              reduce using rule 72 (standard_item -> initial .)
    SENS_OR         reduce using rule 72 (standard_item -> initial .)
    FUNCTION        reduce using rule 72 (standard_item -> initial .)
    TASK            reduce using rule 72 (standard_item -> initial .)
    LPAREN          reduce using rule 72 (standard_item -> initial .)
    INPUT           reduce using rule 72 (standard_item -> initial .)
    OUTPUT          reduce using rule 72 (standard_item -> initial .)
    INOUT           reduce using rule 72 (standard_item -> initial .)
    TRI             reduce using rule 72 (standard_item -> initial .)
    REG             reduce using rule 72 (standard_item -> initial .)
    LOGIC           reduce using rule 72 (standard_item -> initial .)
    WIRE            reduce using rule 72 (standard_item -> initial .)
    SIGNED          reduce using rule 72 (standard_item -> initial .)
    SUPPLY0         reduce using rule 72 (standard_item -> initial .)
    SUPPLY1         reduce using rule 72 (standard_item -> initial .)
    ENDGENERATE     reduce using rule 72 (standard_item -> initial .)
    IF              reduce using rule 72 (standard_item -> initial .)
    FOR             reduce using rule 72 (standard_item -> initial .)
    ELSE            reduce using rule 72 (standard_item -> initial .)
    END             reduce using rule 72 (standard_item -> initial .)


state 41

    (73) standard_item -> instance .

    ENDMODULE       reduce using rule 73 (standard_item -> instance .)
    GENERATE        reduce using rule 73 (standard_item -> instance .)
    INTEGER         reduce using rule 73 (standard_item -> instance .)
    REAL            reduce using rule 73 (standard_item -> instance .)
    PARAMETER       reduce using rule 73 (standard_item -> instance .)
    LOCALPARAM      reduce using rule 73 (standard_item -> instance .)
    GENVAR          reduce using rule 73 (standard_item -> instance .)
    ASSIGN          reduce using rule 73 (standard_item -> instance .)
    ALWAYS          reduce using rule 73 (standard_item -> instance .)
    ALWAYS_FF       reduce using rule 73 (standard_item -> instance .)
    ALWAYS_COMB     reduce using rule 73 (standard_item -> instance .)
    INITIAL         reduce using rule 73 (standard_item -> instance .)
    ID              reduce using rule 73 (standard_item -> instance .)
    SENS_OR         reduce using rule 73 (standard_item -> instance .)
    FUNCTION        reduce using rule 73 (standard_item -> instance .)
    TASK            reduce using rule 73 (standard_item -> instance .)
    LPAREN          reduce using rule 73 (standard_item -> instance .)
    INPUT           reduce using rule 73 (standard_item -> instance .)
    OUTPUT          reduce using rule 73 (standard_item -> instance .)
    INOUT           reduce using rule 73 (standard_item -> instance .)
    TRI             reduce using rule 73 (standard_item -> instance .)
    REG             reduce using rule 73 (standard_item -> instance .)
    LOGIC           reduce using rule 73 (standard_item -> instance .)
    WIRE            reduce using rule 73 (standard_item -> instance .)
    SIGNED          reduce using rule 73 (standard_item -> instance .)
    SUPPLY0         reduce using rule 73 (standard_item -> instance .)
    SUPPLY1         reduce using rule 73 (standard_item -> instance .)
    ENDGENERATE     reduce using rule 73 (standard_item -> instance .)
    IF              reduce using rule 73 (standard_item -> instance .)
    FOR             reduce using rule 73 (standard_item -> instance .)
    ELSE            reduce using rule 73 (standard_item -> instance .)
    END             reduce using rule 73 (standard_item -> instance .)


state 42

    (74) standard_item -> function .

    ENDMODULE       reduce using rule 74 (standard_item -> function .)
    GENERATE        reduce using rule 74 (standard_item -> function .)
    INTEGER         reduce using rule 74 (standard_item -> function .)
    REAL            reduce using rule 74 (standard_item -> function .)
    PARAMETER       reduce using rule 74 (standard_item -> function .)
    LOCALPARAM      reduce using rule 74 (standard_item -> function .)
    GENVAR          reduce using rule 74 (standard_item -> function .)
    ASSIGN          reduce using rule 74 (standard_item -> function .)
    ALWAYS          reduce using rule 74 (standard_item -> function .)
    ALWAYS_FF       reduce using rule 74 (standard_item -> function .)
    ALWAYS_COMB     reduce using rule 74 (standard_item -> function .)
    INITIAL         reduce using rule 74 (standard_item -> function .)
    ID              reduce using rule 74 (standard_item -> function .)
    SENS_OR         reduce using rule 74 (standard_item -> function .)
    FUNCTION        reduce using rule 74 (standard_item -> function .)
    TASK            reduce using rule 74 (standard_item -> function .)
    LPAREN          reduce using rule 74 (standard_item -> function .)
    INPUT           reduce using rule 74 (standard_item -> function .)
    OUTPUT          reduce using rule 74 (standard_item -> function .)
    INOUT           reduce using rule 74 (standard_item -> function .)
    TRI             reduce using rule 74 (standard_item -> function .)
    REG             reduce using rule 74 (standard_item -> function .)
    LOGIC           reduce using rule 74 (standard_item -> function .)
    WIRE            reduce using rule 74 (standard_item -> function .)
    SIGNED          reduce using rule 74 (standard_item -> function .)
    SUPPLY0         reduce using rule 74 (standard_item -> function .)
    SUPPLY1         reduce using rule 74 (standard_item -> function .)
    ENDGENERATE     reduce using rule 74 (standard_item -> function .)
    IF              reduce using rule 74 (standard_item -> function .)
    FOR             reduce using rule 74 (standard_item -> function .)
    ELSE            reduce using rule 74 (standard_item -> function .)
    END             reduce using rule 74 (standard_item -> function .)


state 43

    (75) standard_item -> task .

    ENDMODULE       reduce using rule 75 (standard_item -> task .)
    GENERATE        reduce using rule 75 (standard_item -> task .)
    INTEGER         reduce using rule 75 (standard_item -> task .)
    REAL            reduce using rule 75 (standard_item -> task .)
    PARAMETER       reduce using rule 75 (standard_item -> task .)
    LOCALPARAM      reduce using rule 75 (standard_item -> task .)
    GENVAR          reduce using rule 75 (standard_item -> task .)
    ASSIGN          reduce using rule 75 (standard_item -> task .)
    ALWAYS          reduce using rule 75 (standard_item -> task .)
    ALWAYS_FF       reduce using rule 75 (standard_item -> task .)
    ALWAYS_COMB     reduce using rule 75 (standard_item -> task .)
    INITIAL         reduce using rule 75 (standard_item -> task .)
    ID              reduce using rule 75 (standard_item -> task .)
    SENS_OR         reduce using rule 75 (standard_item -> task .)
    FUNCTION        reduce using rule 75 (standard_item -> task .)
    TASK            reduce using rule 75 (standard_item -> task .)
    LPAREN          reduce using rule 75 (standard_item -> task .)
    INPUT           reduce using rule 75 (standard_item -> task .)
    OUTPUT          reduce using rule 75 (standard_item -> task .)
    INOUT           reduce using rule 75 (standard_item -> task .)
    TRI             reduce using rule 75 (standard_item -> task .)
    REG             reduce using rule 75 (standard_item -> task .)
    LOGIC           reduce using rule 75 (standard_item -> task .)
    WIRE            reduce using rule 75 (standard_item -> task .)
    SIGNED          reduce using rule 75 (standard_item -> task .)
    SUPPLY0         reduce using rule 75 (standard_item -> task .)
    SUPPLY1         reduce using rule 75 (standard_item -> task .)
    ENDGENERATE     reduce using rule 75 (standard_item -> task .)
    IF              reduce using rule 75 (standard_item -> task .)
    FOR             reduce using rule 75 (standard_item -> task .)
    ELSE            reduce using rule 75 (standard_item -> task .)
    END             reduce using rule 75 (standard_item -> task .)


state 44

    (76) standard_item -> pragma .

    ENDMODULE       reduce using rule 76 (standard_item -> pragma .)
    GENERATE        reduce using rule 76 (standard_item -> pragma .)
    INTEGER         reduce using rule 76 (standard_item -> pragma .)
    REAL            reduce using rule 76 (standard_item -> pragma .)
    PARAMETER       reduce using rule 76 (standard_item -> pragma .)
    LOCALPARAM      reduce using rule 76 (standard_item -> pragma .)
    GENVAR          reduce using rule 76 (standard_item -> pragma .)
    ASSIGN          reduce using rule 76 (standard_item -> pragma .)
    ALWAYS          reduce using rule 76 (standard_item -> pragma .)
    ALWAYS_FF       reduce using rule 76 (standard_item -> pragma .)
    ALWAYS_COMB     reduce using rule 76 (standard_item -> pragma .)
    INITIAL         reduce using rule 76 (standard_item -> pragma .)
    ID              reduce using rule 76 (standard_item -> pragma .)
    SENS_OR         reduce using rule 76 (standard_item -> pragma .)
    FUNCTION        reduce using rule 76 (standard_item -> pragma .)
    TASK            reduce using rule 76 (standard_item -> pragma .)
    LPAREN          reduce using rule 76 (standard_item -> pragma .)
    INPUT           reduce using rule 76 (standard_item -> pragma .)
    OUTPUT          reduce using rule 76 (standard_item -> pragma .)
    INOUT           reduce using rule 76 (standard_item -> pragma .)
    TRI             reduce using rule 76 (standard_item -> pragma .)
    REG             reduce using rule 76 (standard_item -> pragma .)
    LOGIC           reduce using rule 76 (standard_item -> pragma .)
    WIRE            reduce using rule 76 (standard_item -> pragma .)
    SIGNED          reduce using rule 76 (standard_item -> pragma .)
    SUPPLY0         reduce using rule 76 (standard_item -> pragma .)
    SUPPLY1         reduce using rule 76 (standard_item -> pragma .)
    ENDGENERATE     reduce using rule 76 (standard_item -> pragma .)
    IF              reduce using rule 76 (standard_item -> pragma .)
    FOR             reduce using rule 76 (standard_item -> pragma .)
    ELSE            reduce using rule 76 (standard_item -> pragma .)
    END             reduce using rule 76 (standard_item -> pragma .)


state 45

    (333) generate -> GENERATE . generate_items ENDGENERATE
    (334) generate_items -> . empty
    (335) generate_items -> . generate_items generate_item
    (336) generate_items -> . generate_item
    (400) empty -> .
    (337) generate_item -> . standard_item
    (338) generate_item -> . generate_if
    (339) generate_item -> . generate_for
    (61) standard_item -> . decl
    (62) standard_item -> . integerdecl
    (63) standard_item -> . realdecl
    (64) standard_item -> . declassign
    (65) standard_item -> . parameterdecl
    (66) standard_item -> . localparamdecl
    (67) standard_item -> . genvardecl
    (68) standard_item -> . assignment
    (69) standard_item -> . always
    (70) standard_item -> . always_ff
    (71) standard_item -> . always_comb
    (72) standard_item -> . initial
    (73) standard_item -> . instance
    (74) standard_item -> . function
    (75) standard_item -> . task
    (76) standard_item -> . pragma
    (342) generate_if -> . IF LPAREN cond RPAREN gif_true_item ELSE gif_false_item
    (343) generate_if -> . IF LPAREN cond RPAREN gif_true_item
    (348) generate_for -> . FOR LPAREN forpre forcond forpost RPAREN generate_forcontent
    (77) decl -> . sigtypes declnamelist SEMICOLON
    (78) decl -> . sigtypes width declnamelist SEMICOLON
    (87) integerdecl -> . INTEGER integernamelist SEMICOLON
    (88) integerdecl -> . INTEGER SIGNED integernamelist SEMICOLON
    (92) realdecl -> . REAL realnamelist SEMICOLON
    (83) declassign -> . sigtypes declassign_element SEMICOLON
    (84) declassign -> . sigtypes width declassign_element SEMICOLON
    (96) parameterdecl -> . PARAMETER param_substitution_list SEMICOLON
    (97) parameterdecl -> . PARAMETER SIGNED param_substitution_list SEMICOLON
    (98) parameterdecl -> . PARAMETER width param_substitution_list SEMICOLON
    (99) parameterdecl -> . PARAMETER SIGNED width param_substitution_list SEMICOLON
    (100) parameterdecl -> . PARAMETER INTEGER param_substitution_list SEMICOLON
    (101) localparamdecl -> . LOCALPARAM param_substitution_list SEMICOLON
    (102) localparamdecl -> . LOCALPARAM SIGNED param_substitution_list SEMICOLON
    (103) localparamdecl -> . LOCALPARAM width param_substitution_list SEMICOLON
    (104) localparamdecl -> . LOCALPARAM SIGNED width param_substitution_list SEMICOLON
    (105) localparamdecl -> . LOCALPARAM INTEGER param_substitution_list SEMICOLON
    (329) genvardecl -> . GENVAR genvarlist SEMICOLON
    (109) assignment -> . ASSIGN lvalue EQUALS rvalue SEMICOLON
    (110) assignment -> . ASSIGN delays lvalue EQUALS delays rvalue SEMICOLON
    (199) always -> . ALWAYS senslist always_statement
    (200) always_ff -> . ALWAYS_FF senslist always_statement
    (201) always_comb -> . ALWAYS_COMB senslist always_statement
    (290) initial -> . INITIAL initial_statement
    (297) instance -> . ID parameterlist instance_bodylist SEMICOLON
    (298) instance -> . SENS_OR parameterlist instance_bodylist SEMICOLON
    (303) instance -> . ID instance_bodylist_noname SEMICOLON
    (304) instance -> . SENS_OR instance_bodylist_noname SEMICOLON
    (358) function -> . FUNCTION width ID SEMICOLON function_statement ENDFUNCTION
    (359) function -> . FUNCTION ID SEMICOLON function_statement ENDFUNCTION
    (377) task -> . TASK ID SEMICOLON task_statement ENDTASK
    (7) pragma -> . LPAREN TIMES ID EQUALS expression TIMES RPAREN
    (8) pragma -> . LPAREN TIMES ID TIMES RPAREN
    (35) sigtypes -> . sigtypes sigtype
    (36) sigtypes -> . sigtype
    (37) sigtype -> . INPUT
    (38) sigtype -> . OUTPUT
    (39) sigtype -> . INOUT
    (40) sigtype -> . TRI
    (41) sigtype -> . REG
    (42) sigtype -> . LOGIC
    (43) sigtype -> . WIRE
    (44) sigtype -> . SIGNED
    (45) sigtype -> . SUPPLY0
    (46) sigtype -> . SUPPLY1

  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for REAL resolved as shift
  ! shift/reduce conflict for PARAMETER resolved as shift
  ! shift/reduce conflict for LOCALPARAM resolved as shift
  ! shift/reduce conflict for GENVAR resolved as shift
  ! shift/reduce conflict for ASSIGN resolved as shift
  ! shift/reduce conflict for ALWAYS resolved as shift
  ! shift/reduce conflict for ALWAYS_FF resolved as shift
  ! shift/reduce conflict for ALWAYS_COMB resolved as shift
  ! shift/reduce conflict for INITIAL resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for SENS_OR resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for TASK resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for INPUT resolved as shift
  ! shift/reduce conflict for OUTPUT resolved as shift
  ! shift/reduce conflict for INOUT resolved as shift
  ! shift/reduce conflict for TRI resolved as shift
  ! shift/reduce conflict for REG resolved as shift
  ! shift/reduce conflict for LOGIC resolved as shift
  ! shift/reduce conflict for WIRE resolved as shift
  ! shift/reduce conflict for SIGNED resolved as shift
  ! shift/reduce conflict for SUPPLY0 resolved as shift
  ! shift/reduce conflict for SUPPLY1 resolved as shift
    ENDGENERATE     reduce using rule 400 (empty -> .)
    IF              shift and go to state 130
    FOR             shift and go to state 131
    INTEGER         shift and go to state 47
    REAL            shift and go to state 49
    PARAMETER       shift and go to state 50
    LOCALPARAM      shift and go to state 51
    GENVAR          shift and go to state 52
    ASSIGN          shift and go to state 53
    ALWAYS          shift and go to state 54
    ALWAYS_FF       shift and go to state 55
    ALWAYS_COMB     shift and go to state 56
    INITIAL         shift and go to state 57
    ID              shift and go to state 58
    SENS_OR         shift and go to state 59
    FUNCTION        shift and go to state 60
    TASK            shift and go to state 61
    LPAREN          shift and go to state 8
    INPUT           shift and go to state 63
    OUTPUT          shift and go to state 64
    INOUT           shift and go to state 65
    TRI             shift and go to state 66
    REG             shift and go to state 67
    LOGIC           shift and go to state 68
    WIRE            shift and go to state 69
    SIGNED          shift and go to state 48
    SUPPLY0         shift and go to state 70
    SUPPLY1         shift and go to state 71

  ! IF              [ reduce using rule 400 (empty -> .) ]
  ! FOR             [ reduce using rule 400 (empty -> .) ]
  ! INTEGER         [ reduce using rule 400 (empty -> .) ]
  ! REAL            [ reduce using rule 400 (empty -> .) ]
  ! PARAMETER       [ reduce using rule 400 (empty -> .) ]
  ! LOCALPARAM      [ reduce using rule 400 (empty -> .) ]
  ! GENVAR          [ reduce using rule 400 (empty -> .) ]
  ! ASSIGN          [ reduce using rule 400 (empty -> .) ]
  ! ALWAYS          [ reduce using rule 400 (empty -> .) ]
  ! ALWAYS_FF       [ reduce using rule 400 (empty -> .) ]
  ! ALWAYS_COMB     [ reduce using rule 400 (empty -> .) ]
  ! INITIAL         [ reduce using rule 400 (empty -> .) ]
  ! ID              [ reduce using rule 400 (empty -> .) ]
  ! SENS_OR         [ reduce using rule 400 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 400 (empty -> .) ]
  ! TASK            [ reduce using rule 400 (empty -> .) ]
  ! LPAREN          [ reduce using rule 400 (empty -> .) ]
  ! INPUT           [ reduce using rule 400 (empty -> .) ]
  ! OUTPUT          [ reduce using rule 400 (empty -> .) ]
  ! INOUT           [ reduce using rule 400 (empty -> .) ]
  ! TRI             [ reduce using rule 400 (empty -> .) ]
  ! REG             [ reduce using rule 400 (empty -> .) ]
  ! LOGIC           [ reduce using rule 400 (empty -> .) ]
  ! WIRE            [ reduce using rule 400 (empty -> .) ]
  ! SIGNED          [ reduce using rule 400 (empty -> .) ]
  ! SUPPLY0         [ reduce using rule 400 (empty -> .) ]
  ! SUPPLY1         [ reduce using rule 400 (empty -> .) ]

    generate_items                 shift and go to state 124
    empty                          shift and go to state 125
    generate_item                  shift and go to state 126
    standard_item                  shift and go to state 127
    generate_if                    shift and go to state 128
    generate_for                   shift and go to state 129
    decl                           shift and go to state 29
    integerdecl                    shift and go to state 30
    realdecl                       shift and go to state 31
    declassign                     shift and go to state 32
    parameterdecl                  shift and go to state 33
    localparamdecl                 shift and go to state 34
    genvardecl                     shift and go to state 35
    assignment                     shift and go to state 36
    always                         shift and go to state 37
    always_ff                      shift and go to state 38
    always_comb                    shift and go to state 39
    initial                        shift and go to state 40
    instance                       shift and go to state 41
    function                       shift and go to state 42
    task                           shift and go to state 43
    pragma                         shift and go to state 44
    sigtypes                       shift and go to state 46
    sigtype                        shift and go to state 62

state 46

    (77) decl -> sigtypes . declnamelist SEMICOLON
    (78) decl -> sigtypes . width declnamelist SEMICOLON
    (83) declassign -> sigtypes . declassign_element SEMICOLON
    (84) declassign -> sigtypes . width declassign_element SEMICOLON
    (35) sigtypes -> sigtypes . sigtype
    (79) declnamelist -> . declnamelist COMMA declname
    (80) declnamelist -> . declname
    (54) width -> . LBRACKET expression COLON expression RBRACKET
    (85) declassign_element -> . ID EQUALS rvalue
    (86) declassign_element -> . delays ID EQUALS delays rvalue
    (37) sigtype -> . INPUT
    (38) sigtype -> . OUTPUT
    (39) sigtype -> . INOUT
    (40) sigtype -> . TRI
    (41) sigtype -> . REG
    (42) sigtype -> . LOGIC
    (43) sigtype -> . WIRE
    (44) sigtype -> . SIGNED
    (45) sigtype -> . SUPPLY0
    (46) sigtype -> . SUPPLY1
    (81) declname -> . ID
    (82) declname -> . ID length
    (240) delays -> . DELAY LPAREN expression RPAREN
    (241) delays -> . DELAY identifier
    (242) delays -> . DELAY intnumber
    (243) delays -> . DELAY floatnumber
    (244) delays -> . empty
    (400) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    LBRACKET        shift and go to state 137
    ID              shift and go to state 138
    INPUT           shift and go to state 63
    OUTPUT          shift and go to state 64
    INOUT           shift and go to state 65
    TRI             shift and go to state 66
    REG             shift and go to state 67
    LOGIC           shift and go to state 68
    WIRE            shift and go to state 69
    SIGNED          shift and go to state 48
    SUPPLY0         shift and go to state 70
    SUPPLY1         shift and go to state 71
    DELAY           shift and go to state 140

  ! ID              [ reduce using rule 400 (empty -> .) ]

    declnamelist                   shift and go to state 132
    width                          shift and go to state 133
    declassign_element             shift and go to state 134
    sigtype                        shift and go to state 135
    declname                       shift and go to state 136
    delays                         shift and go to state 139
    empty                          shift and go to state 141

state 47

    (87) integerdecl -> INTEGER . integernamelist SEMICOLON
    (88) integerdecl -> INTEGER . SIGNED integernamelist SEMICOLON
    (89) integernamelist -> . integernamelist COMMA integername
    (90) integernamelist -> . integername
    (91) integername -> . ID

    SIGNED          shift and go to state 143
    ID              shift and go to state 145

    integernamelist                shift and go to state 142
    integername                    shift and go to state 144

state 48

    (44) sigtype -> SIGNED .

    LBRACKET        reduce using rule 44 (sigtype -> SIGNED .)
    ID              reduce using rule 44 (sigtype -> SIGNED .)
    INPUT           reduce using rule 44 (sigtype -> SIGNED .)
    OUTPUT          reduce using rule 44 (sigtype -> SIGNED .)
    INOUT           reduce using rule 44 (sigtype -> SIGNED .)
    TRI             reduce using rule 44 (sigtype -> SIGNED .)
    REG             reduce using rule 44 (sigtype -> SIGNED .)
    LOGIC           reduce using rule 44 (sigtype -> SIGNED .)
    WIRE            reduce using rule 44 (sigtype -> SIGNED .)
    SIGNED          reduce using rule 44 (sigtype -> SIGNED .)
    SUPPLY0         reduce using rule 44 (sigtype -> SIGNED .)
    SUPPLY1         reduce using rule 44 (sigtype -> SIGNED .)
    DELAY           reduce using rule 44 (sigtype -> SIGNED .)


state 49

    (92) realdecl -> REAL . realnamelist SEMICOLON
    (93) realnamelist -> . realnamelist COMMA realname
    (94) realnamelist -> . realname
    (95) realname -> . ID

    ID              shift and go to state 148

    realnamelist                   shift and go to state 146
    realname                       shift and go to state 147

state 50

    (96) parameterdecl -> PARAMETER . param_substitution_list SEMICOLON
    (97) parameterdecl -> PARAMETER . SIGNED param_substitution_list SEMICOLON
    (98) parameterdecl -> PARAMETER . width param_substitution_list SEMICOLON
    (99) parameterdecl -> PARAMETER . SIGNED width param_substitution_list SEMICOLON
    (100) parameterdecl -> PARAMETER . INTEGER param_substitution_list SEMICOLON
    (106) param_substitution_list -> . param_substitution_list COMMA param_substitution
    (107) param_substitution_list -> . param_substitution
    (54) width -> . LBRACKET expression COLON expression RBRACKET
    (108) param_substitution -> . ID EQUALS rvalue

    SIGNED          shift and go to state 150
    INTEGER         shift and go to state 152
    LBRACKET        shift and go to state 137
    ID              shift and go to state 154

    param_substitution_list        shift and go to state 149
    width                          shift and go to state 151
    param_substitution             shift and go to state 153

state 51

    (101) localparamdecl -> LOCALPARAM . param_substitution_list SEMICOLON
    (102) localparamdecl -> LOCALPARAM . SIGNED param_substitution_list SEMICOLON
    (103) localparamdecl -> LOCALPARAM . width param_substitution_list SEMICOLON
    (104) localparamdecl -> LOCALPARAM . SIGNED width param_substitution_list SEMICOLON
    (105) localparamdecl -> LOCALPARAM . INTEGER param_substitution_list SEMICOLON
    (106) param_substitution_list -> . param_substitution_list COMMA param_substitution
    (107) param_substitution_list -> . param_substitution
    (54) width -> . LBRACKET expression COLON expression RBRACKET
    (108) param_substitution -> . ID EQUALS rvalue

    SIGNED          shift and go to state 156
    INTEGER         shift and go to state 158
    LBRACKET        shift and go to state 137
    ID              shift and go to state 154

    param_substitution_list        shift and go to state 155
    width                          shift and go to state 157
    param_substitution             shift and go to state 153

state 52

    (329) genvardecl -> GENVAR . genvarlist SEMICOLON
    (330) genvarlist -> . genvarlist COMMA genvar
    (331) genvarlist -> . genvar
    (332) genvar -> . ID

    ID              shift and go to state 161

    genvarlist                     shift and go to state 159
    genvar                         shift and go to state 160

state 53

    (109) assignment -> ASSIGN . lvalue EQUALS rvalue SEMICOLON
    (110) assignment -> ASSIGN . delays lvalue EQUALS delays rvalue SEMICOLON
    (125) lvalue -> . lpartselect
    (126) lvalue -> . lpointer
    (127) lvalue -> . lconcat
    (128) lvalue -> . identifier
    (240) delays -> . DELAY LPAREN expression RPAREN
    (241) delays -> . DELAY identifier
    (242) delays -> . DELAY intnumber
    (243) delays -> . DELAY floatnumber
    (244) delays -> . empty
    (111) lpartselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (112) lpartselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (113) lpartselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (114) lpartselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (115) lpartselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (116) lpartselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (117) lpointer -> . pointer
    (118) lconcat -> . LBRACE lconcatlist RBRACE
    (392) identifier -> . ID
    (393) identifier -> . scope ID
    (400) empty -> .
    (184) pointer -> . identifier LBRACKET expression RBRACKET
    (185) pointer -> . pointer LBRACKET expression RBRACKET
    (394) scope -> . identifier DOT
    (395) scope -> . pointer DOT

  ! shift/reduce conflict for LBRACE resolved as shift
  ! shift/reduce conflict for ID resolved as shift
    DELAY           shift and go to state 140
    LBRACE          shift and go to state 169
    ID              shift and go to state 86

  ! LBRACE          [ reduce using rule 400 (empty -> .) ]
  ! ID              [ reduce using rule 400 (empty -> .) ]

    lvalue                         shift and go to state 162
    delays                         shift and go to state 163
    lpartselect                    shift and go to state 164
    lpointer                       shift and go to state 165
    lconcat                        shift and go to state 166
    identifier                     shift and go to state 167
    empty                          shift and go to state 141
    pointer                        shift and go to state 168
    scope                          shift and go to state 108

state 54

    (199) always -> ALWAYS . senslist always_statement
    (202) senslist -> . AT LPAREN edgesigs RPAREN
    (209) senslist -> . empty
    (210) senslist -> . AT levelsig
    (211) senslist -> . AT LPAREN levelsigs RPAREN
    (219) senslist -> . AT TIMES
    (220) senslist -> . AT LPAREN TIMES RPAREN
    (400) empty -> .

  ! shift/reduce conflict for AT resolved as shift
    AT              shift and go to state 171
    IF              reduce using rule 400 (empty -> .)
    CASE            reduce using rule 400 (empty -> .)
    CASEX           reduce using rule 400 (empty -> .)
    UNIQUE          reduce using rule 400 (empty -> .)
    FOR             reduce using rule 400 (empty -> .)
    WHILE           reduce using rule 400 (empty -> .)
    WAIT            reduce using rule 400 (empty -> .)
    FOREVER         reduce using rule 400 (empty -> .)
    BEGIN           reduce using rule 400 (empty -> .)
    FORK            reduce using rule 400 (empty -> .)
    DELAY           reduce using rule 400 (empty -> .)
    DOLLER          reduce using rule 400 (empty -> .)
    DISABLE         reduce using rule 400 (empty -> .)
    LBRACE          reduce using rule 400 (empty -> .)
    ID              reduce using rule 400 (empty -> .)
    SEMICOLON       reduce using rule 400 (empty -> .)

  ! AT              [ reduce using rule 400 (empty -> .) ]

    senslist                       shift and go to state 170
    empty                          shift and go to state 172

state 55

    (200) always_ff -> ALWAYS_FF . senslist always_statement
    (202) senslist -> . AT LPAREN edgesigs RPAREN
    (209) senslist -> . empty
    (210) senslist -> . AT levelsig
    (211) senslist -> . AT LPAREN levelsigs RPAREN
    (219) senslist -> . AT TIMES
    (220) senslist -> . AT LPAREN TIMES RPAREN
    (400) empty -> .

  ! shift/reduce conflict for AT resolved as shift
    AT              shift and go to state 171
    IF              reduce using rule 400 (empty -> .)
    CASE            reduce using rule 400 (empty -> .)
    CASEX           reduce using rule 400 (empty -> .)
    UNIQUE          reduce using rule 400 (empty -> .)
    FOR             reduce using rule 400 (empty -> .)
    WHILE           reduce using rule 400 (empty -> .)
    WAIT            reduce using rule 400 (empty -> .)
    FOREVER         reduce using rule 400 (empty -> .)
    BEGIN           reduce using rule 400 (empty -> .)
    FORK            reduce using rule 400 (empty -> .)
    DELAY           reduce using rule 400 (empty -> .)
    DOLLER          reduce using rule 400 (empty -> .)
    DISABLE         reduce using rule 400 (empty -> .)
    LBRACE          reduce using rule 400 (empty -> .)
    ID              reduce using rule 400 (empty -> .)
    SEMICOLON       reduce using rule 400 (empty -> .)

  ! AT              [ reduce using rule 400 (empty -> .) ]

    senslist                       shift and go to state 173
    empty                          shift and go to state 172

state 56

    (201) always_comb -> ALWAYS_COMB . senslist always_statement
    (202) senslist -> . AT LPAREN edgesigs RPAREN
    (209) senslist -> . empty
    (210) senslist -> . AT levelsig
    (211) senslist -> . AT LPAREN levelsigs RPAREN
    (219) senslist -> . AT TIMES
    (220) senslist -> . AT LPAREN TIMES RPAREN
    (400) empty -> .

  ! shift/reduce conflict for AT resolved as shift
    AT              shift and go to state 171
    IF              reduce using rule 400 (empty -> .)
    CASE            reduce using rule 400 (empty -> .)
    CASEX           reduce using rule 400 (empty -> .)
    UNIQUE          reduce using rule 400 (empty -> .)
    FOR             reduce using rule 400 (empty -> .)
    WHILE           reduce using rule 400 (empty -> .)
    WAIT            reduce using rule 400 (empty -> .)
    FOREVER         reduce using rule 400 (empty -> .)
    BEGIN           reduce using rule 400 (empty -> .)
    FORK            reduce using rule 400 (empty -> .)
    DELAY           reduce using rule 400 (empty -> .)
    DOLLER          reduce using rule 400 (empty -> .)
    DISABLE         reduce using rule 400 (empty -> .)
    LBRACE          reduce using rule 400 (empty -> .)
    ID              reduce using rule 400 (empty -> .)
    SEMICOLON       reduce using rule 400 (empty -> .)

  ! AT              [ reduce using rule 400 (empty -> .) ]

    senslist                       shift and go to state 174
    empty                          shift and go to state 172

state 57

    (290) initial -> INITIAL . initial_statement
    (291) initial_statement -> . basic_statement
    (221) basic_statement -> . if_statement
    (222) basic_statement -> . case_statement
    (223) basic_statement -> . casex_statement
    (224) basic_statement -> . unique_case_statement
    (225) basic_statement -> . for_statement
    (226) basic_statement -> . while_statement
    (227) basic_statement -> . event_statement
    (228) basic_statement -> . wait_statement
    (229) basic_statement -> . forever_statement
    (230) basic_statement -> . block
    (231) basic_statement -> . namedblock
    (232) basic_statement -> . parallelblock
    (233) basic_statement -> . blocking_substitution
    (234) basic_statement -> . nonblocking_substitution
    (235) basic_statement -> . single_statement
    (262) if_statement -> . IF LPAREN cond RPAREN true_statement ELSE else_statement
    (263) if_statement -> . IF LPAREN cond RPAREN true_statement
    (264) if_statement -> . delays IF LPAREN cond RPAREN true_statement ELSE else_statement
    (265) if_statement -> . delays IF LPAREN cond RPAREN true_statement
    (280) case_statement -> . CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE
    (281) casex_statement -> . CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE
    (282) unique_case_statement -> . UNIQUE CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE
    (270) for_statement -> . FOR LPAREN forpre forcond forpost RPAREN forcontent_statement
    (278) while_statement -> . WHILE LPAREN cond RPAREN whilecontent_statement
    (292) event_statement -> . senslist SEMICOLON
    (293) wait_statement -> . WAIT LPAREN cond RPAREN waitcontent_statement
    (296) forever_statement -> . FOREVER basic_statement
    (245) block -> . BEGIN block_statements END
    (246) block -> . BEGIN END
    (250) namedblock -> . BEGIN COLON ID namedblock_statements END
    (251) namedblock -> . BEGIN COLON ID END
    (260) parallelblock -> . FORK block_statements JOIN
    (261) parallelblock -> . FORK JOIN
    (237) blocking_substitution -> . delays lvalue EQUALS delays rvalue SEMICOLON
    (239) nonblocking_substitution -> . delays lvalue LE delays rvalue SEMICOLON
    (397) single_statement -> . DELAY expression SEMICOLON
    (398) single_statement -> . systemcall SEMICOLON
    (399) single_statement -> . disable SEMICOLON
    (240) delays -> . DELAY LPAREN expression RPAREN
    (241) delays -> . DELAY identifier
    (242) delays -> . DELAY intnumber
    (243) delays -> . DELAY floatnumber
    (244) delays -> . empty
    (202) senslist -> . AT LPAREN edgesigs RPAREN
    (209) senslist -> . empty
    (210) senslist -> . AT levelsig
    (211) senslist -> . AT LPAREN levelsigs RPAREN
    (219) senslist -> . AT TIMES
    (220) senslist -> . AT LPAREN TIMES RPAREN
    (351) systemcall -> . DOLLER ID
    (352) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (353) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (396) disable -> . DISABLE ID
    (400) empty -> .

  ! shift/reduce conflict for IF resolved as shift
    IF              shift and go to state 192
    CASE            shift and go to state 194
    CASEX           shift and go to state 195
    UNIQUE          shift and go to state 196
    FOR             shift and go to state 197
    WHILE           shift and go to state 198
    WAIT            shift and go to state 200
    FOREVER         shift and go to state 201
    BEGIN           shift and go to state 202
    FORK            shift and go to state 203
    DELAY           shift and go to state 204
    AT              shift and go to state 171
    DOLLER          shift and go to state 107
    DISABLE         shift and go to state 208
    LBRACE          reduce using rule 400 (empty -> .)
    ID              reduce using rule 400 (empty -> .)
    SEMICOLON       reduce using rule 400 (empty -> .)

  ! IF              [ reduce using rule 400 (empty -> .) ]

    initial_statement              shift and go to state 175
    basic_statement                shift and go to state 176
    if_statement                   shift and go to state 177
    case_statement                 shift and go to state 178
    casex_statement                shift and go to state 179
    unique_case_statement          shift and go to state 180
    for_statement                  shift and go to state 181
    while_statement                shift and go to state 182
    event_statement                shift and go to state 183
    wait_statement                 shift and go to state 184
    forever_statement              shift and go to state 185
    block                          shift and go to state 186
    namedblock                     shift and go to state 187
    parallelblock                  shift and go to state 188
    blocking_substitution          shift and go to state 189
    nonblocking_substitution       shift and go to state 190
    single_statement               shift and go to state 191
    delays                         shift and go to state 193
    senslist                       shift and go to state 199
    systemcall                     shift and go to state 205
    disable                        shift and go to state 206
    empty                          shift and go to state 207

state 58

    (297) instance -> ID . parameterlist instance_bodylist SEMICOLON
    (303) instance -> ID . instance_bodylist_noname SEMICOLON
    (308) parameterlist -> . DELAY LPAREN param_args RPAREN
    (309) parameterlist -> . DELAY LPAREN param_args_noname RPAREN
    (310) parameterlist -> . empty
    (305) instance_bodylist_noname -> . instance_bodylist_noname COMMA instance_body_noname
    (306) instance_bodylist_noname -> . instance_body_noname
    (400) empty -> .
    (307) instance_body_noname -> . LPAREN instance_ports RPAREN

    DELAY           shift and go to state 211
    ID              reduce using rule 400 (empty -> .)
    LPAREN          shift and go to state 212

    parameterlist                  shift and go to state 209
    instance_bodylist_noname       shift and go to state 210
    empty                          shift and go to state 213
    instance_body_noname           shift and go to state 214

state 59

    (298) instance -> SENS_OR . parameterlist instance_bodylist SEMICOLON
    (304) instance -> SENS_OR . instance_bodylist_noname SEMICOLON
    (308) parameterlist -> . DELAY LPAREN param_args RPAREN
    (309) parameterlist -> . DELAY LPAREN param_args_noname RPAREN
    (310) parameterlist -> . empty
    (305) instance_bodylist_noname -> . instance_bodylist_noname COMMA instance_body_noname
    (306) instance_bodylist_noname -> . instance_body_noname
    (400) empty -> .
    (307) instance_body_noname -> . LPAREN instance_ports RPAREN

    DELAY           shift and go to state 211
    ID              reduce using rule 400 (empty -> .)
    LPAREN          shift and go to state 212

    parameterlist                  shift and go to state 215
    instance_bodylist_noname       shift and go to state 216
    empty                          shift and go to state 213
    instance_body_noname           shift and go to state 214

state 60

    (358) function -> FUNCTION . width ID SEMICOLON function_statement ENDFUNCTION
    (359) function -> FUNCTION . ID SEMICOLON function_statement ENDFUNCTION
    (54) width -> . LBRACKET expression COLON expression RBRACKET

    ID              shift and go to state 218
    LBRACKET        shift and go to state 137

    width                          shift and go to state 217

state 61

    (377) task -> TASK . ID SEMICOLON task_statement ENDTASK

    ID              shift and go to state 219


state 62

    (36) sigtypes -> sigtype .

    LBRACKET        reduce using rule 36 (sigtypes -> sigtype .)
    ID              reduce using rule 36 (sigtypes -> sigtype .)
    INPUT           reduce using rule 36 (sigtypes -> sigtype .)
    OUTPUT          reduce using rule 36 (sigtypes -> sigtype .)
    INOUT           reduce using rule 36 (sigtypes -> sigtype .)
    TRI             reduce using rule 36 (sigtypes -> sigtype .)
    REG             reduce using rule 36 (sigtypes -> sigtype .)
    LOGIC           reduce using rule 36 (sigtypes -> sigtype .)
    WIRE            reduce using rule 36 (sigtypes -> sigtype .)
    SIGNED          reduce using rule 36 (sigtypes -> sigtype .)
    SUPPLY0         reduce using rule 36 (sigtypes -> sigtype .)
    SUPPLY1         reduce using rule 36 (sigtypes -> sigtype .)
    DELAY           reduce using rule 36 (sigtypes -> sigtype .)


state 63

    (37) sigtype -> INPUT .

    LBRACKET        reduce using rule 37 (sigtype -> INPUT .)
    ID              reduce using rule 37 (sigtype -> INPUT .)
    INPUT           reduce using rule 37 (sigtype -> INPUT .)
    OUTPUT          reduce using rule 37 (sigtype -> INPUT .)
    INOUT           reduce using rule 37 (sigtype -> INPUT .)
    TRI             reduce using rule 37 (sigtype -> INPUT .)
    REG             reduce using rule 37 (sigtype -> INPUT .)
    LOGIC           reduce using rule 37 (sigtype -> INPUT .)
    WIRE            reduce using rule 37 (sigtype -> INPUT .)
    SIGNED          reduce using rule 37 (sigtype -> INPUT .)
    SUPPLY0         reduce using rule 37 (sigtype -> INPUT .)
    SUPPLY1         reduce using rule 37 (sigtype -> INPUT .)
    DELAY           reduce using rule 37 (sigtype -> INPUT .)


state 64

    (38) sigtype -> OUTPUT .

    LBRACKET        reduce using rule 38 (sigtype -> OUTPUT .)
    ID              reduce using rule 38 (sigtype -> OUTPUT .)
    INPUT           reduce using rule 38 (sigtype -> OUTPUT .)
    OUTPUT          reduce using rule 38 (sigtype -> OUTPUT .)
    INOUT           reduce using rule 38 (sigtype -> OUTPUT .)
    TRI             reduce using rule 38 (sigtype -> OUTPUT .)
    REG             reduce using rule 38 (sigtype -> OUTPUT .)
    LOGIC           reduce using rule 38 (sigtype -> OUTPUT .)
    WIRE            reduce using rule 38 (sigtype -> OUTPUT .)
    SIGNED          reduce using rule 38 (sigtype -> OUTPUT .)
    SUPPLY0         reduce using rule 38 (sigtype -> OUTPUT .)
    SUPPLY1         reduce using rule 38 (sigtype -> OUTPUT .)
    DELAY           reduce using rule 38 (sigtype -> OUTPUT .)


state 65

    (39) sigtype -> INOUT .

    LBRACKET        reduce using rule 39 (sigtype -> INOUT .)
    ID              reduce using rule 39 (sigtype -> INOUT .)
    INPUT           reduce using rule 39 (sigtype -> INOUT .)
    OUTPUT          reduce using rule 39 (sigtype -> INOUT .)
    INOUT           reduce using rule 39 (sigtype -> INOUT .)
    TRI             reduce using rule 39 (sigtype -> INOUT .)
    REG             reduce using rule 39 (sigtype -> INOUT .)
    LOGIC           reduce using rule 39 (sigtype -> INOUT .)
    WIRE            reduce using rule 39 (sigtype -> INOUT .)
    SIGNED          reduce using rule 39 (sigtype -> INOUT .)
    SUPPLY0         reduce using rule 39 (sigtype -> INOUT .)
    SUPPLY1         reduce using rule 39 (sigtype -> INOUT .)
    DELAY           reduce using rule 39 (sigtype -> INOUT .)


state 66

    (40) sigtype -> TRI .

    LBRACKET        reduce using rule 40 (sigtype -> TRI .)
    ID              reduce using rule 40 (sigtype -> TRI .)
    INPUT           reduce using rule 40 (sigtype -> TRI .)
    OUTPUT          reduce using rule 40 (sigtype -> TRI .)
    INOUT           reduce using rule 40 (sigtype -> TRI .)
    TRI             reduce using rule 40 (sigtype -> TRI .)
    REG             reduce using rule 40 (sigtype -> TRI .)
    LOGIC           reduce using rule 40 (sigtype -> TRI .)
    WIRE            reduce using rule 40 (sigtype -> TRI .)
    SIGNED          reduce using rule 40 (sigtype -> TRI .)
    SUPPLY0         reduce using rule 40 (sigtype -> TRI .)
    SUPPLY1         reduce using rule 40 (sigtype -> TRI .)
    DELAY           reduce using rule 40 (sigtype -> TRI .)


state 67

    (41) sigtype -> REG .

    LBRACKET        reduce using rule 41 (sigtype -> REG .)
    ID              reduce using rule 41 (sigtype -> REG .)
    INPUT           reduce using rule 41 (sigtype -> REG .)
    OUTPUT          reduce using rule 41 (sigtype -> REG .)
    INOUT           reduce using rule 41 (sigtype -> REG .)
    TRI             reduce using rule 41 (sigtype -> REG .)
    REG             reduce using rule 41 (sigtype -> REG .)
    LOGIC           reduce using rule 41 (sigtype -> REG .)
    WIRE            reduce using rule 41 (sigtype -> REG .)
    SIGNED          reduce using rule 41 (sigtype -> REG .)
    SUPPLY0         reduce using rule 41 (sigtype -> REG .)
    SUPPLY1         reduce using rule 41 (sigtype -> REG .)
    DELAY           reduce using rule 41 (sigtype -> REG .)


state 68

    (42) sigtype -> LOGIC .

    LBRACKET        reduce using rule 42 (sigtype -> LOGIC .)
    ID              reduce using rule 42 (sigtype -> LOGIC .)
    INPUT           reduce using rule 42 (sigtype -> LOGIC .)
    OUTPUT          reduce using rule 42 (sigtype -> LOGIC .)
    INOUT           reduce using rule 42 (sigtype -> LOGIC .)
    TRI             reduce using rule 42 (sigtype -> LOGIC .)
    REG             reduce using rule 42 (sigtype -> LOGIC .)
    LOGIC           reduce using rule 42 (sigtype -> LOGIC .)
    WIRE            reduce using rule 42 (sigtype -> LOGIC .)
    SIGNED          reduce using rule 42 (sigtype -> LOGIC .)
    SUPPLY0         reduce using rule 42 (sigtype -> LOGIC .)
    SUPPLY1         reduce using rule 42 (sigtype -> LOGIC .)
    DELAY           reduce using rule 42 (sigtype -> LOGIC .)


state 69

    (43) sigtype -> WIRE .

    LBRACKET        reduce using rule 43 (sigtype -> WIRE .)
    ID              reduce using rule 43 (sigtype -> WIRE .)
    INPUT           reduce using rule 43 (sigtype -> WIRE .)
    OUTPUT          reduce using rule 43 (sigtype -> WIRE .)
    INOUT           reduce using rule 43 (sigtype -> WIRE .)
    TRI             reduce using rule 43 (sigtype -> WIRE .)
    REG             reduce using rule 43 (sigtype -> WIRE .)
    LOGIC           reduce using rule 43 (sigtype -> WIRE .)
    WIRE            reduce using rule 43 (sigtype -> WIRE .)
    SIGNED          reduce using rule 43 (sigtype -> WIRE .)
    SUPPLY0         reduce using rule 43 (sigtype -> WIRE .)
    SUPPLY1         reduce using rule 43 (sigtype -> WIRE .)
    DELAY           reduce using rule 43 (sigtype -> WIRE .)


state 70

    (45) sigtype -> SUPPLY0 .

    LBRACKET        reduce using rule 45 (sigtype -> SUPPLY0 .)
    ID              reduce using rule 45 (sigtype -> SUPPLY0 .)
    INPUT           reduce using rule 45 (sigtype -> SUPPLY0 .)
    OUTPUT          reduce using rule 45 (sigtype -> SUPPLY0 .)
    INOUT           reduce using rule 45 (sigtype -> SUPPLY0 .)
    TRI             reduce using rule 45 (sigtype -> SUPPLY0 .)
    REG             reduce using rule 45 (sigtype -> SUPPLY0 .)
    LOGIC           reduce using rule 45 (sigtype -> SUPPLY0 .)
    WIRE            reduce using rule 45 (sigtype -> SUPPLY0 .)
    SIGNED          reduce using rule 45 (sigtype -> SUPPLY0 .)
    SUPPLY0         reduce using rule 45 (sigtype -> SUPPLY0 .)
    SUPPLY1         reduce using rule 45 (sigtype -> SUPPLY0 .)
    DELAY           reduce using rule 45 (sigtype -> SUPPLY0 .)


state 71

    (46) sigtype -> SUPPLY1 .

    LBRACKET        reduce using rule 46 (sigtype -> SUPPLY1 .)
    ID              reduce using rule 46 (sigtype -> SUPPLY1 .)
    INPUT           reduce using rule 46 (sigtype -> SUPPLY1 .)
    OUTPUT          reduce using rule 46 (sigtype -> SUPPLY1 .)
    INOUT           reduce using rule 46 (sigtype -> SUPPLY1 .)
    TRI             reduce using rule 46 (sigtype -> SUPPLY1 .)
    REG             reduce using rule 46 (sigtype -> SUPPLY1 .)
    LOGIC           reduce using rule 46 (sigtype -> SUPPLY1 .)
    WIRE            reduce using rule 46 (sigtype -> SUPPLY1 .)
    SIGNED          reduce using rule 46 (sigtype -> SUPPLY1 .)
    SUPPLY0         reduce using rule 46 (sigtype -> SUPPLY1 .)
    SUPPLY1         reduce using rule 46 (sigtype -> SUPPLY1 .)
    DELAY           reduce using rule 46 (sigtype -> SUPPLY1 .)


state 72

    (28) portlist -> LPAREN ports . RPAREN SEMICOLON
    (32) ports -> ports . COMMA portname

    RPAREN          shift and go to state 220
    COMMA           shift and go to state 221


state 73

    (30) portlist -> LPAREN RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 222


state 74

    (29) portlist -> LPAREN ioports . RPAREN SEMICOLON
    (47) ioports -> ioports . COMMA ioport

    RPAREN          shift and go to state 223
    COMMA           shift and go to state 224


state 75

    (33) ports -> portname .

    RPAREN          reduce using rule 33 (ports -> portname .)
    COMMA           reduce using rule 33 (ports -> portname .)


state 76

    (48) ioports -> ioport_head .

    RPAREN          reduce using rule 48 (ioports -> ioport_head .)
    COMMA           reduce using rule 48 (ioports -> ioport_head .)


state 77

    (34) portname -> ID .

    RPAREN          reduce using rule 34 (portname -> ID .)
    COMMA           reduce using rule 34 (portname -> ID .)


state 78

    (51) ioport_head -> sigtypes . portname
    (52) ioport_head -> sigtypes . width portname
    (35) sigtypes -> sigtypes . sigtype
    (34) portname -> . ID
    (54) width -> . LBRACKET expression COLON expression RBRACKET
    (37) sigtype -> . INPUT
    (38) sigtype -> . OUTPUT
    (39) sigtype -> . INOUT
    (40) sigtype -> . TRI
    (41) sigtype -> . REG
    (42) sigtype -> . LOGIC
    (43) sigtype -> . WIRE
    (44) sigtype -> . SIGNED
    (45) sigtype -> . SUPPLY0
    (46) sigtype -> . SUPPLY1

    ID              shift and go to state 77
    LBRACKET        shift and go to state 137
    INPUT           shift and go to state 63
    OUTPUT          shift and go to state 64
    INOUT           shift and go to state 65
    TRI             shift and go to state 66
    REG             shift and go to state 67
    LOGIC           shift and go to state 68
    WIRE            shift and go to state 69
    SIGNED          shift and go to state 48
    SUPPLY0         shift and go to state 70
    SUPPLY1         shift and go to state 71

    portname                       shift and go to state 225
    width                          shift and go to state 226
    sigtype                        shift and go to state 135

state 79

    (12) paramlist -> DELAY LPAREN params . RPAREN

    RPAREN          shift and go to state 227


state 80

    (14) params -> params_begin . param_end
    (15) params_begin -> params_begin . param
    (23) param_end -> . PARAMETER param_substitution_list
    (24) param_end -> . PARAMETER SIGNED param_substitution_list
    (25) param_end -> . PARAMETER width param_substitution_list
    (26) param_end -> . PARAMETER SIGNED width param_substitution_list
    (27) param_end -> . PARAMETER INTEGER param_substitution_list
    (18) param -> . PARAMETER param_substitution_list COMMA
    (19) param -> . PARAMETER SIGNED param_substitution_list COMMA
    (20) param -> . PARAMETER width param_substitution_list COMMA
    (21) param -> . PARAMETER SIGNED width param_substitution_list COMMA
    (22) param -> . PARAMETER INTEGER param_substitution_list COMMA

    PARAMETER       shift and go to state 83

    param_end                      shift and go to state 228
    param                          shift and go to state 229

state 81

    (17) params -> param_end .

    RPAREN          reduce using rule 17 (params -> param_end .)


state 82

    (16) params_begin -> param .

    PARAMETER       reduce using rule 16 (params_begin -> param .)


state 83

    (23) param_end -> PARAMETER . param_substitution_list
    (24) param_end -> PARAMETER . SIGNED param_substitution_list
    (25) param_end -> PARAMETER . width param_substitution_list
    (26) param_end -> PARAMETER . SIGNED width param_substitution_list
    (27) param_end -> PARAMETER . INTEGER param_substitution_list
    (18) param -> PARAMETER . param_substitution_list COMMA
    (19) param -> PARAMETER . SIGNED param_substitution_list COMMA
    (20) param -> PARAMETER . width param_substitution_list COMMA
    (21) param -> PARAMETER . SIGNED width param_substitution_list COMMA
    (22) param -> PARAMETER . INTEGER param_substitution_list COMMA
    (106) param_substitution_list -> . param_substitution_list COMMA param_substitution
    (107) param_substitution_list -> . param_substitution
    (54) width -> . LBRACKET expression COLON expression RBRACKET
    (108) param_substitution -> . ID EQUALS rvalue

    SIGNED          shift and go to state 231
    INTEGER         shift and go to state 233
    LBRACKET        shift and go to state 137
    ID              shift and go to state 154

    param_substitution_list        shift and go to state 230
    width                          shift and go to state 232
    param_substitution             shift and go to state 153

state 84

    (8) pragma -> LPAREN TIMES ID TIMES RPAREN .

    MODULE          reduce using rule 8 (pragma -> LPAREN TIMES ID TIMES RPAREN .)
    LPAREN          reduce using rule 8 (pragma -> LPAREN TIMES ID TIMES RPAREN .)
    $end            reduce using rule 8 (pragma -> LPAREN TIMES ID TIMES RPAREN .)
    ENDMODULE       reduce using rule 8 (pragma -> LPAREN TIMES ID TIMES RPAREN .)
    GENERATE        reduce using rule 8 (pragma -> LPAREN TIMES ID TIMES RPAREN .)
    INTEGER         reduce using rule 8 (pragma -> LPAREN TIMES ID TIMES RPAREN .)
    REAL            reduce using rule 8 (pragma -> LPAREN TIMES ID TIMES RPAREN .)
    PARAMETER       reduce using rule 8 (pragma -> LPAREN TIMES ID TIMES RPAREN .)
    LOCALPARAM      reduce using rule 8 (pragma -> LPAREN TIMES ID TIMES RPAREN .)
    GENVAR          reduce using rule 8 (pragma -> LPAREN TIMES ID TIMES RPAREN .)
    ASSIGN          reduce using rule 8 (pragma -> LPAREN TIMES ID TIMES RPAREN .)
    ALWAYS          reduce using rule 8 (pragma -> LPAREN TIMES ID TIMES RPAREN .)
    ALWAYS_FF       reduce using rule 8 (pragma -> LPAREN TIMES ID TIMES RPAREN .)
    ALWAYS_COMB     reduce using rule 8 (pragma -> LPAREN TIMES ID TIMES RPAREN .)
    INITIAL         reduce using rule 8 (pragma -> LPAREN TIMES ID TIMES RPAREN .)
    ID              reduce using rule 8 (pragma -> LPAREN TIMES ID TIMES RPAREN .)
    SENS_OR         reduce using rule 8 (pragma -> LPAREN TIMES ID TIMES RPAREN .)
    FUNCTION        reduce using rule 8 (pragma -> LPAREN TIMES ID TIMES RPAREN .)
    TASK            reduce using rule 8 (pragma -> LPAREN TIMES ID TIMES RPAREN .)
    INPUT           reduce using rule 8 (pragma -> LPAREN TIMES ID TIMES RPAREN .)
    OUTPUT          reduce using rule 8 (pragma -> LPAREN TIMES ID TIMES RPAREN .)
    INOUT           reduce using rule 8 (pragma -> LPAREN TIMES ID TIMES RPAREN .)
    TRI             reduce using rule 8 (pragma -> LPAREN TIMES ID TIMES RPAREN .)
    REG             reduce using rule 8 (pragma -> LPAREN TIMES ID TIMES RPAREN .)
    LOGIC           reduce using rule 8 (pragma -> LPAREN TIMES ID TIMES RPAREN .)
    WIRE            reduce using rule 8 (pragma -> LPAREN TIMES ID TIMES RPAREN .)
    SIGNED          reduce using rule 8 (pragma -> LPAREN TIMES ID TIMES RPAREN .)
    SUPPLY0         reduce using rule 8 (pragma -> LPAREN TIMES ID TIMES RPAREN .)
    SUPPLY1         reduce using rule 8 (pragma -> LPAREN TIMES ID TIMES RPAREN .)
    ENDGENERATE     reduce using rule 8 (pragma -> LPAREN TIMES ID TIMES RPAREN .)
    IF              reduce using rule 8 (pragma -> LPAREN TIMES ID TIMES RPAREN .)
    FOR             reduce using rule 8 (pragma -> LPAREN TIMES ID TIMES RPAREN .)
    ELSE            reduce using rule 8 (pragma -> LPAREN TIMES ID TIMES RPAREN .)
    END             reduce using rule 8 (pragma -> LPAREN TIMES ID TIMES RPAREN .)


state 85

    (165) expression -> LPAREN . expression RPAREN
    (130) expression -> . MINUS expression
    (131) expression -> . PLUS expression
    (132) expression -> . LNOT expression
    (133) expression -> . NOT expression
    (134) expression -> . AND expression
    (135) expression -> . NAND expression
    (136) expression -> . NOR expression
    (137) expression -> . OR expression
    (138) expression -> . XOR expression
    (139) expression -> . XNOR expression
    (140) expression -> . expression POWER expression
    (141) expression -> . expression TIMES expression
    (142) expression -> . expression DIVIDE expression
    (143) expression -> . expression MOD expression
    (144) expression -> . expression PLUS expression
    (145) expression -> . expression MINUS expression
    (146) expression -> . expression LSHIFT expression
    (147) expression -> . expression RSHIFT expression
    (148) expression -> . expression LSHIFTA expression
    (149) expression -> . expression RSHIFTA expression
    (150) expression -> . expression LT expression
    (151) expression -> . expression GT expression
    (152) expression -> . expression LE expression
    (153) expression -> . expression GE expression
    (154) expression -> . expression EQ expression
    (155) expression -> . expression NE expression
    (156) expression -> . expression EQL expression
    (157) expression -> . expression NEL expression
    (158) expression -> . expression AND expression
    (159) expression -> . expression XOR expression
    (160) expression -> . expression XNOR expression
    (161) expression -> . expression OR expression
    (162) expression -> . expression LAND expression
    (163) expression -> . expression LOR expression
    (164) expression -> . expression COND expression COLON expression
    (165) expression -> . LPAREN expression RPAREN
    (166) expression -> . concat
    (167) expression -> . repeat
    (168) expression -> . partselect
    (169) expression -> . pointer
    (170) expression -> . functioncall
    (171) expression -> . systemcall
    (172) expression -> . identifier
    (173) expression -> . const_expression
    (174) concat -> . LBRACE concatlist RBRACE
    (177) repeat -> . LBRACE expression concat RBRACE
    (178) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (179) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (180) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (181) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (182) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (183) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (184) pointer -> . identifier LBRACKET expression RBRACKET
    (185) pointer -> . pointer LBRACKET expression RBRACKET
    (373) functioncall -> . identifier LPAREN func_args RPAREN
    (351) systemcall -> . DOLLER ID
    (352) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (353) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (392) identifier -> . ID
    (393) identifier -> . scope ID
    (186) const_expression -> . intnumber
    (187) const_expression -> . floatnumber
    (188) const_expression -> . stringliteral
    (394) scope -> . identifier DOT
    (395) scope -> . pointer DOT
    (190) intnumber -> . INTNUMBER_DEC
    (191) intnumber -> . SIGNED_INTNUMBER_DEC
    (192) intnumber -> . INTNUMBER_BIN
    (193) intnumber -> . SIGNED_INTNUMBER_BIN
    (194) intnumber -> . INTNUMBER_OCT
    (195) intnumber -> . SIGNED_INTNUMBER_OCT
    (196) intnumber -> . INTNUMBER_HEX
    (197) intnumber -> . SIGNED_INTNUMBER_HEX
    (189) floatnumber -> . FLOATNUMBER
    (198) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 88
    PLUS            shift and go to state 89
    LNOT            shift and go to state 90
    NOT             shift and go to state 91
    AND             shift and go to state 92
    NAND            shift and go to state 93
    NOR             shift and go to state 94
    OR              shift and go to state 95
    XOR             shift and go to state 96
    XNOR            shift and go to state 97
    LPAREN          shift and go to state 85
    LBRACE          shift and go to state 106
    DOLLER          shift and go to state 107
    ID              shift and go to state 86
    INTNUMBER_DEC   shift and go to state 112
    SIGNED_INTNUMBER_DEC shift and go to state 113
    INTNUMBER_BIN   shift and go to state 114
    SIGNED_INTNUMBER_BIN shift and go to state 115
    INTNUMBER_OCT   shift and go to state 116
    SIGNED_INTNUMBER_OCT shift and go to state 117
    INTNUMBER_HEX   shift and go to state 118
    SIGNED_INTNUMBER_HEX shift and go to state 119
    FLOATNUMBER     shift and go to state 120
    STRING_LITERAL  shift and go to state 121

    expression                     shift and go to state 234
    concat                         shift and go to state 98
    repeat                         shift and go to state 99
    partselect                     shift and go to state 100
    pointer                        shift and go to state 101
    functioncall                   shift and go to state 102
    systemcall                     shift and go to state 103
    identifier                     shift and go to state 104
    const_expression               shift and go to state 105
    scope                          shift and go to state 108
    intnumber                      shift and go to state 109
    floatnumber                    shift and go to state 110
    stringliteral                  shift and go to state 111

state 86

    (392) identifier -> ID .

    LBRACKET        reduce using rule 392 (identifier -> ID .)
    LPAREN          reduce using rule 392 (identifier -> ID .)
    DOT             reduce using rule 392 (identifier -> ID .)
    TIMES           reduce using rule 392 (identifier -> ID .)
    POWER           reduce using rule 392 (identifier -> ID .)
    DIVIDE          reduce using rule 392 (identifier -> ID .)
    MOD             reduce using rule 392 (identifier -> ID .)
    PLUS            reduce using rule 392 (identifier -> ID .)
    MINUS           reduce using rule 392 (identifier -> ID .)
    LSHIFT          reduce using rule 392 (identifier -> ID .)
    RSHIFT          reduce using rule 392 (identifier -> ID .)
    LSHIFTA         reduce using rule 392 (identifier -> ID .)
    RSHIFTA         reduce using rule 392 (identifier -> ID .)
    LT              reduce using rule 392 (identifier -> ID .)
    GT              reduce using rule 392 (identifier -> ID .)
    LE              reduce using rule 392 (identifier -> ID .)
    GE              reduce using rule 392 (identifier -> ID .)
    EQ              reduce using rule 392 (identifier -> ID .)
    NE              reduce using rule 392 (identifier -> ID .)
    EQL             reduce using rule 392 (identifier -> ID .)
    NEL             reduce using rule 392 (identifier -> ID .)
    AND             reduce using rule 392 (identifier -> ID .)
    XOR             reduce using rule 392 (identifier -> ID .)
    XNOR            reduce using rule 392 (identifier -> ID .)
    OR              reduce using rule 392 (identifier -> ID .)
    LAND            reduce using rule 392 (identifier -> ID .)
    LOR             reduce using rule 392 (identifier -> ID .)
    COND            reduce using rule 392 (identifier -> ID .)
    EQUALS          reduce using rule 392 (identifier -> ID .)
    RPAREN          reduce using rule 392 (identifier -> ID .)
    LBRACE          reduce using rule 392 (identifier -> ID .)
    RBRACE          reduce using rule 392 (identifier -> ID .)
    COMMA           reduce using rule 392 (identifier -> ID .)
    COLON           reduce using rule 392 (identifier -> ID .)
    SEMICOLON       reduce using rule 392 (identifier -> ID .)
    PLUSCOLON       reduce using rule 392 (identifier -> ID .)
    MINUSCOLON      reduce using rule 392 (identifier -> ID .)
    RBRACKET        reduce using rule 392 (identifier -> ID .)
    ID              reduce using rule 392 (identifier -> ID .)
    LNOT            reduce using rule 392 (identifier -> ID .)
    NOT             reduce using rule 392 (identifier -> ID .)
    NAND            reduce using rule 392 (identifier -> ID .)
    NOR             reduce using rule 392 (identifier -> ID .)
    DOLLER          reduce using rule 392 (identifier -> ID .)
    INTNUMBER_DEC   reduce using rule 392 (identifier -> ID .)
    SIGNED_INTNUMBER_DEC reduce using rule 392 (identifier -> ID .)
    INTNUMBER_BIN   reduce using rule 392 (identifier -> ID .)
    SIGNED_INTNUMBER_BIN reduce using rule 392 (identifier -> ID .)
    INTNUMBER_OCT   reduce using rule 392 (identifier -> ID .)
    SIGNED_INTNUMBER_OCT reduce using rule 392 (identifier -> ID .)
    INTNUMBER_HEX   reduce using rule 392 (identifier -> ID .)
    SIGNED_INTNUMBER_HEX reduce using rule 392 (identifier -> ID .)
    FLOATNUMBER     reduce using rule 392 (identifier -> ID .)
    STRING_LITERAL  reduce using rule 392 (identifier -> ID .)
    IF              reduce using rule 392 (identifier -> ID .)
    CASE            reduce using rule 392 (identifier -> ID .)
    CASEX           reduce using rule 392 (identifier -> ID .)
    UNIQUE          reduce using rule 392 (identifier -> ID .)
    FOR             reduce using rule 392 (identifier -> ID .)
    WHILE           reduce using rule 392 (identifier -> ID .)
    WAIT            reduce using rule 392 (identifier -> ID .)
    FOREVER         reduce using rule 392 (identifier -> ID .)
    BEGIN           reduce using rule 392 (identifier -> ID .)
    FORK            reduce using rule 392 (identifier -> ID .)
    DELAY           reduce using rule 392 (identifier -> ID .)
    AT              reduce using rule 392 (identifier -> ID .)
    DISABLE         reduce using rule 392 (identifier -> ID .)
    SENS_OR         reduce using rule 392 (identifier -> ID .)


state 87

    (7) pragma -> LPAREN TIMES ID EQUALS expression . TIMES RPAREN
    (140) expression -> expression . POWER expression
    (141) expression -> expression . TIMES expression
    (142) expression -> expression . DIVIDE expression
    (143) expression -> expression . MOD expression
    (144) expression -> expression . PLUS expression
    (145) expression -> expression . MINUS expression
    (146) expression -> expression . LSHIFT expression
    (147) expression -> expression . RSHIFT expression
    (148) expression -> expression . LSHIFTA expression
    (149) expression -> expression . RSHIFTA expression
    (150) expression -> expression . LT expression
    (151) expression -> expression . GT expression
    (152) expression -> expression . LE expression
    (153) expression -> expression . GE expression
    (154) expression -> expression . EQ expression
    (155) expression -> expression . NE expression
    (156) expression -> expression . EQL expression
    (157) expression -> expression . NEL expression
    (158) expression -> expression . AND expression
    (159) expression -> expression . XOR expression
    (160) expression -> expression . XNOR expression
    (161) expression -> expression . OR expression
    (162) expression -> expression . LAND expression
    (163) expression -> expression . LOR expression
    (164) expression -> expression . COND expression COLON expression

    TIMES           shift and go to state 235
    POWER           shift and go to state 236
    DIVIDE          shift and go to state 237
    MOD             shift and go to state 238
    PLUS            shift and go to state 239
    MINUS           shift and go to state 240
    LSHIFT          shift and go to state 241
    RSHIFT          shift and go to state 242
    LSHIFTA         shift and go to state 243
    RSHIFTA         shift and go to state 244
    LT              shift and go to state 245
    GT              shift and go to state 246
    LE              shift and go to state 247
    GE              shift and go to state 248
    EQ              shift and go to state 249
    NE              shift and go to state 250
    EQL             shift and go to state 251
    NEL             shift and go to state 252
    AND             shift and go to state 253
    XOR             shift and go to state 254
    XNOR            shift and go to state 255
    OR              shift and go to state 256
    LAND            shift and go to state 257
    LOR             shift and go to state 258
    COND            shift and go to state 259


state 88

    (130) expression -> MINUS . expression
    (130) expression -> . MINUS expression
    (131) expression -> . PLUS expression
    (132) expression -> . LNOT expression
    (133) expression -> . NOT expression
    (134) expression -> . AND expression
    (135) expression -> . NAND expression
    (136) expression -> . NOR expression
    (137) expression -> . OR expression
    (138) expression -> . XOR expression
    (139) expression -> . XNOR expression
    (140) expression -> . expression POWER expression
    (141) expression -> . expression TIMES expression
    (142) expression -> . expression DIVIDE expression
    (143) expression -> . expression MOD expression
    (144) expression -> . expression PLUS expression
    (145) expression -> . expression MINUS expression
    (146) expression -> . expression LSHIFT expression
    (147) expression -> . expression RSHIFT expression
    (148) expression -> . expression LSHIFTA expression
    (149) expression -> . expression RSHIFTA expression
    (150) expression -> . expression LT expression
    (151) expression -> . expression GT expression
    (152) expression -> . expression LE expression
    (153) expression -> . expression GE expression
    (154) expression -> . expression EQ expression
    (155) expression -> . expression NE expression
    (156) expression -> . expression EQL expression
    (157) expression -> . expression NEL expression
    (158) expression -> . expression AND expression
    (159) expression -> . expression XOR expression
    (160) expression -> . expression XNOR expression
    (161) expression -> . expression OR expression
    (162) expression -> . expression LAND expression
    (163) expression -> . expression LOR expression
    (164) expression -> . expression COND expression COLON expression
    (165) expression -> . LPAREN expression RPAREN
    (166) expression -> . concat
    (167) expression -> . repeat
    (168) expression -> . partselect
    (169) expression -> . pointer
    (170) expression -> . functioncall
    (171) expression -> . systemcall
    (172) expression -> . identifier
    (173) expression -> . const_expression
    (174) concat -> . LBRACE concatlist RBRACE
    (177) repeat -> . LBRACE expression concat RBRACE
    (178) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (179) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (180) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (181) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (182) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (183) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (184) pointer -> . identifier LBRACKET expression RBRACKET
    (185) pointer -> . pointer LBRACKET expression RBRACKET
    (373) functioncall -> . identifier LPAREN func_args RPAREN
    (351) systemcall -> . DOLLER ID
    (352) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (353) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (392) identifier -> . ID
    (393) identifier -> . scope ID
    (186) const_expression -> . intnumber
    (187) const_expression -> . floatnumber
    (188) const_expression -> . stringliteral
    (394) scope -> . identifier DOT
    (395) scope -> . pointer DOT
    (190) intnumber -> . INTNUMBER_DEC
    (191) intnumber -> . SIGNED_INTNUMBER_DEC
    (192) intnumber -> . INTNUMBER_BIN
    (193) intnumber -> . SIGNED_INTNUMBER_BIN
    (194) intnumber -> . INTNUMBER_OCT
    (195) intnumber -> . SIGNED_INTNUMBER_OCT
    (196) intnumber -> . INTNUMBER_HEX
    (197) intnumber -> . SIGNED_INTNUMBER_HEX
    (189) floatnumber -> . FLOATNUMBER
    (198) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 88
    PLUS            shift and go to state 89
    LNOT            shift and go to state 90
    NOT             shift and go to state 91
    AND             shift and go to state 92
    NAND            shift and go to state 93
    NOR             shift and go to state 94
    OR              shift and go to state 95
    XOR             shift and go to state 96
    XNOR            shift and go to state 97
    LPAREN          shift and go to state 85
    LBRACE          shift and go to state 106
    DOLLER          shift and go to state 107
    ID              shift and go to state 86
    INTNUMBER_DEC   shift and go to state 112
    SIGNED_INTNUMBER_DEC shift and go to state 113
    INTNUMBER_BIN   shift and go to state 114
    SIGNED_INTNUMBER_BIN shift and go to state 115
    INTNUMBER_OCT   shift and go to state 116
    SIGNED_INTNUMBER_OCT shift and go to state 117
    INTNUMBER_HEX   shift and go to state 118
    SIGNED_INTNUMBER_HEX shift and go to state 119
    FLOATNUMBER     shift and go to state 120
    STRING_LITERAL  shift and go to state 121

    expression                     shift and go to state 260
    concat                         shift and go to state 98
    repeat                         shift and go to state 99
    partselect                     shift and go to state 100
    pointer                        shift and go to state 101
    functioncall                   shift and go to state 102
    systemcall                     shift and go to state 103
    identifier                     shift and go to state 104
    const_expression               shift and go to state 105
    scope                          shift and go to state 108
    intnumber                      shift and go to state 109
    floatnumber                    shift and go to state 110
    stringliteral                  shift and go to state 111

state 89

    (131) expression -> PLUS . expression
    (130) expression -> . MINUS expression
    (131) expression -> . PLUS expression
    (132) expression -> . LNOT expression
    (133) expression -> . NOT expression
    (134) expression -> . AND expression
    (135) expression -> . NAND expression
    (136) expression -> . NOR expression
    (137) expression -> . OR expression
    (138) expression -> . XOR expression
    (139) expression -> . XNOR expression
    (140) expression -> . expression POWER expression
    (141) expression -> . expression TIMES expression
    (142) expression -> . expression DIVIDE expression
    (143) expression -> . expression MOD expression
    (144) expression -> . expression PLUS expression
    (145) expression -> . expression MINUS expression
    (146) expression -> . expression LSHIFT expression
    (147) expression -> . expression RSHIFT expression
    (148) expression -> . expression LSHIFTA expression
    (149) expression -> . expression RSHIFTA expression
    (150) expression -> . expression LT expression
    (151) expression -> . expression GT expression
    (152) expression -> . expression LE expression
    (153) expression -> . expression GE expression
    (154) expression -> . expression EQ expression
    (155) expression -> . expression NE expression
    (156) expression -> . expression EQL expression
    (157) expression -> . expression NEL expression
    (158) expression -> . expression AND expression
    (159) expression -> . expression XOR expression
    (160) expression -> . expression XNOR expression
    (161) expression -> . expression OR expression
    (162) expression -> . expression LAND expression
    (163) expression -> . expression LOR expression
    (164) expression -> . expression COND expression COLON expression
    (165) expression -> . LPAREN expression RPAREN
    (166) expression -> . concat
    (167) expression -> . repeat
    (168) expression -> . partselect
    (169) expression -> . pointer
    (170) expression -> . functioncall
    (171) expression -> . systemcall
    (172) expression -> . identifier
    (173) expression -> . const_expression
    (174) concat -> . LBRACE concatlist RBRACE
    (177) repeat -> . LBRACE expression concat RBRACE
    (178) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (179) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (180) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (181) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (182) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (183) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (184) pointer -> . identifier LBRACKET expression RBRACKET
    (185) pointer -> . pointer LBRACKET expression RBRACKET
    (373) functioncall -> . identifier LPAREN func_args RPAREN
    (351) systemcall -> . DOLLER ID
    (352) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (353) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (392) identifier -> . ID
    (393) identifier -> . scope ID
    (186) const_expression -> . intnumber
    (187) const_expression -> . floatnumber
    (188) const_expression -> . stringliteral
    (394) scope -> . identifier DOT
    (395) scope -> . pointer DOT
    (190) intnumber -> . INTNUMBER_DEC
    (191) intnumber -> . SIGNED_INTNUMBER_DEC
    (192) intnumber -> . INTNUMBER_BIN
    (193) intnumber -> . SIGNED_INTNUMBER_BIN
    (194) intnumber -> . INTNUMBER_OCT
    (195) intnumber -> . SIGNED_INTNUMBER_OCT
    (196) intnumber -> . INTNUMBER_HEX
    (197) intnumber -> . SIGNED_INTNUMBER_HEX
    (189) floatnumber -> . FLOATNUMBER
    (198) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 88
    PLUS            shift and go to state 89
    LNOT            shift and go to state 90
    NOT             shift and go to state 91
    AND             shift and go to state 92
    NAND            shift and go to state 93
    NOR             shift and go to state 94
    OR              shift and go to state 95
    XOR             shift and go to state 96
    XNOR            shift and go to state 97
    LPAREN          shift and go to state 85
    LBRACE          shift and go to state 106
    DOLLER          shift and go to state 107
    ID              shift and go to state 86
    INTNUMBER_DEC   shift and go to state 112
    SIGNED_INTNUMBER_DEC shift and go to state 113
    INTNUMBER_BIN   shift and go to state 114
    SIGNED_INTNUMBER_BIN shift and go to state 115
    INTNUMBER_OCT   shift and go to state 116
    SIGNED_INTNUMBER_OCT shift and go to state 117
    INTNUMBER_HEX   shift and go to state 118
    SIGNED_INTNUMBER_HEX shift and go to state 119
    FLOATNUMBER     shift and go to state 120
    STRING_LITERAL  shift and go to state 121

    expression                     shift and go to state 261
    concat                         shift and go to state 98
    repeat                         shift and go to state 99
    partselect                     shift and go to state 100
    pointer                        shift and go to state 101
    functioncall                   shift and go to state 102
    systemcall                     shift and go to state 103
    identifier                     shift and go to state 104
    const_expression               shift and go to state 105
    scope                          shift and go to state 108
    intnumber                      shift and go to state 109
    floatnumber                    shift and go to state 110
    stringliteral                  shift and go to state 111

state 90

    (132) expression -> LNOT . expression
    (130) expression -> . MINUS expression
    (131) expression -> . PLUS expression
    (132) expression -> . LNOT expression
    (133) expression -> . NOT expression
    (134) expression -> . AND expression
    (135) expression -> . NAND expression
    (136) expression -> . NOR expression
    (137) expression -> . OR expression
    (138) expression -> . XOR expression
    (139) expression -> . XNOR expression
    (140) expression -> . expression POWER expression
    (141) expression -> . expression TIMES expression
    (142) expression -> . expression DIVIDE expression
    (143) expression -> . expression MOD expression
    (144) expression -> . expression PLUS expression
    (145) expression -> . expression MINUS expression
    (146) expression -> . expression LSHIFT expression
    (147) expression -> . expression RSHIFT expression
    (148) expression -> . expression LSHIFTA expression
    (149) expression -> . expression RSHIFTA expression
    (150) expression -> . expression LT expression
    (151) expression -> . expression GT expression
    (152) expression -> . expression LE expression
    (153) expression -> . expression GE expression
    (154) expression -> . expression EQ expression
    (155) expression -> . expression NE expression
    (156) expression -> . expression EQL expression
    (157) expression -> . expression NEL expression
    (158) expression -> . expression AND expression
    (159) expression -> . expression XOR expression
    (160) expression -> . expression XNOR expression
    (161) expression -> . expression OR expression
    (162) expression -> . expression LAND expression
    (163) expression -> . expression LOR expression
    (164) expression -> . expression COND expression COLON expression
    (165) expression -> . LPAREN expression RPAREN
    (166) expression -> . concat
    (167) expression -> . repeat
    (168) expression -> . partselect
    (169) expression -> . pointer
    (170) expression -> . functioncall
    (171) expression -> . systemcall
    (172) expression -> . identifier
    (173) expression -> . const_expression
    (174) concat -> . LBRACE concatlist RBRACE
    (177) repeat -> . LBRACE expression concat RBRACE
    (178) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (179) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (180) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (181) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (182) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (183) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (184) pointer -> . identifier LBRACKET expression RBRACKET
    (185) pointer -> . pointer LBRACKET expression RBRACKET
    (373) functioncall -> . identifier LPAREN func_args RPAREN
    (351) systemcall -> . DOLLER ID
    (352) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (353) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (392) identifier -> . ID
    (393) identifier -> . scope ID
    (186) const_expression -> . intnumber
    (187) const_expression -> . floatnumber
    (188) const_expression -> . stringliteral
    (394) scope -> . identifier DOT
    (395) scope -> . pointer DOT
    (190) intnumber -> . INTNUMBER_DEC
    (191) intnumber -> . SIGNED_INTNUMBER_DEC
    (192) intnumber -> . INTNUMBER_BIN
    (193) intnumber -> . SIGNED_INTNUMBER_BIN
    (194) intnumber -> . INTNUMBER_OCT
    (195) intnumber -> . SIGNED_INTNUMBER_OCT
    (196) intnumber -> . INTNUMBER_HEX
    (197) intnumber -> . SIGNED_INTNUMBER_HEX
    (189) floatnumber -> . FLOATNUMBER
    (198) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 88
    PLUS            shift and go to state 89
    LNOT            shift and go to state 90
    NOT             shift and go to state 91
    AND             shift and go to state 92
    NAND            shift and go to state 93
    NOR             shift and go to state 94
    OR              shift and go to state 95
    XOR             shift and go to state 96
    XNOR            shift and go to state 97
    LPAREN          shift and go to state 85
    LBRACE          shift and go to state 106
    DOLLER          shift and go to state 107
    ID              shift and go to state 86
    INTNUMBER_DEC   shift and go to state 112
    SIGNED_INTNUMBER_DEC shift and go to state 113
    INTNUMBER_BIN   shift and go to state 114
    SIGNED_INTNUMBER_BIN shift and go to state 115
    INTNUMBER_OCT   shift and go to state 116
    SIGNED_INTNUMBER_OCT shift and go to state 117
    INTNUMBER_HEX   shift and go to state 118
    SIGNED_INTNUMBER_HEX shift and go to state 119
    FLOATNUMBER     shift and go to state 120
    STRING_LITERAL  shift and go to state 121

    expression                     shift and go to state 262
    concat                         shift and go to state 98
    repeat                         shift and go to state 99
    partselect                     shift and go to state 100
    pointer                        shift and go to state 101
    functioncall                   shift and go to state 102
    systemcall                     shift and go to state 103
    identifier                     shift and go to state 104
    const_expression               shift and go to state 105
    scope                          shift and go to state 108
    intnumber                      shift and go to state 109
    floatnumber                    shift and go to state 110
    stringliteral                  shift and go to state 111

state 91

    (133) expression -> NOT . expression
    (130) expression -> . MINUS expression
    (131) expression -> . PLUS expression
    (132) expression -> . LNOT expression
    (133) expression -> . NOT expression
    (134) expression -> . AND expression
    (135) expression -> . NAND expression
    (136) expression -> . NOR expression
    (137) expression -> . OR expression
    (138) expression -> . XOR expression
    (139) expression -> . XNOR expression
    (140) expression -> . expression POWER expression
    (141) expression -> . expression TIMES expression
    (142) expression -> . expression DIVIDE expression
    (143) expression -> . expression MOD expression
    (144) expression -> . expression PLUS expression
    (145) expression -> . expression MINUS expression
    (146) expression -> . expression LSHIFT expression
    (147) expression -> . expression RSHIFT expression
    (148) expression -> . expression LSHIFTA expression
    (149) expression -> . expression RSHIFTA expression
    (150) expression -> . expression LT expression
    (151) expression -> . expression GT expression
    (152) expression -> . expression LE expression
    (153) expression -> . expression GE expression
    (154) expression -> . expression EQ expression
    (155) expression -> . expression NE expression
    (156) expression -> . expression EQL expression
    (157) expression -> . expression NEL expression
    (158) expression -> . expression AND expression
    (159) expression -> . expression XOR expression
    (160) expression -> . expression XNOR expression
    (161) expression -> . expression OR expression
    (162) expression -> . expression LAND expression
    (163) expression -> . expression LOR expression
    (164) expression -> . expression COND expression COLON expression
    (165) expression -> . LPAREN expression RPAREN
    (166) expression -> . concat
    (167) expression -> . repeat
    (168) expression -> . partselect
    (169) expression -> . pointer
    (170) expression -> . functioncall
    (171) expression -> . systemcall
    (172) expression -> . identifier
    (173) expression -> . const_expression
    (174) concat -> . LBRACE concatlist RBRACE
    (177) repeat -> . LBRACE expression concat RBRACE
    (178) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (179) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (180) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (181) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (182) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (183) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (184) pointer -> . identifier LBRACKET expression RBRACKET
    (185) pointer -> . pointer LBRACKET expression RBRACKET
    (373) functioncall -> . identifier LPAREN func_args RPAREN
    (351) systemcall -> . DOLLER ID
    (352) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (353) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (392) identifier -> . ID
    (393) identifier -> . scope ID
    (186) const_expression -> . intnumber
    (187) const_expression -> . floatnumber
    (188) const_expression -> . stringliteral
    (394) scope -> . identifier DOT
    (395) scope -> . pointer DOT
    (190) intnumber -> . INTNUMBER_DEC
    (191) intnumber -> . SIGNED_INTNUMBER_DEC
    (192) intnumber -> . INTNUMBER_BIN
    (193) intnumber -> . SIGNED_INTNUMBER_BIN
    (194) intnumber -> . INTNUMBER_OCT
    (195) intnumber -> . SIGNED_INTNUMBER_OCT
    (196) intnumber -> . INTNUMBER_HEX
    (197) intnumber -> . SIGNED_INTNUMBER_HEX
    (189) floatnumber -> . FLOATNUMBER
    (198) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 88
    PLUS            shift and go to state 89
    LNOT            shift and go to state 90
    NOT             shift and go to state 91
    AND             shift and go to state 92
    NAND            shift and go to state 93
    NOR             shift and go to state 94
    OR              shift and go to state 95
    XOR             shift and go to state 96
    XNOR            shift and go to state 97
    LPAREN          shift and go to state 85
    LBRACE          shift and go to state 106
    DOLLER          shift and go to state 107
    ID              shift and go to state 86
    INTNUMBER_DEC   shift and go to state 112
    SIGNED_INTNUMBER_DEC shift and go to state 113
    INTNUMBER_BIN   shift and go to state 114
    SIGNED_INTNUMBER_BIN shift and go to state 115
    INTNUMBER_OCT   shift and go to state 116
    SIGNED_INTNUMBER_OCT shift and go to state 117
    INTNUMBER_HEX   shift and go to state 118
    SIGNED_INTNUMBER_HEX shift and go to state 119
    FLOATNUMBER     shift and go to state 120
    STRING_LITERAL  shift and go to state 121

    expression                     shift and go to state 263
    concat                         shift and go to state 98
    repeat                         shift and go to state 99
    partselect                     shift and go to state 100
    pointer                        shift and go to state 101
    functioncall                   shift and go to state 102
    systemcall                     shift and go to state 103
    identifier                     shift and go to state 104
    const_expression               shift and go to state 105
    scope                          shift and go to state 108
    intnumber                      shift and go to state 109
    floatnumber                    shift and go to state 110
    stringliteral                  shift and go to state 111

state 92

    (134) expression -> AND . expression
    (130) expression -> . MINUS expression
    (131) expression -> . PLUS expression
    (132) expression -> . LNOT expression
    (133) expression -> . NOT expression
    (134) expression -> . AND expression
    (135) expression -> . NAND expression
    (136) expression -> . NOR expression
    (137) expression -> . OR expression
    (138) expression -> . XOR expression
    (139) expression -> . XNOR expression
    (140) expression -> . expression POWER expression
    (141) expression -> . expression TIMES expression
    (142) expression -> . expression DIVIDE expression
    (143) expression -> . expression MOD expression
    (144) expression -> . expression PLUS expression
    (145) expression -> . expression MINUS expression
    (146) expression -> . expression LSHIFT expression
    (147) expression -> . expression RSHIFT expression
    (148) expression -> . expression LSHIFTA expression
    (149) expression -> . expression RSHIFTA expression
    (150) expression -> . expression LT expression
    (151) expression -> . expression GT expression
    (152) expression -> . expression LE expression
    (153) expression -> . expression GE expression
    (154) expression -> . expression EQ expression
    (155) expression -> . expression NE expression
    (156) expression -> . expression EQL expression
    (157) expression -> . expression NEL expression
    (158) expression -> . expression AND expression
    (159) expression -> . expression XOR expression
    (160) expression -> . expression XNOR expression
    (161) expression -> . expression OR expression
    (162) expression -> . expression LAND expression
    (163) expression -> . expression LOR expression
    (164) expression -> . expression COND expression COLON expression
    (165) expression -> . LPAREN expression RPAREN
    (166) expression -> . concat
    (167) expression -> . repeat
    (168) expression -> . partselect
    (169) expression -> . pointer
    (170) expression -> . functioncall
    (171) expression -> . systemcall
    (172) expression -> . identifier
    (173) expression -> . const_expression
    (174) concat -> . LBRACE concatlist RBRACE
    (177) repeat -> . LBRACE expression concat RBRACE
    (178) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (179) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (180) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (181) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (182) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (183) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (184) pointer -> . identifier LBRACKET expression RBRACKET
    (185) pointer -> . pointer LBRACKET expression RBRACKET
    (373) functioncall -> . identifier LPAREN func_args RPAREN
    (351) systemcall -> . DOLLER ID
    (352) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (353) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (392) identifier -> . ID
    (393) identifier -> . scope ID
    (186) const_expression -> . intnumber
    (187) const_expression -> . floatnumber
    (188) const_expression -> . stringliteral
    (394) scope -> . identifier DOT
    (395) scope -> . pointer DOT
    (190) intnumber -> . INTNUMBER_DEC
    (191) intnumber -> . SIGNED_INTNUMBER_DEC
    (192) intnumber -> . INTNUMBER_BIN
    (193) intnumber -> . SIGNED_INTNUMBER_BIN
    (194) intnumber -> . INTNUMBER_OCT
    (195) intnumber -> . SIGNED_INTNUMBER_OCT
    (196) intnumber -> . INTNUMBER_HEX
    (197) intnumber -> . SIGNED_INTNUMBER_HEX
    (189) floatnumber -> . FLOATNUMBER
    (198) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 88
    PLUS            shift and go to state 89
    LNOT            shift and go to state 90
    NOT             shift and go to state 91
    AND             shift and go to state 92
    NAND            shift and go to state 93
    NOR             shift and go to state 94
    OR              shift and go to state 95
    XOR             shift and go to state 96
    XNOR            shift and go to state 97
    LPAREN          shift and go to state 85
    LBRACE          shift and go to state 106
    DOLLER          shift and go to state 107
    ID              shift and go to state 86
    INTNUMBER_DEC   shift and go to state 112
    SIGNED_INTNUMBER_DEC shift and go to state 113
    INTNUMBER_BIN   shift and go to state 114
    SIGNED_INTNUMBER_BIN shift and go to state 115
    INTNUMBER_OCT   shift and go to state 116
    SIGNED_INTNUMBER_OCT shift and go to state 117
    INTNUMBER_HEX   shift and go to state 118
    SIGNED_INTNUMBER_HEX shift and go to state 119
    FLOATNUMBER     shift and go to state 120
    STRING_LITERAL  shift and go to state 121

    expression                     shift and go to state 264
    concat                         shift and go to state 98
    repeat                         shift and go to state 99
    partselect                     shift and go to state 100
    pointer                        shift and go to state 101
    functioncall                   shift and go to state 102
    systemcall                     shift and go to state 103
    identifier                     shift and go to state 104
    const_expression               shift and go to state 105
    scope                          shift and go to state 108
    intnumber                      shift and go to state 109
    floatnumber                    shift and go to state 110
    stringliteral                  shift and go to state 111

state 93

    (135) expression -> NAND . expression
    (130) expression -> . MINUS expression
    (131) expression -> . PLUS expression
    (132) expression -> . LNOT expression
    (133) expression -> . NOT expression
    (134) expression -> . AND expression
    (135) expression -> . NAND expression
    (136) expression -> . NOR expression
    (137) expression -> . OR expression
    (138) expression -> . XOR expression
    (139) expression -> . XNOR expression
    (140) expression -> . expression POWER expression
    (141) expression -> . expression TIMES expression
    (142) expression -> . expression DIVIDE expression
    (143) expression -> . expression MOD expression
    (144) expression -> . expression PLUS expression
    (145) expression -> . expression MINUS expression
    (146) expression -> . expression LSHIFT expression
    (147) expression -> . expression RSHIFT expression
    (148) expression -> . expression LSHIFTA expression
    (149) expression -> . expression RSHIFTA expression
    (150) expression -> . expression LT expression
    (151) expression -> . expression GT expression
    (152) expression -> . expression LE expression
    (153) expression -> . expression GE expression
    (154) expression -> . expression EQ expression
    (155) expression -> . expression NE expression
    (156) expression -> . expression EQL expression
    (157) expression -> . expression NEL expression
    (158) expression -> . expression AND expression
    (159) expression -> . expression XOR expression
    (160) expression -> . expression XNOR expression
    (161) expression -> . expression OR expression
    (162) expression -> . expression LAND expression
    (163) expression -> . expression LOR expression
    (164) expression -> . expression COND expression COLON expression
    (165) expression -> . LPAREN expression RPAREN
    (166) expression -> . concat
    (167) expression -> . repeat
    (168) expression -> . partselect
    (169) expression -> . pointer
    (170) expression -> . functioncall
    (171) expression -> . systemcall
    (172) expression -> . identifier
    (173) expression -> . const_expression
    (174) concat -> . LBRACE concatlist RBRACE
    (177) repeat -> . LBRACE expression concat RBRACE
    (178) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (179) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (180) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (181) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (182) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (183) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (184) pointer -> . identifier LBRACKET expression RBRACKET
    (185) pointer -> . pointer LBRACKET expression RBRACKET
    (373) functioncall -> . identifier LPAREN func_args RPAREN
    (351) systemcall -> . DOLLER ID
    (352) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (353) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (392) identifier -> . ID
    (393) identifier -> . scope ID
    (186) const_expression -> . intnumber
    (187) const_expression -> . floatnumber
    (188) const_expression -> . stringliteral
    (394) scope -> . identifier DOT
    (395) scope -> . pointer DOT
    (190) intnumber -> . INTNUMBER_DEC
    (191) intnumber -> . SIGNED_INTNUMBER_DEC
    (192) intnumber -> . INTNUMBER_BIN
    (193) intnumber -> . SIGNED_INTNUMBER_BIN
    (194) intnumber -> . INTNUMBER_OCT
    (195) intnumber -> . SIGNED_INTNUMBER_OCT
    (196) intnumber -> . INTNUMBER_HEX
    (197) intnumber -> . SIGNED_INTNUMBER_HEX
    (189) floatnumber -> . FLOATNUMBER
    (198) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 88
    PLUS            shift and go to state 89
    LNOT            shift and go to state 90
    NOT             shift and go to state 91
    AND             shift and go to state 92
    NAND            shift and go to state 93
    NOR             shift and go to state 94
    OR              shift and go to state 95
    XOR             shift and go to state 96
    XNOR            shift and go to state 97
    LPAREN          shift and go to state 85
    LBRACE          shift and go to state 106
    DOLLER          shift and go to state 107
    ID              shift and go to state 86
    INTNUMBER_DEC   shift and go to state 112
    SIGNED_INTNUMBER_DEC shift and go to state 113
    INTNUMBER_BIN   shift and go to state 114
    SIGNED_INTNUMBER_BIN shift and go to state 115
    INTNUMBER_OCT   shift and go to state 116
    SIGNED_INTNUMBER_OCT shift and go to state 117
    INTNUMBER_HEX   shift and go to state 118
    SIGNED_INTNUMBER_HEX shift and go to state 119
    FLOATNUMBER     shift and go to state 120
    STRING_LITERAL  shift and go to state 121

    expression                     shift and go to state 265
    concat                         shift and go to state 98
    repeat                         shift and go to state 99
    partselect                     shift and go to state 100
    pointer                        shift and go to state 101
    functioncall                   shift and go to state 102
    systemcall                     shift and go to state 103
    identifier                     shift and go to state 104
    const_expression               shift and go to state 105
    scope                          shift and go to state 108
    intnumber                      shift and go to state 109
    floatnumber                    shift and go to state 110
    stringliteral                  shift and go to state 111

state 94

    (136) expression -> NOR . expression
    (130) expression -> . MINUS expression
    (131) expression -> . PLUS expression
    (132) expression -> . LNOT expression
    (133) expression -> . NOT expression
    (134) expression -> . AND expression
    (135) expression -> . NAND expression
    (136) expression -> . NOR expression
    (137) expression -> . OR expression
    (138) expression -> . XOR expression
    (139) expression -> . XNOR expression
    (140) expression -> . expression POWER expression
    (141) expression -> . expression TIMES expression
    (142) expression -> . expression DIVIDE expression
    (143) expression -> . expression MOD expression
    (144) expression -> . expression PLUS expression
    (145) expression -> . expression MINUS expression
    (146) expression -> . expression LSHIFT expression
    (147) expression -> . expression RSHIFT expression
    (148) expression -> . expression LSHIFTA expression
    (149) expression -> . expression RSHIFTA expression
    (150) expression -> . expression LT expression
    (151) expression -> . expression GT expression
    (152) expression -> . expression LE expression
    (153) expression -> . expression GE expression
    (154) expression -> . expression EQ expression
    (155) expression -> . expression NE expression
    (156) expression -> . expression EQL expression
    (157) expression -> . expression NEL expression
    (158) expression -> . expression AND expression
    (159) expression -> . expression XOR expression
    (160) expression -> . expression XNOR expression
    (161) expression -> . expression OR expression
    (162) expression -> . expression LAND expression
    (163) expression -> . expression LOR expression
    (164) expression -> . expression COND expression COLON expression
    (165) expression -> . LPAREN expression RPAREN
    (166) expression -> . concat
    (167) expression -> . repeat
    (168) expression -> . partselect
    (169) expression -> . pointer
    (170) expression -> . functioncall
    (171) expression -> . systemcall
    (172) expression -> . identifier
    (173) expression -> . const_expression
    (174) concat -> . LBRACE concatlist RBRACE
    (177) repeat -> . LBRACE expression concat RBRACE
    (178) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (179) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (180) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (181) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (182) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (183) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (184) pointer -> . identifier LBRACKET expression RBRACKET
    (185) pointer -> . pointer LBRACKET expression RBRACKET
    (373) functioncall -> . identifier LPAREN func_args RPAREN
    (351) systemcall -> . DOLLER ID
    (352) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (353) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (392) identifier -> . ID
    (393) identifier -> . scope ID
    (186) const_expression -> . intnumber
    (187) const_expression -> . floatnumber
    (188) const_expression -> . stringliteral
    (394) scope -> . identifier DOT
    (395) scope -> . pointer DOT
    (190) intnumber -> . INTNUMBER_DEC
    (191) intnumber -> . SIGNED_INTNUMBER_DEC
    (192) intnumber -> . INTNUMBER_BIN
    (193) intnumber -> . SIGNED_INTNUMBER_BIN
    (194) intnumber -> . INTNUMBER_OCT
    (195) intnumber -> . SIGNED_INTNUMBER_OCT
    (196) intnumber -> . INTNUMBER_HEX
    (197) intnumber -> . SIGNED_INTNUMBER_HEX
    (189) floatnumber -> . FLOATNUMBER
    (198) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 88
    PLUS            shift and go to state 89
    LNOT            shift and go to state 90
    NOT             shift and go to state 91
    AND             shift and go to state 92
    NAND            shift and go to state 93
    NOR             shift and go to state 94
    OR              shift and go to state 95
    XOR             shift and go to state 96
    XNOR            shift and go to state 97
    LPAREN          shift and go to state 85
    LBRACE          shift and go to state 106
    DOLLER          shift and go to state 107
    ID              shift and go to state 86
    INTNUMBER_DEC   shift and go to state 112
    SIGNED_INTNUMBER_DEC shift and go to state 113
    INTNUMBER_BIN   shift and go to state 114
    SIGNED_INTNUMBER_BIN shift and go to state 115
    INTNUMBER_OCT   shift and go to state 116
    SIGNED_INTNUMBER_OCT shift and go to state 117
    INTNUMBER_HEX   shift and go to state 118
    SIGNED_INTNUMBER_HEX shift and go to state 119
    FLOATNUMBER     shift and go to state 120
    STRING_LITERAL  shift and go to state 121

    expression                     shift and go to state 266
    concat                         shift and go to state 98
    repeat                         shift and go to state 99
    partselect                     shift and go to state 100
    pointer                        shift and go to state 101
    functioncall                   shift and go to state 102
    systemcall                     shift and go to state 103
    identifier                     shift and go to state 104
    const_expression               shift and go to state 105
    scope                          shift and go to state 108
    intnumber                      shift and go to state 109
    floatnumber                    shift and go to state 110
    stringliteral                  shift and go to state 111

state 95

    (137) expression -> OR . expression
    (130) expression -> . MINUS expression
    (131) expression -> . PLUS expression
    (132) expression -> . LNOT expression
    (133) expression -> . NOT expression
    (134) expression -> . AND expression
    (135) expression -> . NAND expression
    (136) expression -> . NOR expression
    (137) expression -> . OR expression
    (138) expression -> . XOR expression
    (139) expression -> . XNOR expression
    (140) expression -> . expression POWER expression
    (141) expression -> . expression TIMES expression
    (142) expression -> . expression DIVIDE expression
    (143) expression -> . expression MOD expression
    (144) expression -> . expression PLUS expression
    (145) expression -> . expression MINUS expression
    (146) expression -> . expression LSHIFT expression
    (147) expression -> . expression RSHIFT expression
    (148) expression -> . expression LSHIFTA expression
    (149) expression -> . expression RSHIFTA expression
    (150) expression -> . expression LT expression
    (151) expression -> . expression GT expression
    (152) expression -> . expression LE expression
    (153) expression -> . expression GE expression
    (154) expression -> . expression EQ expression
    (155) expression -> . expression NE expression
    (156) expression -> . expression EQL expression
    (157) expression -> . expression NEL expression
    (158) expression -> . expression AND expression
    (159) expression -> . expression XOR expression
    (160) expression -> . expression XNOR expression
    (161) expression -> . expression OR expression
    (162) expression -> . expression LAND expression
    (163) expression -> . expression LOR expression
    (164) expression -> . expression COND expression COLON expression
    (165) expression -> . LPAREN expression RPAREN
    (166) expression -> . concat
    (167) expression -> . repeat
    (168) expression -> . partselect
    (169) expression -> . pointer
    (170) expression -> . functioncall
    (171) expression -> . systemcall
    (172) expression -> . identifier
    (173) expression -> . const_expression
    (174) concat -> . LBRACE concatlist RBRACE
    (177) repeat -> . LBRACE expression concat RBRACE
    (178) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (179) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (180) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (181) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (182) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (183) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (184) pointer -> . identifier LBRACKET expression RBRACKET
    (185) pointer -> . pointer LBRACKET expression RBRACKET
    (373) functioncall -> . identifier LPAREN func_args RPAREN
    (351) systemcall -> . DOLLER ID
    (352) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (353) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (392) identifier -> . ID
    (393) identifier -> . scope ID
    (186) const_expression -> . intnumber
    (187) const_expression -> . floatnumber
    (188) const_expression -> . stringliteral
    (394) scope -> . identifier DOT
    (395) scope -> . pointer DOT
    (190) intnumber -> . INTNUMBER_DEC
    (191) intnumber -> . SIGNED_INTNUMBER_DEC
    (192) intnumber -> . INTNUMBER_BIN
    (193) intnumber -> . SIGNED_INTNUMBER_BIN
    (194) intnumber -> . INTNUMBER_OCT
    (195) intnumber -> . SIGNED_INTNUMBER_OCT
    (196) intnumber -> . INTNUMBER_HEX
    (197) intnumber -> . SIGNED_INTNUMBER_HEX
    (189) floatnumber -> . FLOATNUMBER
    (198) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 88
    PLUS            shift and go to state 89
    LNOT            shift and go to state 90
    NOT             shift and go to state 91
    AND             shift and go to state 92
    NAND            shift and go to state 93
    NOR             shift and go to state 94
    OR              shift and go to state 95
    XOR             shift and go to state 96
    XNOR            shift and go to state 97
    LPAREN          shift and go to state 85
    LBRACE          shift and go to state 106
    DOLLER          shift and go to state 107
    ID              shift and go to state 86
    INTNUMBER_DEC   shift and go to state 112
    SIGNED_INTNUMBER_DEC shift and go to state 113
    INTNUMBER_BIN   shift and go to state 114
    SIGNED_INTNUMBER_BIN shift and go to state 115
    INTNUMBER_OCT   shift and go to state 116
    SIGNED_INTNUMBER_OCT shift and go to state 117
    INTNUMBER_HEX   shift and go to state 118
    SIGNED_INTNUMBER_HEX shift and go to state 119
    FLOATNUMBER     shift and go to state 120
    STRING_LITERAL  shift and go to state 121

    expression                     shift and go to state 267
    concat                         shift and go to state 98
    repeat                         shift and go to state 99
    partselect                     shift and go to state 100
    pointer                        shift and go to state 101
    functioncall                   shift and go to state 102
    systemcall                     shift and go to state 103
    identifier                     shift and go to state 104
    const_expression               shift and go to state 105
    scope                          shift and go to state 108
    intnumber                      shift and go to state 109
    floatnumber                    shift and go to state 110
    stringliteral                  shift and go to state 111

state 96

    (138) expression -> XOR . expression
    (130) expression -> . MINUS expression
    (131) expression -> . PLUS expression
    (132) expression -> . LNOT expression
    (133) expression -> . NOT expression
    (134) expression -> . AND expression
    (135) expression -> . NAND expression
    (136) expression -> . NOR expression
    (137) expression -> . OR expression
    (138) expression -> . XOR expression
    (139) expression -> . XNOR expression
    (140) expression -> . expression POWER expression
    (141) expression -> . expression TIMES expression
    (142) expression -> . expression DIVIDE expression
    (143) expression -> . expression MOD expression
    (144) expression -> . expression PLUS expression
    (145) expression -> . expression MINUS expression
    (146) expression -> . expression LSHIFT expression
    (147) expression -> . expression RSHIFT expression
    (148) expression -> . expression LSHIFTA expression
    (149) expression -> . expression RSHIFTA expression
    (150) expression -> . expression LT expression
    (151) expression -> . expression GT expression
    (152) expression -> . expression LE expression
    (153) expression -> . expression GE expression
    (154) expression -> . expression EQ expression
    (155) expression -> . expression NE expression
    (156) expression -> . expression EQL expression
    (157) expression -> . expression NEL expression
    (158) expression -> . expression AND expression
    (159) expression -> . expression XOR expression
    (160) expression -> . expression XNOR expression
    (161) expression -> . expression OR expression
    (162) expression -> . expression LAND expression
    (163) expression -> . expression LOR expression
    (164) expression -> . expression COND expression COLON expression
    (165) expression -> . LPAREN expression RPAREN
    (166) expression -> . concat
    (167) expression -> . repeat
    (168) expression -> . partselect
    (169) expression -> . pointer
    (170) expression -> . functioncall
    (171) expression -> . systemcall
    (172) expression -> . identifier
    (173) expression -> . const_expression
    (174) concat -> . LBRACE concatlist RBRACE
    (177) repeat -> . LBRACE expression concat RBRACE
    (178) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (179) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (180) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (181) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (182) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (183) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (184) pointer -> . identifier LBRACKET expression RBRACKET
    (185) pointer -> . pointer LBRACKET expression RBRACKET
    (373) functioncall -> . identifier LPAREN func_args RPAREN
    (351) systemcall -> . DOLLER ID
    (352) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (353) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (392) identifier -> . ID
    (393) identifier -> . scope ID
    (186) const_expression -> . intnumber
    (187) const_expression -> . floatnumber
    (188) const_expression -> . stringliteral
    (394) scope -> . identifier DOT
    (395) scope -> . pointer DOT
    (190) intnumber -> . INTNUMBER_DEC
    (191) intnumber -> . SIGNED_INTNUMBER_DEC
    (192) intnumber -> . INTNUMBER_BIN
    (193) intnumber -> . SIGNED_INTNUMBER_BIN
    (194) intnumber -> . INTNUMBER_OCT
    (195) intnumber -> . SIGNED_INTNUMBER_OCT
    (196) intnumber -> . INTNUMBER_HEX
    (197) intnumber -> . SIGNED_INTNUMBER_HEX
    (189) floatnumber -> . FLOATNUMBER
    (198) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 88
    PLUS            shift and go to state 89
    LNOT            shift and go to state 90
    NOT             shift and go to state 91
    AND             shift and go to state 92
    NAND            shift and go to state 93
    NOR             shift and go to state 94
    OR              shift and go to state 95
    XOR             shift and go to state 96
    XNOR            shift and go to state 97
    LPAREN          shift and go to state 85
    LBRACE          shift and go to state 106
    DOLLER          shift and go to state 107
    ID              shift and go to state 86
    INTNUMBER_DEC   shift and go to state 112
    SIGNED_INTNUMBER_DEC shift and go to state 113
    INTNUMBER_BIN   shift and go to state 114
    SIGNED_INTNUMBER_BIN shift and go to state 115
    INTNUMBER_OCT   shift and go to state 116
    SIGNED_INTNUMBER_OCT shift and go to state 117
    INTNUMBER_HEX   shift and go to state 118
    SIGNED_INTNUMBER_HEX shift and go to state 119
    FLOATNUMBER     shift and go to state 120
    STRING_LITERAL  shift and go to state 121

    expression                     shift and go to state 268
    concat                         shift and go to state 98
    repeat                         shift and go to state 99
    partselect                     shift and go to state 100
    pointer                        shift and go to state 101
    functioncall                   shift and go to state 102
    systemcall                     shift and go to state 103
    identifier                     shift and go to state 104
    const_expression               shift and go to state 105
    scope                          shift and go to state 108
    intnumber                      shift and go to state 109
    floatnumber                    shift and go to state 110
    stringliteral                  shift and go to state 111

state 97

    (139) expression -> XNOR . expression
    (130) expression -> . MINUS expression
    (131) expression -> . PLUS expression
    (132) expression -> . LNOT expression
    (133) expression -> . NOT expression
    (134) expression -> . AND expression
    (135) expression -> . NAND expression
    (136) expression -> . NOR expression
    (137) expression -> . OR expression
    (138) expression -> . XOR expression
    (139) expression -> . XNOR expression
    (140) expression -> . expression POWER expression
    (141) expression -> . expression TIMES expression
    (142) expression -> . expression DIVIDE expression
    (143) expression -> . expression MOD expression
    (144) expression -> . expression PLUS expression
    (145) expression -> . expression MINUS expression
    (146) expression -> . expression LSHIFT expression
    (147) expression -> . expression RSHIFT expression
    (148) expression -> . expression LSHIFTA expression
    (149) expression -> . expression RSHIFTA expression
    (150) expression -> . expression LT expression
    (151) expression -> . expression GT expression
    (152) expression -> . expression LE expression
    (153) expression -> . expression GE expression
    (154) expression -> . expression EQ expression
    (155) expression -> . expression NE expression
    (156) expression -> . expression EQL expression
    (157) expression -> . expression NEL expression
    (158) expression -> . expression AND expression
    (159) expression -> . expression XOR expression
    (160) expression -> . expression XNOR expression
    (161) expression -> . expression OR expression
    (162) expression -> . expression LAND expression
    (163) expression -> . expression LOR expression
    (164) expression -> . expression COND expression COLON expression
    (165) expression -> . LPAREN expression RPAREN
    (166) expression -> . concat
    (167) expression -> . repeat
    (168) expression -> . partselect
    (169) expression -> . pointer
    (170) expression -> . functioncall
    (171) expression -> . systemcall
    (172) expression -> . identifier
    (173) expression -> . const_expression
    (174) concat -> . LBRACE concatlist RBRACE
    (177) repeat -> . LBRACE expression concat RBRACE
    (178) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (179) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (180) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (181) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (182) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (183) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (184) pointer -> . identifier LBRACKET expression RBRACKET
    (185) pointer -> . pointer LBRACKET expression RBRACKET
    (373) functioncall -> . identifier LPAREN func_args RPAREN
    (351) systemcall -> . DOLLER ID
    (352) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (353) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (392) identifier -> . ID
    (393) identifier -> . scope ID
    (186) const_expression -> . intnumber
    (187) const_expression -> . floatnumber
    (188) const_expression -> . stringliteral
    (394) scope -> . identifier DOT
    (395) scope -> . pointer DOT
    (190) intnumber -> . INTNUMBER_DEC
    (191) intnumber -> . SIGNED_INTNUMBER_DEC
    (192) intnumber -> . INTNUMBER_BIN
    (193) intnumber -> . SIGNED_INTNUMBER_BIN
    (194) intnumber -> . INTNUMBER_OCT
    (195) intnumber -> . SIGNED_INTNUMBER_OCT
    (196) intnumber -> . INTNUMBER_HEX
    (197) intnumber -> . SIGNED_INTNUMBER_HEX
    (189) floatnumber -> . FLOATNUMBER
    (198) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 88
    PLUS            shift and go to state 89
    LNOT            shift and go to state 90
    NOT             shift and go to state 91
    AND             shift and go to state 92
    NAND            shift and go to state 93
    NOR             shift and go to state 94
    OR              shift and go to state 95
    XOR             shift and go to state 96
    XNOR            shift and go to state 97
    LPAREN          shift and go to state 85
    LBRACE          shift and go to state 106
    DOLLER          shift and go to state 107
    ID              shift and go to state 86
    INTNUMBER_DEC   shift and go to state 112
    SIGNED_INTNUMBER_DEC shift and go to state 113
    INTNUMBER_BIN   shift and go to state 114
    SIGNED_INTNUMBER_BIN shift and go to state 115
    INTNUMBER_OCT   shift and go to state 116
    SIGNED_INTNUMBER_OCT shift and go to state 117
    INTNUMBER_HEX   shift and go to state 118
    SIGNED_INTNUMBER_HEX shift and go to state 119
    FLOATNUMBER     shift and go to state 120
    STRING_LITERAL  shift and go to state 121

    expression                     shift and go to state 269
    concat                         shift and go to state 98
    repeat                         shift and go to state 99
    partselect                     shift and go to state 100
    pointer                        shift and go to state 101
    functioncall                   shift and go to state 102
    systemcall                     shift and go to state 103
    identifier                     shift and go to state 104
    const_expression               shift and go to state 105
    scope                          shift and go to state 108
    intnumber                      shift and go to state 109
    floatnumber                    shift and go to state 110
    stringliteral                  shift and go to state 111

state 98

    (166) expression -> concat .

    TIMES           reduce using rule 166 (expression -> concat .)
    POWER           reduce using rule 166 (expression -> concat .)
    DIVIDE          reduce using rule 166 (expression -> concat .)
    MOD             reduce using rule 166 (expression -> concat .)
    PLUS            reduce using rule 166 (expression -> concat .)
    MINUS           reduce using rule 166 (expression -> concat .)
    LSHIFT          reduce using rule 166 (expression -> concat .)
    RSHIFT          reduce using rule 166 (expression -> concat .)
    LSHIFTA         reduce using rule 166 (expression -> concat .)
    RSHIFTA         reduce using rule 166 (expression -> concat .)
    LT              reduce using rule 166 (expression -> concat .)
    GT              reduce using rule 166 (expression -> concat .)
    LE              reduce using rule 166 (expression -> concat .)
    GE              reduce using rule 166 (expression -> concat .)
    EQ              reduce using rule 166 (expression -> concat .)
    NE              reduce using rule 166 (expression -> concat .)
    EQL             reduce using rule 166 (expression -> concat .)
    NEL             reduce using rule 166 (expression -> concat .)
    AND             reduce using rule 166 (expression -> concat .)
    XOR             reduce using rule 166 (expression -> concat .)
    XNOR            reduce using rule 166 (expression -> concat .)
    OR              reduce using rule 166 (expression -> concat .)
    LAND            reduce using rule 166 (expression -> concat .)
    LOR             reduce using rule 166 (expression -> concat .)
    COND            reduce using rule 166 (expression -> concat .)
    RPAREN          reduce using rule 166 (expression -> concat .)
    LBRACE          reduce using rule 166 (expression -> concat .)
    RBRACE          reduce using rule 166 (expression -> concat .)
    COMMA           reduce using rule 166 (expression -> concat .)
    COLON           reduce using rule 166 (expression -> concat .)
    SEMICOLON       reduce using rule 166 (expression -> concat .)
    PLUSCOLON       reduce using rule 166 (expression -> concat .)
    MINUSCOLON      reduce using rule 166 (expression -> concat .)
    RBRACKET        reduce using rule 166 (expression -> concat .)


state 99

    (167) expression -> repeat .

    TIMES           reduce using rule 167 (expression -> repeat .)
    POWER           reduce using rule 167 (expression -> repeat .)
    DIVIDE          reduce using rule 167 (expression -> repeat .)
    MOD             reduce using rule 167 (expression -> repeat .)
    PLUS            reduce using rule 167 (expression -> repeat .)
    MINUS           reduce using rule 167 (expression -> repeat .)
    LSHIFT          reduce using rule 167 (expression -> repeat .)
    RSHIFT          reduce using rule 167 (expression -> repeat .)
    LSHIFTA         reduce using rule 167 (expression -> repeat .)
    RSHIFTA         reduce using rule 167 (expression -> repeat .)
    LT              reduce using rule 167 (expression -> repeat .)
    GT              reduce using rule 167 (expression -> repeat .)
    LE              reduce using rule 167 (expression -> repeat .)
    GE              reduce using rule 167 (expression -> repeat .)
    EQ              reduce using rule 167 (expression -> repeat .)
    NE              reduce using rule 167 (expression -> repeat .)
    EQL             reduce using rule 167 (expression -> repeat .)
    NEL             reduce using rule 167 (expression -> repeat .)
    AND             reduce using rule 167 (expression -> repeat .)
    XOR             reduce using rule 167 (expression -> repeat .)
    XNOR            reduce using rule 167 (expression -> repeat .)
    OR              reduce using rule 167 (expression -> repeat .)
    LAND            reduce using rule 167 (expression -> repeat .)
    LOR             reduce using rule 167 (expression -> repeat .)
    COND            reduce using rule 167 (expression -> repeat .)
    RPAREN          reduce using rule 167 (expression -> repeat .)
    LBRACE          reduce using rule 167 (expression -> repeat .)
    RBRACE          reduce using rule 167 (expression -> repeat .)
    COMMA           reduce using rule 167 (expression -> repeat .)
    COLON           reduce using rule 167 (expression -> repeat .)
    SEMICOLON       reduce using rule 167 (expression -> repeat .)
    PLUSCOLON       reduce using rule 167 (expression -> repeat .)
    MINUSCOLON      reduce using rule 167 (expression -> repeat .)
    RBRACKET        reduce using rule 167 (expression -> repeat .)


state 100

    (168) expression -> partselect .

    TIMES           reduce using rule 168 (expression -> partselect .)
    POWER           reduce using rule 168 (expression -> partselect .)
    DIVIDE          reduce using rule 168 (expression -> partselect .)
    MOD             reduce using rule 168 (expression -> partselect .)
    PLUS            reduce using rule 168 (expression -> partselect .)
    MINUS           reduce using rule 168 (expression -> partselect .)
    LSHIFT          reduce using rule 168 (expression -> partselect .)
    RSHIFT          reduce using rule 168 (expression -> partselect .)
    LSHIFTA         reduce using rule 168 (expression -> partselect .)
    RSHIFTA         reduce using rule 168 (expression -> partselect .)
    LT              reduce using rule 168 (expression -> partselect .)
    GT              reduce using rule 168 (expression -> partselect .)
    LE              reduce using rule 168 (expression -> partselect .)
    GE              reduce using rule 168 (expression -> partselect .)
    EQ              reduce using rule 168 (expression -> partselect .)
    NE              reduce using rule 168 (expression -> partselect .)
    EQL             reduce using rule 168 (expression -> partselect .)
    NEL             reduce using rule 168 (expression -> partselect .)
    AND             reduce using rule 168 (expression -> partselect .)
    XOR             reduce using rule 168 (expression -> partselect .)
    XNOR            reduce using rule 168 (expression -> partselect .)
    OR              reduce using rule 168 (expression -> partselect .)
    LAND            reduce using rule 168 (expression -> partselect .)
    LOR             reduce using rule 168 (expression -> partselect .)
    COND            reduce using rule 168 (expression -> partselect .)
    RPAREN          reduce using rule 168 (expression -> partselect .)
    LBRACE          reduce using rule 168 (expression -> partselect .)
    RBRACE          reduce using rule 168 (expression -> partselect .)
    COMMA           reduce using rule 168 (expression -> partselect .)
    COLON           reduce using rule 168 (expression -> partselect .)
    SEMICOLON       reduce using rule 168 (expression -> partselect .)
    PLUSCOLON       reduce using rule 168 (expression -> partselect .)
    MINUSCOLON      reduce using rule 168 (expression -> partselect .)
    RBRACKET        reduce using rule 168 (expression -> partselect .)


state 101

    (169) expression -> pointer .
    (181) partselect -> pointer . LBRACKET expression COLON expression RBRACKET
    (182) partselect -> pointer . LBRACKET expression PLUSCOLON expression RBRACKET
    (183) partselect -> pointer . LBRACKET expression MINUSCOLON expression RBRACKET
    (185) pointer -> pointer . LBRACKET expression RBRACKET
    (395) scope -> pointer . DOT

    TIMES           reduce using rule 169 (expression -> pointer .)
    POWER           reduce using rule 169 (expression -> pointer .)
    DIVIDE          reduce using rule 169 (expression -> pointer .)
    MOD             reduce using rule 169 (expression -> pointer .)
    PLUS            reduce using rule 169 (expression -> pointer .)
    MINUS           reduce using rule 169 (expression -> pointer .)
    LSHIFT          reduce using rule 169 (expression -> pointer .)
    RSHIFT          reduce using rule 169 (expression -> pointer .)
    LSHIFTA         reduce using rule 169 (expression -> pointer .)
    RSHIFTA         reduce using rule 169 (expression -> pointer .)
    LT              reduce using rule 169 (expression -> pointer .)
    GT              reduce using rule 169 (expression -> pointer .)
    LE              reduce using rule 169 (expression -> pointer .)
    GE              reduce using rule 169 (expression -> pointer .)
    EQ              reduce using rule 169 (expression -> pointer .)
    NE              reduce using rule 169 (expression -> pointer .)
    EQL             reduce using rule 169 (expression -> pointer .)
    NEL             reduce using rule 169 (expression -> pointer .)
    AND             reduce using rule 169 (expression -> pointer .)
    XOR             reduce using rule 169 (expression -> pointer .)
    XNOR            reduce using rule 169 (expression -> pointer .)
    OR              reduce using rule 169 (expression -> pointer .)
    LAND            reduce using rule 169 (expression -> pointer .)
    LOR             reduce using rule 169 (expression -> pointer .)
    COND            reduce using rule 169 (expression -> pointer .)
    RPAREN          reduce using rule 169 (expression -> pointer .)
    LBRACE          reduce using rule 169 (expression -> pointer .)
    RBRACE          reduce using rule 169 (expression -> pointer .)
    COMMA           reduce using rule 169 (expression -> pointer .)
    COLON           reduce using rule 169 (expression -> pointer .)
    SEMICOLON       reduce using rule 169 (expression -> pointer .)
    PLUSCOLON       reduce using rule 169 (expression -> pointer .)
    MINUSCOLON      reduce using rule 169 (expression -> pointer .)
    RBRACKET        reduce using rule 169 (expression -> pointer .)
    LBRACKET        shift and go to state 270
    DOT             shift and go to state 271


state 102

    (170) expression -> functioncall .

    TIMES           reduce using rule 170 (expression -> functioncall .)
    POWER           reduce using rule 170 (expression -> functioncall .)
    DIVIDE          reduce using rule 170 (expression -> functioncall .)
    MOD             reduce using rule 170 (expression -> functioncall .)
    PLUS            reduce using rule 170 (expression -> functioncall .)
    MINUS           reduce using rule 170 (expression -> functioncall .)
    LSHIFT          reduce using rule 170 (expression -> functioncall .)
    RSHIFT          reduce using rule 170 (expression -> functioncall .)
    LSHIFTA         reduce using rule 170 (expression -> functioncall .)
    RSHIFTA         reduce using rule 170 (expression -> functioncall .)
    LT              reduce using rule 170 (expression -> functioncall .)
    GT              reduce using rule 170 (expression -> functioncall .)
    LE              reduce using rule 170 (expression -> functioncall .)
    GE              reduce using rule 170 (expression -> functioncall .)
    EQ              reduce using rule 170 (expression -> functioncall .)
    NE              reduce using rule 170 (expression -> functioncall .)
    EQL             reduce using rule 170 (expression -> functioncall .)
    NEL             reduce using rule 170 (expression -> functioncall .)
    AND             reduce using rule 170 (expression -> functioncall .)
    XOR             reduce using rule 170 (expression -> functioncall .)
    XNOR            reduce using rule 170 (expression -> functioncall .)
    OR              reduce using rule 170 (expression -> functioncall .)
    LAND            reduce using rule 170 (expression -> functioncall .)
    LOR             reduce using rule 170 (expression -> functioncall .)
    COND            reduce using rule 170 (expression -> functioncall .)
    RPAREN          reduce using rule 170 (expression -> functioncall .)
    LBRACE          reduce using rule 170 (expression -> functioncall .)
    RBRACE          reduce using rule 170 (expression -> functioncall .)
    COMMA           reduce using rule 170 (expression -> functioncall .)
    COLON           reduce using rule 170 (expression -> functioncall .)
    SEMICOLON       reduce using rule 170 (expression -> functioncall .)
    PLUSCOLON       reduce using rule 170 (expression -> functioncall .)
    MINUSCOLON      reduce using rule 170 (expression -> functioncall .)
    RBRACKET        reduce using rule 170 (expression -> functioncall .)


state 103

    (171) expression -> systemcall .

    TIMES           reduce using rule 171 (expression -> systemcall .)
    POWER           reduce using rule 171 (expression -> systemcall .)
    DIVIDE          reduce using rule 171 (expression -> systemcall .)
    MOD             reduce using rule 171 (expression -> systemcall .)
    PLUS            reduce using rule 171 (expression -> systemcall .)
    MINUS           reduce using rule 171 (expression -> systemcall .)
    LSHIFT          reduce using rule 171 (expression -> systemcall .)
    RSHIFT          reduce using rule 171 (expression -> systemcall .)
    LSHIFTA         reduce using rule 171 (expression -> systemcall .)
    RSHIFTA         reduce using rule 171 (expression -> systemcall .)
    LT              reduce using rule 171 (expression -> systemcall .)
    GT              reduce using rule 171 (expression -> systemcall .)
    LE              reduce using rule 171 (expression -> systemcall .)
    GE              reduce using rule 171 (expression -> systemcall .)
    EQ              reduce using rule 171 (expression -> systemcall .)
    NE              reduce using rule 171 (expression -> systemcall .)
    EQL             reduce using rule 171 (expression -> systemcall .)
    NEL             reduce using rule 171 (expression -> systemcall .)
    AND             reduce using rule 171 (expression -> systemcall .)
    XOR             reduce using rule 171 (expression -> systemcall .)
    XNOR            reduce using rule 171 (expression -> systemcall .)
    OR              reduce using rule 171 (expression -> systemcall .)
    LAND            reduce using rule 171 (expression -> systemcall .)
    LOR             reduce using rule 171 (expression -> systemcall .)
    COND            reduce using rule 171 (expression -> systemcall .)
    RPAREN          reduce using rule 171 (expression -> systemcall .)
    LBRACE          reduce using rule 171 (expression -> systemcall .)
    RBRACE          reduce using rule 171 (expression -> systemcall .)
    COMMA           reduce using rule 171 (expression -> systemcall .)
    COLON           reduce using rule 171 (expression -> systemcall .)
    SEMICOLON       reduce using rule 171 (expression -> systemcall .)
    PLUSCOLON       reduce using rule 171 (expression -> systemcall .)
    MINUSCOLON      reduce using rule 171 (expression -> systemcall .)
    RBRACKET        reduce using rule 171 (expression -> systemcall .)


state 104

    (172) expression -> identifier .
    (178) partselect -> identifier . LBRACKET expression COLON expression RBRACKET
    (179) partselect -> identifier . LBRACKET expression PLUSCOLON expression RBRACKET
    (180) partselect -> identifier . LBRACKET expression MINUSCOLON expression RBRACKET
    (184) pointer -> identifier . LBRACKET expression RBRACKET
    (373) functioncall -> identifier . LPAREN func_args RPAREN
    (394) scope -> identifier . DOT

    TIMES           reduce using rule 172 (expression -> identifier .)
    POWER           reduce using rule 172 (expression -> identifier .)
    DIVIDE          reduce using rule 172 (expression -> identifier .)
    MOD             reduce using rule 172 (expression -> identifier .)
    PLUS            reduce using rule 172 (expression -> identifier .)
    MINUS           reduce using rule 172 (expression -> identifier .)
    LSHIFT          reduce using rule 172 (expression -> identifier .)
    RSHIFT          reduce using rule 172 (expression -> identifier .)
    LSHIFTA         reduce using rule 172 (expression -> identifier .)
    RSHIFTA         reduce using rule 172 (expression -> identifier .)
    LT              reduce using rule 172 (expression -> identifier .)
    GT              reduce using rule 172 (expression -> identifier .)
    LE              reduce using rule 172 (expression -> identifier .)
    GE              reduce using rule 172 (expression -> identifier .)
    EQ              reduce using rule 172 (expression -> identifier .)
    NE              reduce using rule 172 (expression -> identifier .)
    EQL             reduce using rule 172 (expression -> identifier .)
    NEL             reduce using rule 172 (expression -> identifier .)
    AND             reduce using rule 172 (expression -> identifier .)
    XOR             reduce using rule 172 (expression -> identifier .)
    XNOR            reduce using rule 172 (expression -> identifier .)
    OR              reduce using rule 172 (expression -> identifier .)
    LAND            reduce using rule 172 (expression -> identifier .)
    LOR             reduce using rule 172 (expression -> identifier .)
    COND            reduce using rule 172 (expression -> identifier .)
    RPAREN          reduce using rule 172 (expression -> identifier .)
    LBRACE          reduce using rule 172 (expression -> identifier .)
    RBRACE          reduce using rule 172 (expression -> identifier .)
    COMMA           reduce using rule 172 (expression -> identifier .)
    COLON           reduce using rule 172 (expression -> identifier .)
    SEMICOLON       reduce using rule 172 (expression -> identifier .)
    PLUSCOLON       reduce using rule 172 (expression -> identifier .)
    MINUSCOLON      reduce using rule 172 (expression -> identifier .)
    RBRACKET        reduce using rule 172 (expression -> identifier .)
    LBRACKET        shift and go to state 272
    LPAREN          shift and go to state 273
    DOT             shift and go to state 274


state 105

    (173) expression -> const_expression .

    TIMES           reduce using rule 173 (expression -> const_expression .)
    POWER           reduce using rule 173 (expression -> const_expression .)
    DIVIDE          reduce using rule 173 (expression -> const_expression .)
    MOD             reduce using rule 173 (expression -> const_expression .)
    PLUS            reduce using rule 173 (expression -> const_expression .)
    MINUS           reduce using rule 173 (expression -> const_expression .)
    LSHIFT          reduce using rule 173 (expression -> const_expression .)
    RSHIFT          reduce using rule 173 (expression -> const_expression .)
    LSHIFTA         reduce using rule 173 (expression -> const_expression .)
    RSHIFTA         reduce using rule 173 (expression -> const_expression .)
    LT              reduce using rule 173 (expression -> const_expression .)
    GT              reduce using rule 173 (expression -> const_expression .)
    LE              reduce using rule 173 (expression -> const_expression .)
    GE              reduce using rule 173 (expression -> const_expression .)
    EQ              reduce using rule 173 (expression -> const_expression .)
    NE              reduce using rule 173 (expression -> const_expression .)
    EQL             reduce using rule 173 (expression -> const_expression .)
    NEL             reduce using rule 173 (expression -> const_expression .)
    AND             reduce using rule 173 (expression -> const_expression .)
    XOR             reduce using rule 173 (expression -> const_expression .)
    XNOR            reduce using rule 173 (expression -> const_expression .)
    OR              reduce using rule 173 (expression -> const_expression .)
    LAND            reduce using rule 173 (expression -> const_expression .)
    LOR             reduce using rule 173 (expression -> const_expression .)
    COND            reduce using rule 173 (expression -> const_expression .)
    RPAREN          reduce using rule 173 (expression -> const_expression .)
    LBRACE          reduce using rule 173 (expression -> const_expression .)
    RBRACE          reduce using rule 173 (expression -> const_expression .)
    COMMA           reduce using rule 173 (expression -> const_expression .)
    COLON           reduce using rule 173 (expression -> const_expression .)
    SEMICOLON       reduce using rule 173 (expression -> const_expression .)
    PLUSCOLON       reduce using rule 173 (expression -> const_expression .)
    MINUSCOLON      reduce using rule 173 (expression -> const_expression .)
    RBRACKET        reduce using rule 173 (expression -> const_expression .)


state 106

    (174) concat -> LBRACE . concatlist RBRACE
    (177) repeat -> LBRACE . expression concat RBRACE
    (175) concatlist -> . concatlist COMMA expression
    (176) concatlist -> . expression
    (130) expression -> . MINUS expression
    (131) expression -> . PLUS expression
    (132) expression -> . LNOT expression
    (133) expression -> . NOT expression
    (134) expression -> . AND expression
    (135) expression -> . NAND expression
    (136) expression -> . NOR expression
    (137) expression -> . OR expression
    (138) expression -> . XOR expression
    (139) expression -> . XNOR expression
    (140) expression -> . expression POWER expression
    (141) expression -> . expression TIMES expression
    (142) expression -> . expression DIVIDE expression
    (143) expression -> . expression MOD expression
    (144) expression -> . expression PLUS expression
    (145) expression -> . expression MINUS expression
    (146) expression -> . expression LSHIFT expression
    (147) expression -> . expression RSHIFT expression
    (148) expression -> . expression LSHIFTA expression
    (149) expression -> . expression RSHIFTA expression
    (150) expression -> . expression LT expression
    (151) expression -> . expression GT expression
    (152) expression -> . expression LE expression
    (153) expression -> . expression GE expression
    (154) expression -> . expression EQ expression
    (155) expression -> . expression NE expression
    (156) expression -> . expression EQL expression
    (157) expression -> . expression NEL expression
    (158) expression -> . expression AND expression
    (159) expression -> . expression XOR expression
    (160) expression -> . expression XNOR expression
    (161) expression -> . expression OR expression
    (162) expression -> . expression LAND expression
    (163) expression -> . expression LOR expression
    (164) expression -> . expression COND expression COLON expression
    (165) expression -> . LPAREN expression RPAREN
    (166) expression -> . concat
    (167) expression -> . repeat
    (168) expression -> . partselect
    (169) expression -> . pointer
    (170) expression -> . functioncall
    (171) expression -> . systemcall
    (172) expression -> . identifier
    (173) expression -> . const_expression
    (174) concat -> . LBRACE concatlist RBRACE
    (177) repeat -> . LBRACE expression concat RBRACE
    (178) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (179) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (180) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (181) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (182) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (183) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (184) pointer -> . identifier LBRACKET expression RBRACKET
    (185) pointer -> . pointer LBRACKET expression RBRACKET
    (373) functioncall -> . identifier LPAREN func_args RPAREN
    (351) systemcall -> . DOLLER ID
    (352) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (353) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (392) identifier -> . ID
    (393) identifier -> . scope ID
    (186) const_expression -> . intnumber
    (187) const_expression -> . floatnumber
    (188) const_expression -> . stringliteral
    (394) scope -> . identifier DOT
    (395) scope -> . pointer DOT
    (190) intnumber -> . INTNUMBER_DEC
    (191) intnumber -> . SIGNED_INTNUMBER_DEC
    (192) intnumber -> . INTNUMBER_BIN
    (193) intnumber -> . SIGNED_INTNUMBER_BIN
    (194) intnumber -> . INTNUMBER_OCT
    (195) intnumber -> . SIGNED_INTNUMBER_OCT
    (196) intnumber -> . INTNUMBER_HEX
    (197) intnumber -> . SIGNED_INTNUMBER_HEX
    (189) floatnumber -> . FLOATNUMBER
    (198) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 88
    PLUS            shift and go to state 89
    LNOT            shift and go to state 90
    NOT             shift and go to state 91
    AND             shift and go to state 92
    NAND            shift and go to state 93
    NOR             shift and go to state 94
    OR              shift and go to state 95
    XOR             shift and go to state 96
    XNOR            shift and go to state 97
    LPAREN          shift and go to state 85
    LBRACE          shift and go to state 106
    DOLLER          shift and go to state 107
    ID              shift and go to state 86
    INTNUMBER_DEC   shift and go to state 112
    SIGNED_INTNUMBER_DEC shift and go to state 113
    INTNUMBER_BIN   shift and go to state 114
    SIGNED_INTNUMBER_BIN shift and go to state 115
    INTNUMBER_OCT   shift and go to state 116
    SIGNED_INTNUMBER_OCT shift and go to state 117
    INTNUMBER_HEX   shift and go to state 118
    SIGNED_INTNUMBER_HEX shift and go to state 119
    FLOATNUMBER     shift and go to state 120
    STRING_LITERAL  shift and go to state 121

    concatlist                     shift and go to state 275
    expression                     shift and go to state 276
    concat                         shift and go to state 98
    repeat                         shift and go to state 99
    partselect                     shift and go to state 100
    pointer                        shift and go to state 101
    functioncall                   shift and go to state 102
    systemcall                     shift and go to state 103
    identifier                     shift and go to state 104
    const_expression               shift and go to state 105
    scope                          shift and go to state 108
    intnumber                      shift and go to state 109
    floatnumber                    shift and go to state 110
    stringliteral                  shift and go to state 111

state 107

    (351) systemcall -> DOLLER . ID
    (352) systemcall -> DOLLER . ID LPAREN sysargs RPAREN
    (353) systemcall -> DOLLER . SIGNED LPAREN sysargs RPAREN

    ID              shift and go to state 277
    SIGNED          shift and go to state 278


state 108

    (393) identifier -> scope . ID

    ID              shift and go to state 279


state 109

    (186) const_expression -> intnumber .

    TIMES           reduce using rule 186 (const_expression -> intnumber .)
    POWER           reduce using rule 186 (const_expression -> intnumber .)
    DIVIDE          reduce using rule 186 (const_expression -> intnumber .)
    MOD             reduce using rule 186 (const_expression -> intnumber .)
    PLUS            reduce using rule 186 (const_expression -> intnumber .)
    MINUS           reduce using rule 186 (const_expression -> intnumber .)
    LSHIFT          reduce using rule 186 (const_expression -> intnumber .)
    RSHIFT          reduce using rule 186 (const_expression -> intnumber .)
    LSHIFTA         reduce using rule 186 (const_expression -> intnumber .)
    RSHIFTA         reduce using rule 186 (const_expression -> intnumber .)
    LT              reduce using rule 186 (const_expression -> intnumber .)
    GT              reduce using rule 186 (const_expression -> intnumber .)
    LE              reduce using rule 186 (const_expression -> intnumber .)
    GE              reduce using rule 186 (const_expression -> intnumber .)
    EQ              reduce using rule 186 (const_expression -> intnumber .)
    NE              reduce using rule 186 (const_expression -> intnumber .)
    EQL             reduce using rule 186 (const_expression -> intnumber .)
    NEL             reduce using rule 186 (const_expression -> intnumber .)
    AND             reduce using rule 186 (const_expression -> intnumber .)
    XOR             reduce using rule 186 (const_expression -> intnumber .)
    XNOR            reduce using rule 186 (const_expression -> intnumber .)
    OR              reduce using rule 186 (const_expression -> intnumber .)
    LAND            reduce using rule 186 (const_expression -> intnumber .)
    LOR             reduce using rule 186 (const_expression -> intnumber .)
    COND            reduce using rule 186 (const_expression -> intnumber .)
    RPAREN          reduce using rule 186 (const_expression -> intnumber .)
    LBRACE          reduce using rule 186 (const_expression -> intnumber .)
    RBRACE          reduce using rule 186 (const_expression -> intnumber .)
    COMMA           reduce using rule 186 (const_expression -> intnumber .)
    COLON           reduce using rule 186 (const_expression -> intnumber .)
    SEMICOLON       reduce using rule 186 (const_expression -> intnumber .)
    PLUSCOLON       reduce using rule 186 (const_expression -> intnumber .)
    MINUSCOLON      reduce using rule 186 (const_expression -> intnumber .)
    RBRACKET        reduce using rule 186 (const_expression -> intnumber .)


state 110

    (187) const_expression -> floatnumber .

    TIMES           reduce using rule 187 (const_expression -> floatnumber .)
    POWER           reduce using rule 187 (const_expression -> floatnumber .)
    DIVIDE          reduce using rule 187 (const_expression -> floatnumber .)
    MOD             reduce using rule 187 (const_expression -> floatnumber .)
    PLUS            reduce using rule 187 (const_expression -> floatnumber .)
    MINUS           reduce using rule 187 (const_expression -> floatnumber .)
    LSHIFT          reduce using rule 187 (const_expression -> floatnumber .)
    RSHIFT          reduce using rule 187 (const_expression -> floatnumber .)
    LSHIFTA         reduce using rule 187 (const_expression -> floatnumber .)
    RSHIFTA         reduce using rule 187 (const_expression -> floatnumber .)
    LT              reduce using rule 187 (const_expression -> floatnumber .)
    GT              reduce using rule 187 (const_expression -> floatnumber .)
    LE              reduce using rule 187 (const_expression -> floatnumber .)
    GE              reduce using rule 187 (const_expression -> floatnumber .)
    EQ              reduce using rule 187 (const_expression -> floatnumber .)
    NE              reduce using rule 187 (const_expression -> floatnumber .)
    EQL             reduce using rule 187 (const_expression -> floatnumber .)
    NEL             reduce using rule 187 (const_expression -> floatnumber .)
    AND             reduce using rule 187 (const_expression -> floatnumber .)
    XOR             reduce using rule 187 (const_expression -> floatnumber .)
    XNOR            reduce using rule 187 (const_expression -> floatnumber .)
    OR              reduce using rule 187 (const_expression -> floatnumber .)
    LAND            reduce using rule 187 (const_expression -> floatnumber .)
    LOR             reduce using rule 187 (const_expression -> floatnumber .)
    COND            reduce using rule 187 (const_expression -> floatnumber .)
    RPAREN          reduce using rule 187 (const_expression -> floatnumber .)
    LBRACE          reduce using rule 187 (const_expression -> floatnumber .)
    RBRACE          reduce using rule 187 (const_expression -> floatnumber .)
    COMMA           reduce using rule 187 (const_expression -> floatnumber .)
    COLON           reduce using rule 187 (const_expression -> floatnumber .)
    SEMICOLON       reduce using rule 187 (const_expression -> floatnumber .)
    PLUSCOLON       reduce using rule 187 (const_expression -> floatnumber .)
    MINUSCOLON      reduce using rule 187 (const_expression -> floatnumber .)
    RBRACKET        reduce using rule 187 (const_expression -> floatnumber .)


state 111

    (188) const_expression -> stringliteral .

    TIMES           reduce using rule 188 (const_expression -> stringliteral .)
    POWER           reduce using rule 188 (const_expression -> stringliteral .)
    DIVIDE          reduce using rule 188 (const_expression -> stringliteral .)
    MOD             reduce using rule 188 (const_expression -> stringliteral .)
    PLUS            reduce using rule 188 (const_expression -> stringliteral .)
    MINUS           reduce using rule 188 (const_expression -> stringliteral .)
    LSHIFT          reduce using rule 188 (const_expression -> stringliteral .)
    RSHIFT          reduce using rule 188 (const_expression -> stringliteral .)
    LSHIFTA         reduce using rule 188 (const_expression -> stringliteral .)
    RSHIFTA         reduce using rule 188 (const_expression -> stringliteral .)
    LT              reduce using rule 188 (const_expression -> stringliteral .)
    GT              reduce using rule 188 (const_expression -> stringliteral .)
    LE              reduce using rule 188 (const_expression -> stringliteral .)
    GE              reduce using rule 188 (const_expression -> stringliteral .)
    EQ              reduce using rule 188 (const_expression -> stringliteral .)
    NE              reduce using rule 188 (const_expression -> stringliteral .)
    EQL             reduce using rule 188 (const_expression -> stringliteral .)
    NEL             reduce using rule 188 (const_expression -> stringliteral .)
    AND             reduce using rule 188 (const_expression -> stringliteral .)
    XOR             reduce using rule 188 (const_expression -> stringliteral .)
    XNOR            reduce using rule 188 (const_expression -> stringliteral .)
    OR              reduce using rule 188 (const_expression -> stringliteral .)
    LAND            reduce using rule 188 (const_expression -> stringliteral .)
    LOR             reduce using rule 188 (const_expression -> stringliteral .)
    COND            reduce using rule 188 (const_expression -> stringliteral .)
    RPAREN          reduce using rule 188 (const_expression -> stringliteral .)
    LBRACE          reduce using rule 188 (const_expression -> stringliteral .)
    RBRACE          reduce using rule 188 (const_expression -> stringliteral .)
    COMMA           reduce using rule 188 (const_expression -> stringliteral .)
    COLON           reduce using rule 188 (const_expression -> stringliteral .)
    SEMICOLON       reduce using rule 188 (const_expression -> stringliteral .)
    PLUSCOLON       reduce using rule 188 (const_expression -> stringliteral .)
    MINUSCOLON      reduce using rule 188 (const_expression -> stringliteral .)
    RBRACKET        reduce using rule 188 (const_expression -> stringliteral .)


state 112

    (190) intnumber -> INTNUMBER_DEC .

    TIMES           reduce using rule 190 (intnumber -> INTNUMBER_DEC .)
    POWER           reduce using rule 190 (intnumber -> INTNUMBER_DEC .)
    DIVIDE          reduce using rule 190 (intnumber -> INTNUMBER_DEC .)
    MOD             reduce using rule 190 (intnumber -> INTNUMBER_DEC .)
    PLUS            reduce using rule 190 (intnumber -> INTNUMBER_DEC .)
    MINUS           reduce using rule 190 (intnumber -> INTNUMBER_DEC .)
    LSHIFT          reduce using rule 190 (intnumber -> INTNUMBER_DEC .)
    RSHIFT          reduce using rule 190 (intnumber -> INTNUMBER_DEC .)
    LSHIFTA         reduce using rule 190 (intnumber -> INTNUMBER_DEC .)
    RSHIFTA         reduce using rule 190 (intnumber -> INTNUMBER_DEC .)
    LT              reduce using rule 190 (intnumber -> INTNUMBER_DEC .)
    GT              reduce using rule 190 (intnumber -> INTNUMBER_DEC .)
    LE              reduce using rule 190 (intnumber -> INTNUMBER_DEC .)
    GE              reduce using rule 190 (intnumber -> INTNUMBER_DEC .)
    EQ              reduce using rule 190 (intnumber -> INTNUMBER_DEC .)
    NE              reduce using rule 190 (intnumber -> INTNUMBER_DEC .)
    EQL             reduce using rule 190 (intnumber -> INTNUMBER_DEC .)
    NEL             reduce using rule 190 (intnumber -> INTNUMBER_DEC .)
    AND             reduce using rule 190 (intnumber -> INTNUMBER_DEC .)
    XOR             reduce using rule 190 (intnumber -> INTNUMBER_DEC .)
    XNOR            reduce using rule 190 (intnumber -> INTNUMBER_DEC .)
    OR              reduce using rule 190 (intnumber -> INTNUMBER_DEC .)
    LAND            reduce using rule 190 (intnumber -> INTNUMBER_DEC .)
    LOR             reduce using rule 190 (intnumber -> INTNUMBER_DEC .)
    COND            reduce using rule 190 (intnumber -> INTNUMBER_DEC .)
    RPAREN          reduce using rule 190 (intnumber -> INTNUMBER_DEC .)
    LBRACE          reduce using rule 190 (intnumber -> INTNUMBER_DEC .)
    RBRACE          reduce using rule 190 (intnumber -> INTNUMBER_DEC .)
    COMMA           reduce using rule 190 (intnumber -> INTNUMBER_DEC .)
    COLON           reduce using rule 190 (intnumber -> INTNUMBER_DEC .)
    SEMICOLON       reduce using rule 190 (intnumber -> INTNUMBER_DEC .)
    PLUSCOLON       reduce using rule 190 (intnumber -> INTNUMBER_DEC .)
    MINUSCOLON      reduce using rule 190 (intnumber -> INTNUMBER_DEC .)
    RBRACKET        reduce using rule 190 (intnumber -> INTNUMBER_DEC .)
    ID              reduce using rule 190 (intnumber -> INTNUMBER_DEC .)
    LNOT            reduce using rule 190 (intnumber -> INTNUMBER_DEC .)
    NOT             reduce using rule 190 (intnumber -> INTNUMBER_DEC .)
    NAND            reduce using rule 190 (intnumber -> INTNUMBER_DEC .)
    NOR             reduce using rule 190 (intnumber -> INTNUMBER_DEC .)
    LPAREN          reduce using rule 190 (intnumber -> INTNUMBER_DEC .)
    DOLLER          reduce using rule 190 (intnumber -> INTNUMBER_DEC .)
    INTNUMBER_DEC   reduce using rule 190 (intnumber -> INTNUMBER_DEC .)
    SIGNED_INTNUMBER_DEC reduce using rule 190 (intnumber -> INTNUMBER_DEC .)
    INTNUMBER_BIN   reduce using rule 190 (intnumber -> INTNUMBER_DEC .)
    SIGNED_INTNUMBER_BIN reduce using rule 190 (intnumber -> INTNUMBER_DEC .)
    INTNUMBER_OCT   reduce using rule 190 (intnumber -> INTNUMBER_DEC .)
    SIGNED_INTNUMBER_OCT reduce using rule 190 (intnumber -> INTNUMBER_DEC .)
    INTNUMBER_HEX   reduce using rule 190 (intnumber -> INTNUMBER_DEC .)
    SIGNED_INTNUMBER_HEX reduce using rule 190 (intnumber -> INTNUMBER_DEC .)
    FLOATNUMBER     reduce using rule 190 (intnumber -> INTNUMBER_DEC .)
    STRING_LITERAL  reduce using rule 190 (intnumber -> INTNUMBER_DEC .)
    IF              reduce using rule 190 (intnumber -> INTNUMBER_DEC .)


state 113

    (191) intnumber -> SIGNED_INTNUMBER_DEC .

    TIMES           reduce using rule 191 (intnumber -> SIGNED_INTNUMBER_DEC .)
    POWER           reduce using rule 191 (intnumber -> SIGNED_INTNUMBER_DEC .)
    DIVIDE          reduce using rule 191 (intnumber -> SIGNED_INTNUMBER_DEC .)
    MOD             reduce using rule 191 (intnumber -> SIGNED_INTNUMBER_DEC .)
    PLUS            reduce using rule 191 (intnumber -> SIGNED_INTNUMBER_DEC .)
    MINUS           reduce using rule 191 (intnumber -> SIGNED_INTNUMBER_DEC .)
    LSHIFT          reduce using rule 191 (intnumber -> SIGNED_INTNUMBER_DEC .)
    RSHIFT          reduce using rule 191 (intnumber -> SIGNED_INTNUMBER_DEC .)
    LSHIFTA         reduce using rule 191 (intnumber -> SIGNED_INTNUMBER_DEC .)
    RSHIFTA         reduce using rule 191 (intnumber -> SIGNED_INTNUMBER_DEC .)
    LT              reduce using rule 191 (intnumber -> SIGNED_INTNUMBER_DEC .)
    GT              reduce using rule 191 (intnumber -> SIGNED_INTNUMBER_DEC .)
    LE              reduce using rule 191 (intnumber -> SIGNED_INTNUMBER_DEC .)
    GE              reduce using rule 191 (intnumber -> SIGNED_INTNUMBER_DEC .)
    EQ              reduce using rule 191 (intnumber -> SIGNED_INTNUMBER_DEC .)
    NE              reduce using rule 191 (intnumber -> SIGNED_INTNUMBER_DEC .)
    EQL             reduce using rule 191 (intnumber -> SIGNED_INTNUMBER_DEC .)
    NEL             reduce using rule 191 (intnumber -> SIGNED_INTNUMBER_DEC .)
    AND             reduce using rule 191 (intnumber -> SIGNED_INTNUMBER_DEC .)
    XOR             reduce using rule 191 (intnumber -> SIGNED_INTNUMBER_DEC .)
    XNOR            reduce using rule 191 (intnumber -> SIGNED_INTNUMBER_DEC .)
    OR              reduce using rule 191 (intnumber -> SIGNED_INTNUMBER_DEC .)
    LAND            reduce using rule 191 (intnumber -> SIGNED_INTNUMBER_DEC .)
    LOR             reduce using rule 191 (intnumber -> SIGNED_INTNUMBER_DEC .)
    COND            reduce using rule 191 (intnumber -> SIGNED_INTNUMBER_DEC .)
    RPAREN          reduce using rule 191 (intnumber -> SIGNED_INTNUMBER_DEC .)
    LBRACE          reduce using rule 191 (intnumber -> SIGNED_INTNUMBER_DEC .)
    RBRACE          reduce using rule 191 (intnumber -> SIGNED_INTNUMBER_DEC .)
    COMMA           reduce using rule 191 (intnumber -> SIGNED_INTNUMBER_DEC .)
    COLON           reduce using rule 191 (intnumber -> SIGNED_INTNUMBER_DEC .)
    SEMICOLON       reduce using rule 191 (intnumber -> SIGNED_INTNUMBER_DEC .)
    PLUSCOLON       reduce using rule 191 (intnumber -> SIGNED_INTNUMBER_DEC .)
    MINUSCOLON      reduce using rule 191 (intnumber -> SIGNED_INTNUMBER_DEC .)
    RBRACKET        reduce using rule 191 (intnumber -> SIGNED_INTNUMBER_DEC .)
    ID              reduce using rule 191 (intnumber -> SIGNED_INTNUMBER_DEC .)
    LNOT            reduce using rule 191 (intnumber -> SIGNED_INTNUMBER_DEC .)
    NOT             reduce using rule 191 (intnumber -> SIGNED_INTNUMBER_DEC .)
    NAND            reduce using rule 191 (intnumber -> SIGNED_INTNUMBER_DEC .)
    NOR             reduce using rule 191 (intnumber -> SIGNED_INTNUMBER_DEC .)
    LPAREN          reduce using rule 191 (intnumber -> SIGNED_INTNUMBER_DEC .)
    DOLLER          reduce using rule 191 (intnumber -> SIGNED_INTNUMBER_DEC .)
    INTNUMBER_DEC   reduce using rule 191 (intnumber -> SIGNED_INTNUMBER_DEC .)
    SIGNED_INTNUMBER_DEC reduce using rule 191 (intnumber -> SIGNED_INTNUMBER_DEC .)
    INTNUMBER_BIN   reduce using rule 191 (intnumber -> SIGNED_INTNUMBER_DEC .)
    SIGNED_INTNUMBER_BIN reduce using rule 191 (intnumber -> SIGNED_INTNUMBER_DEC .)
    INTNUMBER_OCT   reduce using rule 191 (intnumber -> SIGNED_INTNUMBER_DEC .)
    SIGNED_INTNUMBER_OCT reduce using rule 191 (intnumber -> SIGNED_INTNUMBER_DEC .)
    INTNUMBER_HEX   reduce using rule 191 (intnumber -> SIGNED_INTNUMBER_DEC .)
    SIGNED_INTNUMBER_HEX reduce using rule 191 (intnumber -> SIGNED_INTNUMBER_DEC .)
    FLOATNUMBER     reduce using rule 191 (intnumber -> SIGNED_INTNUMBER_DEC .)
    STRING_LITERAL  reduce using rule 191 (intnumber -> SIGNED_INTNUMBER_DEC .)
    IF              reduce using rule 191 (intnumber -> SIGNED_INTNUMBER_DEC .)


state 114

    (192) intnumber -> INTNUMBER_BIN .

    TIMES           reduce using rule 192 (intnumber -> INTNUMBER_BIN .)
    POWER           reduce using rule 192 (intnumber -> INTNUMBER_BIN .)
    DIVIDE          reduce using rule 192 (intnumber -> INTNUMBER_BIN .)
    MOD             reduce using rule 192 (intnumber -> INTNUMBER_BIN .)
    PLUS            reduce using rule 192 (intnumber -> INTNUMBER_BIN .)
    MINUS           reduce using rule 192 (intnumber -> INTNUMBER_BIN .)
    LSHIFT          reduce using rule 192 (intnumber -> INTNUMBER_BIN .)
    RSHIFT          reduce using rule 192 (intnumber -> INTNUMBER_BIN .)
    LSHIFTA         reduce using rule 192 (intnumber -> INTNUMBER_BIN .)
    RSHIFTA         reduce using rule 192 (intnumber -> INTNUMBER_BIN .)
    LT              reduce using rule 192 (intnumber -> INTNUMBER_BIN .)
    GT              reduce using rule 192 (intnumber -> INTNUMBER_BIN .)
    LE              reduce using rule 192 (intnumber -> INTNUMBER_BIN .)
    GE              reduce using rule 192 (intnumber -> INTNUMBER_BIN .)
    EQ              reduce using rule 192 (intnumber -> INTNUMBER_BIN .)
    NE              reduce using rule 192 (intnumber -> INTNUMBER_BIN .)
    EQL             reduce using rule 192 (intnumber -> INTNUMBER_BIN .)
    NEL             reduce using rule 192 (intnumber -> INTNUMBER_BIN .)
    AND             reduce using rule 192 (intnumber -> INTNUMBER_BIN .)
    XOR             reduce using rule 192 (intnumber -> INTNUMBER_BIN .)
    XNOR            reduce using rule 192 (intnumber -> INTNUMBER_BIN .)
    OR              reduce using rule 192 (intnumber -> INTNUMBER_BIN .)
    LAND            reduce using rule 192 (intnumber -> INTNUMBER_BIN .)
    LOR             reduce using rule 192 (intnumber -> INTNUMBER_BIN .)
    COND            reduce using rule 192 (intnumber -> INTNUMBER_BIN .)
    RPAREN          reduce using rule 192 (intnumber -> INTNUMBER_BIN .)
    LBRACE          reduce using rule 192 (intnumber -> INTNUMBER_BIN .)
    RBRACE          reduce using rule 192 (intnumber -> INTNUMBER_BIN .)
    COMMA           reduce using rule 192 (intnumber -> INTNUMBER_BIN .)
    COLON           reduce using rule 192 (intnumber -> INTNUMBER_BIN .)
    SEMICOLON       reduce using rule 192 (intnumber -> INTNUMBER_BIN .)
    PLUSCOLON       reduce using rule 192 (intnumber -> INTNUMBER_BIN .)
    MINUSCOLON      reduce using rule 192 (intnumber -> INTNUMBER_BIN .)
    RBRACKET        reduce using rule 192 (intnumber -> INTNUMBER_BIN .)
    ID              reduce using rule 192 (intnumber -> INTNUMBER_BIN .)
    LNOT            reduce using rule 192 (intnumber -> INTNUMBER_BIN .)
    NOT             reduce using rule 192 (intnumber -> INTNUMBER_BIN .)
    NAND            reduce using rule 192 (intnumber -> INTNUMBER_BIN .)
    NOR             reduce using rule 192 (intnumber -> INTNUMBER_BIN .)
    LPAREN          reduce using rule 192 (intnumber -> INTNUMBER_BIN .)
    DOLLER          reduce using rule 192 (intnumber -> INTNUMBER_BIN .)
    INTNUMBER_DEC   reduce using rule 192 (intnumber -> INTNUMBER_BIN .)
    SIGNED_INTNUMBER_DEC reduce using rule 192 (intnumber -> INTNUMBER_BIN .)
    INTNUMBER_BIN   reduce using rule 192 (intnumber -> INTNUMBER_BIN .)
    SIGNED_INTNUMBER_BIN reduce using rule 192 (intnumber -> INTNUMBER_BIN .)
    INTNUMBER_OCT   reduce using rule 192 (intnumber -> INTNUMBER_BIN .)
    SIGNED_INTNUMBER_OCT reduce using rule 192 (intnumber -> INTNUMBER_BIN .)
    INTNUMBER_HEX   reduce using rule 192 (intnumber -> INTNUMBER_BIN .)
    SIGNED_INTNUMBER_HEX reduce using rule 192 (intnumber -> INTNUMBER_BIN .)
    FLOATNUMBER     reduce using rule 192 (intnumber -> INTNUMBER_BIN .)
    STRING_LITERAL  reduce using rule 192 (intnumber -> INTNUMBER_BIN .)
    IF              reduce using rule 192 (intnumber -> INTNUMBER_BIN .)


state 115

    (193) intnumber -> SIGNED_INTNUMBER_BIN .

    TIMES           reduce using rule 193 (intnumber -> SIGNED_INTNUMBER_BIN .)
    POWER           reduce using rule 193 (intnumber -> SIGNED_INTNUMBER_BIN .)
    DIVIDE          reduce using rule 193 (intnumber -> SIGNED_INTNUMBER_BIN .)
    MOD             reduce using rule 193 (intnumber -> SIGNED_INTNUMBER_BIN .)
    PLUS            reduce using rule 193 (intnumber -> SIGNED_INTNUMBER_BIN .)
    MINUS           reduce using rule 193 (intnumber -> SIGNED_INTNUMBER_BIN .)
    LSHIFT          reduce using rule 193 (intnumber -> SIGNED_INTNUMBER_BIN .)
    RSHIFT          reduce using rule 193 (intnumber -> SIGNED_INTNUMBER_BIN .)
    LSHIFTA         reduce using rule 193 (intnumber -> SIGNED_INTNUMBER_BIN .)
    RSHIFTA         reduce using rule 193 (intnumber -> SIGNED_INTNUMBER_BIN .)
    LT              reduce using rule 193 (intnumber -> SIGNED_INTNUMBER_BIN .)
    GT              reduce using rule 193 (intnumber -> SIGNED_INTNUMBER_BIN .)
    LE              reduce using rule 193 (intnumber -> SIGNED_INTNUMBER_BIN .)
    GE              reduce using rule 193 (intnumber -> SIGNED_INTNUMBER_BIN .)
    EQ              reduce using rule 193 (intnumber -> SIGNED_INTNUMBER_BIN .)
    NE              reduce using rule 193 (intnumber -> SIGNED_INTNUMBER_BIN .)
    EQL             reduce using rule 193 (intnumber -> SIGNED_INTNUMBER_BIN .)
    NEL             reduce using rule 193 (intnumber -> SIGNED_INTNUMBER_BIN .)
    AND             reduce using rule 193 (intnumber -> SIGNED_INTNUMBER_BIN .)
    XOR             reduce using rule 193 (intnumber -> SIGNED_INTNUMBER_BIN .)
    XNOR            reduce using rule 193 (intnumber -> SIGNED_INTNUMBER_BIN .)
    OR              reduce using rule 193 (intnumber -> SIGNED_INTNUMBER_BIN .)
    LAND            reduce using rule 193 (intnumber -> SIGNED_INTNUMBER_BIN .)
    LOR             reduce using rule 193 (intnumber -> SIGNED_INTNUMBER_BIN .)
    COND            reduce using rule 193 (intnumber -> SIGNED_INTNUMBER_BIN .)
    RPAREN          reduce using rule 193 (intnumber -> SIGNED_INTNUMBER_BIN .)
    LBRACE          reduce using rule 193 (intnumber -> SIGNED_INTNUMBER_BIN .)
    RBRACE          reduce using rule 193 (intnumber -> SIGNED_INTNUMBER_BIN .)
    COMMA           reduce using rule 193 (intnumber -> SIGNED_INTNUMBER_BIN .)
    COLON           reduce using rule 193 (intnumber -> SIGNED_INTNUMBER_BIN .)
    SEMICOLON       reduce using rule 193 (intnumber -> SIGNED_INTNUMBER_BIN .)
    PLUSCOLON       reduce using rule 193 (intnumber -> SIGNED_INTNUMBER_BIN .)
    MINUSCOLON      reduce using rule 193 (intnumber -> SIGNED_INTNUMBER_BIN .)
    RBRACKET        reduce using rule 193 (intnumber -> SIGNED_INTNUMBER_BIN .)
    ID              reduce using rule 193 (intnumber -> SIGNED_INTNUMBER_BIN .)
    LNOT            reduce using rule 193 (intnumber -> SIGNED_INTNUMBER_BIN .)
    NOT             reduce using rule 193 (intnumber -> SIGNED_INTNUMBER_BIN .)
    NAND            reduce using rule 193 (intnumber -> SIGNED_INTNUMBER_BIN .)
    NOR             reduce using rule 193 (intnumber -> SIGNED_INTNUMBER_BIN .)
    LPAREN          reduce using rule 193 (intnumber -> SIGNED_INTNUMBER_BIN .)
    DOLLER          reduce using rule 193 (intnumber -> SIGNED_INTNUMBER_BIN .)
    INTNUMBER_DEC   reduce using rule 193 (intnumber -> SIGNED_INTNUMBER_BIN .)
    SIGNED_INTNUMBER_DEC reduce using rule 193 (intnumber -> SIGNED_INTNUMBER_BIN .)
    INTNUMBER_BIN   reduce using rule 193 (intnumber -> SIGNED_INTNUMBER_BIN .)
    SIGNED_INTNUMBER_BIN reduce using rule 193 (intnumber -> SIGNED_INTNUMBER_BIN .)
    INTNUMBER_OCT   reduce using rule 193 (intnumber -> SIGNED_INTNUMBER_BIN .)
    SIGNED_INTNUMBER_OCT reduce using rule 193 (intnumber -> SIGNED_INTNUMBER_BIN .)
    INTNUMBER_HEX   reduce using rule 193 (intnumber -> SIGNED_INTNUMBER_BIN .)
    SIGNED_INTNUMBER_HEX reduce using rule 193 (intnumber -> SIGNED_INTNUMBER_BIN .)
    FLOATNUMBER     reduce using rule 193 (intnumber -> SIGNED_INTNUMBER_BIN .)
    STRING_LITERAL  reduce using rule 193 (intnumber -> SIGNED_INTNUMBER_BIN .)
    IF              reduce using rule 193 (intnumber -> SIGNED_INTNUMBER_BIN .)


state 116

    (194) intnumber -> INTNUMBER_OCT .

    TIMES           reduce using rule 194 (intnumber -> INTNUMBER_OCT .)
    POWER           reduce using rule 194 (intnumber -> INTNUMBER_OCT .)
    DIVIDE          reduce using rule 194 (intnumber -> INTNUMBER_OCT .)
    MOD             reduce using rule 194 (intnumber -> INTNUMBER_OCT .)
    PLUS            reduce using rule 194 (intnumber -> INTNUMBER_OCT .)
    MINUS           reduce using rule 194 (intnumber -> INTNUMBER_OCT .)
    LSHIFT          reduce using rule 194 (intnumber -> INTNUMBER_OCT .)
    RSHIFT          reduce using rule 194 (intnumber -> INTNUMBER_OCT .)
    LSHIFTA         reduce using rule 194 (intnumber -> INTNUMBER_OCT .)
    RSHIFTA         reduce using rule 194 (intnumber -> INTNUMBER_OCT .)
    LT              reduce using rule 194 (intnumber -> INTNUMBER_OCT .)
    GT              reduce using rule 194 (intnumber -> INTNUMBER_OCT .)
    LE              reduce using rule 194 (intnumber -> INTNUMBER_OCT .)
    GE              reduce using rule 194 (intnumber -> INTNUMBER_OCT .)
    EQ              reduce using rule 194 (intnumber -> INTNUMBER_OCT .)
    NE              reduce using rule 194 (intnumber -> INTNUMBER_OCT .)
    EQL             reduce using rule 194 (intnumber -> INTNUMBER_OCT .)
    NEL             reduce using rule 194 (intnumber -> INTNUMBER_OCT .)
    AND             reduce using rule 194 (intnumber -> INTNUMBER_OCT .)
    XOR             reduce using rule 194 (intnumber -> INTNUMBER_OCT .)
    XNOR            reduce using rule 194 (intnumber -> INTNUMBER_OCT .)
    OR              reduce using rule 194 (intnumber -> INTNUMBER_OCT .)
    LAND            reduce using rule 194 (intnumber -> INTNUMBER_OCT .)
    LOR             reduce using rule 194 (intnumber -> INTNUMBER_OCT .)
    COND            reduce using rule 194 (intnumber -> INTNUMBER_OCT .)
    RPAREN          reduce using rule 194 (intnumber -> INTNUMBER_OCT .)
    LBRACE          reduce using rule 194 (intnumber -> INTNUMBER_OCT .)
    RBRACE          reduce using rule 194 (intnumber -> INTNUMBER_OCT .)
    COMMA           reduce using rule 194 (intnumber -> INTNUMBER_OCT .)
    COLON           reduce using rule 194 (intnumber -> INTNUMBER_OCT .)
    SEMICOLON       reduce using rule 194 (intnumber -> INTNUMBER_OCT .)
    PLUSCOLON       reduce using rule 194 (intnumber -> INTNUMBER_OCT .)
    MINUSCOLON      reduce using rule 194 (intnumber -> INTNUMBER_OCT .)
    RBRACKET        reduce using rule 194 (intnumber -> INTNUMBER_OCT .)
    ID              reduce using rule 194 (intnumber -> INTNUMBER_OCT .)
    LNOT            reduce using rule 194 (intnumber -> INTNUMBER_OCT .)
    NOT             reduce using rule 194 (intnumber -> INTNUMBER_OCT .)
    NAND            reduce using rule 194 (intnumber -> INTNUMBER_OCT .)
    NOR             reduce using rule 194 (intnumber -> INTNUMBER_OCT .)
    LPAREN          reduce using rule 194 (intnumber -> INTNUMBER_OCT .)
    DOLLER          reduce using rule 194 (intnumber -> INTNUMBER_OCT .)
    INTNUMBER_DEC   reduce using rule 194 (intnumber -> INTNUMBER_OCT .)
    SIGNED_INTNUMBER_DEC reduce using rule 194 (intnumber -> INTNUMBER_OCT .)
    INTNUMBER_BIN   reduce using rule 194 (intnumber -> INTNUMBER_OCT .)
    SIGNED_INTNUMBER_BIN reduce using rule 194 (intnumber -> INTNUMBER_OCT .)
    INTNUMBER_OCT   reduce using rule 194 (intnumber -> INTNUMBER_OCT .)
    SIGNED_INTNUMBER_OCT reduce using rule 194 (intnumber -> INTNUMBER_OCT .)
    INTNUMBER_HEX   reduce using rule 194 (intnumber -> INTNUMBER_OCT .)
    SIGNED_INTNUMBER_HEX reduce using rule 194 (intnumber -> INTNUMBER_OCT .)
    FLOATNUMBER     reduce using rule 194 (intnumber -> INTNUMBER_OCT .)
    STRING_LITERAL  reduce using rule 194 (intnumber -> INTNUMBER_OCT .)
    IF              reduce using rule 194 (intnumber -> INTNUMBER_OCT .)


state 117

    (195) intnumber -> SIGNED_INTNUMBER_OCT .

    TIMES           reduce using rule 195 (intnumber -> SIGNED_INTNUMBER_OCT .)
    POWER           reduce using rule 195 (intnumber -> SIGNED_INTNUMBER_OCT .)
    DIVIDE          reduce using rule 195 (intnumber -> SIGNED_INTNUMBER_OCT .)
    MOD             reduce using rule 195 (intnumber -> SIGNED_INTNUMBER_OCT .)
    PLUS            reduce using rule 195 (intnumber -> SIGNED_INTNUMBER_OCT .)
    MINUS           reduce using rule 195 (intnumber -> SIGNED_INTNUMBER_OCT .)
    LSHIFT          reduce using rule 195 (intnumber -> SIGNED_INTNUMBER_OCT .)
    RSHIFT          reduce using rule 195 (intnumber -> SIGNED_INTNUMBER_OCT .)
    LSHIFTA         reduce using rule 195 (intnumber -> SIGNED_INTNUMBER_OCT .)
    RSHIFTA         reduce using rule 195 (intnumber -> SIGNED_INTNUMBER_OCT .)
    LT              reduce using rule 195 (intnumber -> SIGNED_INTNUMBER_OCT .)
    GT              reduce using rule 195 (intnumber -> SIGNED_INTNUMBER_OCT .)
    LE              reduce using rule 195 (intnumber -> SIGNED_INTNUMBER_OCT .)
    GE              reduce using rule 195 (intnumber -> SIGNED_INTNUMBER_OCT .)
    EQ              reduce using rule 195 (intnumber -> SIGNED_INTNUMBER_OCT .)
    NE              reduce using rule 195 (intnumber -> SIGNED_INTNUMBER_OCT .)
    EQL             reduce using rule 195 (intnumber -> SIGNED_INTNUMBER_OCT .)
    NEL             reduce using rule 195 (intnumber -> SIGNED_INTNUMBER_OCT .)
    AND             reduce using rule 195 (intnumber -> SIGNED_INTNUMBER_OCT .)
    XOR             reduce using rule 195 (intnumber -> SIGNED_INTNUMBER_OCT .)
    XNOR            reduce using rule 195 (intnumber -> SIGNED_INTNUMBER_OCT .)
    OR              reduce using rule 195 (intnumber -> SIGNED_INTNUMBER_OCT .)
    LAND            reduce using rule 195 (intnumber -> SIGNED_INTNUMBER_OCT .)
    LOR             reduce using rule 195 (intnumber -> SIGNED_INTNUMBER_OCT .)
    COND            reduce using rule 195 (intnumber -> SIGNED_INTNUMBER_OCT .)
    RPAREN          reduce using rule 195 (intnumber -> SIGNED_INTNUMBER_OCT .)
    LBRACE          reduce using rule 195 (intnumber -> SIGNED_INTNUMBER_OCT .)
    RBRACE          reduce using rule 195 (intnumber -> SIGNED_INTNUMBER_OCT .)
    COMMA           reduce using rule 195 (intnumber -> SIGNED_INTNUMBER_OCT .)
    COLON           reduce using rule 195 (intnumber -> SIGNED_INTNUMBER_OCT .)
    SEMICOLON       reduce using rule 195 (intnumber -> SIGNED_INTNUMBER_OCT .)
    PLUSCOLON       reduce using rule 195 (intnumber -> SIGNED_INTNUMBER_OCT .)
    MINUSCOLON      reduce using rule 195 (intnumber -> SIGNED_INTNUMBER_OCT .)
    RBRACKET        reduce using rule 195 (intnumber -> SIGNED_INTNUMBER_OCT .)
    ID              reduce using rule 195 (intnumber -> SIGNED_INTNUMBER_OCT .)
    LNOT            reduce using rule 195 (intnumber -> SIGNED_INTNUMBER_OCT .)
    NOT             reduce using rule 195 (intnumber -> SIGNED_INTNUMBER_OCT .)
    NAND            reduce using rule 195 (intnumber -> SIGNED_INTNUMBER_OCT .)
    NOR             reduce using rule 195 (intnumber -> SIGNED_INTNUMBER_OCT .)
    LPAREN          reduce using rule 195 (intnumber -> SIGNED_INTNUMBER_OCT .)
    DOLLER          reduce using rule 195 (intnumber -> SIGNED_INTNUMBER_OCT .)
    INTNUMBER_DEC   reduce using rule 195 (intnumber -> SIGNED_INTNUMBER_OCT .)
    SIGNED_INTNUMBER_DEC reduce using rule 195 (intnumber -> SIGNED_INTNUMBER_OCT .)
    INTNUMBER_BIN   reduce using rule 195 (intnumber -> SIGNED_INTNUMBER_OCT .)
    SIGNED_INTNUMBER_BIN reduce using rule 195 (intnumber -> SIGNED_INTNUMBER_OCT .)
    INTNUMBER_OCT   reduce using rule 195 (intnumber -> SIGNED_INTNUMBER_OCT .)
    SIGNED_INTNUMBER_OCT reduce using rule 195 (intnumber -> SIGNED_INTNUMBER_OCT .)
    INTNUMBER_HEX   reduce using rule 195 (intnumber -> SIGNED_INTNUMBER_OCT .)
    SIGNED_INTNUMBER_HEX reduce using rule 195 (intnumber -> SIGNED_INTNUMBER_OCT .)
    FLOATNUMBER     reduce using rule 195 (intnumber -> SIGNED_INTNUMBER_OCT .)
    STRING_LITERAL  reduce using rule 195 (intnumber -> SIGNED_INTNUMBER_OCT .)
    IF              reduce using rule 195 (intnumber -> SIGNED_INTNUMBER_OCT .)


state 118

    (196) intnumber -> INTNUMBER_HEX .

    TIMES           reduce using rule 196 (intnumber -> INTNUMBER_HEX .)
    POWER           reduce using rule 196 (intnumber -> INTNUMBER_HEX .)
    DIVIDE          reduce using rule 196 (intnumber -> INTNUMBER_HEX .)
    MOD             reduce using rule 196 (intnumber -> INTNUMBER_HEX .)
    PLUS            reduce using rule 196 (intnumber -> INTNUMBER_HEX .)
    MINUS           reduce using rule 196 (intnumber -> INTNUMBER_HEX .)
    LSHIFT          reduce using rule 196 (intnumber -> INTNUMBER_HEX .)
    RSHIFT          reduce using rule 196 (intnumber -> INTNUMBER_HEX .)
    LSHIFTA         reduce using rule 196 (intnumber -> INTNUMBER_HEX .)
    RSHIFTA         reduce using rule 196 (intnumber -> INTNUMBER_HEX .)
    LT              reduce using rule 196 (intnumber -> INTNUMBER_HEX .)
    GT              reduce using rule 196 (intnumber -> INTNUMBER_HEX .)
    LE              reduce using rule 196 (intnumber -> INTNUMBER_HEX .)
    GE              reduce using rule 196 (intnumber -> INTNUMBER_HEX .)
    EQ              reduce using rule 196 (intnumber -> INTNUMBER_HEX .)
    NE              reduce using rule 196 (intnumber -> INTNUMBER_HEX .)
    EQL             reduce using rule 196 (intnumber -> INTNUMBER_HEX .)
    NEL             reduce using rule 196 (intnumber -> INTNUMBER_HEX .)
    AND             reduce using rule 196 (intnumber -> INTNUMBER_HEX .)
    XOR             reduce using rule 196 (intnumber -> INTNUMBER_HEX .)
    XNOR            reduce using rule 196 (intnumber -> INTNUMBER_HEX .)
    OR              reduce using rule 196 (intnumber -> INTNUMBER_HEX .)
    LAND            reduce using rule 196 (intnumber -> INTNUMBER_HEX .)
    LOR             reduce using rule 196 (intnumber -> INTNUMBER_HEX .)
    COND            reduce using rule 196 (intnumber -> INTNUMBER_HEX .)
    RPAREN          reduce using rule 196 (intnumber -> INTNUMBER_HEX .)
    LBRACE          reduce using rule 196 (intnumber -> INTNUMBER_HEX .)
    RBRACE          reduce using rule 196 (intnumber -> INTNUMBER_HEX .)
    COMMA           reduce using rule 196 (intnumber -> INTNUMBER_HEX .)
    COLON           reduce using rule 196 (intnumber -> INTNUMBER_HEX .)
    SEMICOLON       reduce using rule 196 (intnumber -> INTNUMBER_HEX .)
    PLUSCOLON       reduce using rule 196 (intnumber -> INTNUMBER_HEX .)
    MINUSCOLON      reduce using rule 196 (intnumber -> INTNUMBER_HEX .)
    RBRACKET        reduce using rule 196 (intnumber -> INTNUMBER_HEX .)
    ID              reduce using rule 196 (intnumber -> INTNUMBER_HEX .)
    LNOT            reduce using rule 196 (intnumber -> INTNUMBER_HEX .)
    NOT             reduce using rule 196 (intnumber -> INTNUMBER_HEX .)
    NAND            reduce using rule 196 (intnumber -> INTNUMBER_HEX .)
    NOR             reduce using rule 196 (intnumber -> INTNUMBER_HEX .)
    LPAREN          reduce using rule 196 (intnumber -> INTNUMBER_HEX .)
    DOLLER          reduce using rule 196 (intnumber -> INTNUMBER_HEX .)
    INTNUMBER_DEC   reduce using rule 196 (intnumber -> INTNUMBER_HEX .)
    SIGNED_INTNUMBER_DEC reduce using rule 196 (intnumber -> INTNUMBER_HEX .)
    INTNUMBER_BIN   reduce using rule 196 (intnumber -> INTNUMBER_HEX .)
    SIGNED_INTNUMBER_BIN reduce using rule 196 (intnumber -> INTNUMBER_HEX .)
    INTNUMBER_OCT   reduce using rule 196 (intnumber -> INTNUMBER_HEX .)
    SIGNED_INTNUMBER_OCT reduce using rule 196 (intnumber -> INTNUMBER_HEX .)
    INTNUMBER_HEX   reduce using rule 196 (intnumber -> INTNUMBER_HEX .)
    SIGNED_INTNUMBER_HEX reduce using rule 196 (intnumber -> INTNUMBER_HEX .)
    FLOATNUMBER     reduce using rule 196 (intnumber -> INTNUMBER_HEX .)
    STRING_LITERAL  reduce using rule 196 (intnumber -> INTNUMBER_HEX .)
    IF              reduce using rule 196 (intnumber -> INTNUMBER_HEX .)


state 119

    (197) intnumber -> SIGNED_INTNUMBER_HEX .

    TIMES           reduce using rule 197 (intnumber -> SIGNED_INTNUMBER_HEX .)
    POWER           reduce using rule 197 (intnumber -> SIGNED_INTNUMBER_HEX .)
    DIVIDE          reduce using rule 197 (intnumber -> SIGNED_INTNUMBER_HEX .)
    MOD             reduce using rule 197 (intnumber -> SIGNED_INTNUMBER_HEX .)
    PLUS            reduce using rule 197 (intnumber -> SIGNED_INTNUMBER_HEX .)
    MINUS           reduce using rule 197 (intnumber -> SIGNED_INTNUMBER_HEX .)
    LSHIFT          reduce using rule 197 (intnumber -> SIGNED_INTNUMBER_HEX .)
    RSHIFT          reduce using rule 197 (intnumber -> SIGNED_INTNUMBER_HEX .)
    LSHIFTA         reduce using rule 197 (intnumber -> SIGNED_INTNUMBER_HEX .)
    RSHIFTA         reduce using rule 197 (intnumber -> SIGNED_INTNUMBER_HEX .)
    LT              reduce using rule 197 (intnumber -> SIGNED_INTNUMBER_HEX .)
    GT              reduce using rule 197 (intnumber -> SIGNED_INTNUMBER_HEX .)
    LE              reduce using rule 197 (intnumber -> SIGNED_INTNUMBER_HEX .)
    GE              reduce using rule 197 (intnumber -> SIGNED_INTNUMBER_HEX .)
    EQ              reduce using rule 197 (intnumber -> SIGNED_INTNUMBER_HEX .)
    NE              reduce using rule 197 (intnumber -> SIGNED_INTNUMBER_HEX .)
    EQL             reduce using rule 197 (intnumber -> SIGNED_INTNUMBER_HEX .)
    NEL             reduce using rule 197 (intnumber -> SIGNED_INTNUMBER_HEX .)
    AND             reduce using rule 197 (intnumber -> SIGNED_INTNUMBER_HEX .)
    XOR             reduce using rule 197 (intnumber -> SIGNED_INTNUMBER_HEX .)
    XNOR            reduce using rule 197 (intnumber -> SIGNED_INTNUMBER_HEX .)
    OR              reduce using rule 197 (intnumber -> SIGNED_INTNUMBER_HEX .)
    LAND            reduce using rule 197 (intnumber -> SIGNED_INTNUMBER_HEX .)
    LOR             reduce using rule 197 (intnumber -> SIGNED_INTNUMBER_HEX .)
    COND            reduce using rule 197 (intnumber -> SIGNED_INTNUMBER_HEX .)
    RPAREN          reduce using rule 197 (intnumber -> SIGNED_INTNUMBER_HEX .)
    LBRACE          reduce using rule 197 (intnumber -> SIGNED_INTNUMBER_HEX .)
    RBRACE          reduce using rule 197 (intnumber -> SIGNED_INTNUMBER_HEX .)
    COMMA           reduce using rule 197 (intnumber -> SIGNED_INTNUMBER_HEX .)
    COLON           reduce using rule 197 (intnumber -> SIGNED_INTNUMBER_HEX .)
    SEMICOLON       reduce using rule 197 (intnumber -> SIGNED_INTNUMBER_HEX .)
    PLUSCOLON       reduce using rule 197 (intnumber -> SIGNED_INTNUMBER_HEX .)
    MINUSCOLON      reduce using rule 197 (intnumber -> SIGNED_INTNUMBER_HEX .)
    RBRACKET        reduce using rule 197 (intnumber -> SIGNED_INTNUMBER_HEX .)
    ID              reduce using rule 197 (intnumber -> SIGNED_INTNUMBER_HEX .)
    LNOT            reduce using rule 197 (intnumber -> SIGNED_INTNUMBER_HEX .)
    NOT             reduce using rule 197 (intnumber -> SIGNED_INTNUMBER_HEX .)
    NAND            reduce using rule 197 (intnumber -> SIGNED_INTNUMBER_HEX .)
    NOR             reduce using rule 197 (intnumber -> SIGNED_INTNUMBER_HEX .)
    LPAREN          reduce using rule 197 (intnumber -> SIGNED_INTNUMBER_HEX .)
    DOLLER          reduce using rule 197 (intnumber -> SIGNED_INTNUMBER_HEX .)
    INTNUMBER_DEC   reduce using rule 197 (intnumber -> SIGNED_INTNUMBER_HEX .)
    SIGNED_INTNUMBER_DEC reduce using rule 197 (intnumber -> SIGNED_INTNUMBER_HEX .)
    INTNUMBER_BIN   reduce using rule 197 (intnumber -> SIGNED_INTNUMBER_HEX .)
    SIGNED_INTNUMBER_BIN reduce using rule 197 (intnumber -> SIGNED_INTNUMBER_HEX .)
    INTNUMBER_OCT   reduce using rule 197 (intnumber -> SIGNED_INTNUMBER_HEX .)
    SIGNED_INTNUMBER_OCT reduce using rule 197 (intnumber -> SIGNED_INTNUMBER_HEX .)
    INTNUMBER_HEX   reduce using rule 197 (intnumber -> SIGNED_INTNUMBER_HEX .)
    SIGNED_INTNUMBER_HEX reduce using rule 197 (intnumber -> SIGNED_INTNUMBER_HEX .)
    FLOATNUMBER     reduce using rule 197 (intnumber -> SIGNED_INTNUMBER_HEX .)
    STRING_LITERAL  reduce using rule 197 (intnumber -> SIGNED_INTNUMBER_HEX .)
    IF              reduce using rule 197 (intnumber -> SIGNED_INTNUMBER_HEX .)


state 120

    (189) floatnumber -> FLOATNUMBER .

    TIMES           reduce using rule 189 (floatnumber -> FLOATNUMBER .)
    POWER           reduce using rule 189 (floatnumber -> FLOATNUMBER .)
    DIVIDE          reduce using rule 189 (floatnumber -> FLOATNUMBER .)
    MOD             reduce using rule 189 (floatnumber -> FLOATNUMBER .)
    PLUS            reduce using rule 189 (floatnumber -> FLOATNUMBER .)
    MINUS           reduce using rule 189 (floatnumber -> FLOATNUMBER .)
    LSHIFT          reduce using rule 189 (floatnumber -> FLOATNUMBER .)
    RSHIFT          reduce using rule 189 (floatnumber -> FLOATNUMBER .)
    LSHIFTA         reduce using rule 189 (floatnumber -> FLOATNUMBER .)
    RSHIFTA         reduce using rule 189 (floatnumber -> FLOATNUMBER .)
    LT              reduce using rule 189 (floatnumber -> FLOATNUMBER .)
    GT              reduce using rule 189 (floatnumber -> FLOATNUMBER .)
    LE              reduce using rule 189 (floatnumber -> FLOATNUMBER .)
    GE              reduce using rule 189 (floatnumber -> FLOATNUMBER .)
    EQ              reduce using rule 189 (floatnumber -> FLOATNUMBER .)
    NE              reduce using rule 189 (floatnumber -> FLOATNUMBER .)
    EQL             reduce using rule 189 (floatnumber -> FLOATNUMBER .)
    NEL             reduce using rule 189 (floatnumber -> FLOATNUMBER .)
    AND             reduce using rule 189 (floatnumber -> FLOATNUMBER .)
    XOR             reduce using rule 189 (floatnumber -> FLOATNUMBER .)
    XNOR            reduce using rule 189 (floatnumber -> FLOATNUMBER .)
    OR              reduce using rule 189 (floatnumber -> FLOATNUMBER .)
    LAND            reduce using rule 189 (floatnumber -> FLOATNUMBER .)
    LOR             reduce using rule 189 (floatnumber -> FLOATNUMBER .)
    COND            reduce using rule 189 (floatnumber -> FLOATNUMBER .)
    RPAREN          reduce using rule 189 (floatnumber -> FLOATNUMBER .)
    LBRACE          reduce using rule 189 (floatnumber -> FLOATNUMBER .)
    RBRACE          reduce using rule 189 (floatnumber -> FLOATNUMBER .)
    COMMA           reduce using rule 189 (floatnumber -> FLOATNUMBER .)
    COLON           reduce using rule 189 (floatnumber -> FLOATNUMBER .)
    SEMICOLON       reduce using rule 189 (floatnumber -> FLOATNUMBER .)
    PLUSCOLON       reduce using rule 189 (floatnumber -> FLOATNUMBER .)
    MINUSCOLON      reduce using rule 189 (floatnumber -> FLOATNUMBER .)
    RBRACKET        reduce using rule 189 (floatnumber -> FLOATNUMBER .)
    ID              reduce using rule 189 (floatnumber -> FLOATNUMBER .)
    LNOT            reduce using rule 189 (floatnumber -> FLOATNUMBER .)
    NOT             reduce using rule 189 (floatnumber -> FLOATNUMBER .)
    NAND            reduce using rule 189 (floatnumber -> FLOATNUMBER .)
    NOR             reduce using rule 189 (floatnumber -> FLOATNUMBER .)
    LPAREN          reduce using rule 189 (floatnumber -> FLOATNUMBER .)
    DOLLER          reduce using rule 189 (floatnumber -> FLOATNUMBER .)
    INTNUMBER_DEC   reduce using rule 189 (floatnumber -> FLOATNUMBER .)
    SIGNED_INTNUMBER_DEC reduce using rule 189 (floatnumber -> FLOATNUMBER .)
    INTNUMBER_BIN   reduce using rule 189 (floatnumber -> FLOATNUMBER .)
    SIGNED_INTNUMBER_BIN reduce using rule 189 (floatnumber -> FLOATNUMBER .)
    INTNUMBER_OCT   reduce using rule 189 (floatnumber -> FLOATNUMBER .)
    SIGNED_INTNUMBER_OCT reduce using rule 189 (floatnumber -> FLOATNUMBER .)
    INTNUMBER_HEX   reduce using rule 189 (floatnumber -> FLOATNUMBER .)
    SIGNED_INTNUMBER_HEX reduce using rule 189 (floatnumber -> FLOATNUMBER .)
    FLOATNUMBER     reduce using rule 189 (floatnumber -> FLOATNUMBER .)
    STRING_LITERAL  reduce using rule 189 (floatnumber -> FLOATNUMBER .)
    IF              reduce using rule 189 (floatnumber -> FLOATNUMBER .)


state 121

    (198) stringliteral -> STRING_LITERAL .

    TIMES           reduce using rule 198 (stringliteral -> STRING_LITERAL .)
    POWER           reduce using rule 198 (stringliteral -> STRING_LITERAL .)
    DIVIDE          reduce using rule 198 (stringliteral -> STRING_LITERAL .)
    MOD             reduce using rule 198 (stringliteral -> STRING_LITERAL .)
    PLUS            reduce using rule 198 (stringliteral -> STRING_LITERAL .)
    MINUS           reduce using rule 198 (stringliteral -> STRING_LITERAL .)
    LSHIFT          reduce using rule 198 (stringliteral -> STRING_LITERAL .)
    RSHIFT          reduce using rule 198 (stringliteral -> STRING_LITERAL .)
    LSHIFTA         reduce using rule 198 (stringliteral -> STRING_LITERAL .)
    RSHIFTA         reduce using rule 198 (stringliteral -> STRING_LITERAL .)
    LT              reduce using rule 198 (stringliteral -> STRING_LITERAL .)
    GT              reduce using rule 198 (stringliteral -> STRING_LITERAL .)
    LE              reduce using rule 198 (stringliteral -> STRING_LITERAL .)
    GE              reduce using rule 198 (stringliteral -> STRING_LITERAL .)
    EQ              reduce using rule 198 (stringliteral -> STRING_LITERAL .)
    NE              reduce using rule 198 (stringliteral -> STRING_LITERAL .)
    EQL             reduce using rule 198 (stringliteral -> STRING_LITERAL .)
    NEL             reduce using rule 198 (stringliteral -> STRING_LITERAL .)
    AND             reduce using rule 198 (stringliteral -> STRING_LITERAL .)
    XOR             reduce using rule 198 (stringliteral -> STRING_LITERAL .)
    XNOR            reduce using rule 198 (stringliteral -> STRING_LITERAL .)
    OR              reduce using rule 198 (stringliteral -> STRING_LITERAL .)
    LAND            reduce using rule 198 (stringliteral -> STRING_LITERAL .)
    LOR             reduce using rule 198 (stringliteral -> STRING_LITERAL .)
    COND            reduce using rule 198 (stringliteral -> STRING_LITERAL .)
    RPAREN          reduce using rule 198 (stringliteral -> STRING_LITERAL .)
    LBRACE          reduce using rule 198 (stringliteral -> STRING_LITERAL .)
    RBRACE          reduce using rule 198 (stringliteral -> STRING_LITERAL .)
    COMMA           reduce using rule 198 (stringliteral -> STRING_LITERAL .)
    COLON           reduce using rule 198 (stringliteral -> STRING_LITERAL .)
    SEMICOLON       reduce using rule 198 (stringliteral -> STRING_LITERAL .)
    PLUSCOLON       reduce using rule 198 (stringliteral -> STRING_LITERAL .)
    MINUSCOLON      reduce using rule 198 (stringliteral -> STRING_LITERAL .)
    RBRACKET        reduce using rule 198 (stringliteral -> STRING_LITERAL .)


state 122

    (9) moduledef -> MODULE modulename paramlist portlist items ENDMODULE .

    MODULE          reduce using rule 9 (moduledef -> MODULE modulename paramlist portlist items ENDMODULE .)
    LPAREN          reduce using rule 9 (moduledef -> MODULE modulename paramlist portlist items ENDMODULE .)
    $end            reduce using rule 9 (moduledef -> MODULE modulename paramlist portlist items ENDMODULE .)


state 123

    (56) items -> items item .

    ENDMODULE       reduce using rule 56 (items -> items item .)
    GENERATE        reduce using rule 56 (items -> items item .)
    INTEGER         reduce using rule 56 (items -> items item .)
    REAL            reduce using rule 56 (items -> items item .)
    PARAMETER       reduce using rule 56 (items -> items item .)
    LOCALPARAM      reduce using rule 56 (items -> items item .)
    GENVAR          reduce using rule 56 (items -> items item .)
    ASSIGN          reduce using rule 56 (items -> items item .)
    ALWAYS          reduce using rule 56 (items -> items item .)
    ALWAYS_FF       reduce using rule 56 (items -> items item .)
    ALWAYS_COMB     reduce using rule 56 (items -> items item .)
    INITIAL         reduce using rule 56 (items -> items item .)
    ID              reduce using rule 56 (items -> items item .)
    SENS_OR         reduce using rule 56 (items -> items item .)
    FUNCTION        reduce using rule 56 (items -> items item .)
    TASK            reduce using rule 56 (items -> items item .)
    LPAREN          reduce using rule 56 (items -> items item .)
    INPUT           reduce using rule 56 (items -> items item .)
    OUTPUT          reduce using rule 56 (items -> items item .)
    INOUT           reduce using rule 56 (items -> items item .)
    TRI             reduce using rule 56 (items -> items item .)
    REG             reduce using rule 56 (items -> items item .)
    LOGIC           reduce using rule 56 (items -> items item .)
    WIRE            reduce using rule 56 (items -> items item .)
    SIGNED          reduce using rule 56 (items -> items item .)
    SUPPLY0         reduce using rule 56 (items -> items item .)
    SUPPLY1         reduce using rule 56 (items -> items item .)


state 124

    (333) generate -> GENERATE generate_items . ENDGENERATE
    (335) generate_items -> generate_items . generate_item
    (337) generate_item -> . standard_item
    (338) generate_item -> . generate_if
    (339) generate_item -> . generate_for
    (61) standard_item -> . decl
    (62) standard_item -> . integerdecl
    (63) standard_item -> . realdecl
    (64) standard_item -> . declassign
    (65) standard_item -> . parameterdecl
    (66) standard_item -> . localparamdecl
    (67) standard_item -> . genvardecl
    (68) standard_item -> . assignment
    (69) standard_item -> . always
    (70) standard_item -> . always_ff
    (71) standard_item -> . always_comb
    (72) standard_item -> . initial
    (73) standard_item -> . instance
    (74) standard_item -> . function
    (75) standard_item -> . task
    (76) standard_item -> . pragma
    (342) generate_if -> . IF LPAREN cond RPAREN gif_true_item ELSE gif_false_item
    (343) generate_if -> . IF LPAREN cond RPAREN gif_true_item
    (348) generate_for -> . FOR LPAREN forpre forcond forpost RPAREN generate_forcontent
    (77) decl -> . sigtypes declnamelist SEMICOLON
    (78) decl -> . sigtypes width declnamelist SEMICOLON
    (87) integerdecl -> . INTEGER integernamelist SEMICOLON
    (88) integerdecl -> . INTEGER SIGNED integernamelist SEMICOLON
    (92) realdecl -> . REAL realnamelist SEMICOLON
    (83) declassign -> . sigtypes declassign_element SEMICOLON
    (84) declassign -> . sigtypes width declassign_element SEMICOLON
    (96) parameterdecl -> . PARAMETER param_substitution_list SEMICOLON
    (97) parameterdecl -> . PARAMETER SIGNED param_substitution_list SEMICOLON
    (98) parameterdecl -> . PARAMETER width param_substitution_list SEMICOLON
    (99) parameterdecl -> . PARAMETER SIGNED width param_substitution_list SEMICOLON
    (100) parameterdecl -> . PARAMETER INTEGER param_substitution_list SEMICOLON
    (101) localparamdecl -> . LOCALPARAM param_substitution_list SEMICOLON
    (102) localparamdecl -> . LOCALPARAM SIGNED param_substitution_list SEMICOLON
    (103) localparamdecl -> . LOCALPARAM width param_substitution_list SEMICOLON
    (104) localparamdecl -> . LOCALPARAM SIGNED width param_substitution_list SEMICOLON
    (105) localparamdecl -> . LOCALPARAM INTEGER param_substitution_list SEMICOLON
    (329) genvardecl -> . GENVAR genvarlist SEMICOLON
    (109) assignment -> . ASSIGN lvalue EQUALS rvalue SEMICOLON
    (110) assignment -> . ASSIGN delays lvalue EQUALS delays rvalue SEMICOLON
    (199) always -> . ALWAYS senslist always_statement
    (200) always_ff -> . ALWAYS_FF senslist always_statement
    (201) always_comb -> . ALWAYS_COMB senslist always_statement
    (290) initial -> . INITIAL initial_statement
    (297) instance -> . ID parameterlist instance_bodylist SEMICOLON
    (298) instance -> . SENS_OR parameterlist instance_bodylist SEMICOLON
    (303) instance -> . ID instance_bodylist_noname SEMICOLON
    (304) instance -> . SENS_OR instance_bodylist_noname SEMICOLON
    (358) function -> . FUNCTION width ID SEMICOLON function_statement ENDFUNCTION
    (359) function -> . FUNCTION ID SEMICOLON function_statement ENDFUNCTION
    (377) task -> . TASK ID SEMICOLON task_statement ENDTASK
    (7) pragma -> . LPAREN TIMES ID EQUALS expression TIMES RPAREN
    (8) pragma -> . LPAREN TIMES ID TIMES RPAREN
    (35) sigtypes -> . sigtypes sigtype
    (36) sigtypes -> . sigtype
    (37) sigtype -> . INPUT
    (38) sigtype -> . OUTPUT
    (39) sigtype -> . INOUT
    (40) sigtype -> . TRI
    (41) sigtype -> . REG
    (42) sigtype -> . LOGIC
    (43) sigtype -> . WIRE
    (44) sigtype -> . SIGNED
    (45) sigtype -> . SUPPLY0
    (46) sigtype -> . SUPPLY1

    ENDGENERATE     shift and go to state 280
    IF              shift and go to state 130
    FOR             shift and go to state 131
    INTEGER         shift and go to state 47
    REAL            shift and go to state 49
    PARAMETER       shift and go to state 50
    LOCALPARAM      shift and go to state 51
    GENVAR          shift and go to state 52
    ASSIGN          shift and go to state 53
    ALWAYS          shift and go to state 54
    ALWAYS_FF       shift and go to state 55
    ALWAYS_COMB     shift and go to state 56
    INITIAL         shift and go to state 57
    ID              shift and go to state 58
    SENS_OR         shift and go to state 59
    FUNCTION        shift and go to state 60
    TASK            shift and go to state 61
    LPAREN          shift and go to state 8
    INPUT           shift and go to state 63
    OUTPUT          shift and go to state 64
    INOUT           shift and go to state 65
    TRI             shift and go to state 66
    REG             shift and go to state 67
    LOGIC           shift and go to state 68
    WIRE            shift and go to state 69
    SIGNED          shift and go to state 48
    SUPPLY0         shift and go to state 70
    SUPPLY1         shift and go to state 71

    generate_item                  shift and go to state 281
    standard_item                  shift and go to state 127
    generate_if                    shift and go to state 128
    generate_for                   shift and go to state 129
    decl                           shift and go to state 29
    integerdecl                    shift and go to state 30
    realdecl                       shift and go to state 31
    declassign                     shift and go to state 32
    parameterdecl                  shift and go to state 33
    localparamdecl                 shift and go to state 34
    genvardecl                     shift and go to state 35
    assignment                     shift and go to state 36
    always                         shift and go to state 37
    always_ff                      shift and go to state 38
    always_comb                    shift and go to state 39
    initial                        shift and go to state 40
    instance                       shift and go to state 41
    function                       shift and go to state 42
    task                           shift and go to state 43
    pragma                         shift and go to state 44
    sigtypes                       shift and go to state 46
    sigtype                        shift and go to state 62

state 125

    (334) generate_items -> empty .

    ENDGENERATE     reduce using rule 334 (generate_items -> empty .)
    IF              reduce using rule 334 (generate_items -> empty .)
    FOR             reduce using rule 334 (generate_items -> empty .)
    INTEGER         reduce using rule 334 (generate_items -> empty .)
    REAL            reduce using rule 334 (generate_items -> empty .)
    PARAMETER       reduce using rule 334 (generate_items -> empty .)
    LOCALPARAM      reduce using rule 334 (generate_items -> empty .)
    GENVAR          reduce using rule 334 (generate_items -> empty .)
    ASSIGN          reduce using rule 334 (generate_items -> empty .)
    ALWAYS          reduce using rule 334 (generate_items -> empty .)
    ALWAYS_FF       reduce using rule 334 (generate_items -> empty .)
    ALWAYS_COMB     reduce using rule 334 (generate_items -> empty .)
    INITIAL         reduce using rule 334 (generate_items -> empty .)
    ID              reduce using rule 334 (generate_items -> empty .)
    SENS_OR         reduce using rule 334 (generate_items -> empty .)
    FUNCTION        reduce using rule 334 (generate_items -> empty .)
    TASK            reduce using rule 334 (generate_items -> empty .)
    LPAREN          reduce using rule 334 (generate_items -> empty .)
    INPUT           reduce using rule 334 (generate_items -> empty .)
    OUTPUT          reduce using rule 334 (generate_items -> empty .)
    INOUT           reduce using rule 334 (generate_items -> empty .)
    TRI             reduce using rule 334 (generate_items -> empty .)
    REG             reduce using rule 334 (generate_items -> empty .)
    LOGIC           reduce using rule 334 (generate_items -> empty .)
    WIRE            reduce using rule 334 (generate_items -> empty .)
    SIGNED          reduce using rule 334 (generate_items -> empty .)
    SUPPLY0         reduce using rule 334 (generate_items -> empty .)
    SUPPLY1         reduce using rule 334 (generate_items -> empty .)
    END             reduce using rule 334 (generate_items -> empty .)


state 126

    (336) generate_items -> generate_item .

    ENDGENERATE     reduce using rule 336 (generate_items -> generate_item .)
    IF              reduce using rule 336 (generate_items -> generate_item .)
    FOR             reduce using rule 336 (generate_items -> generate_item .)
    INTEGER         reduce using rule 336 (generate_items -> generate_item .)
    REAL            reduce using rule 336 (generate_items -> generate_item .)
    PARAMETER       reduce using rule 336 (generate_items -> generate_item .)
    LOCALPARAM      reduce using rule 336 (generate_items -> generate_item .)
    GENVAR          reduce using rule 336 (generate_items -> generate_item .)
    ASSIGN          reduce using rule 336 (generate_items -> generate_item .)
    ALWAYS          reduce using rule 336 (generate_items -> generate_item .)
    ALWAYS_FF       reduce using rule 336 (generate_items -> generate_item .)
    ALWAYS_COMB     reduce using rule 336 (generate_items -> generate_item .)
    INITIAL         reduce using rule 336 (generate_items -> generate_item .)
    ID              reduce using rule 336 (generate_items -> generate_item .)
    SENS_OR         reduce using rule 336 (generate_items -> generate_item .)
    FUNCTION        reduce using rule 336 (generate_items -> generate_item .)
    TASK            reduce using rule 336 (generate_items -> generate_item .)
    LPAREN          reduce using rule 336 (generate_items -> generate_item .)
    INPUT           reduce using rule 336 (generate_items -> generate_item .)
    OUTPUT          reduce using rule 336 (generate_items -> generate_item .)
    INOUT           reduce using rule 336 (generate_items -> generate_item .)
    TRI             reduce using rule 336 (generate_items -> generate_item .)
    REG             reduce using rule 336 (generate_items -> generate_item .)
    LOGIC           reduce using rule 336 (generate_items -> generate_item .)
    WIRE            reduce using rule 336 (generate_items -> generate_item .)
    SIGNED          reduce using rule 336 (generate_items -> generate_item .)
    SUPPLY0         reduce using rule 336 (generate_items -> generate_item .)
    SUPPLY1         reduce using rule 336 (generate_items -> generate_item .)
    END             reduce using rule 336 (generate_items -> generate_item .)


state 127

    (337) generate_item -> standard_item .

    ENDGENERATE     reduce using rule 337 (generate_item -> standard_item .)
    IF              reduce using rule 337 (generate_item -> standard_item .)
    FOR             reduce using rule 337 (generate_item -> standard_item .)
    INTEGER         reduce using rule 337 (generate_item -> standard_item .)
    REAL            reduce using rule 337 (generate_item -> standard_item .)
    PARAMETER       reduce using rule 337 (generate_item -> standard_item .)
    LOCALPARAM      reduce using rule 337 (generate_item -> standard_item .)
    GENVAR          reduce using rule 337 (generate_item -> standard_item .)
    ASSIGN          reduce using rule 337 (generate_item -> standard_item .)
    ALWAYS          reduce using rule 337 (generate_item -> standard_item .)
    ALWAYS_FF       reduce using rule 337 (generate_item -> standard_item .)
    ALWAYS_COMB     reduce using rule 337 (generate_item -> standard_item .)
    INITIAL         reduce using rule 337 (generate_item -> standard_item .)
    ID              reduce using rule 337 (generate_item -> standard_item .)
    SENS_OR         reduce using rule 337 (generate_item -> standard_item .)
    FUNCTION        reduce using rule 337 (generate_item -> standard_item .)
    TASK            reduce using rule 337 (generate_item -> standard_item .)
    LPAREN          reduce using rule 337 (generate_item -> standard_item .)
    INPUT           reduce using rule 337 (generate_item -> standard_item .)
    OUTPUT          reduce using rule 337 (generate_item -> standard_item .)
    INOUT           reduce using rule 337 (generate_item -> standard_item .)
    TRI             reduce using rule 337 (generate_item -> standard_item .)
    REG             reduce using rule 337 (generate_item -> standard_item .)
    LOGIC           reduce using rule 337 (generate_item -> standard_item .)
    WIRE            reduce using rule 337 (generate_item -> standard_item .)
    SIGNED          reduce using rule 337 (generate_item -> standard_item .)
    SUPPLY0         reduce using rule 337 (generate_item -> standard_item .)
    SUPPLY1         reduce using rule 337 (generate_item -> standard_item .)
    ELSE            reduce using rule 337 (generate_item -> standard_item .)
    END             reduce using rule 337 (generate_item -> standard_item .)


state 128

    (338) generate_item -> generate_if .

    ENDGENERATE     reduce using rule 338 (generate_item -> generate_if .)
    IF              reduce using rule 338 (generate_item -> generate_if .)
    FOR             reduce using rule 338 (generate_item -> generate_if .)
    INTEGER         reduce using rule 338 (generate_item -> generate_if .)
    REAL            reduce using rule 338 (generate_item -> generate_if .)
    PARAMETER       reduce using rule 338 (generate_item -> generate_if .)
    LOCALPARAM      reduce using rule 338 (generate_item -> generate_if .)
    GENVAR          reduce using rule 338 (generate_item -> generate_if .)
    ASSIGN          reduce using rule 338 (generate_item -> generate_if .)
    ALWAYS          reduce using rule 338 (generate_item -> generate_if .)
    ALWAYS_FF       reduce using rule 338 (generate_item -> generate_if .)
    ALWAYS_COMB     reduce using rule 338 (generate_item -> generate_if .)
    INITIAL         reduce using rule 338 (generate_item -> generate_if .)
    ID              reduce using rule 338 (generate_item -> generate_if .)
    SENS_OR         reduce using rule 338 (generate_item -> generate_if .)
    FUNCTION        reduce using rule 338 (generate_item -> generate_if .)
    TASK            reduce using rule 338 (generate_item -> generate_if .)
    LPAREN          reduce using rule 338 (generate_item -> generate_if .)
    INPUT           reduce using rule 338 (generate_item -> generate_if .)
    OUTPUT          reduce using rule 338 (generate_item -> generate_if .)
    INOUT           reduce using rule 338 (generate_item -> generate_if .)
    TRI             reduce using rule 338 (generate_item -> generate_if .)
    REG             reduce using rule 338 (generate_item -> generate_if .)
    LOGIC           reduce using rule 338 (generate_item -> generate_if .)
    WIRE            reduce using rule 338 (generate_item -> generate_if .)
    SIGNED          reduce using rule 338 (generate_item -> generate_if .)
    SUPPLY0         reduce using rule 338 (generate_item -> generate_if .)
    SUPPLY1         reduce using rule 338 (generate_item -> generate_if .)
    ELSE            reduce using rule 338 (generate_item -> generate_if .)
    END             reduce using rule 338 (generate_item -> generate_if .)


state 129

    (339) generate_item -> generate_for .

    ENDGENERATE     reduce using rule 339 (generate_item -> generate_for .)
    IF              reduce using rule 339 (generate_item -> generate_for .)
    FOR             reduce using rule 339 (generate_item -> generate_for .)
    INTEGER         reduce using rule 339 (generate_item -> generate_for .)
    REAL            reduce using rule 339 (generate_item -> generate_for .)
    PARAMETER       reduce using rule 339 (generate_item -> generate_for .)
    LOCALPARAM      reduce using rule 339 (generate_item -> generate_for .)
    GENVAR          reduce using rule 339 (generate_item -> generate_for .)
    ASSIGN          reduce using rule 339 (generate_item -> generate_for .)
    ALWAYS          reduce using rule 339 (generate_item -> generate_for .)
    ALWAYS_FF       reduce using rule 339 (generate_item -> generate_for .)
    ALWAYS_COMB     reduce using rule 339 (generate_item -> generate_for .)
    INITIAL         reduce using rule 339 (generate_item -> generate_for .)
    ID              reduce using rule 339 (generate_item -> generate_for .)
    SENS_OR         reduce using rule 339 (generate_item -> generate_for .)
    FUNCTION        reduce using rule 339 (generate_item -> generate_for .)
    TASK            reduce using rule 339 (generate_item -> generate_for .)
    LPAREN          reduce using rule 339 (generate_item -> generate_for .)
    INPUT           reduce using rule 339 (generate_item -> generate_for .)
    OUTPUT          reduce using rule 339 (generate_item -> generate_for .)
    INOUT           reduce using rule 339 (generate_item -> generate_for .)
    TRI             reduce using rule 339 (generate_item -> generate_for .)
    REG             reduce using rule 339 (generate_item -> generate_for .)
    LOGIC           reduce using rule 339 (generate_item -> generate_for .)
    WIRE            reduce using rule 339 (generate_item -> generate_for .)
    SIGNED          reduce using rule 339 (generate_item -> generate_for .)
    SUPPLY0         reduce using rule 339 (generate_item -> generate_for .)
    SUPPLY1         reduce using rule 339 (generate_item -> generate_for .)
    ELSE            reduce using rule 339 (generate_item -> generate_for .)
    END             reduce using rule 339 (generate_item -> generate_for .)


state 130

    (342) generate_if -> IF . LPAREN cond RPAREN gif_true_item ELSE gif_false_item
    (343) generate_if -> IF . LPAREN cond RPAREN gif_true_item

    LPAREN          shift and go to state 282


state 131

    (348) generate_for -> FOR . LPAREN forpre forcond forpost RPAREN generate_forcontent

    LPAREN          shift and go to state 283


state 132

    (77) decl -> sigtypes declnamelist . SEMICOLON
    (79) declnamelist -> declnamelist . COMMA declname

    SEMICOLON       shift and go to state 284
    COMMA           shift and go to state 285


state 133

    (78) decl -> sigtypes width . declnamelist SEMICOLON
    (84) declassign -> sigtypes width . declassign_element SEMICOLON
    (79) declnamelist -> . declnamelist COMMA declname
    (80) declnamelist -> . declname
    (85) declassign_element -> . ID EQUALS rvalue
    (86) declassign_element -> . delays ID EQUALS delays rvalue
    (81) declname -> . ID
    (82) declname -> . ID length
    (240) delays -> . DELAY LPAREN expression RPAREN
    (241) delays -> . DELAY identifier
    (242) delays -> . DELAY intnumber
    (243) delays -> . DELAY floatnumber
    (244) delays -> . empty
    (400) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    ID              shift and go to state 138
    DELAY           shift and go to state 140

  ! ID              [ reduce using rule 400 (empty -> .) ]

    declnamelist                   shift and go to state 286
    declassign_element             shift and go to state 287
    declname                       shift and go to state 136
    delays                         shift and go to state 139
    empty                          shift and go to state 141

state 134

    (83) declassign -> sigtypes declassign_element . SEMICOLON

    SEMICOLON       shift and go to state 288


state 135

    (35) sigtypes -> sigtypes sigtype .

    LBRACKET        reduce using rule 35 (sigtypes -> sigtypes sigtype .)
    ID              reduce using rule 35 (sigtypes -> sigtypes sigtype .)
    INPUT           reduce using rule 35 (sigtypes -> sigtypes sigtype .)
    OUTPUT          reduce using rule 35 (sigtypes -> sigtypes sigtype .)
    INOUT           reduce using rule 35 (sigtypes -> sigtypes sigtype .)
    TRI             reduce using rule 35 (sigtypes -> sigtypes sigtype .)
    REG             reduce using rule 35 (sigtypes -> sigtypes sigtype .)
    LOGIC           reduce using rule 35 (sigtypes -> sigtypes sigtype .)
    WIRE            reduce using rule 35 (sigtypes -> sigtypes sigtype .)
    SIGNED          reduce using rule 35 (sigtypes -> sigtypes sigtype .)
    SUPPLY0         reduce using rule 35 (sigtypes -> sigtypes sigtype .)
    SUPPLY1         reduce using rule 35 (sigtypes -> sigtypes sigtype .)
    DELAY           reduce using rule 35 (sigtypes -> sigtypes sigtype .)


state 136

    (80) declnamelist -> declname .

    SEMICOLON       reduce using rule 80 (declnamelist -> declname .)
    COMMA           reduce using rule 80 (declnamelist -> declname .)


state 137

    (54) width -> LBRACKET . expression COLON expression RBRACKET
    (130) expression -> . MINUS expression
    (131) expression -> . PLUS expression
    (132) expression -> . LNOT expression
    (133) expression -> . NOT expression
    (134) expression -> . AND expression
    (135) expression -> . NAND expression
    (136) expression -> . NOR expression
    (137) expression -> . OR expression
    (138) expression -> . XOR expression
    (139) expression -> . XNOR expression
    (140) expression -> . expression POWER expression
    (141) expression -> . expression TIMES expression
    (142) expression -> . expression DIVIDE expression
    (143) expression -> . expression MOD expression
    (144) expression -> . expression PLUS expression
    (145) expression -> . expression MINUS expression
    (146) expression -> . expression LSHIFT expression
    (147) expression -> . expression RSHIFT expression
    (148) expression -> . expression LSHIFTA expression
    (149) expression -> . expression RSHIFTA expression
    (150) expression -> . expression LT expression
    (151) expression -> . expression GT expression
    (152) expression -> . expression LE expression
    (153) expression -> . expression GE expression
    (154) expression -> . expression EQ expression
    (155) expression -> . expression NE expression
    (156) expression -> . expression EQL expression
    (157) expression -> . expression NEL expression
    (158) expression -> . expression AND expression
    (159) expression -> . expression XOR expression
    (160) expression -> . expression XNOR expression
    (161) expression -> . expression OR expression
    (162) expression -> . expression LAND expression
    (163) expression -> . expression LOR expression
    (164) expression -> . expression COND expression COLON expression
    (165) expression -> . LPAREN expression RPAREN
    (166) expression -> . concat
    (167) expression -> . repeat
    (168) expression -> . partselect
    (169) expression -> . pointer
    (170) expression -> . functioncall
    (171) expression -> . systemcall
    (172) expression -> . identifier
    (173) expression -> . const_expression
    (174) concat -> . LBRACE concatlist RBRACE
    (177) repeat -> . LBRACE expression concat RBRACE
    (178) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (179) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (180) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (181) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (182) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (183) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (184) pointer -> . identifier LBRACKET expression RBRACKET
    (185) pointer -> . pointer LBRACKET expression RBRACKET
    (373) functioncall -> . identifier LPAREN func_args RPAREN
    (351) systemcall -> . DOLLER ID
    (352) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (353) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (392) identifier -> . ID
    (393) identifier -> . scope ID
    (186) const_expression -> . intnumber
    (187) const_expression -> . floatnumber
    (188) const_expression -> . stringliteral
    (394) scope -> . identifier DOT
    (395) scope -> . pointer DOT
    (190) intnumber -> . INTNUMBER_DEC
    (191) intnumber -> . SIGNED_INTNUMBER_DEC
    (192) intnumber -> . INTNUMBER_BIN
    (193) intnumber -> . SIGNED_INTNUMBER_BIN
    (194) intnumber -> . INTNUMBER_OCT
    (195) intnumber -> . SIGNED_INTNUMBER_OCT
    (196) intnumber -> . INTNUMBER_HEX
    (197) intnumber -> . SIGNED_INTNUMBER_HEX
    (189) floatnumber -> . FLOATNUMBER
    (198) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 88
    PLUS            shift and go to state 89
    LNOT            shift and go to state 90
    NOT             shift and go to state 91
    AND             shift and go to state 92
    NAND            shift and go to state 93
    NOR             shift and go to state 94
    OR              shift and go to state 95
    XOR             shift and go to state 96
    XNOR            shift and go to state 97
    LPAREN          shift and go to state 85
    LBRACE          shift and go to state 106
    DOLLER          shift and go to state 107
    ID              shift and go to state 86
    INTNUMBER_DEC   shift and go to state 112
    SIGNED_INTNUMBER_DEC shift and go to state 113
    INTNUMBER_BIN   shift and go to state 114
    SIGNED_INTNUMBER_BIN shift and go to state 115
    INTNUMBER_OCT   shift and go to state 116
    SIGNED_INTNUMBER_OCT shift and go to state 117
    INTNUMBER_HEX   shift and go to state 118
    SIGNED_INTNUMBER_HEX shift and go to state 119
    FLOATNUMBER     shift and go to state 120
    STRING_LITERAL  shift and go to state 121

    expression                     shift and go to state 289
    concat                         shift and go to state 98
    repeat                         shift and go to state 99
    partselect                     shift and go to state 100
    pointer                        shift and go to state 101
    functioncall                   shift and go to state 102
    systemcall                     shift and go to state 103
    identifier                     shift and go to state 104
    const_expression               shift and go to state 105
    scope                          shift and go to state 108
    intnumber                      shift and go to state 109
    floatnumber                    shift and go to state 110
    stringliteral                  shift and go to state 111

state 138

    (85) declassign_element -> ID . EQUALS rvalue
    (81) declname -> ID .
    (82) declname -> ID . length
    (55) length -> . LBRACKET expression COLON expression RBRACKET

    EQUALS          shift and go to state 290
    SEMICOLON       reduce using rule 81 (declname -> ID .)
    COMMA           reduce using rule 81 (declname -> ID .)
    LBRACKET        shift and go to state 292

    length                         shift and go to state 291

state 139

    (86) declassign_element -> delays . ID EQUALS delays rvalue

    ID              shift and go to state 293


state 140

    (240) delays -> DELAY . LPAREN expression RPAREN
    (241) delays -> DELAY . identifier
    (242) delays -> DELAY . intnumber
    (243) delays -> DELAY . floatnumber
    (392) identifier -> . ID
    (393) identifier -> . scope ID
    (190) intnumber -> . INTNUMBER_DEC
    (191) intnumber -> . SIGNED_INTNUMBER_DEC
    (192) intnumber -> . INTNUMBER_BIN
    (193) intnumber -> . SIGNED_INTNUMBER_BIN
    (194) intnumber -> . INTNUMBER_OCT
    (195) intnumber -> . SIGNED_INTNUMBER_OCT
    (196) intnumber -> . INTNUMBER_HEX
    (197) intnumber -> . SIGNED_INTNUMBER_HEX
    (189) floatnumber -> . FLOATNUMBER
    (394) scope -> . identifier DOT
    (395) scope -> . pointer DOT
    (184) pointer -> . identifier LBRACKET expression RBRACKET
    (185) pointer -> . pointer LBRACKET expression RBRACKET

    LPAREN          shift and go to state 294
    ID              shift and go to state 86
    INTNUMBER_DEC   shift and go to state 112
    SIGNED_INTNUMBER_DEC shift and go to state 113
    INTNUMBER_BIN   shift and go to state 114
    SIGNED_INTNUMBER_BIN shift and go to state 115
    INTNUMBER_OCT   shift and go to state 116
    SIGNED_INTNUMBER_OCT shift and go to state 117
    INTNUMBER_HEX   shift and go to state 118
    SIGNED_INTNUMBER_HEX shift and go to state 119
    FLOATNUMBER     shift and go to state 120

    identifier                     shift and go to state 295
    intnumber                      shift and go to state 296
    floatnumber                    shift and go to state 297
    scope                          shift and go to state 108
    pointer                        shift and go to state 298

state 141

    (244) delays -> empty .

    ID              reduce using rule 244 (delays -> empty .)
    LBRACE          reduce using rule 244 (delays -> empty .)
    MINUS           reduce using rule 244 (delays -> empty .)
    PLUS            reduce using rule 244 (delays -> empty .)
    LNOT            reduce using rule 244 (delays -> empty .)
    NOT             reduce using rule 244 (delays -> empty .)
    AND             reduce using rule 244 (delays -> empty .)
    NAND            reduce using rule 244 (delays -> empty .)
    NOR             reduce using rule 244 (delays -> empty .)
    OR              reduce using rule 244 (delays -> empty .)
    XOR             reduce using rule 244 (delays -> empty .)
    XNOR            reduce using rule 244 (delays -> empty .)
    LPAREN          reduce using rule 244 (delays -> empty .)
    DOLLER          reduce using rule 244 (delays -> empty .)
    INTNUMBER_DEC   reduce using rule 244 (delays -> empty .)
    SIGNED_INTNUMBER_DEC reduce using rule 244 (delays -> empty .)
    INTNUMBER_BIN   reduce using rule 244 (delays -> empty .)
    SIGNED_INTNUMBER_BIN reduce using rule 244 (delays -> empty .)
    INTNUMBER_OCT   reduce using rule 244 (delays -> empty .)
    SIGNED_INTNUMBER_OCT reduce using rule 244 (delays -> empty .)
    INTNUMBER_HEX   reduce using rule 244 (delays -> empty .)
    SIGNED_INTNUMBER_HEX reduce using rule 244 (delays -> empty .)
    FLOATNUMBER     reduce using rule 244 (delays -> empty .)
    STRING_LITERAL  reduce using rule 244 (delays -> empty .)
    IF              reduce using rule 244 (delays -> empty .)


state 142

    (87) integerdecl -> INTEGER integernamelist . SEMICOLON
    (89) integernamelist -> integernamelist . COMMA integername

    SEMICOLON       shift and go to state 299
    COMMA           shift and go to state 300


state 143

    (88) integerdecl -> INTEGER SIGNED . integernamelist SEMICOLON
    (89) integernamelist -> . integernamelist COMMA integername
    (90) integernamelist -> . integername
    (91) integername -> . ID

    ID              shift and go to state 145

    integernamelist                shift and go to state 301
    integername                    shift and go to state 144

state 144

    (90) integernamelist -> integername .

    SEMICOLON       reduce using rule 90 (integernamelist -> integername .)
    COMMA           reduce using rule 90 (integernamelist -> integername .)


state 145

    (91) integername -> ID .

    SEMICOLON       reduce using rule 91 (integername -> ID .)
    COMMA           reduce using rule 91 (integername -> ID .)


state 146

    (92) realdecl -> REAL realnamelist . SEMICOLON
    (93) realnamelist -> realnamelist . COMMA realname

    SEMICOLON       shift and go to state 302
    COMMA           shift and go to state 303


state 147

    (94) realnamelist -> realname .

    SEMICOLON       reduce using rule 94 (realnamelist -> realname .)
    COMMA           reduce using rule 94 (realnamelist -> realname .)


state 148

    (95) realname -> ID .

    SEMICOLON       reduce using rule 95 (realname -> ID .)
    COMMA           reduce using rule 95 (realname -> ID .)


state 149

    (96) parameterdecl -> PARAMETER param_substitution_list . SEMICOLON
    (106) param_substitution_list -> param_substitution_list . COMMA param_substitution

    SEMICOLON       shift and go to state 304
    COMMA           shift and go to state 305


state 150

    (97) parameterdecl -> PARAMETER SIGNED . param_substitution_list SEMICOLON
    (99) parameterdecl -> PARAMETER SIGNED . width param_substitution_list SEMICOLON
    (106) param_substitution_list -> . param_substitution_list COMMA param_substitution
    (107) param_substitution_list -> . param_substitution
    (54) width -> . LBRACKET expression COLON expression RBRACKET
    (108) param_substitution -> . ID EQUALS rvalue

    LBRACKET        shift and go to state 137
    ID              shift and go to state 154

    param_substitution_list        shift and go to state 306
    width                          shift and go to state 307
    param_substitution             shift and go to state 153

state 151

    (98) parameterdecl -> PARAMETER width . param_substitution_list SEMICOLON
    (106) param_substitution_list -> . param_substitution_list COMMA param_substitution
    (107) param_substitution_list -> . param_substitution
    (108) param_substitution -> . ID EQUALS rvalue

    ID              shift and go to state 154

    param_substitution_list        shift and go to state 308
    param_substitution             shift and go to state 153

state 152

    (100) parameterdecl -> PARAMETER INTEGER . param_substitution_list SEMICOLON
    (106) param_substitution_list -> . param_substitution_list COMMA param_substitution
    (107) param_substitution_list -> . param_substitution
    (108) param_substitution -> . ID EQUALS rvalue

    ID              shift and go to state 154

    param_substitution_list        shift and go to state 309
    param_substitution             shift and go to state 153

state 153

    (107) param_substitution_list -> param_substitution .

    SEMICOLON       reduce using rule 107 (param_substitution_list -> param_substitution .)
    COMMA           reduce using rule 107 (param_substitution_list -> param_substitution .)
    RPAREN          reduce using rule 107 (param_substitution_list -> param_substitution .)


state 154

    (108) param_substitution -> ID . EQUALS rvalue

    EQUALS          shift and go to state 310


state 155

    (101) localparamdecl -> LOCALPARAM param_substitution_list . SEMICOLON
    (106) param_substitution_list -> param_substitution_list . COMMA param_substitution

    SEMICOLON       shift and go to state 311
    COMMA           shift and go to state 305


state 156

    (102) localparamdecl -> LOCALPARAM SIGNED . param_substitution_list SEMICOLON
    (104) localparamdecl -> LOCALPARAM SIGNED . width param_substitution_list SEMICOLON
    (106) param_substitution_list -> . param_substitution_list COMMA param_substitution
    (107) param_substitution_list -> . param_substitution
    (54) width -> . LBRACKET expression COLON expression RBRACKET
    (108) param_substitution -> . ID EQUALS rvalue

    LBRACKET        shift and go to state 137
    ID              shift and go to state 154

    param_substitution_list        shift and go to state 312
    width                          shift and go to state 313
    param_substitution             shift and go to state 153

state 157

    (103) localparamdecl -> LOCALPARAM width . param_substitution_list SEMICOLON
    (106) param_substitution_list -> . param_substitution_list COMMA param_substitution
    (107) param_substitution_list -> . param_substitution
    (108) param_substitution -> . ID EQUALS rvalue

    ID              shift and go to state 154

    param_substitution_list        shift and go to state 314
    param_substitution             shift and go to state 153

state 158

    (105) localparamdecl -> LOCALPARAM INTEGER . param_substitution_list SEMICOLON
    (106) param_substitution_list -> . param_substitution_list COMMA param_substitution
    (107) param_substitution_list -> . param_substitution
    (108) param_substitution -> . ID EQUALS rvalue

    ID              shift and go to state 154

    param_substitution_list        shift and go to state 315
    param_substitution             shift and go to state 153

state 159

    (329) genvardecl -> GENVAR genvarlist . SEMICOLON
    (330) genvarlist -> genvarlist . COMMA genvar

    SEMICOLON       shift and go to state 316
    COMMA           shift and go to state 317


state 160

    (331) genvarlist -> genvar .

    SEMICOLON       reduce using rule 331 (genvarlist -> genvar .)
    COMMA           reduce using rule 331 (genvarlist -> genvar .)


state 161

    (332) genvar -> ID .

    SEMICOLON       reduce using rule 332 (genvar -> ID .)
    COMMA           reduce using rule 332 (genvar -> ID .)


state 162

    (109) assignment -> ASSIGN lvalue . EQUALS rvalue SEMICOLON

    EQUALS          shift and go to state 318


state 163

    (110) assignment -> ASSIGN delays . lvalue EQUALS delays rvalue SEMICOLON
    (125) lvalue -> . lpartselect
    (126) lvalue -> . lpointer
    (127) lvalue -> . lconcat
    (128) lvalue -> . identifier
    (111) lpartselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (112) lpartselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (113) lpartselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (114) lpartselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (115) lpartselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (116) lpartselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (117) lpointer -> . pointer
    (118) lconcat -> . LBRACE lconcatlist RBRACE
    (392) identifier -> . ID
    (393) identifier -> . scope ID
    (184) pointer -> . identifier LBRACKET expression RBRACKET
    (185) pointer -> . pointer LBRACKET expression RBRACKET
    (394) scope -> . identifier DOT
    (395) scope -> . pointer DOT

    LBRACE          shift and go to state 169
    ID              shift and go to state 86

    lvalue                         shift and go to state 319
    lpartselect                    shift and go to state 164
    lpointer                       shift and go to state 165
    lconcat                        shift and go to state 166
    identifier                     shift and go to state 167
    pointer                        shift and go to state 168
    scope                          shift and go to state 108

state 164

    (125) lvalue -> lpartselect .

    EQUALS          reduce using rule 125 (lvalue -> lpartselect .)
    LE              reduce using rule 125 (lvalue -> lpartselect .)


state 165

    (126) lvalue -> lpointer .

    EQUALS          reduce using rule 126 (lvalue -> lpointer .)
    LE              reduce using rule 126 (lvalue -> lpointer .)


state 166

    (127) lvalue -> lconcat .

    EQUALS          reduce using rule 127 (lvalue -> lconcat .)
    LE              reduce using rule 127 (lvalue -> lconcat .)


state 167

    (128) lvalue -> identifier .
    (114) lpartselect -> identifier . LBRACKET expression COLON expression RBRACKET
    (115) lpartselect -> identifier . LBRACKET expression PLUSCOLON expression RBRACKET
    (116) lpartselect -> identifier . LBRACKET expression MINUSCOLON expression RBRACKET
    (184) pointer -> identifier . LBRACKET expression RBRACKET
    (394) scope -> identifier . DOT

    EQUALS          reduce using rule 128 (lvalue -> identifier .)
    LE              reduce using rule 128 (lvalue -> identifier .)
    LBRACKET        shift and go to state 320
    DOT             shift and go to state 274


state 168

    (111) lpartselect -> pointer . LBRACKET expression COLON expression RBRACKET
    (112) lpartselect -> pointer . LBRACKET expression PLUSCOLON expression RBRACKET
    (113) lpartselect -> pointer . LBRACKET expression MINUSCOLON expression RBRACKET
    (117) lpointer -> pointer .
    (185) pointer -> pointer . LBRACKET expression RBRACKET
    (395) scope -> pointer . DOT

    LBRACKET        shift and go to state 321
    EQUALS          reduce using rule 117 (lpointer -> pointer .)
    LE              reduce using rule 117 (lpointer -> pointer .)
    DOT             shift and go to state 271


state 169

    (118) lconcat -> LBRACE . lconcatlist RBRACE
    (119) lconcatlist -> . lconcatlist COMMA lconcat_one
    (120) lconcatlist -> . lconcat_one
    (121) lconcat_one -> . identifier
    (122) lconcat_one -> . lpartselect
    (123) lconcat_one -> . lpointer
    (124) lconcat_one -> . lconcat
    (392) identifier -> . ID
    (393) identifier -> . scope ID
    (111) lpartselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (112) lpartselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (113) lpartselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (114) lpartselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (115) lpartselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (116) lpartselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (117) lpointer -> . pointer
    (118) lconcat -> . LBRACE lconcatlist RBRACE
    (394) scope -> . identifier DOT
    (395) scope -> . pointer DOT
    (184) pointer -> . identifier LBRACKET expression RBRACKET
    (185) pointer -> . pointer LBRACKET expression RBRACKET

    ID              shift and go to state 86
    LBRACE          shift and go to state 169

    lconcatlist                    shift and go to state 322
    lconcat_one                    shift and go to state 323
    identifier                     shift and go to state 324
    lpartselect                    shift and go to state 325
    lpointer                       shift and go to state 326
    lconcat                        shift and go to state 327
    scope                          shift and go to state 108
    pointer                        shift and go to state 328

state 170

    (199) always -> ALWAYS senslist . always_statement
    (236) always_statement -> . basic_statement
    (221) basic_statement -> . if_statement
    (222) basic_statement -> . case_statement
    (223) basic_statement -> . casex_statement
    (224) basic_statement -> . unique_case_statement
    (225) basic_statement -> . for_statement
    (226) basic_statement -> . while_statement
    (227) basic_statement -> . event_statement
    (228) basic_statement -> . wait_statement
    (229) basic_statement -> . forever_statement
    (230) basic_statement -> . block
    (231) basic_statement -> . namedblock
    (232) basic_statement -> . parallelblock
    (233) basic_statement -> . blocking_substitution
    (234) basic_statement -> . nonblocking_substitution
    (235) basic_statement -> . single_statement
    (262) if_statement -> . IF LPAREN cond RPAREN true_statement ELSE else_statement
    (263) if_statement -> . IF LPAREN cond RPAREN true_statement
    (264) if_statement -> . delays IF LPAREN cond RPAREN true_statement ELSE else_statement
    (265) if_statement -> . delays IF LPAREN cond RPAREN true_statement
    (280) case_statement -> . CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE
    (281) casex_statement -> . CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE
    (282) unique_case_statement -> . UNIQUE CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE
    (270) for_statement -> . FOR LPAREN forpre forcond forpost RPAREN forcontent_statement
    (278) while_statement -> . WHILE LPAREN cond RPAREN whilecontent_statement
    (292) event_statement -> . senslist SEMICOLON
    (293) wait_statement -> . WAIT LPAREN cond RPAREN waitcontent_statement
    (296) forever_statement -> . FOREVER basic_statement
    (245) block -> . BEGIN block_statements END
    (246) block -> . BEGIN END
    (250) namedblock -> . BEGIN COLON ID namedblock_statements END
    (251) namedblock -> . BEGIN COLON ID END
    (260) parallelblock -> . FORK block_statements JOIN
    (261) parallelblock -> . FORK JOIN
    (237) blocking_substitution -> . delays lvalue EQUALS delays rvalue SEMICOLON
    (239) nonblocking_substitution -> . delays lvalue LE delays rvalue SEMICOLON
    (397) single_statement -> . DELAY expression SEMICOLON
    (398) single_statement -> . systemcall SEMICOLON
    (399) single_statement -> . disable SEMICOLON
    (240) delays -> . DELAY LPAREN expression RPAREN
    (241) delays -> . DELAY identifier
    (242) delays -> . DELAY intnumber
    (243) delays -> . DELAY floatnumber
    (244) delays -> . empty
    (202) senslist -> . AT LPAREN edgesigs RPAREN
    (209) senslist -> . empty
    (210) senslist -> . AT levelsig
    (211) senslist -> . AT LPAREN levelsigs RPAREN
    (219) senslist -> . AT TIMES
    (220) senslist -> . AT LPAREN TIMES RPAREN
    (351) systemcall -> . DOLLER ID
    (352) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (353) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (396) disable -> . DISABLE ID
    (400) empty -> .

  ! shift/reduce conflict for IF resolved as shift
    IF              shift and go to state 192
    CASE            shift and go to state 194
    CASEX           shift and go to state 195
    UNIQUE          shift and go to state 196
    FOR             shift and go to state 197
    WHILE           shift and go to state 198
    WAIT            shift and go to state 200
    FOREVER         shift and go to state 201
    BEGIN           shift and go to state 202
    FORK            shift and go to state 203
    DELAY           shift and go to state 204
    AT              shift and go to state 171
    DOLLER          shift and go to state 107
    DISABLE         shift and go to state 208
    LBRACE          reduce using rule 400 (empty -> .)
    ID              reduce using rule 400 (empty -> .)
    SEMICOLON       reduce using rule 400 (empty -> .)

  ! IF              [ reduce using rule 400 (empty -> .) ]

    senslist                       shift and go to state 199
    always_statement               shift and go to state 329
    basic_statement                shift and go to state 330
    if_statement                   shift and go to state 177
    case_statement                 shift and go to state 178
    casex_statement                shift and go to state 179
    unique_case_statement          shift and go to state 180
    for_statement                  shift and go to state 181
    while_statement                shift and go to state 182
    event_statement                shift and go to state 183
    wait_statement                 shift and go to state 184
    forever_statement              shift and go to state 185
    block                          shift and go to state 186
    namedblock                     shift and go to state 187
    parallelblock                  shift and go to state 188
    blocking_substitution          shift and go to state 189
    nonblocking_substitution       shift and go to state 190
    single_statement               shift and go to state 191
    delays                         shift and go to state 193
    systemcall                     shift and go to state 205
    disable                        shift and go to state 206
    empty                          shift and go to state 207

state 171

    (202) senslist -> AT . LPAREN edgesigs RPAREN
    (210) senslist -> AT . levelsig
    (211) senslist -> AT . LPAREN levelsigs RPAREN
    (219) senslist -> AT . TIMES
    (220) senslist -> AT . LPAREN TIMES RPAREN
    (212) levelsig -> . levelsig_base
    (213) levelsig_base -> . identifier
    (214) levelsig_base -> . pointer
    (215) levelsig_base -> . partselect
    (392) identifier -> . ID
    (393) identifier -> . scope ID
    (184) pointer -> . identifier LBRACKET expression RBRACKET
    (185) pointer -> . pointer LBRACKET expression RBRACKET
    (178) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (179) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (180) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (181) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (182) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (183) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (394) scope -> . identifier DOT
    (395) scope -> . pointer DOT

    LPAREN          shift and go to state 331
    TIMES           shift and go to state 333
    ID              shift and go to state 86

    levelsig                       shift and go to state 332
    levelsig_base                  shift and go to state 334
    identifier                     shift and go to state 335
    pointer                        shift and go to state 336
    partselect                     shift and go to state 337
    scope                          shift and go to state 108

state 172

    (209) senslist -> empty .

    IF              reduce using rule 209 (senslist -> empty .)
    CASE            reduce using rule 209 (senslist -> empty .)
    CASEX           reduce using rule 209 (senslist -> empty .)
    UNIQUE          reduce using rule 209 (senslist -> empty .)
    FOR             reduce using rule 209 (senslist -> empty .)
    WHILE           reduce using rule 209 (senslist -> empty .)
    WAIT            reduce using rule 209 (senslist -> empty .)
    FOREVER         reduce using rule 209 (senslist -> empty .)
    BEGIN           reduce using rule 209 (senslist -> empty .)
    FORK            reduce using rule 209 (senslist -> empty .)
    DELAY           reduce using rule 209 (senslist -> empty .)
    AT              reduce using rule 209 (senslist -> empty .)
    DOLLER          reduce using rule 209 (senslist -> empty .)
    DISABLE         reduce using rule 209 (senslist -> empty .)
    LBRACE          reduce using rule 209 (senslist -> empty .)
    ID              reduce using rule 209 (senslist -> empty .)
    SEMICOLON       reduce using rule 209 (senslist -> empty .)


state 173

    (200) always_ff -> ALWAYS_FF senslist . always_statement
    (236) always_statement -> . basic_statement
    (221) basic_statement -> . if_statement
    (222) basic_statement -> . case_statement
    (223) basic_statement -> . casex_statement
    (224) basic_statement -> . unique_case_statement
    (225) basic_statement -> . for_statement
    (226) basic_statement -> . while_statement
    (227) basic_statement -> . event_statement
    (228) basic_statement -> . wait_statement
    (229) basic_statement -> . forever_statement
    (230) basic_statement -> . block
    (231) basic_statement -> . namedblock
    (232) basic_statement -> . parallelblock
    (233) basic_statement -> . blocking_substitution
    (234) basic_statement -> . nonblocking_substitution
    (235) basic_statement -> . single_statement
    (262) if_statement -> . IF LPAREN cond RPAREN true_statement ELSE else_statement
    (263) if_statement -> . IF LPAREN cond RPAREN true_statement
    (264) if_statement -> . delays IF LPAREN cond RPAREN true_statement ELSE else_statement
    (265) if_statement -> . delays IF LPAREN cond RPAREN true_statement
    (280) case_statement -> . CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE
    (281) casex_statement -> . CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE
    (282) unique_case_statement -> . UNIQUE CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE
    (270) for_statement -> . FOR LPAREN forpre forcond forpost RPAREN forcontent_statement
    (278) while_statement -> . WHILE LPAREN cond RPAREN whilecontent_statement
    (292) event_statement -> . senslist SEMICOLON
    (293) wait_statement -> . WAIT LPAREN cond RPAREN waitcontent_statement
    (296) forever_statement -> . FOREVER basic_statement
    (245) block -> . BEGIN block_statements END
    (246) block -> . BEGIN END
    (250) namedblock -> . BEGIN COLON ID namedblock_statements END
    (251) namedblock -> . BEGIN COLON ID END
    (260) parallelblock -> . FORK block_statements JOIN
    (261) parallelblock -> . FORK JOIN
    (237) blocking_substitution -> . delays lvalue EQUALS delays rvalue SEMICOLON
    (239) nonblocking_substitution -> . delays lvalue LE delays rvalue SEMICOLON
    (397) single_statement -> . DELAY expression SEMICOLON
    (398) single_statement -> . systemcall SEMICOLON
    (399) single_statement -> . disable SEMICOLON
    (240) delays -> . DELAY LPAREN expression RPAREN
    (241) delays -> . DELAY identifier
    (242) delays -> . DELAY intnumber
    (243) delays -> . DELAY floatnumber
    (244) delays -> . empty
    (202) senslist -> . AT LPAREN edgesigs RPAREN
    (209) senslist -> . empty
    (210) senslist -> . AT levelsig
    (211) senslist -> . AT LPAREN levelsigs RPAREN
    (219) senslist -> . AT TIMES
    (220) senslist -> . AT LPAREN TIMES RPAREN
    (351) systemcall -> . DOLLER ID
    (352) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (353) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (396) disable -> . DISABLE ID
    (400) empty -> .

  ! shift/reduce conflict for IF resolved as shift
    IF              shift and go to state 192
    CASE            shift and go to state 194
    CASEX           shift and go to state 195
    UNIQUE          shift and go to state 196
    FOR             shift and go to state 197
    WHILE           shift and go to state 198
    WAIT            shift and go to state 200
    FOREVER         shift and go to state 201
    BEGIN           shift and go to state 202
    FORK            shift and go to state 203
    DELAY           shift and go to state 204
    AT              shift and go to state 171
    DOLLER          shift and go to state 107
    DISABLE         shift and go to state 208
    LBRACE          reduce using rule 400 (empty -> .)
    ID              reduce using rule 400 (empty -> .)
    SEMICOLON       reduce using rule 400 (empty -> .)

  ! IF              [ reduce using rule 400 (empty -> .) ]

    senslist                       shift and go to state 199
    always_statement               shift and go to state 338
    basic_statement                shift and go to state 330
    if_statement                   shift and go to state 177
    case_statement                 shift and go to state 178
    casex_statement                shift and go to state 179
    unique_case_statement          shift and go to state 180
    for_statement                  shift and go to state 181
    while_statement                shift and go to state 182
    event_statement                shift and go to state 183
    wait_statement                 shift and go to state 184
    forever_statement              shift and go to state 185
    block                          shift and go to state 186
    namedblock                     shift and go to state 187
    parallelblock                  shift and go to state 188
    blocking_substitution          shift and go to state 189
    nonblocking_substitution       shift and go to state 190
    single_statement               shift and go to state 191
    delays                         shift and go to state 193
    systemcall                     shift and go to state 205
    disable                        shift and go to state 206
    empty                          shift and go to state 207

state 174

    (201) always_comb -> ALWAYS_COMB senslist . always_statement
    (236) always_statement -> . basic_statement
    (221) basic_statement -> . if_statement
    (222) basic_statement -> . case_statement
    (223) basic_statement -> . casex_statement
    (224) basic_statement -> . unique_case_statement
    (225) basic_statement -> . for_statement
    (226) basic_statement -> . while_statement
    (227) basic_statement -> . event_statement
    (228) basic_statement -> . wait_statement
    (229) basic_statement -> . forever_statement
    (230) basic_statement -> . block
    (231) basic_statement -> . namedblock
    (232) basic_statement -> . parallelblock
    (233) basic_statement -> . blocking_substitution
    (234) basic_statement -> . nonblocking_substitution
    (235) basic_statement -> . single_statement
    (262) if_statement -> . IF LPAREN cond RPAREN true_statement ELSE else_statement
    (263) if_statement -> . IF LPAREN cond RPAREN true_statement
    (264) if_statement -> . delays IF LPAREN cond RPAREN true_statement ELSE else_statement
    (265) if_statement -> . delays IF LPAREN cond RPAREN true_statement
    (280) case_statement -> . CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE
    (281) casex_statement -> . CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE
    (282) unique_case_statement -> . UNIQUE CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE
    (270) for_statement -> . FOR LPAREN forpre forcond forpost RPAREN forcontent_statement
    (278) while_statement -> . WHILE LPAREN cond RPAREN whilecontent_statement
    (292) event_statement -> . senslist SEMICOLON
    (293) wait_statement -> . WAIT LPAREN cond RPAREN waitcontent_statement
    (296) forever_statement -> . FOREVER basic_statement
    (245) block -> . BEGIN block_statements END
    (246) block -> . BEGIN END
    (250) namedblock -> . BEGIN COLON ID namedblock_statements END
    (251) namedblock -> . BEGIN COLON ID END
    (260) parallelblock -> . FORK block_statements JOIN
    (261) parallelblock -> . FORK JOIN
    (237) blocking_substitution -> . delays lvalue EQUALS delays rvalue SEMICOLON
    (239) nonblocking_substitution -> . delays lvalue LE delays rvalue SEMICOLON
    (397) single_statement -> . DELAY expression SEMICOLON
    (398) single_statement -> . systemcall SEMICOLON
    (399) single_statement -> . disable SEMICOLON
    (240) delays -> . DELAY LPAREN expression RPAREN
    (241) delays -> . DELAY identifier
    (242) delays -> . DELAY intnumber
    (243) delays -> . DELAY floatnumber
    (244) delays -> . empty
    (202) senslist -> . AT LPAREN edgesigs RPAREN
    (209) senslist -> . empty
    (210) senslist -> . AT levelsig
    (211) senslist -> . AT LPAREN levelsigs RPAREN
    (219) senslist -> . AT TIMES
    (220) senslist -> . AT LPAREN TIMES RPAREN
    (351) systemcall -> . DOLLER ID
    (352) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (353) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (396) disable -> . DISABLE ID
    (400) empty -> .

  ! shift/reduce conflict for IF resolved as shift
    IF              shift and go to state 192
    CASE            shift and go to state 194
    CASEX           shift and go to state 195
    UNIQUE          shift and go to state 196
    FOR             shift and go to state 197
    WHILE           shift and go to state 198
    WAIT            shift and go to state 200
    FOREVER         shift and go to state 201
    BEGIN           shift and go to state 202
    FORK            shift and go to state 203
    DELAY           shift and go to state 204
    AT              shift and go to state 171
    DOLLER          shift and go to state 107
    DISABLE         shift and go to state 208
    LBRACE          reduce using rule 400 (empty -> .)
    ID              reduce using rule 400 (empty -> .)
    SEMICOLON       reduce using rule 400 (empty -> .)

  ! IF              [ reduce using rule 400 (empty -> .) ]

    senslist                       shift and go to state 199
    always_statement               shift and go to state 339
    basic_statement                shift and go to state 330
    if_statement                   shift and go to state 177
    case_statement                 shift and go to state 178
    casex_statement                shift and go to state 179
    unique_case_statement          shift and go to state 180
    for_statement                  shift and go to state 181
    while_statement                shift and go to state 182
    event_statement                shift and go to state 183
    wait_statement                 shift and go to state 184
    forever_statement              shift and go to state 185
    block                          shift and go to state 186
    namedblock                     shift and go to state 187
    parallelblock                  shift and go to state 188
    blocking_substitution          shift and go to state 189
    nonblocking_substitution       shift and go to state 190
    single_statement               shift and go to state 191
    delays                         shift and go to state 193
    systemcall                     shift and go to state 205
    disable                        shift and go to state 206
    empty                          shift and go to state 207

state 175

    (290) initial -> INITIAL initial_statement .

    ENDMODULE       reduce using rule 290 (initial -> INITIAL initial_statement .)
    GENERATE        reduce using rule 290 (initial -> INITIAL initial_statement .)
    INTEGER         reduce using rule 290 (initial -> INITIAL initial_statement .)
    REAL            reduce using rule 290 (initial -> INITIAL initial_statement .)
    PARAMETER       reduce using rule 290 (initial -> INITIAL initial_statement .)
    LOCALPARAM      reduce using rule 290 (initial -> INITIAL initial_statement .)
    GENVAR          reduce using rule 290 (initial -> INITIAL initial_statement .)
    ASSIGN          reduce using rule 290 (initial -> INITIAL initial_statement .)
    ALWAYS          reduce using rule 290 (initial -> INITIAL initial_statement .)
    ALWAYS_FF       reduce using rule 290 (initial -> INITIAL initial_statement .)
    ALWAYS_COMB     reduce using rule 290 (initial -> INITIAL initial_statement .)
    INITIAL         reduce using rule 290 (initial -> INITIAL initial_statement .)
    ID              reduce using rule 290 (initial -> INITIAL initial_statement .)
    SENS_OR         reduce using rule 290 (initial -> INITIAL initial_statement .)
    FUNCTION        reduce using rule 290 (initial -> INITIAL initial_statement .)
    TASK            reduce using rule 290 (initial -> INITIAL initial_statement .)
    LPAREN          reduce using rule 290 (initial -> INITIAL initial_statement .)
    INPUT           reduce using rule 290 (initial -> INITIAL initial_statement .)
    OUTPUT          reduce using rule 290 (initial -> INITIAL initial_statement .)
    INOUT           reduce using rule 290 (initial -> INITIAL initial_statement .)
    TRI             reduce using rule 290 (initial -> INITIAL initial_statement .)
    REG             reduce using rule 290 (initial -> INITIAL initial_statement .)
    LOGIC           reduce using rule 290 (initial -> INITIAL initial_statement .)
    WIRE            reduce using rule 290 (initial -> INITIAL initial_statement .)
    SIGNED          reduce using rule 290 (initial -> INITIAL initial_statement .)
    SUPPLY0         reduce using rule 290 (initial -> INITIAL initial_statement .)
    SUPPLY1         reduce using rule 290 (initial -> INITIAL initial_statement .)
    ENDGENERATE     reduce using rule 290 (initial -> INITIAL initial_statement .)
    IF              reduce using rule 290 (initial -> INITIAL initial_statement .)
    FOR             reduce using rule 290 (initial -> INITIAL initial_statement .)
    ELSE            reduce using rule 290 (initial -> INITIAL initial_statement .)
    END             reduce using rule 290 (initial -> INITIAL initial_statement .)


state 176

    (291) initial_statement -> basic_statement .

    ENDMODULE       reduce using rule 291 (initial_statement -> basic_statement .)
    GENERATE        reduce using rule 291 (initial_statement -> basic_statement .)
    INTEGER         reduce using rule 291 (initial_statement -> basic_statement .)
    REAL            reduce using rule 291 (initial_statement -> basic_statement .)
    PARAMETER       reduce using rule 291 (initial_statement -> basic_statement .)
    LOCALPARAM      reduce using rule 291 (initial_statement -> basic_statement .)
    GENVAR          reduce using rule 291 (initial_statement -> basic_statement .)
    ASSIGN          reduce using rule 291 (initial_statement -> basic_statement .)
    ALWAYS          reduce using rule 291 (initial_statement -> basic_statement .)
    ALWAYS_FF       reduce using rule 291 (initial_statement -> basic_statement .)
    ALWAYS_COMB     reduce using rule 291 (initial_statement -> basic_statement .)
    INITIAL         reduce using rule 291 (initial_statement -> basic_statement .)
    ID              reduce using rule 291 (initial_statement -> basic_statement .)
    SENS_OR         reduce using rule 291 (initial_statement -> basic_statement .)
    FUNCTION        reduce using rule 291 (initial_statement -> basic_statement .)
    TASK            reduce using rule 291 (initial_statement -> basic_statement .)
    LPAREN          reduce using rule 291 (initial_statement -> basic_statement .)
    INPUT           reduce using rule 291 (initial_statement -> basic_statement .)
    OUTPUT          reduce using rule 291 (initial_statement -> basic_statement .)
    INOUT           reduce using rule 291 (initial_statement -> basic_statement .)
    TRI             reduce using rule 291 (initial_statement -> basic_statement .)
    REG             reduce using rule 291 (initial_statement -> basic_statement .)
    LOGIC           reduce using rule 291 (initial_statement -> basic_statement .)
    WIRE            reduce using rule 291 (initial_statement -> basic_statement .)
    SIGNED          reduce using rule 291 (initial_statement -> basic_statement .)
    SUPPLY0         reduce using rule 291 (initial_statement -> basic_statement .)
    SUPPLY1         reduce using rule 291 (initial_statement -> basic_statement .)
    ENDGENERATE     reduce using rule 291 (initial_statement -> basic_statement .)
    IF              reduce using rule 291 (initial_statement -> basic_statement .)
    FOR             reduce using rule 291 (initial_statement -> basic_statement .)
    ELSE            reduce using rule 291 (initial_statement -> basic_statement .)
    END             reduce using rule 291 (initial_statement -> basic_statement .)


state 177

    (221) basic_statement -> if_statement .

    ENDMODULE       reduce using rule 221 (basic_statement -> if_statement .)
    GENERATE        reduce using rule 221 (basic_statement -> if_statement .)
    INTEGER         reduce using rule 221 (basic_statement -> if_statement .)
    REAL            reduce using rule 221 (basic_statement -> if_statement .)
    PARAMETER       reduce using rule 221 (basic_statement -> if_statement .)
    LOCALPARAM      reduce using rule 221 (basic_statement -> if_statement .)
    GENVAR          reduce using rule 221 (basic_statement -> if_statement .)
    ASSIGN          reduce using rule 221 (basic_statement -> if_statement .)
    ALWAYS          reduce using rule 221 (basic_statement -> if_statement .)
    ALWAYS_FF       reduce using rule 221 (basic_statement -> if_statement .)
    ALWAYS_COMB     reduce using rule 221 (basic_statement -> if_statement .)
    INITIAL         reduce using rule 221 (basic_statement -> if_statement .)
    ID              reduce using rule 221 (basic_statement -> if_statement .)
    SENS_OR         reduce using rule 221 (basic_statement -> if_statement .)
    FUNCTION        reduce using rule 221 (basic_statement -> if_statement .)
    TASK            reduce using rule 221 (basic_statement -> if_statement .)
    LPAREN          reduce using rule 221 (basic_statement -> if_statement .)
    INPUT           reduce using rule 221 (basic_statement -> if_statement .)
    OUTPUT          reduce using rule 221 (basic_statement -> if_statement .)
    INOUT           reduce using rule 221 (basic_statement -> if_statement .)
    TRI             reduce using rule 221 (basic_statement -> if_statement .)
    REG             reduce using rule 221 (basic_statement -> if_statement .)
    LOGIC           reduce using rule 221 (basic_statement -> if_statement .)
    WIRE            reduce using rule 221 (basic_statement -> if_statement .)
    SIGNED          reduce using rule 221 (basic_statement -> if_statement .)
    SUPPLY0         reduce using rule 221 (basic_statement -> if_statement .)
    SUPPLY1         reduce using rule 221 (basic_statement -> if_statement .)
    ENDGENERATE     reduce using rule 221 (basic_statement -> if_statement .)
    IF              reduce using rule 221 (basic_statement -> if_statement .)
    FOR             reduce using rule 221 (basic_statement -> if_statement .)
    ELSE            reduce using rule 221 (basic_statement -> if_statement .)
    END             reduce using rule 221 (basic_statement -> if_statement .)
    CASE            reduce using rule 221 (basic_statement -> if_statement .)
    CASEX           reduce using rule 221 (basic_statement -> if_statement .)
    UNIQUE          reduce using rule 221 (basic_statement -> if_statement .)
    WHILE           reduce using rule 221 (basic_statement -> if_statement .)
    WAIT            reduce using rule 221 (basic_statement -> if_statement .)
    FOREVER         reduce using rule 221 (basic_statement -> if_statement .)
    BEGIN           reduce using rule 221 (basic_statement -> if_statement .)
    FORK            reduce using rule 221 (basic_statement -> if_statement .)
    DELAY           reduce using rule 221 (basic_statement -> if_statement .)
    AT              reduce using rule 221 (basic_statement -> if_statement .)
    DOLLER          reduce using rule 221 (basic_statement -> if_statement .)
    DISABLE         reduce using rule 221 (basic_statement -> if_statement .)
    LBRACE          reduce using rule 221 (basic_statement -> if_statement .)
    SEMICOLON       reduce using rule 221 (basic_statement -> if_statement .)
    JOIN            reduce using rule 221 (basic_statement -> if_statement .)
    ENDFUNCTION     reduce using rule 221 (basic_statement -> if_statement .)
    ENDTASK         reduce using rule 221 (basic_statement -> if_statement .)
    ENDCASE         reduce using rule 221 (basic_statement -> if_statement .)
    DEFAULT         reduce using rule 221 (basic_statement -> if_statement .)
    MINUS           reduce using rule 221 (basic_statement -> if_statement .)
    PLUS            reduce using rule 221 (basic_statement -> if_statement .)
    LNOT            reduce using rule 221 (basic_statement -> if_statement .)
    NOT             reduce using rule 221 (basic_statement -> if_statement .)
    AND             reduce using rule 221 (basic_statement -> if_statement .)
    NAND            reduce using rule 221 (basic_statement -> if_statement .)
    NOR             reduce using rule 221 (basic_statement -> if_statement .)
    OR              reduce using rule 221 (basic_statement -> if_statement .)
    XOR             reduce using rule 221 (basic_statement -> if_statement .)
    XNOR            reduce using rule 221 (basic_statement -> if_statement .)
    INTNUMBER_DEC   reduce using rule 221 (basic_statement -> if_statement .)
    SIGNED_INTNUMBER_DEC reduce using rule 221 (basic_statement -> if_statement .)
    INTNUMBER_BIN   reduce using rule 221 (basic_statement -> if_statement .)
    SIGNED_INTNUMBER_BIN reduce using rule 221 (basic_statement -> if_statement .)
    INTNUMBER_OCT   reduce using rule 221 (basic_statement -> if_statement .)
    SIGNED_INTNUMBER_OCT reduce using rule 221 (basic_statement -> if_statement .)
    INTNUMBER_HEX   reduce using rule 221 (basic_statement -> if_statement .)
    SIGNED_INTNUMBER_HEX reduce using rule 221 (basic_statement -> if_statement .)
    FLOATNUMBER     reduce using rule 221 (basic_statement -> if_statement .)
    STRING_LITERAL  reduce using rule 221 (basic_statement -> if_statement .)


state 178

    (222) basic_statement -> case_statement .

    ENDMODULE       reduce using rule 222 (basic_statement -> case_statement .)
    GENERATE        reduce using rule 222 (basic_statement -> case_statement .)
    INTEGER         reduce using rule 222 (basic_statement -> case_statement .)
    REAL            reduce using rule 222 (basic_statement -> case_statement .)
    PARAMETER       reduce using rule 222 (basic_statement -> case_statement .)
    LOCALPARAM      reduce using rule 222 (basic_statement -> case_statement .)
    GENVAR          reduce using rule 222 (basic_statement -> case_statement .)
    ASSIGN          reduce using rule 222 (basic_statement -> case_statement .)
    ALWAYS          reduce using rule 222 (basic_statement -> case_statement .)
    ALWAYS_FF       reduce using rule 222 (basic_statement -> case_statement .)
    ALWAYS_COMB     reduce using rule 222 (basic_statement -> case_statement .)
    INITIAL         reduce using rule 222 (basic_statement -> case_statement .)
    ID              reduce using rule 222 (basic_statement -> case_statement .)
    SENS_OR         reduce using rule 222 (basic_statement -> case_statement .)
    FUNCTION        reduce using rule 222 (basic_statement -> case_statement .)
    TASK            reduce using rule 222 (basic_statement -> case_statement .)
    LPAREN          reduce using rule 222 (basic_statement -> case_statement .)
    INPUT           reduce using rule 222 (basic_statement -> case_statement .)
    OUTPUT          reduce using rule 222 (basic_statement -> case_statement .)
    INOUT           reduce using rule 222 (basic_statement -> case_statement .)
    TRI             reduce using rule 222 (basic_statement -> case_statement .)
    REG             reduce using rule 222 (basic_statement -> case_statement .)
    LOGIC           reduce using rule 222 (basic_statement -> case_statement .)
    WIRE            reduce using rule 222 (basic_statement -> case_statement .)
    SIGNED          reduce using rule 222 (basic_statement -> case_statement .)
    SUPPLY0         reduce using rule 222 (basic_statement -> case_statement .)
    SUPPLY1         reduce using rule 222 (basic_statement -> case_statement .)
    ENDGENERATE     reduce using rule 222 (basic_statement -> case_statement .)
    IF              reduce using rule 222 (basic_statement -> case_statement .)
    FOR             reduce using rule 222 (basic_statement -> case_statement .)
    ELSE            reduce using rule 222 (basic_statement -> case_statement .)
    END             reduce using rule 222 (basic_statement -> case_statement .)
    CASE            reduce using rule 222 (basic_statement -> case_statement .)
    CASEX           reduce using rule 222 (basic_statement -> case_statement .)
    UNIQUE          reduce using rule 222 (basic_statement -> case_statement .)
    WHILE           reduce using rule 222 (basic_statement -> case_statement .)
    WAIT            reduce using rule 222 (basic_statement -> case_statement .)
    FOREVER         reduce using rule 222 (basic_statement -> case_statement .)
    BEGIN           reduce using rule 222 (basic_statement -> case_statement .)
    FORK            reduce using rule 222 (basic_statement -> case_statement .)
    DELAY           reduce using rule 222 (basic_statement -> case_statement .)
    AT              reduce using rule 222 (basic_statement -> case_statement .)
    DOLLER          reduce using rule 222 (basic_statement -> case_statement .)
    DISABLE         reduce using rule 222 (basic_statement -> case_statement .)
    LBRACE          reduce using rule 222 (basic_statement -> case_statement .)
    SEMICOLON       reduce using rule 222 (basic_statement -> case_statement .)
    JOIN            reduce using rule 222 (basic_statement -> case_statement .)
    ENDFUNCTION     reduce using rule 222 (basic_statement -> case_statement .)
    ENDTASK         reduce using rule 222 (basic_statement -> case_statement .)
    ENDCASE         reduce using rule 222 (basic_statement -> case_statement .)
    DEFAULT         reduce using rule 222 (basic_statement -> case_statement .)
    MINUS           reduce using rule 222 (basic_statement -> case_statement .)
    PLUS            reduce using rule 222 (basic_statement -> case_statement .)
    LNOT            reduce using rule 222 (basic_statement -> case_statement .)
    NOT             reduce using rule 222 (basic_statement -> case_statement .)
    AND             reduce using rule 222 (basic_statement -> case_statement .)
    NAND            reduce using rule 222 (basic_statement -> case_statement .)
    NOR             reduce using rule 222 (basic_statement -> case_statement .)
    OR              reduce using rule 222 (basic_statement -> case_statement .)
    XOR             reduce using rule 222 (basic_statement -> case_statement .)
    XNOR            reduce using rule 222 (basic_statement -> case_statement .)
    INTNUMBER_DEC   reduce using rule 222 (basic_statement -> case_statement .)
    SIGNED_INTNUMBER_DEC reduce using rule 222 (basic_statement -> case_statement .)
    INTNUMBER_BIN   reduce using rule 222 (basic_statement -> case_statement .)
    SIGNED_INTNUMBER_BIN reduce using rule 222 (basic_statement -> case_statement .)
    INTNUMBER_OCT   reduce using rule 222 (basic_statement -> case_statement .)
    SIGNED_INTNUMBER_OCT reduce using rule 222 (basic_statement -> case_statement .)
    INTNUMBER_HEX   reduce using rule 222 (basic_statement -> case_statement .)
    SIGNED_INTNUMBER_HEX reduce using rule 222 (basic_statement -> case_statement .)
    FLOATNUMBER     reduce using rule 222 (basic_statement -> case_statement .)
    STRING_LITERAL  reduce using rule 222 (basic_statement -> case_statement .)


state 179

    (223) basic_statement -> casex_statement .

    ENDMODULE       reduce using rule 223 (basic_statement -> casex_statement .)
    GENERATE        reduce using rule 223 (basic_statement -> casex_statement .)
    INTEGER         reduce using rule 223 (basic_statement -> casex_statement .)
    REAL            reduce using rule 223 (basic_statement -> casex_statement .)
    PARAMETER       reduce using rule 223 (basic_statement -> casex_statement .)
    LOCALPARAM      reduce using rule 223 (basic_statement -> casex_statement .)
    GENVAR          reduce using rule 223 (basic_statement -> casex_statement .)
    ASSIGN          reduce using rule 223 (basic_statement -> casex_statement .)
    ALWAYS          reduce using rule 223 (basic_statement -> casex_statement .)
    ALWAYS_FF       reduce using rule 223 (basic_statement -> casex_statement .)
    ALWAYS_COMB     reduce using rule 223 (basic_statement -> casex_statement .)
    INITIAL         reduce using rule 223 (basic_statement -> casex_statement .)
    ID              reduce using rule 223 (basic_statement -> casex_statement .)
    SENS_OR         reduce using rule 223 (basic_statement -> casex_statement .)
    FUNCTION        reduce using rule 223 (basic_statement -> casex_statement .)
    TASK            reduce using rule 223 (basic_statement -> casex_statement .)
    LPAREN          reduce using rule 223 (basic_statement -> casex_statement .)
    INPUT           reduce using rule 223 (basic_statement -> casex_statement .)
    OUTPUT          reduce using rule 223 (basic_statement -> casex_statement .)
    INOUT           reduce using rule 223 (basic_statement -> casex_statement .)
    TRI             reduce using rule 223 (basic_statement -> casex_statement .)
    REG             reduce using rule 223 (basic_statement -> casex_statement .)
    LOGIC           reduce using rule 223 (basic_statement -> casex_statement .)
    WIRE            reduce using rule 223 (basic_statement -> casex_statement .)
    SIGNED          reduce using rule 223 (basic_statement -> casex_statement .)
    SUPPLY0         reduce using rule 223 (basic_statement -> casex_statement .)
    SUPPLY1         reduce using rule 223 (basic_statement -> casex_statement .)
    ENDGENERATE     reduce using rule 223 (basic_statement -> casex_statement .)
    IF              reduce using rule 223 (basic_statement -> casex_statement .)
    FOR             reduce using rule 223 (basic_statement -> casex_statement .)
    ELSE            reduce using rule 223 (basic_statement -> casex_statement .)
    END             reduce using rule 223 (basic_statement -> casex_statement .)
    CASE            reduce using rule 223 (basic_statement -> casex_statement .)
    CASEX           reduce using rule 223 (basic_statement -> casex_statement .)
    UNIQUE          reduce using rule 223 (basic_statement -> casex_statement .)
    WHILE           reduce using rule 223 (basic_statement -> casex_statement .)
    WAIT            reduce using rule 223 (basic_statement -> casex_statement .)
    FOREVER         reduce using rule 223 (basic_statement -> casex_statement .)
    BEGIN           reduce using rule 223 (basic_statement -> casex_statement .)
    FORK            reduce using rule 223 (basic_statement -> casex_statement .)
    DELAY           reduce using rule 223 (basic_statement -> casex_statement .)
    AT              reduce using rule 223 (basic_statement -> casex_statement .)
    DOLLER          reduce using rule 223 (basic_statement -> casex_statement .)
    DISABLE         reduce using rule 223 (basic_statement -> casex_statement .)
    LBRACE          reduce using rule 223 (basic_statement -> casex_statement .)
    SEMICOLON       reduce using rule 223 (basic_statement -> casex_statement .)
    JOIN            reduce using rule 223 (basic_statement -> casex_statement .)
    ENDFUNCTION     reduce using rule 223 (basic_statement -> casex_statement .)
    ENDTASK         reduce using rule 223 (basic_statement -> casex_statement .)
    ENDCASE         reduce using rule 223 (basic_statement -> casex_statement .)
    DEFAULT         reduce using rule 223 (basic_statement -> casex_statement .)
    MINUS           reduce using rule 223 (basic_statement -> casex_statement .)
    PLUS            reduce using rule 223 (basic_statement -> casex_statement .)
    LNOT            reduce using rule 223 (basic_statement -> casex_statement .)
    NOT             reduce using rule 223 (basic_statement -> casex_statement .)
    AND             reduce using rule 223 (basic_statement -> casex_statement .)
    NAND            reduce using rule 223 (basic_statement -> casex_statement .)
    NOR             reduce using rule 223 (basic_statement -> casex_statement .)
    OR              reduce using rule 223 (basic_statement -> casex_statement .)
    XOR             reduce using rule 223 (basic_statement -> casex_statement .)
    XNOR            reduce using rule 223 (basic_statement -> casex_statement .)
    INTNUMBER_DEC   reduce using rule 223 (basic_statement -> casex_statement .)
    SIGNED_INTNUMBER_DEC reduce using rule 223 (basic_statement -> casex_statement .)
    INTNUMBER_BIN   reduce using rule 223 (basic_statement -> casex_statement .)
    SIGNED_INTNUMBER_BIN reduce using rule 223 (basic_statement -> casex_statement .)
    INTNUMBER_OCT   reduce using rule 223 (basic_statement -> casex_statement .)
    SIGNED_INTNUMBER_OCT reduce using rule 223 (basic_statement -> casex_statement .)
    INTNUMBER_HEX   reduce using rule 223 (basic_statement -> casex_statement .)
    SIGNED_INTNUMBER_HEX reduce using rule 223 (basic_statement -> casex_statement .)
    FLOATNUMBER     reduce using rule 223 (basic_statement -> casex_statement .)
    STRING_LITERAL  reduce using rule 223 (basic_statement -> casex_statement .)


state 180

    (224) basic_statement -> unique_case_statement .

    ENDMODULE       reduce using rule 224 (basic_statement -> unique_case_statement .)
    GENERATE        reduce using rule 224 (basic_statement -> unique_case_statement .)
    INTEGER         reduce using rule 224 (basic_statement -> unique_case_statement .)
    REAL            reduce using rule 224 (basic_statement -> unique_case_statement .)
    PARAMETER       reduce using rule 224 (basic_statement -> unique_case_statement .)
    LOCALPARAM      reduce using rule 224 (basic_statement -> unique_case_statement .)
    GENVAR          reduce using rule 224 (basic_statement -> unique_case_statement .)
    ASSIGN          reduce using rule 224 (basic_statement -> unique_case_statement .)
    ALWAYS          reduce using rule 224 (basic_statement -> unique_case_statement .)
    ALWAYS_FF       reduce using rule 224 (basic_statement -> unique_case_statement .)
    ALWAYS_COMB     reduce using rule 224 (basic_statement -> unique_case_statement .)
    INITIAL         reduce using rule 224 (basic_statement -> unique_case_statement .)
    ID              reduce using rule 224 (basic_statement -> unique_case_statement .)
    SENS_OR         reduce using rule 224 (basic_statement -> unique_case_statement .)
    FUNCTION        reduce using rule 224 (basic_statement -> unique_case_statement .)
    TASK            reduce using rule 224 (basic_statement -> unique_case_statement .)
    LPAREN          reduce using rule 224 (basic_statement -> unique_case_statement .)
    INPUT           reduce using rule 224 (basic_statement -> unique_case_statement .)
    OUTPUT          reduce using rule 224 (basic_statement -> unique_case_statement .)
    INOUT           reduce using rule 224 (basic_statement -> unique_case_statement .)
    TRI             reduce using rule 224 (basic_statement -> unique_case_statement .)
    REG             reduce using rule 224 (basic_statement -> unique_case_statement .)
    LOGIC           reduce using rule 224 (basic_statement -> unique_case_statement .)
    WIRE            reduce using rule 224 (basic_statement -> unique_case_statement .)
    SIGNED          reduce using rule 224 (basic_statement -> unique_case_statement .)
    SUPPLY0         reduce using rule 224 (basic_statement -> unique_case_statement .)
    SUPPLY1         reduce using rule 224 (basic_statement -> unique_case_statement .)
    ENDGENERATE     reduce using rule 224 (basic_statement -> unique_case_statement .)
    IF              reduce using rule 224 (basic_statement -> unique_case_statement .)
    FOR             reduce using rule 224 (basic_statement -> unique_case_statement .)
    ELSE            reduce using rule 224 (basic_statement -> unique_case_statement .)
    END             reduce using rule 224 (basic_statement -> unique_case_statement .)
    CASE            reduce using rule 224 (basic_statement -> unique_case_statement .)
    CASEX           reduce using rule 224 (basic_statement -> unique_case_statement .)
    UNIQUE          reduce using rule 224 (basic_statement -> unique_case_statement .)
    WHILE           reduce using rule 224 (basic_statement -> unique_case_statement .)
    WAIT            reduce using rule 224 (basic_statement -> unique_case_statement .)
    FOREVER         reduce using rule 224 (basic_statement -> unique_case_statement .)
    BEGIN           reduce using rule 224 (basic_statement -> unique_case_statement .)
    FORK            reduce using rule 224 (basic_statement -> unique_case_statement .)
    DELAY           reduce using rule 224 (basic_statement -> unique_case_statement .)
    AT              reduce using rule 224 (basic_statement -> unique_case_statement .)
    DOLLER          reduce using rule 224 (basic_statement -> unique_case_statement .)
    DISABLE         reduce using rule 224 (basic_statement -> unique_case_statement .)
    LBRACE          reduce using rule 224 (basic_statement -> unique_case_statement .)
    SEMICOLON       reduce using rule 224 (basic_statement -> unique_case_statement .)
    JOIN            reduce using rule 224 (basic_statement -> unique_case_statement .)
    ENDFUNCTION     reduce using rule 224 (basic_statement -> unique_case_statement .)
    ENDTASK         reduce using rule 224 (basic_statement -> unique_case_statement .)
    ENDCASE         reduce using rule 224 (basic_statement -> unique_case_statement .)
    DEFAULT         reduce using rule 224 (basic_statement -> unique_case_statement .)
    MINUS           reduce using rule 224 (basic_statement -> unique_case_statement .)
    PLUS            reduce using rule 224 (basic_statement -> unique_case_statement .)
    LNOT            reduce using rule 224 (basic_statement -> unique_case_statement .)
    NOT             reduce using rule 224 (basic_statement -> unique_case_statement .)
    AND             reduce using rule 224 (basic_statement -> unique_case_statement .)
    NAND            reduce using rule 224 (basic_statement -> unique_case_statement .)
    NOR             reduce using rule 224 (basic_statement -> unique_case_statement .)
    OR              reduce using rule 224 (basic_statement -> unique_case_statement .)
    XOR             reduce using rule 224 (basic_statement -> unique_case_statement .)
    XNOR            reduce using rule 224 (basic_statement -> unique_case_statement .)
    INTNUMBER_DEC   reduce using rule 224 (basic_statement -> unique_case_statement .)
    SIGNED_INTNUMBER_DEC reduce using rule 224 (basic_statement -> unique_case_statement .)
    INTNUMBER_BIN   reduce using rule 224 (basic_statement -> unique_case_statement .)
    SIGNED_INTNUMBER_BIN reduce using rule 224 (basic_statement -> unique_case_statement .)
    INTNUMBER_OCT   reduce using rule 224 (basic_statement -> unique_case_statement .)
    SIGNED_INTNUMBER_OCT reduce using rule 224 (basic_statement -> unique_case_statement .)
    INTNUMBER_HEX   reduce using rule 224 (basic_statement -> unique_case_statement .)
    SIGNED_INTNUMBER_HEX reduce using rule 224 (basic_statement -> unique_case_statement .)
    FLOATNUMBER     reduce using rule 224 (basic_statement -> unique_case_statement .)
    STRING_LITERAL  reduce using rule 224 (basic_statement -> unique_case_statement .)


state 181

    (225) basic_statement -> for_statement .

    ENDMODULE       reduce using rule 225 (basic_statement -> for_statement .)
    GENERATE        reduce using rule 225 (basic_statement -> for_statement .)
    INTEGER         reduce using rule 225 (basic_statement -> for_statement .)
    REAL            reduce using rule 225 (basic_statement -> for_statement .)
    PARAMETER       reduce using rule 225 (basic_statement -> for_statement .)
    LOCALPARAM      reduce using rule 225 (basic_statement -> for_statement .)
    GENVAR          reduce using rule 225 (basic_statement -> for_statement .)
    ASSIGN          reduce using rule 225 (basic_statement -> for_statement .)
    ALWAYS          reduce using rule 225 (basic_statement -> for_statement .)
    ALWAYS_FF       reduce using rule 225 (basic_statement -> for_statement .)
    ALWAYS_COMB     reduce using rule 225 (basic_statement -> for_statement .)
    INITIAL         reduce using rule 225 (basic_statement -> for_statement .)
    ID              reduce using rule 225 (basic_statement -> for_statement .)
    SENS_OR         reduce using rule 225 (basic_statement -> for_statement .)
    FUNCTION        reduce using rule 225 (basic_statement -> for_statement .)
    TASK            reduce using rule 225 (basic_statement -> for_statement .)
    LPAREN          reduce using rule 225 (basic_statement -> for_statement .)
    INPUT           reduce using rule 225 (basic_statement -> for_statement .)
    OUTPUT          reduce using rule 225 (basic_statement -> for_statement .)
    INOUT           reduce using rule 225 (basic_statement -> for_statement .)
    TRI             reduce using rule 225 (basic_statement -> for_statement .)
    REG             reduce using rule 225 (basic_statement -> for_statement .)
    LOGIC           reduce using rule 225 (basic_statement -> for_statement .)
    WIRE            reduce using rule 225 (basic_statement -> for_statement .)
    SIGNED          reduce using rule 225 (basic_statement -> for_statement .)
    SUPPLY0         reduce using rule 225 (basic_statement -> for_statement .)
    SUPPLY1         reduce using rule 225 (basic_statement -> for_statement .)
    ENDGENERATE     reduce using rule 225 (basic_statement -> for_statement .)
    IF              reduce using rule 225 (basic_statement -> for_statement .)
    FOR             reduce using rule 225 (basic_statement -> for_statement .)
    ELSE            reduce using rule 225 (basic_statement -> for_statement .)
    END             reduce using rule 225 (basic_statement -> for_statement .)
    CASE            reduce using rule 225 (basic_statement -> for_statement .)
    CASEX           reduce using rule 225 (basic_statement -> for_statement .)
    UNIQUE          reduce using rule 225 (basic_statement -> for_statement .)
    WHILE           reduce using rule 225 (basic_statement -> for_statement .)
    WAIT            reduce using rule 225 (basic_statement -> for_statement .)
    FOREVER         reduce using rule 225 (basic_statement -> for_statement .)
    BEGIN           reduce using rule 225 (basic_statement -> for_statement .)
    FORK            reduce using rule 225 (basic_statement -> for_statement .)
    DELAY           reduce using rule 225 (basic_statement -> for_statement .)
    AT              reduce using rule 225 (basic_statement -> for_statement .)
    DOLLER          reduce using rule 225 (basic_statement -> for_statement .)
    DISABLE         reduce using rule 225 (basic_statement -> for_statement .)
    LBRACE          reduce using rule 225 (basic_statement -> for_statement .)
    SEMICOLON       reduce using rule 225 (basic_statement -> for_statement .)
    JOIN            reduce using rule 225 (basic_statement -> for_statement .)
    ENDFUNCTION     reduce using rule 225 (basic_statement -> for_statement .)
    ENDTASK         reduce using rule 225 (basic_statement -> for_statement .)
    ENDCASE         reduce using rule 225 (basic_statement -> for_statement .)
    DEFAULT         reduce using rule 225 (basic_statement -> for_statement .)
    MINUS           reduce using rule 225 (basic_statement -> for_statement .)
    PLUS            reduce using rule 225 (basic_statement -> for_statement .)
    LNOT            reduce using rule 225 (basic_statement -> for_statement .)
    NOT             reduce using rule 225 (basic_statement -> for_statement .)
    AND             reduce using rule 225 (basic_statement -> for_statement .)
    NAND            reduce using rule 225 (basic_statement -> for_statement .)
    NOR             reduce using rule 225 (basic_statement -> for_statement .)
    OR              reduce using rule 225 (basic_statement -> for_statement .)
    XOR             reduce using rule 225 (basic_statement -> for_statement .)
    XNOR            reduce using rule 225 (basic_statement -> for_statement .)
    INTNUMBER_DEC   reduce using rule 225 (basic_statement -> for_statement .)
    SIGNED_INTNUMBER_DEC reduce using rule 225 (basic_statement -> for_statement .)
    INTNUMBER_BIN   reduce using rule 225 (basic_statement -> for_statement .)
    SIGNED_INTNUMBER_BIN reduce using rule 225 (basic_statement -> for_statement .)
    INTNUMBER_OCT   reduce using rule 225 (basic_statement -> for_statement .)
    SIGNED_INTNUMBER_OCT reduce using rule 225 (basic_statement -> for_statement .)
    INTNUMBER_HEX   reduce using rule 225 (basic_statement -> for_statement .)
    SIGNED_INTNUMBER_HEX reduce using rule 225 (basic_statement -> for_statement .)
    FLOATNUMBER     reduce using rule 225 (basic_statement -> for_statement .)
    STRING_LITERAL  reduce using rule 225 (basic_statement -> for_statement .)


state 182

    (226) basic_statement -> while_statement .

    ENDMODULE       reduce using rule 226 (basic_statement -> while_statement .)
    GENERATE        reduce using rule 226 (basic_statement -> while_statement .)
    INTEGER         reduce using rule 226 (basic_statement -> while_statement .)
    REAL            reduce using rule 226 (basic_statement -> while_statement .)
    PARAMETER       reduce using rule 226 (basic_statement -> while_statement .)
    LOCALPARAM      reduce using rule 226 (basic_statement -> while_statement .)
    GENVAR          reduce using rule 226 (basic_statement -> while_statement .)
    ASSIGN          reduce using rule 226 (basic_statement -> while_statement .)
    ALWAYS          reduce using rule 226 (basic_statement -> while_statement .)
    ALWAYS_FF       reduce using rule 226 (basic_statement -> while_statement .)
    ALWAYS_COMB     reduce using rule 226 (basic_statement -> while_statement .)
    INITIAL         reduce using rule 226 (basic_statement -> while_statement .)
    ID              reduce using rule 226 (basic_statement -> while_statement .)
    SENS_OR         reduce using rule 226 (basic_statement -> while_statement .)
    FUNCTION        reduce using rule 226 (basic_statement -> while_statement .)
    TASK            reduce using rule 226 (basic_statement -> while_statement .)
    LPAREN          reduce using rule 226 (basic_statement -> while_statement .)
    INPUT           reduce using rule 226 (basic_statement -> while_statement .)
    OUTPUT          reduce using rule 226 (basic_statement -> while_statement .)
    INOUT           reduce using rule 226 (basic_statement -> while_statement .)
    TRI             reduce using rule 226 (basic_statement -> while_statement .)
    REG             reduce using rule 226 (basic_statement -> while_statement .)
    LOGIC           reduce using rule 226 (basic_statement -> while_statement .)
    WIRE            reduce using rule 226 (basic_statement -> while_statement .)
    SIGNED          reduce using rule 226 (basic_statement -> while_statement .)
    SUPPLY0         reduce using rule 226 (basic_statement -> while_statement .)
    SUPPLY1         reduce using rule 226 (basic_statement -> while_statement .)
    ENDGENERATE     reduce using rule 226 (basic_statement -> while_statement .)
    IF              reduce using rule 226 (basic_statement -> while_statement .)
    FOR             reduce using rule 226 (basic_statement -> while_statement .)
    ELSE            reduce using rule 226 (basic_statement -> while_statement .)
    END             reduce using rule 226 (basic_statement -> while_statement .)
    CASE            reduce using rule 226 (basic_statement -> while_statement .)
    CASEX           reduce using rule 226 (basic_statement -> while_statement .)
    UNIQUE          reduce using rule 226 (basic_statement -> while_statement .)
    WHILE           reduce using rule 226 (basic_statement -> while_statement .)
    WAIT            reduce using rule 226 (basic_statement -> while_statement .)
    FOREVER         reduce using rule 226 (basic_statement -> while_statement .)
    BEGIN           reduce using rule 226 (basic_statement -> while_statement .)
    FORK            reduce using rule 226 (basic_statement -> while_statement .)
    DELAY           reduce using rule 226 (basic_statement -> while_statement .)
    AT              reduce using rule 226 (basic_statement -> while_statement .)
    DOLLER          reduce using rule 226 (basic_statement -> while_statement .)
    DISABLE         reduce using rule 226 (basic_statement -> while_statement .)
    LBRACE          reduce using rule 226 (basic_statement -> while_statement .)
    SEMICOLON       reduce using rule 226 (basic_statement -> while_statement .)
    JOIN            reduce using rule 226 (basic_statement -> while_statement .)
    ENDFUNCTION     reduce using rule 226 (basic_statement -> while_statement .)
    ENDTASK         reduce using rule 226 (basic_statement -> while_statement .)
    ENDCASE         reduce using rule 226 (basic_statement -> while_statement .)
    DEFAULT         reduce using rule 226 (basic_statement -> while_statement .)
    MINUS           reduce using rule 226 (basic_statement -> while_statement .)
    PLUS            reduce using rule 226 (basic_statement -> while_statement .)
    LNOT            reduce using rule 226 (basic_statement -> while_statement .)
    NOT             reduce using rule 226 (basic_statement -> while_statement .)
    AND             reduce using rule 226 (basic_statement -> while_statement .)
    NAND            reduce using rule 226 (basic_statement -> while_statement .)
    NOR             reduce using rule 226 (basic_statement -> while_statement .)
    OR              reduce using rule 226 (basic_statement -> while_statement .)
    XOR             reduce using rule 226 (basic_statement -> while_statement .)
    XNOR            reduce using rule 226 (basic_statement -> while_statement .)
    INTNUMBER_DEC   reduce using rule 226 (basic_statement -> while_statement .)
    SIGNED_INTNUMBER_DEC reduce using rule 226 (basic_statement -> while_statement .)
    INTNUMBER_BIN   reduce using rule 226 (basic_statement -> while_statement .)
    SIGNED_INTNUMBER_BIN reduce using rule 226 (basic_statement -> while_statement .)
    INTNUMBER_OCT   reduce using rule 226 (basic_statement -> while_statement .)
    SIGNED_INTNUMBER_OCT reduce using rule 226 (basic_statement -> while_statement .)
    INTNUMBER_HEX   reduce using rule 226 (basic_statement -> while_statement .)
    SIGNED_INTNUMBER_HEX reduce using rule 226 (basic_statement -> while_statement .)
    FLOATNUMBER     reduce using rule 226 (basic_statement -> while_statement .)
    STRING_LITERAL  reduce using rule 226 (basic_statement -> while_statement .)


state 183

    (227) basic_statement -> event_statement .

    ENDMODULE       reduce using rule 227 (basic_statement -> event_statement .)
    GENERATE        reduce using rule 227 (basic_statement -> event_statement .)
    INTEGER         reduce using rule 227 (basic_statement -> event_statement .)
    REAL            reduce using rule 227 (basic_statement -> event_statement .)
    PARAMETER       reduce using rule 227 (basic_statement -> event_statement .)
    LOCALPARAM      reduce using rule 227 (basic_statement -> event_statement .)
    GENVAR          reduce using rule 227 (basic_statement -> event_statement .)
    ASSIGN          reduce using rule 227 (basic_statement -> event_statement .)
    ALWAYS          reduce using rule 227 (basic_statement -> event_statement .)
    ALWAYS_FF       reduce using rule 227 (basic_statement -> event_statement .)
    ALWAYS_COMB     reduce using rule 227 (basic_statement -> event_statement .)
    INITIAL         reduce using rule 227 (basic_statement -> event_statement .)
    ID              reduce using rule 227 (basic_statement -> event_statement .)
    SENS_OR         reduce using rule 227 (basic_statement -> event_statement .)
    FUNCTION        reduce using rule 227 (basic_statement -> event_statement .)
    TASK            reduce using rule 227 (basic_statement -> event_statement .)
    LPAREN          reduce using rule 227 (basic_statement -> event_statement .)
    INPUT           reduce using rule 227 (basic_statement -> event_statement .)
    OUTPUT          reduce using rule 227 (basic_statement -> event_statement .)
    INOUT           reduce using rule 227 (basic_statement -> event_statement .)
    TRI             reduce using rule 227 (basic_statement -> event_statement .)
    REG             reduce using rule 227 (basic_statement -> event_statement .)
    LOGIC           reduce using rule 227 (basic_statement -> event_statement .)
    WIRE            reduce using rule 227 (basic_statement -> event_statement .)
    SIGNED          reduce using rule 227 (basic_statement -> event_statement .)
    SUPPLY0         reduce using rule 227 (basic_statement -> event_statement .)
    SUPPLY1         reduce using rule 227 (basic_statement -> event_statement .)
    ENDGENERATE     reduce using rule 227 (basic_statement -> event_statement .)
    IF              reduce using rule 227 (basic_statement -> event_statement .)
    FOR             reduce using rule 227 (basic_statement -> event_statement .)
    ELSE            reduce using rule 227 (basic_statement -> event_statement .)
    END             reduce using rule 227 (basic_statement -> event_statement .)
    CASE            reduce using rule 227 (basic_statement -> event_statement .)
    CASEX           reduce using rule 227 (basic_statement -> event_statement .)
    UNIQUE          reduce using rule 227 (basic_statement -> event_statement .)
    WHILE           reduce using rule 227 (basic_statement -> event_statement .)
    WAIT            reduce using rule 227 (basic_statement -> event_statement .)
    FOREVER         reduce using rule 227 (basic_statement -> event_statement .)
    BEGIN           reduce using rule 227 (basic_statement -> event_statement .)
    FORK            reduce using rule 227 (basic_statement -> event_statement .)
    DELAY           reduce using rule 227 (basic_statement -> event_statement .)
    AT              reduce using rule 227 (basic_statement -> event_statement .)
    DOLLER          reduce using rule 227 (basic_statement -> event_statement .)
    DISABLE         reduce using rule 227 (basic_statement -> event_statement .)
    LBRACE          reduce using rule 227 (basic_statement -> event_statement .)
    SEMICOLON       reduce using rule 227 (basic_statement -> event_statement .)
    JOIN            reduce using rule 227 (basic_statement -> event_statement .)
    ENDFUNCTION     reduce using rule 227 (basic_statement -> event_statement .)
    ENDTASK         reduce using rule 227 (basic_statement -> event_statement .)
    ENDCASE         reduce using rule 227 (basic_statement -> event_statement .)
    DEFAULT         reduce using rule 227 (basic_statement -> event_statement .)
    MINUS           reduce using rule 227 (basic_statement -> event_statement .)
    PLUS            reduce using rule 227 (basic_statement -> event_statement .)
    LNOT            reduce using rule 227 (basic_statement -> event_statement .)
    NOT             reduce using rule 227 (basic_statement -> event_statement .)
    AND             reduce using rule 227 (basic_statement -> event_statement .)
    NAND            reduce using rule 227 (basic_statement -> event_statement .)
    NOR             reduce using rule 227 (basic_statement -> event_statement .)
    OR              reduce using rule 227 (basic_statement -> event_statement .)
    XOR             reduce using rule 227 (basic_statement -> event_statement .)
    XNOR            reduce using rule 227 (basic_statement -> event_statement .)
    INTNUMBER_DEC   reduce using rule 227 (basic_statement -> event_statement .)
    SIGNED_INTNUMBER_DEC reduce using rule 227 (basic_statement -> event_statement .)
    INTNUMBER_BIN   reduce using rule 227 (basic_statement -> event_statement .)
    SIGNED_INTNUMBER_BIN reduce using rule 227 (basic_statement -> event_statement .)
    INTNUMBER_OCT   reduce using rule 227 (basic_statement -> event_statement .)
    SIGNED_INTNUMBER_OCT reduce using rule 227 (basic_statement -> event_statement .)
    INTNUMBER_HEX   reduce using rule 227 (basic_statement -> event_statement .)
    SIGNED_INTNUMBER_HEX reduce using rule 227 (basic_statement -> event_statement .)
    FLOATNUMBER     reduce using rule 227 (basic_statement -> event_statement .)
    STRING_LITERAL  reduce using rule 227 (basic_statement -> event_statement .)


state 184

    (228) basic_statement -> wait_statement .

    ENDMODULE       reduce using rule 228 (basic_statement -> wait_statement .)
    GENERATE        reduce using rule 228 (basic_statement -> wait_statement .)
    INTEGER         reduce using rule 228 (basic_statement -> wait_statement .)
    REAL            reduce using rule 228 (basic_statement -> wait_statement .)
    PARAMETER       reduce using rule 228 (basic_statement -> wait_statement .)
    LOCALPARAM      reduce using rule 228 (basic_statement -> wait_statement .)
    GENVAR          reduce using rule 228 (basic_statement -> wait_statement .)
    ASSIGN          reduce using rule 228 (basic_statement -> wait_statement .)
    ALWAYS          reduce using rule 228 (basic_statement -> wait_statement .)
    ALWAYS_FF       reduce using rule 228 (basic_statement -> wait_statement .)
    ALWAYS_COMB     reduce using rule 228 (basic_statement -> wait_statement .)
    INITIAL         reduce using rule 228 (basic_statement -> wait_statement .)
    ID              reduce using rule 228 (basic_statement -> wait_statement .)
    SENS_OR         reduce using rule 228 (basic_statement -> wait_statement .)
    FUNCTION        reduce using rule 228 (basic_statement -> wait_statement .)
    TASK            reduce using rule 228 (basic_statement -> wait_statement .)
    LPAREN          reduce using rule 228 (basic_statement -> wait_statement .)
    INPUT           reduce using rule 228 (basic_statement -> wait_statement .)
    OUTPUT          reduce using rule 228 (basic_statement -> wait_statement .)
    INOUT           reduce using rule 228 (basic_statement -> wait_statement .)
    TRI             reduce using rule 228 (basic_statement -> wait_statement .)
    REG             reduce using rule 228 (basic_statement -> wait_statement .)
    LOGIC           reduce using rule 228 (basic_statement -> wait_statement .)
    WIRE            reduce using rule 228 (basic_statement -> wait_statement .)
    SIGNED          reduce using rule 228 (basic_statement -> wait_statement .)
    SUPPLY0         reduce using rule 228 (basic_statement -> wait_statement .)
    SUPPLY1         reduce using rule 228 (basic_statement -> wait_statement .)
    ENDGENERATE     reduce using rule 228 (basic_statement -> wait_statement .)
    IF              reduce using rule 228 (basic_statement -> wait_statement .)
    FOR             reduce using rule 228 (basic_statement -> wait_statement .)
    ELSE            reduce using rule 228 (basic_statement -> wait_statement .)
    END             reduce using rule 228 (basic_statement -> wait_statement .)
    CASE            reduce using rule 228 (basic_statement -> wait_statement .)
    CASEX           reduce using rule 228 (basic_statement -> wait_statement .)
    UNIQUE          reduce using rule 228 (basic_statement -> wait_statement .)
    WHILE           reduce using rule 228 (basic_statement -> wait_statement .)
    WAIT            reduce using rule 228 (basic_statement -> wait_statement .)
    FOREVER         reduce using rule 228 (basic_statement -> wait_statement .)
    BEGIN           reduce using rule 228 (basic_statement -> wait_statement .)
    FORK            reduce using rule 228 (basic_statement -> wait_statement .)
    DELAY           reduce using rule 228 (basic_statement -> wait_statement .)
    AT              reduce using rule 228 (basic_statement -> wait_statement .)
    DOLLER          reduce using rule 228 (basic_statement -> wait_statement .)
    DISABLE         reduce using rule 228 (basic_statement -> wait_statement .)
    LBRACE          reduce using rule 228 (basic_statement -> wait_statement .)
    SEMICOLON       reduce using rule 228 (basic_statement -> wait_statement .)
    JOIN            reduce using rule 228 (basic_statement -> wait_statement .)
    ENDFUNCTION     reduce using rule 228 (basic_statement -> wait_statement .)
    ENDTASK         reduce using rule 228 (basic_statement -> wait_statement .)
    ENDCASE         reduce using rule 228 (basic_statement -> wait_statement .)
    DEFAULT         reduce using rule 228 (basic_statement -> wait_statement .)
    MINUS           reduce using rule 228 (basic_statement -> wait_statement .)
    PLUS            reduce using rule 228 (basic_statement -> wait_statement .)
    LNOT            reduce using rule 228 (basic_statement -> wait_statement .)
    NOT             reduce using rule 228 (basic_statement -> wait_statement .)
    AND             reduce using rule 228 (basic_statement -> wait_statement .)
    NAND            reduce using rule 228 (basic_statement -> wait_statement .)
    NOR             reduce using rule 228 (basic_statement -> wait_statement .)
    OR              reduce using rule 228 (basic_statement -> wait_statement .)
    XOR             reduce using rule 228 (basic_statement -> wait_statement .)
    XNOR            reduce using rule 228 (basic_statement -> wait_statement .)
    INTNUMBER_DEC   reduce using rule 228 (basic_statement -> wait_statement .)
    SIGNED_INTNUMBER_DEC reduce using rule 228 (basic_statement -> wait_statement .)
    INTNUMBER_BIN   reduce using rule 228 (basic_statement -> wait_statement .)
    SIGNED_INTNUMBER_BIN reduce using rule 228 (basic_statement -> wait_statement .)
    INTNUMBER_OCT   reduce using rule 228 (basic_statement -> wait_statement .)
    SIGNED_INTNUMBER_OCT reduce using rule 228 (basic_statement -> wait_statement .)
    INTNUMBER_HEX   reduce using rule 228 (basic_statement -> wait_statement .)
    SIGNED_INTNUMBER_HEX reduce using rule 228 (basic_statement -> wait_statement .)
    FLOATNUMBER     reduce using rule 228 (basic_statement -> wait_statement .)
    STRING_LITERAL  reduce using rule 228 (basic_statement -> wait_statement .)


state 185

    (229) basic_statement -> forever_statement .

    ENDMODULE       reduce using rule 229 (basic_statement -> forever_statement .)
    GENERATE        reduce using rule 229 (basic_statement -> forever_statement .)
    INTEGER         reduce using rule 229 (basic_statement -> forever_statement .)
    REAL            reduce using rule 229 (basic_statement -> forever_statement .)
    PARAMETER       reduce using rule 229 (basic_statement -> forever_statement .)
    LOCALPARAM      reduce using rule 229 (basic_statement -> forever_statement .)
    GENVAR          reduce using rule 229 (basic_statement -> forever_statement .)
    ASSIGN          reduce using rule 229 (basic_statement -> forever_statement .)
    ALWAYS          reduce using rule 229 (basic_statement -> forever_statement .)
    ALWAYS_FF       reduce using rule 229 (basic_statement -> forever_statement .)
    ALWAYS_COMB     reduce using rule 229 (basic_statement -> forever_statement .)
    INITIAL         reduce using rule 229 (basic_statement -> forever_statement .)
    ID              reduce using rule 229 (basic_statement -> forever_statement .)
    SENS_OR         reduce using rule 229 (basic_statement -> forever_statement .)
    FUNCTION        reduce using rule 229 (basic_statement -> forever_statement .)
    TASK            reduce using rule 229 (basic_statement -> forever_statement .)
    LPAREN          reduce using rule 229 (basic_statement -> forever_statement .)
    INPUT           reduce using rule 229 (basic_statement -> forever_statement .)
    OUTPUT          reduce using rule 229 (basic_statement -> forever_statement .)
    INOUT           reduce using rule 229 (basic_statement -> forever_statement .)
    TRI             reduce using rule 229 (basic_statement -> forever_statement .)
    REG             reduce using rule 229 (basic_statement -> forever_statement .)
    LOGIC           reduce using rule 229 (basic_statement -> forever_statement .)
    WIRE            reduce using rule 229 (basic_statement -> forever_statement .)
    SIGNED          reduce using rule 229 (basic_statement -> forever_statement .)
    SUPPLY0         reduce using rule 229 (basic_statement -> forever_statement .)
    SUPPLY1         reduce using rule 229 (basic_statement -> forever_statement .)
    ENDGENERATE     reduce using rule 229 (basic_statement -> forever_statement .)
    IF              reduce using rule 229 (basic_statement -> forever_statement .)
    FOR             reduce using rule 229 (basic_statement -> forever_statement .)
    ELSE            reduce using rule 229 (basic_statement -> forever_statement .)
    END             reduce using rule 229 (basic_statement -> forever_statement .)
    CASE            reduce using rule 229 (basic_statement -> forever_statement .)
    CASEX           reduce using rule 229 (basic_statement -> forever_statement .)
    UNIQUE          reduce using rule 229 (basic_statement -> forever_statement .)
    WHILE           reduce using rule 229 (basic_statement -> forever_statement .)
    WAIT            reduce using rule 229 (basic_statement -> forever_statement .)
    FOREVER         reduce using rule 229 (basic_statement -> forever_statement .)
    BEGIN           reduce using rule 229 (basic_statement -> forever_statement .)
    FORK            reduce using rule 229 (basic_statement -> forever_statement .)
    DELAY           reduce using rule 229 (basic_statement -> forever_statement .)
    AT              reduce using rule 229 (basic_statement -> forever_statement .)
    DOLLER          reduce using rule 229 (basic_statement -> forever_statement .)
    DISABLE         reduce using rule 229 (basic_statement -> forever_statement .)
    LBRACE          reduce using rule 229 (basic_statement -> forever_statement .)
    SEMICOLON       reduce using rule 229 (basic_statement -> forever_statement .)
    JOIN            reduce using rule 229 (basic_statement -> forever_statement .)
    ENDFUNCTION     reduce using rule 229 (basic_statement -> forever_statement .)
    ENDTASK         reduce using rule 229 (basic_statement -> forever_statement .)
    ENDCASE         reduce using rule 229 (basic_statement -> forever_statement .)
    DEFAULT         reduce using rule 229 (basic_statement -> forever_statement .)
    MINUS           reduce using rule 229 (basic_statement -> forever_statement .)
    PLUS            reduce using rule 229 (basic_statement -> forever_statement .)
    LNOT            reduce using rule 229 (basic_statement -> forever_statement .)
    NOT             reduce using rule 229 (basic_statement -> forever_statement .)
    AND             reduce using rule 229 (basic_statement -> forever_statement .)
    NAND            reduce using rule 229 (basic_statement -> forever_statement .)
    NOR             reduce using rule 229 (basic_statement -> forever_statement .)
    OR              reduce using rule 229 (basic_statement -> forever_statement .)
    XOR             reduce using rule 229 (basic_statement -> forever_statement .)
    XNOR            reduce using rule 229 (basic_statement -> forever_statement .)
    INTNUMBER_DEC   reduce using rule 229 (basic_statement -> forever_statement .)
    SIGNED_INTNUMBER_DEC reduce using rule 229 (basic_statement -> forever_statement .)
    INTNUMBER_BIN   reduce using rule 229 (basic_statement -> forever_statement .)
    SIGNED_INTNUMBER_BIN reduce using rule 229 (basic_statement -> forever_statement .)
    INTNUMBER_OCT   reduce using rule 229 (basic_statement -> forever_statement .)
    SIGNED_INTNUMBER_OCT reduce using rule 229 (basic_statement -> forever_statement .)
    INTNUMBER_HEX   reduce using rule 229 (basic_statement -> forever_statement .)
    SIGNED_INTNUMBER_HEX reduce using rule 229 (basic_statement -> forever_statement .)
    FLOATNUMBER     reduce using rule 229 (basic_statement -> forever_statement .)
    STRING_LITERAL  reduce using rule 229 (basic_statement -> forever_statement .)


state 186

    (230) basic_statement -> block .

    ENDMODULE       reduce using rule 230 (basic_statement -> block .)
    GENERATE        reduce using rule 230 (basic_statement -> block .)
    INTEGER         reduce using rule 230 (basic_statement -> block .)
    REAL            reduce using rule 230 (basic_statement -> block .)
    PARAMETER       reduce using rule 230 (basic_statement -> block .)
    LOCALPARAM      reduce using rule 230 (basic_statement -> block .)
    GENVAR          reduce using rule 230 (basic_statement -> block .)
    ASSIGN          reduce using rule 230 (basic_statement -> block .)
    ALWAYS          reduce using rule 230 (basic_statement -> block .)
    ALWAYS_FF       reduce using rule 230 (basic_statement -> block .)
    ALWAYS_COMB     reduce using rule 230 (basic_statement -> block .)
    INITIAL         reduce using rule 230 (basic_statement -> block .)
    ID              reduce using rule 230 (basic_statement -> block .)
    SENS_OR         reduce using rule 230 (basic_statement -> block .)
    FUNCTION        reduce using rule 230 (basic_statement -> block .)
    TASK            reduce using rule 230 (basic_statement -> block .)
    LPAREN          reduce using rule 230 (basic_statement -> block .)
    INPUT           reduce using rule 230 (basic_statement -> block .)
    OUTPUT          reduce using rule 230 (basic_statement -> block .)
    INOUT           reduce using rule 230 (basic_statement -> block .)
    TRI             reduce using rule 230 (basic_statement -> block .)
    REG             reduce using rule 230 (basic_statement -> block .)
    LOGIC           reduce using rule 230 (basic_statement -> block .)
    WIRE            reduce using rule 230 (basic_statement -> block .)
    SIGNED          reduce using rule 230 (basic_statement -> block .)
    SUPPLY0         reduce using rule 230 (basic_statement -> block .)
    SUPPLY1         reduce using rule 230 (basic_statement -> block .)
    ENDGENERATE     reduce using rule 230 (basic_statement -> block .)
    IF              reduce using rule 230 (basic_statement -> block .)
    FOR             reduce using rule 230 (basic_statement -> block .)
    ELSE            reduce using rule 230 (basic_statement -> block .)
    END             reduce using rule 230 (basic_statement -> block .)
    CASE            reduce using rule 230 (basic_statement -> block .)
    CASEX           reduce using rule 230 (basic_statement -> block .)
    UNIQUE          reduce using rule 230 (basic_statement -> block .)
    WHILE           reduce using rule 230 (basic_statement -> block .)
    WAIT            reduce using rule 230 (basic_statement -> block .)
    FOREVER         reduce using rule 230 (basic_statement -> block .)
    BEGIN           reduce using rule 230 (basic_statement -> block .)
    FORK            reduce using rule 230 (basic_statement -> block .)
    DELAY           reduce using rule 230 (basic_statement -> block .)
    AT              reduce using rule 230 (basic_statement -> block .)
    DOLLER          reduce using rule 230 (basic_statement -> block .)
    DISABLE         reduce using rule 230 (basic_statement -> block .)
    LBRACE          reduce using rule 230 (basic_statement -> block .)
    SEMICOLON       reduce using rule 230 (basic_statement -> block .)
    JOIN            reduce using rule 230 (basic_statement -> block .)
    ENDFUNCTION     reduce using rule 230 (basic_statement -> block .)
    ENDTASK         reduce using rule 230 (basic_statement -> block .)
    ENDCASE         reduce using rule 230 (basic_statement -> block .)
    DEFAULT         reduce using rule 230 (basic_statement -> block .)
    MINUS           reduce using rule 230 (basic_statement -> block .)
    PLUS            reduce using rule 230 (basic_statement -> block .)
    LNOT            reduce using rule 230 (basic_statement -> block .)
    NOT             reduce using rule 230 (basic_statement -> block .)
    AND             reduce using rule 230 (basic_statement -> block .)
    NAND            reduce using rule 230 (basic_statement -> block .)
    NOR             reduce using rule 230 (basic_statement -> block .)
    OR              reduce using rule 230 (basic_statement -> block .)
    XOR             reduce using rule 230 (basic_statement -> block .)
    XNOR            reduce using rule 230 (basic_statement -> block .)
    INTNUMBER_DEC   reduce using rule 230 (basic_statement -> block .)
    SIGNED_INTNUMBER_DEC reduce using rule 230 (basic_statement -> block .)
    INTNUMBER_BIN   reduce using rule 230 (basic_statement -> block .)
    SIGNED_INTNUMBER_BIN reduce using rule 230 (basic_statement -> block .)
    INTNUMBER_OCT   reduce using rule 230 (basic_statement -> block .)
    SIGNED_INTNUMBER_OCT reduce using rule 230 (basic_statement -> block .)
    INTNUMBER_HEX   reduce using rule 230 (basic_statement -> block .)
    SIGNED_INTNUMBER_HEX reduce using rule 230 (basic_statement -> block .)
    FLOATNUMBER     reduce using rule 230 (basic_statement -> block .)
    STRING_LITERAL  reduce using rule 230 (basic_statement -> block .)


state 187

    (231) basic_statement -> namedblock .

    ENDMODULE       reduce using rule 231 (basic_statement -> namedblock .)
    GENERATE        reduce using rule 231 (basic_statement -> namedblock .)
    INTEGER         reduce using rule 231 (basic_statement -> namedblock .)
    REAL            reduce using rule 231 (basic_statement -> namedblock .)
    PARAMETER       reduce using rule 231 (basic_statement -> namedblock .)
    LOCALPARAM      reduce using rule 231 (basic_statement -> namedblock .)
    GENVAR          reduce using rule 231 (basic_statement -> namedblock .)
    ASSIGN          reduce using rule 231 (basic_statement -> namedblock .)
    ALWAYS          reduce using rule 231 (basic_statement -> namedblock .)
    ALWAYS_FF       reduce using rule 231 (basic_statement -> namedblock .)
    ALWAYS_COMB     reduce using rule 231 (basic_statement -> namedblock .)
    INITIAL         reduce using rule 231 (basic_statement -> namedblock .)
    ID              reduce using rule 231 (basic_statement -> namedblock .)
    SENS_OR         reduce using rule 231 (basic_statement -> namedblock .)
    FUNCTION        reduce using rule 231 (basic_statement -> namedblock .)
    TASK            reduce using rule 231 (basic_statement -> namedblock .)
    LPAREN          reduce using rule 231 (basic_statement -> namedblock .)
    INPUT           reduce using rule 231 (basic_statement -> namedblock .)
    OUTPUT          reduce using rule 231 (basic_statement -> namedblock .)
    INOUT           reduce using rule 231 (basic_statement -> namedblock .)
    TRI             reduce using rule 231 (basic_statement -> namedblock .)
    REG             reduce using rule 231 (basic_statement -> namedblock .)
    LOGIC           reduce using rule 231 (basic_statement -> namedblock .)
    WIRE            reduce using rule 231 (basic_statement -> namedblock .)
    SIGNED          reduce using rule 231 (basic_statement -> namedblock .)
    SUPPLY0         reduce using rule 231 (basic_statement -> namedblock .)
    SUPPLY1         reduce using rule 231 (basic_statement -> namedblock .)
    ENDGENERATE     reduce using rule 231 (basic_statement -> namedblock .)
    IF              reduce using rule 231 (basic_statement -> namedblock .)
    FOR             reduce using rule 231 (basic_statement -> namedblock .)
    ELSE            reduce using rule 231 (basic_statement -> namedblock .)
    END             reduce using rule 231 (basic_statement -> namedblock .)
    CASE            reduce using rule 231 (basic_statement -> namedblock .)
    CASEX           reduce using rule 231 (basic_statement -> namedblock .)
    UNIQUE          reduce using rule 231 (basic_statement -> namedblock .)
    WHILE           reduce using rule 231 (basic_statement -> namedblock .)
    WAIT            reduce using rule 231 (basic_statement -> namedblock .)
    FOREVER         reduce using rule 231 (basic_statement -> namedblock .)
    BEGIN           reduce using rule 231 (basic_statement -> namedblock .)
    FORK            reduce using rule 231 (basic_statement -> namedblock .)
    DELAY           reduce using rule 231 (basic_statement -> namedblock .)
    AT              reduce using rule 231 (basic_statement -> namedblock .)
    DOLLER          reduce using rule 231 (basic_statement -> namedblock .)
    DISABLE         reduce using rule 231 (basic_statement -> namedblock .)
    LBRACE          reduce using rule 231 (basic_statement -> namedblock .)
    SEMICOLON       reduce using rule 231 (basic_statement -> namedblock .)
    JOIN            reduce using rule 231 (basic_statement -> namedblock .)
    ENDFUNCTION     reduce using rule 231 (basic_statement -> namedblock .)
    ENDTASK         reduce using rule 231 (basic_statement -> namedblock .)
    ENDCASE         reduce using rule 231 (basic_statement -> namedblock .)
    DEFAULT         reduce using rule 231 (basic_statement -> namedblock .)
    MINUS           reduce using rule 231 (basic_statement -> namedblock .)
    PLUS            reduce using rule 231 (basic_statement -> namedblock .)
    LNOT            reduce using rule 231 (basic_statement -> namedblock .)
    NOT             reduce using rule 231 (basic_statement -> namedblock .)
    AND             reduce using rule 231 (basic_statement -> namedblock .)
    NAND            reduce using rule 231 (basic_statement -> namedblock .)
    NOR             reduce using rule 231 (basic_statement -> namedblock .)
    OR              reduce using rule 231 (basic_statement -> namedblock .)
    XOR             reduce using rule 231 (basic_statement -> namedblock .)
    XNOR            reduce using rule 231 (basic_statement -> namedblock .)
    INTNUMBER_DEC   reduce using rule 231 (basic_statement -> namedblock .)
    SIGNED_INTNUMBER_DEC reduce using rule 231 (basic_statement -> namedblock .)
    INTNUMBER_BIN   reduce using rule 231 (basic_statement -> namedblock .)
    SIGNED_INTNUMBER_BIN reduce using rule 231 (basic_statement -> namedblock .)
    INTNUMBER_OCT   reduce using rule 231 (basic_statement -> namedblock .)
    SIGNED_INTNUMBER_OCT reduce using rule 231 (basic_statement -> namedblock .)
    INTNUMBER_HEX   reduce using rule 231 (basic_statement -> namedblock .)
    SIGNED_INTNUMBER_HEX reduce using rule 231 (basic_statement -> namedblock .)
    FLOATNUMBER     reduce using rule 231 (basic_statement -> namedblock .)
    STRING_LITERAL  reduce using rule 231 (basic_statement -> namedblock .)


state 188

    (232) basic_statement -> parallelblock .

    ENDMODULE       reduce using rule 232 (basic_statement -> parallelblock .)
    GENERATE        reduce using rule 232 (basic_statement -> parallelblock .)
    INTEGER         reduce using rule 232 (basic_statement -> parallelblock .)
    REAL            reduce using rule 232 (basic_statement -> parallelblock .)
    PARAMETER       reduce using rule 232 (basic_statement -> parallelblock .)
    LOCALPARAM      reduce using rule 232 (basic_statement -> parallelblock .)
    GENVAR          reduce using rule 232 (basic_statement -> parallelblock .)
    ASSIGN          reduce using rule 232 (basic_statement -> parallelblock .)
    ALWAYS          reduce using rule 232 (basic_statement -> parallelblock .)
    ALWAYS_FF       reduce using rule 232 (basic_statement -> parallelblock .)
    ALWAYS_COMB     reduce using rule 232 (basic_statement -> parallelblock .)
    INITIAL         reduce using rule 232 (basic_statement -> parallelblock .)
    ID              reduce using rule 232 (basic_statement -> parallelblock .)
    SENS_OR         reduce using rule 232 (basic_statement -> parallelblock .)
    FUNCTION        reduce using rule 232 (basic_statement -> parallelblock .)
    TASK            reduce using rule 232 (basic_statement -> parallelblock .)
    LPAREN          reduce using rule 232 (basic_statement -> parallelblock .)
    INPUT           reduce using rule 232 (basic_statement -> parallelblock .)
    OUTPUT          reduce using rule 232 (basic_statement -> parallelblock .)
    INOUT           reduce using rule 232 (basic_statement -> parallelblock .)
    TRI             reduce using rule 232 (basic_statement -> parallelblock .)
    REG             reduce using rule 232 (basic_statement -> parallelblock .)
    LOGIC           reduce using rule 232 (basic_statement -> parallelblock .)
    WIRE            reduce using rule 232 (basic_statement -> parallelblock .)
    SIGNED          reduce using rule 232 (basic_statement -> parallelblock .)
    SUPPLY0         reduce using rule 232 (basic_statement -> parallelblock .)
    SUPPLY1         reduce using rule 232 (basic_statement -> parallelblock .)
    ENDGENERATE     reduce using rule 232 (basic_statement -> parallelblock .)
    IF              reduce using rule 232 (basic_statement -> parallelblock .)
    FOR             reduce using rule 232 (basic_statement -> parallelblock .)
    ELSE            reduce using rule 232 (basic_statement -> parallelblock .)
    END             reduce using rule 232 (basic_statement -> parallelblock .)
    CASE            reduce using rule 232 (basic_statement -> parallelblock .)
    CASEX           reduce using rule 232 (basic_statement -> parallelblock .)
    UNIQUE          reduce using rule 232 (basic_statement -> parallelblock .)
    WHILE           reduce using rule 232 (basic_statement -> parallelblock .)
    WAIT            reduce using rule 232 (basic_statement -> parallelblock .)
    FOREVER         reduce using rule 232 (basic_statement -> parallelblock .)
    BEGIN           reduce using rule 232 (basic_statement -> parallelblock .)
    FORK            reduce using rule 232 (basic_statement -> parallelblock .)
    DELAY           reduce using rule 232 (basic_statement -> parallelblock .)
    AT              reduce using rule 232 (basic_statement -> parallelblock .)
    DOLLER          reduce using rule 232 (basic_statement -> parallelblock .)
    DISABLE         reduce using rule 232 (basic_statement -> parallelblock .)
    LBRACE          reduce using rule 232 (basic_statement -> parallelblock .)
    SEMICOLON       reduce using rule 232 (basic_statement -> parallelblock .)
    JOIN            reduce using rule 232 (basic_statement -> parallelblock .)
    ENDFUNCTION     reduce using rule 232 (basic_statement -> parallelblock .)
    ENDTASK         reduce using rule 232 (basic_statement -> parallelblock .)
    ENDCASE         reduce using rule 232 (basic_statement -> parallelblock .)
    DEFAULT         reduce using rule 232 (basic_statement -> parallelblock .)
    MINUS           reduce using rule 232 (basic_statement -> parallelblock .)
    PLUS            reduce using rule 232 (basic_statement -> parallelblock .)
    LNOT            reduce using rule 232 (basic_statement -> parallelblock .)
    NOT             reduce using rule 232 (basic_statement -> parallelblock .)
    AND             reduce using rule 232 (basic_statement -> parallelblock .)
    NAND            reduce using rule 232 (basic_statement -> parallelblock .)
    NOR             reduce using rule 232 (basic_statement -> parallelblock .)
    OR              reduce using rule 232 (basic_statement -> parallelblock .)
    XOR             reduce using rule 232 (basic_statement -> parallelblock .)
    XNOR            reduce using rule 232 (basic_statement -> parallelblock .)
    INTNUMBER_DEC   reduce using rule 232 (basic_statement -> parallelblock .)
    SIGNED_INTNUMBER_DEC reduce using rule 232 (basic_statement -> parallelblock .)
    INTNUMBER_BIN   reduce using rule 232 (basic_statement -> parallelblock .)
    SIGNED_INTNUMBER_BIN reduce using rule 232 (basic_statement -> parallelblock .)
    INTNUMBER_OCT   reduce using rule 232 (basic_statement -> parallelblock .)
    SIGNED_INTNUMBER_OCT reduce using rule 232 (basic_statement -> parallelblock .)
    INTNUMBER_HEX   reduce using rule 232 (basic_statement -> parallelblock .)
    SIGNED_INTNUMBER_HEX reduce using rule 232 (basic_statement -> parallelblock .)
    FLOATNUMBER     reduce using rule 232 (basic_statement -> parallelblock .)
    STRING_LITERAL  reduce using rule 232 (basic_statement -> parallelblock .)


state 189

    (233) basic_statement -> blocking_substitution .

    ENDMODULE       reduce using rule 233 (basic_statement -> blocking_substitution .)
    GENERATE        reduce using rule 233 (basic_statement -> blocking_substitution .)
    INTEGER         reduce using rule 233 (basic_statement -> blocking_substitution .)
    REAL            reduce using rule 233 (basic_statement -> blocking_substitution .)
    PARAMETER       reduce using rule 233 (basic_statement -> blocking_substitution .)
    LOCALPARAM      reduce using rule 233 (basic_statement -> blocking_substitution .)
    GENVAR          reduce using rule 233 (basic_statement -> blocking_substitution .)
    ASSIGN          reduce using rule 233 (basic_statement -> blocking_substitution .)
    ALWAYS          reduce using rule 233 (basic_statement -> blocking_substitution .)
    ALWAYS_FF       reduce using rule 233 (basic_statement -> blocking_substitution .)
    ALWAYS_COMB     reduce using rule 233 (basic_statement -> blocking_substitution .)
    INITIAL         reduce using rule 233 (basic_statement -> blocking_substitution .)
    ID              reduce using rule 233 (basic_statement -> blocking_substitution .)
    SENS_OR         reduce using rule 233 (basic_statement -> blocking_substitution .)
    FUNCTION        reduce using rule 233 (basic_statement -> blocking_substitution .)
    TASK            reduce using rule 233 (basic_statement -> blocking_substitution .)
    LPAREN          reduce using rule 233 (basic_statement -> blocking_substitution .)
    INPUT           reduce using rule 233 (basic_statement -> blocking_substitution .)
    OUTPUT          reduce using rule 233 (basic_statement -> blocking_substitution .)
    INOUT           reduce using rule 233 (basic_statement -> blocking_substitution .)
    TRI             reduce using rule 233 (basic_statement -> blocking_substitution .)
    REG             reduce using rule 233 (basic_statement -> blocking_substitution .)
    LOGIC           reduce using rule 233 (basic_statement -> blocking_substitution .)
    WIRE            reduce using rule 233 (basic_statement -> blocking_substitution .)
    SIGNED          reduce using rule 233 (basic_statement -> blocking_substitution .)
    SUPPLY0         reduce using rule 233 (basic_statement -> blocking_substitution .)
    SUPPLY1         reduce using rule 233 (basic_statement -> blocking_substitution .)
    ENDGENERATE     reduce using rule 233 (basic_statement -> blocking_substitution .)
    IF              reduce using rule 233 (basic_statement -> blocking_substitution .)
    FOR             reduce using rule 233 (basic_statement -> blocking_substitution .)
    ELSE            reduce using rule 233 (basic_statement -> blocking_substitution .)
    END             reduce using rule 233 (basic_statement -> blocking_substitution .)
    CASE            reduce using rule 233 (basic_statement -> blocking_substitution .)
    CASEX           reduce using rule 233 (basic_statement -> blocking_substitution .)
    UNIQUE          reduce using rule 233 (basic_statement -> blocking_substitution .)
    WHILE           reduce using rule 233 (basic_statement -> blocking_substitution .)
    WAIT            reduce using rule 233 (basic_statement -> blocking_substitution .)
    FOREVER         reduce using rule 233 (basic_statement -> blocking_substitution .)
    BEGIN           reduce using rule 233 (basic_statement -> blocking_substitution .)
    FORK            reduce using rule 233 (basic_statement -> blocking_substitution .)
    DELAY           reduce using rule 233 (basic_statement -> blocking_substitution .)
    AT              reduce using rule 233 (basic_statement -> blocking_substitution .)
    DOLLER          reduce using rule 233 (basic_statement -> blocking_substitution .)
    DISABLE         reduce using rule 233 (basic_statement -> blocking_substitution .)
    LBRACE          reduce using rule 233 (basic_statement -> blocking_substitution .)
    SEMICOLON       reduce using rule 233 (basic_statement -> blocking_substitution .)
    JOIN            reduce using rule 233 (basic_statement -> blocking_substitution .)
    ENDFUNCTION     reduce using rule 233 (basic_statement -> blocking_substitution .)
    ENDTASK         reduce using rule 233 (basic_statement -> blocking_substitution .)
    ENDCASE         reduce using rule 233 (basic_statement -> blocking_substitution .)
    DEFAULT         reduce using rule 233 (basic_statement -> blocking_substitution .)
    MINUS           reduce using rule 233 (basic_statement -> blocking_substitution .)
    PLUS            reduce using rule 233 (basic_statement -> blocking_substitution .)
    LNOT            reduce using rule 233 (basic_statement -> blocking_substitution .)
    NOT             reduce using rule 233 (basic_statement -> blocking_substitution .)
    AND             reduce using rule 233 (basic_statement -> blocking_substitution .)
    NAND            reduce using rule 233 (basic_statement -> blocking_substitution .)
    NOR             reduce using rule 233 (basic_statement -> blocking_substitution .)
    OR              reduce using rule 233 (basic_statement -> blocking_substitution .)
    XOR             reduce using rule 233 (basic_statement -> blocking_substitution .)
    XNOR            reduce using rule 233 (basic_statement -> blocking_substitution .)
    INTNUMBER_DEC   reduce using rule 233 (basic_statement -> blocking_substitution .)
    SIGNED_INTNUMBER_DEC reduce using rule 233 (basic_statement -> blocking_substitution .)
    INTNUMBER_BIN   reduce using rule 233 (basic_statement -> blocking_substitution .)
    SIGNED_INTNUMBER_BIN reduce using rule 233 (basic_statement -> blocking_substitution .)
    INTNUMBER_OCT   reduce using rule 233 (basic_statement -> blocking_substitution .)
    SIGNED_INTNUMBER_OCT reduce using rule 233 (basic_statement -> blocking_substitution .)
    INTNUMBER_HEX   reduce using rule 233 (basic_statement -> blocking_substitution .)
    SIGNED_INTNUMBER_HEX reduce using rule 233 (basic_statement -> blocking_substitution .)
    FLOATNUMBER     reduce using rule 233 (basic_statement -> blocking_substitution .)
    STRING_LITERAL  reduce using rule 233 (basic_statement -> blocking_substitution .)


state 190

    (234) basic_statement -> nonblocking_substitution .

    ENDMODULE       reduce using rule 234 (basic_statement -> nonblocking_substitution .)
    GENERATE        reduce using rule 234 (basic_statement -> nonblocking_substitution .)
    INTEGER         reduce using rule 234 (basic_statement -> nonblocking_substitution .)
    REAL            reduce using rule 234 (basic_statement -> nonblocking_substitution .)
    PARAMETER       reduce using rule 234 (basic_statement -> nonblocking_substitution .)
    LOCALPARAM      reduce using rule 234 (basic_statement -> nonblocking_substitution .)
    GENVAR          reduce using rule 234 (basic_statement -> nonblocking_substitution .)
    ASSIGN          reduce using rule 234 (basic_statement -> nonblocking_substitution .)
    ALWAYS          reduce using rule 234 (basic_statement -> nonblocking_substitution .)
    ALWAYS_FF       reduce using rule 234 (basic_statement -> nonblocking_substitution .)
    ALWAYS_COMB     reduce using rule 234 (basic_statement -> nonblocking_substitution .)
    INITIAL         reduce using rule 234 (basic_statement -> nonblocking_substitution .)
    ID              reduce using rule 234 (basic_statement -> nonblocking_substitution .)
    SENS_OR         reduce using rule 234 (basic_statement -> nonblocking_substitution .)
    FUNCTION        reduce using rule 234 (basic_statement -> nonblocking_substitution .)
    TASK            reduce using rule 234 (basic_statement -> nonblocking_substitution .)
    LPAREN          reduce using rule 234 (basic_statement -> nonblocking_substitution .)
    INPUT           reduce using rule 234 (basic_statement -> nonblocking_substitution .)
    OUTPUT          reduce using rule 234 (basic_statement -> nonblocking_substitution .)
    INOUT           reduce using rule 234 (basic_statement -> nonblocking_substitution .)
    TRI             reduce using rule 234 (basic_statement -> nonblocking_substitution .)
    REG             reduce using rule 234 (basic_statement -> nonblocking_substitution .)
    LOGIC           reduce using rule 234 (basic_statement -> nonblocking_substitution .)
    WIRE            reduce using rule 234 (basic_statement -> nonblocking_substitution .)
    SIGNED          reduce using rule 234 (basic_statement -> nonblocking_substitution .)
    SUPPLY0         reduce using rule 234 (basic_statement -> nonblocking_substitution .)
    SUPPLY1         reduce using rule 234 (basic_statement -> nonblocking_substitution .)
    ENDGENERATE     reduce using rule 234 (basic_statement -> nonblocking_substitution .)
    IF              reduce using rule 234 (basic_statement -> nonblocking_substitution .)
    FOR             reduce using rule 234 (basic_statement -> nonblocking_substitution .)
    ELSE            reduce using rule 234 (basic_statement -> nonblocking_substitution .)
    END             reduce using rule 234 (basic_statement -> nonblocking_substitution .)
    CASE            reduce using rule 234 (basic_statement -> nonblocking_substitution .)
    CASEX           reduce using rule 234 (basic_statement -> nonblocking_substitution .)
    UNIQUE          reduce using rule 234 (basic_statement -> nonblocking_substitution .)
    WHILE           reduce using rule 234 (basic_statement -> nonblocking_substitution .)
    WAIT            reduce using rule 234 (basic_statement -> nonblocking_substitution .)
    FOREVER         reduce using rule 234 (basic_statement -> nonblocking_substitution .)
    BEGIN           reduce using rule 234 (basic_statement -> nonblocking_substitution .)
    FORK            reduce using rule 234 (basic_statement -> nonblocking_substitution .)
    DELAY           reduce using rule 234 (basic_statement -> nonblocking_substitution .)
    AT              reduce using rule 234 (basic_statement -> nonblocking_substitution .)
    DOLLER          reduce using rule 234 (basic_statement -> nonblocking_substitution .)
    DISABLE         reduce using rule 234 (basic_statement -> nonblocking_substitution .)
    LBRACE          reduce using rule 234 (basic_statement -> nonblocking_substitution .)
    SEMICOLON       reduce using rule 234 (basic_statement -> nonblocking_substitution .)
    JOIN            reduce using rule 234 (basic_statement -> nonblocking_substitution .)
    ENDFUNCTION     reduce using rule 234 (basic_statement -> nonblocking_substitution .)
    ENDTASK         reduce using rule 234 (basic_statement -> nonblocking_substitution .)
    ENDCASE         reduce using rule 234 (basic_statement -> nonblocking_substitution .)
    DEFAULT         reduce using rule 234 (basic_statement -> nonblocking_substitution .)
    MINUS           reduce using rule 234 (basic_statement -> nonblocking_substitution .)
    PLUS            reduce using rule 234 (basic_statement -> nonblocking_substitution .)
    LNOT            reduce using rule 234 (basic_statement -> nonblocking_substitution .)
    NOT             reduce using rule 234 (basic_statement -> nonblocking_substitution .)
    AND             reduce using rule 234 (basic_statement -> nonblocking_substitution .)
    NAND            reduce using rule 234 (basic_statement -> nonblocking_substitution .)
    NOR             reduce using rule 234 (basic_statement -> nonblocking_substitution .)
    OR              reduce using rule 234 (basic_statement -> nonblocking_substitution .)
    XOR             reduce using rule 234 (basic_statement -> nonblocking_substitution .)
    XNOR            reduce using rule 234 (basic_statement -> nonblocking_substitution .)
    INTNUMBER_DEC   reduce using rule 234 (basic_statement -> nonblocking_substitution .)
    SIGNED_INTNUMBER_DEC reduce using rule 234 (basic_statement -> nonblocking_substitution .)
    INTNUMBER_BIN   reduce using rule 234 (basic_statement -> nonblocking_substitution .)
    SIGNED_INTNUMBER_BIN reduce using rule 234 (basic_statement -> nonblocking_substitution .)
    INTNUMBER_OCT   reduce using rule 234 (basic_statement -> nonblocking_substitution .)
    SIGNED_INTNUMBER_OCT reduce using rule 234 (basic_statement -> nonblocking_substitution .)
    INTNUMBER_HEX   reduce using rule 234 (basic_statement -> nonblocking_substitution .)
    SIGNED_INTNUMBER_HEX reduce using rule 234 (basic_statement -> nonblocking_substitution .)
    FLOATNUMBER     reduce using rule 234 (basic_statement -> nonblocking_substitution .)
    STRING_LITERAL  reduce using rule 234 (basic_statement -> nonblocking_substitution .)


state 191

    (235) basic_statement -> single_statement .

    ENDMODULE       reduce using rule 235 (basic_statement -> single_statement .)
    GENERATE        reduce using rule 235 (basic_statement -> single_statement .)
    INTEGER         reduce using rule 235 (basic_statement -> single_statement .)
    REAL            reduce using rule 235 (basic_statement -> single_statement .)
    PARAMETER       reduce using rule 235 (basic_statement -> single_statement .)
    LOCALPARAM      reduce using rule 235 (basic_statement -> single_statement .)
    GENVAR          reduce using rule 235 (basic_statement -> single_statement .)
    ASSIGN          reduce using rule 235 (basic_statement -> single_statement .)
    ALWAYS          reduce using rule 235 (basic_statement -> single_statement .)
    ALWAYS_FF       reduce using rule 235 (basic_statement -> single_statement .)
    ALWAYS_COMB     reduce using rule 235 (basic_statement -> single_statement .)
    INITIAL         reduce using rule 235 (basic_statement -> single_statement .)
    ID              reduce using rule 235 (basic_statement -> single_statement .)
    SENS_OR         reduce using rule 235 (basic_statement -> single_statement .)
    FUNCTION        reduce using rule 235 (basic_statement -> single_statement .)
    TASK            reduce using rule 235 (basic_statement -> single_statement .)
    LPAREN          reduce using rule 235 (basic_statement -> single_statement .)
    INPUT           reduce using rule 235 (basic_statement -> single_statement .)
    OUTPUT          reduce using rule 235 (basic_statement -> single_statement .)
    INOUT           reduce using rule 235 (basic_statement -> single_statement .)
    TRI             reduce using rule 235 (basic_statement -> single_statement .)
    REG             reduce using rule 235 (basic_statement -> single_statement .)
    LOGIC           reduce using rule 235 (basic_statement -> single_statement .)
    WIRE            reduce using rule 235 (basic_statement -> single_statement .)
    SIGNED          reduce using rule 235 (basic_statement -> single_statement .)
    SUPPLY0         reduce using rule 235 (basic_statement -> single_statement .)
    SUPPLY1         reduce using rule 235 (basic_statement -> single_statement .)
    ENDGENERATE     reduce using rule 235 (basic_statement -> single_statement .)
    IF              reduce using rule 235 (basic_statement -> single_statement .)
    FOR             reduce using rule 235 (basic_statement -> single_statement .)
    ELSE            reduce using rule 235 (basic_statement -> single_statement .)
    END             reduce using rule 235 (basic_statement -> single_statement .)
    CASE            reduce using rule 235 (basic_statement -> single_statement .)
    CASEX           reduce using rule 235 (basic_statement -> single_statement .)
    UNIQUE          reduce using rule 235 (basic_statement -> single_statement .)
    WHILE           reduce using rule 235 (basic_statement -> single_statement .)
    WAIT            reduce using rule 235 (basic_statement -> single_statement .)
    FOREVER         reduce using rule 235 (basic_statement -> single_statement .)
    BEGIN           reduce using rule 235 (basic_statement -> single_statement .)
    FORK            reduce using rule 235 (basic_statement -> single_statement .)
    DELAY           reduce using rule 235 (basic_statement -> single_statement .)
    AT              reduce using rule 235 (basic_statement -> single_statement .)
    DOLLER          reduce using rule 235 (basic_statement -> single_statement .)
    DISABLE         reduce using rule 235 (basic_statement -> single_statement .)
    LBRACE          reduce using rule 235 (basic_statement -> single_statement .)
    SEMICOLON       reduce using rule 235 (basic_statement -> single_statement .)
    JOIN            reduce using rule 235 (basic_statement -> single_statement .)
    ENDFUNCTION     reduce using rule 235 (basic_statement -> single_statement .)
    ENDTASK         reduce using rule 235 (basic_statement -> single_statement .)
    ENDCASE         reduce using rule 235 (basic_statement -> single_statement .)
    DEFAULT         reduce using rule 235 (basic_statement -> single_statement .)
    MINUS           reduce using rule 235 (basic_statement -> single_statement .)
    PLUS            reduce using rule 235 (basic_statement -> single_statement .)
    LNOT            reduce using rule 235 (basic_statement -> single_statement .)
    NOT             reduce using rule 235 (basic_statement -> single_statement .)
    AND             reduce using rule 235 (basic_statement -> single_statement .)
    NAND            reduce using rule 235 (basic_statement -> single_statement .)
    NOR             reduce using rule 235 (basic_statement -> single_statement .)
    OR              reduce using rule 235 (basic_statement -> single_statement .)
    XOR             reduce using rule 235 (basic_statement -> single_statement .)
    XNOR            reduce using rule 235 (basic_statement -> single_statement .)
    INTNUMBER_DEC   reduce using rule 235 (basic_statement -> single_statement .)
    SIGNED_INTNUMBER_DEC reduce using rule 235 (basic_statement -> single_statement .)
    INTNUMBER_BIN   reduce using rule 235 (basic_statement -> single_statement .)
    SIGNED_INTNUMBER_BIN reduce using rule 235 (basic_statement -> single_statement .)
    INTNUMBER_OCT   reduce using rule 235 (basic_statement -> single_statement .)
    SIGNED_INTNUMBER_OCT reduce using rule 235 (basic_statement -> single_statement .)
    INTNUMBER_HEX   reduce using rule 235 (basic_statement -> single_statement .)
    SIGNED_INTNUMBER_HEX reduce using rule 235 (basic_statement -> single_statement .)
    FLOATNUMBER     reduce using rule 235 (basic_statement -> single_statement .)
    STRING_LITERAL  reduce using rule 235 (basic_statement -> single_statement .)


state 192

    (262) if_statement -> IF . LPAREN cond RPAREN true_statement ELSE else_statement
    (263) if_statement -> IF . LPAREN cond RPAREN true_statement

    LPAREN          shift and go to state 340


state 193

    (264) if_statement -> delays . IF LPAREN cond RPAREN true_statement ELSE else_statement
    (265) if_statement -> delays . IF LPAREN cond RPAREN true_statement
    (237) blocking_substitution -> delays . lvalue EQUALS delays rvalue SEMICOLON
    (239) nonblocking_substitution -> delays . lvalue LE delays rvalue SEMICOLON
    (125) lvalue -> . lpartselect
    (126) lvalue -> . lpointer
    (127) lvalue -> . lconcat
    (128) lvalue -> . identifier
    (111) lpartselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (112) lpartselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (113) lpartselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (114) lpartselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (115) lpartselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (116) lpartselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (117) lpointer -> . pointer
    (118) lconcat -> . LBRACE lconcatlist RBRACE
    (392) identifier -> . ID
    (393) identifier -> . scope ID
    (184) pointer -> . identifier LBRACKET expression RBRACKET
    (185) pointer -> . pointer LBRACKET expression RBRACKET
    (394) scope -> . identifier DOT
    (395) scope -> . pointer DOT

    IF              shift and go to state 341
    LBRACE          shift and go to state 169
    ID              shift and go to state 86

    lvalue                         shift and go to state 342
    lpartselect                    shift and go to state 164
    lpointer                       shift and go to state 165
    lconcat                        shift and go to state 166
    identifier                     shift and go to state 167
    pointer                        shift and go to state 168
    scope                          shift and go to state 108

state 194

    (280) case_statement -> CASE . LPAREN case_comp RPAREN casecontent_statements ENDCASE

    LPAREN          shift and go to state 343


state 195

    (281) casex_statement -> CASEX . LPAREN case_comp RPAREN casecontent_statements ENDCASE

    LPAREN          shift and go to state 344


state 196

    (282) unique_case_statement -> UNIQUE . CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE

    CASE            shift and go to state 345


state 197

    (270) for_statement -> FOR . LPAREN forpre forcond forpost RPAREN forcontent_statement

    LPAREN          shift and go to state 346


state 198

    (278) while_statement -> WHILE . LPAREN cond RPAREN whilecontent_statement

    LPAREN          shift and go to state 347


state 199

    (292) event_statement -> senslist . SEMICOLON

    SEMICOLON       shift and go to state 348


state 200

    (293) wait_statement -> WAIT . LPAREN cond RPAREN waitcontent_statement

    LPAREN          shift and go to state 349


state 201

    (296) forever_statement -> FOREVER . basic_statement
    (221) basic_statement -> . if_statement
    (222) basic_statement -> . case_statement
    (223) basic_statement -> . casex_statement
    (224) basic_statement -> . unique_case_statement
    (225) basic_statement -> . for_statement
    (226) basic_statement -> . while_statement
    (227) basic_statement -> . event_statement
    (228) basic_statement -> . wait_statement
    (229) basic_statement -> . forever_statement
    (230) basic_statement -> . block
    (231) basic_statement -> . namedblock
    (232) basic_statement -> . parallelblock
    (233) basic_statement -> . blocking_substitution
    (234) basic_statement -> . nonblocking_substitution
    (235) basic_statement -> . single_statement
    (262) if_statement -> . IF LPAREN cond RPAREN true_statement ELSE else_statement
    (263) if_statement -> . IF LPAREN cond RPAREN true_statement
    (264) if_statement -> . delays IF LPAREN cond RPAREN true_statement ELSE else_statement
    (265) if_statement -> . delays IF LPAREN cond RPAREN true_statement
    (280) case_statement -> . CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE
    (281) casex_statement -> . CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE
    (282) unique_case_statement -> . UNIQUE CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE
    (270) for_statement -> . FOR LPAREN forpre forcond forpost RPAREN forcontent_statement
    (278) while_statement -> . WHILE LPAREN cond RPAREN whilecontent_statement
    (292) event_statement -> . senslist SEMICOLON
    (293) wait_statement -> . WAIT LPAREN cond RPAREN waitcontent_statement
    (296) forever_statement -> . FOREVER basic_statement
    (245) block -> . BEGIN block_statements END
    (246) block -> . BEGIN END
    (250) namedblock -> . BEGIN COLON ID namedblock_statements END
    (251) namedblock -> . BEGIN COLON ID END
    (260) parallelblock -> . FORK block_statements JOIN
    (261) parallelblock -> . FORK JOIN
    (237) blocking_substitution -> . delays lvalue EQUALS delays rvalue SEMICOLON
    (239) nonblocking_substitution -> . delays lvalue LE delays rvalue SEMICOLON
    (397) single_statement -> . DELAY expression SEMICOLON
    (398) single_statement -> . systemcall SEMICOLON
    (399) single_statement -> . disable SEMICOLON
    (240) delays -> . DELAY LPAREN expression RPAREN
    (241) delays -> . DELAY identifier
    (242) delays -> . DELAY intnumber
    (243) delays -> . DELAY floatnumber
    (244) delays -> . empty
    (202) senslist -> . AT LPAREN edgesigs RPAREN
    (209) senslist -> . empty
    (210) senslist -> . AT levelsig
    (211) senslist -> . AT LPAREN levelsigs RPAREN
    (219) senslist -> . AT TIMES
    (220) senslist -> . AT LPAREN TIMES RPAREN
    (351) systemcall -> . DOLLER ID
    (352) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (353) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (396) disable -> . DISABLE ID
    (400) empty -> .

  ! shift/reduce conflict for IF resolved as shift
    IF              shift and go to state 192
    CASE            shift and go to state 194
    CASEX           shift and go to state 195
    UNIQUE          shift and go to state 196
    FOR             shift and go to state 197
    WHILE           shift and go to state 198
    WAIT            shift and go to state 200
    FOREVER         shift and go to state 201
    BEGIN           shift and go to state 202
    FORK            shift and go to state 203
    DELAY           shift and go to state 204
    AT              shift and go to state 171
    DOLLER          shift and go to state 107
    DISABLE         shift and go to state 208
    LBRACE          reduce using rule 400 (empty -> .)
    ID              reduce using rule 400 (empty -> .)
    SEMICOLON       reduce using rule 400 (empty -> .)

  ! IF              [ reduce using rule 400 (empty -> .) ]

    basic_statement                shift and go to state 350
    if_statement                   shift and go to state 177
    case_statement                 shift and go to state 178
    casex_statement                shift and go to state 179
    unique_case_statement          shift and go to state 180
    for_statement                  shift and go to state 181
    while_statement                shift and go to state 182
    event_statement                shift and go to state 183
    wait_statement                 shift and go to state 184
    forever_statement              shift and go to state 185
    block                          shift and go to state 186
    namedblock                     shift and go to state 187
    parallelblock                  shift and go to state 188
    blocking_substitution          shift and go to state 189
    nonblocking_substitution       shift and go to state 190
    single_statement               shift and go to state 191
    delays                         shift and go to state 193
    senslist                       shift and go to state 199
    systemcall                     shift and go to state 205
    disable                        shift and go to state 206
    empty                          shift and go to state 207

state 202

    (245) block -> BEGIN . block_statements END
    (246) block -> BEGIN . END
    (250) namedblock -> BEGIN . COLON ID namedblock_statements END
    (251) namedblock -> BEGIN . COLON ID END
    (247) block_statements -> . block_statements block_statement
    (248) block_statements -> . block_statement
    (249) block_statement -> . basic_statement
    (221) basic_statement -> . if_statement
    (222) basic_statement -> . case_statement
    (223) basic_statement -> . casex_statement
    (224) basic_statement -> . unique_case_statement
    (225) basic_statement -> . for_statement
    (226) basic_statement -> . while_statement
    (227) basic_statement -> . event_statement
    (228) basic_statement -> . wait_statement
    (229) basic_statement -> . forever_statement
    (230) basic_statement -> . block
    (231) basic_statement -> . namedblock
    (232) basic_statement -> . parallelblock
    (233) basic_statement -> . blocking_substitution
    (234) basic_statement -> . nonblocking_substitution
    (235) basic_statement -> . single_statement
    (262) if_statement -> . IF LPAREN cond RPAREN true_statement ELSE else_statement
    (263) if_statement -> . IF LPAREN cond RPAREN true_statement
    (264) if_statement -> . delays IF LPAREN cond RPAREN true_statement ELSE else_statement
    (265) if_statement -> . delays IF LPAREN cond RPAREN true_statement
    (280) case_statement -> . CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE
    (281) casex_statement -> . CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE
    (282) unique_case_statement -> . UNIQUE CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE
    (270) for_statement -> . FOR LPAREN forpre forcond forpost RPAREN forcontent_statement
    (278) while_statement -> . WHILE LPAREN cond RPAREN whilecontent_statement
    (292) event_statement -> . senslist SEMICOLON
    (293) wait_statement -> . WAIT LPAREN cond RPAREN waitcontent_statement
    (296) forever_statement -> . FOREVER basic_statement
    (245) block -> . BEGIN block_statements END
    (246) block -> . BEGIN END
    (250) namedblock -> . BEGIN COLON ID namedblock_statements END
    (251) namedblock -> . BEGIN COLON ID END
    (260) parallelblock -> . FORK block_statements JOIN
    (261) parallelblock -> . FORK JOIN
    (237) blocking_substitution -> . delays lvalue EQUALS delays rvalue SEMICOLON
    (239) nonblocking_substitution -> . delays lvalue LE delays rvalue SEMICOLON
    (397) single_statement -> . DELAY expression SEMICOLON
    (398) single_statement -> . systemcall SEMICOLON
    (399) single_statement -> . disable SEMICOLON
    (240) delays -> . DELAY LPAREN expression RPAREN
    (241) delays -> . DELAY identifier
    (242) delays -> . DELAY intnumber
    (243) delays -> . DELAY floatnumber
    (244) delays -> . empty
    (202) senslist -> . AT LPAREN edgesigs RPAREN
    (209) senslist -> . empty
    (210) senslist -> . AT levelsig
    (211) senslist -> . AT LPAREN levelsigs RPAREN
    (219) senslist -> . AT TIMES
    (220) senslist -> . AT LPAREN TIMES RPAREN
    (351) systemcall -> . DOLLER ID
    (352) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (353) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (396) disable -> . DISABLE ID
    (400) empty -> .

  ! shift/reduce conflict for IF resolved as shift
    END             shift and go to state 352
    COLON           shift and go to state 353
    IF              shift and go to state 192
    CASE            shift and go to state 194
    CASEX           shift and go to state 195
    UNIQUE          shift and go to state 196
    FOR             shift and go to state 197
    WHILE           shift and go to state 198
    WAIT            shift and go to state 200
    FOREVER         shift and go to state 201
    BEGIN           shift and go to state 202
    FORK            shift and go to state 203
    DELAY           shift and go to state 204
    AT              shift and go to state 171
    DOLLER          shift and go to state 107
    DISABLE         shift and go to state 208
    LBRACE          reduce using rule 400 (empty -> .)
    ID              reduce using rule 400 (empty -> .)
    SEMICOLON       reduce using rule 400 (empty -> .)

  ! IF              [ reduce using rule 400 (empty -> .) ]

    block_statements               shift and go to state 351
    block_statement                shift and go to state 354
    basic_statement                shift and go to state 355
    if_statement                   shift and go to state 177
    case_statement                 shift and go to state 178
    casex_statement                shift and go to state 179
    unique_case_statement          shift and go to state 180
    for_statement                  shift and go to state 181
    while_statement                shift and go to state 182
    event_statement                shift and go to state 183
    wait_statement                 shift and go to state 184
    forever_statement              shift and go to state 185
    block                          shift and go to state 186
    namedblock                     shift and go to state 187
    parallelblock                  shift and go to state 188
    blocking_substitution          shift and go to state 189
    nonblocking_substitution       shift and go to state 190
    single_statement               shift and go to state 191
    delays                         shift and go to state 193
    senslist                       shift and go to state 199
    systemcall                     shift and go to state 205
    disable                        shift and go to state 206
    empty                          shift and go to state 207

state 203

    (260) parallelblock -> FORK . block_statements JOIN
    (261) parallelblock -> FORK . JOIN
    (247) block_statements -> . block_statements block_statement
    (248) block_statements -> . block_statement
    (249) block_statement -> . basic_statement
    (221) basic_statement -> . if_statement
    (222) basic_statement -> . case_statement
    (223) basic_statement -> . casex_statement
    (224) basic_statement -> . unique_case_statement
    (225) basic_statement -> . for_statement
    (226) basic_statement -> . while_statement
    (227) basic_statement -> . event_statement
    (228) basic_statement -> . wait_statement
    (229) basic_statement -> . forever_statement
    (230) basic_statement -> . block
    (231) basic_statement -> . namedblock
    (232) basic_statement -> . parallelblock
    (233) basic_statement -> . blocking_substitution
    (234) basic_statement -> . nonblocking_substitution
    (235) basic_statement -> . single_statement
    (262) if_statement -> . IF LPAREN cond RPAREN true_statement ELSE else_statement
    (263) if_statement -> . IF LPAREN cond RPAREN true_statement
    (264) if_statement -> . delays IF LPAREN cond RPAREN true_statement ELSE else_statement
    (265) if_statement -> . delays IF LPAREN cond RPAREN true_statement
    (280) case_statement -> . CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE
    (281) casex_statement -> . CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE
    (282) unique_case_statement -> . UNIQUE CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE
    (270) for_statement -> . FOR LPAREN forpre forcond forpost RPAREN forcontent_statement
    (278) while_statement -> . WHILE LPAREN cond RPAREN whilecontent_statement
    (292) event_statement -> . senslist SEMICOLON
    (293) wait_statement -> . WAIT LPAREN cond RPAREN waitcontent_statement
    (296) forever_statement -> . FOREVER basic_statement
    (245) block -> . BEGIN block_statements END
    (246) block -> . BEGIN END
    (250) namedblock -> . BEGIN COLON ID namedblock_statements END
    (251) namedblock -> . BEGIN COLON ID END
    (260) parallelblock -> . FORK block_statements JOIN
    (261) parallelblock -> . FORK JOIN
    (237) blocking_substitution -> . delays lvalue EQUALS delays rvalue SEMICOLON
    (239) nonblocking_substitution -> . delays lvalue LE delays rvalue SEMICOLON
    (397) single_statement -> . DELAY expression SEMICOLON
    (398) single_statement -> . systemcall SEMICOLON
    (399) single_statement -> . disable SEMICOLON
    (240) delays -> . DELAY LPAREN expression RPAREN
    (241) delays -> . DELAY identifier
    (242) delays -> . DELAY intnumber
    (243) delays -> . DELAY floatnumber
    (244) delays -> . empty
    (202) senslist -> . AT LPAREN edgesigs RPAREN
    (209) senslist -> . empty
    (210) senslist -> . AT levelsig
    (211) senslist -> . AT LPAREN levelsigs RPAREN
    (219) senslist -> . AT TIMES
    (220) senslist -> . AT LPAREN TIMES RPAREN
    (351) systemcall -> . DOLLER ID
    (352) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (353) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (396) disable -> . DISABLE ID
    (400) empty -> .

  ! shift/reduce conflict for IF resolved as shift
    JOIN            shift and go to state 357
    IF              shift and go to state 192
    CASE            shift and go to state 194
    CASEX           shift and go to state 195
    UNIQUE          shift and go to state 196
    FOR             shift and go to state 197
    WHILE           shift and go to state 198
    WAIT            shift and go to state 200
    FOREVER         shift and go to state 201
    BEGIN           shift and go to state 202
    FORK            shift and go to state 203
    DELAY           shift and go to state 204
    AT              shift and go to state 171
    DOLLER          shift and go to state 107
    DISABLE         shift and go to state 208
    LBRACE          reduce using rule 400 (empty -> .)
    ID              reduce using rule 400 (empty -> .)
    SEMICOLON       reduce using rule 400 (empty -> .)

  ! IF              [ reduce using rule 400 (empty -> .) ]

    block_statements               shift and go to state 356
    block_statement                shift and go to state 354
    basic_statement                shift and go to state 355
    if_statement                   shift and go to state 177
    case_statement                 shift and go to state 178
    casex_statement                shift and go to state 179
    unique_case_statement          shift and go to state 180
    for_statement                  shift and go to state 181
    while_statement                shift and go to state 182
    event_statement                shift and go to state 183
    wait_statement                 shift and go to state 184
    forever_statement              shift and go to state 185
    block                          shift and go to state 186
    namedblock                     shift and go to state 187
    parallelblock                  shift and go to state 188
    blocking_substitution          shift and go to state 189
    nonblocking_substitution       shift and go to state 190
    single_statement               shift and go to state 191
    delays                         shift and go to state 193
    senslist                       shift and go to state 199
    systemcall                     shift and go to state 205
    disable                        shift and go to state 206
    empty                          shift and go to state 207

state 204

    (397) single_statement -> DELAY . expression SEMICOLON
    (240) delays -> DELAY . LPAREN expression RPAREN
    (241) delays -> DELAY . identifier
    (242) delays -> DELAY . intnumber
    (243) delays -> DELAY . floatnumber
    (130) expression -> . MINUS expression
    (131) expression -> . PLUS expression
    (132) expression -> . LNOT expression
    (133) expression -> . NOT expression
    (134) expression -> . AND expression
    (135) expression -> . NAND expression
    (136) expression -> . NOR expression
    (137) expression -> . OR expression
    (138) expression -> . XOR expression
    (139) expression -> . XNOR expression
    (140) expression -> . expression POWER expression
    (141) expression -> . expression TIMES expression
    (142) expression -> . expression DIVIDE expression
    (143) expression -> . expression MOD expression
    (144) expression -> . expression PLUS expression
    (145) expression -> . expression MINUS expression
    (146) expression -> . expression LSHIFT expression
    (147) expression -> . expression RSHIFT expression
    (148) expression -> . expression LSHIFTA expression
    (149) expression -> . expression RSHIFTA expression
    (150) expression -> . expression LT expression
    (151) expression -> . expression GT expression
    (152) expression -> . expression LE expression
    (153) expression -> . expression GE expression
    (154) expression -> . expression EQ expression
    (155) expression -> . expression NE expression
    (156) expression -> . expression EQL expression
    (157) expression -> . expression NEL expression
    (158) expression -> . expression AND expression
    (159) expression -> . expression XOR expression
    (160) expression -> . expression XNOR expression
    (161) expression -> . expression OR expression
    (162) expression -> . expression LAND expression
    (163) expression -> . expression LOR expression
    (164) expression -> . expression COND expression COLON expression
    (165) expression -> . LPAREN expression RPAREN
    (166) expression -> . concat
    (167) expression -> . repeat
    (168) expression -> . partselect
    (169) expression -> . pointer
    (170) expression -> . functioncall
    (171) expression -> . systemcall
    (172) expression -> . identifier
    (173) expression -> . const_expression
    (392) identifier -> . ID
    (393) identifier -> . scope ID
    (190) intnumber -> . INTNUMBER_DEC
    (191) intnumber -> . SIGNED_INTNUMBER_DEC
    (192) intnumber -> . INTNUMBER_BIN
    (193) intnumber -> . SIGNED_INTNUMBER_BIN
    (194) intnumber -> . INTNUMBER_OCT
    (195) intnumber -> . SIGNED_INTNUMBER_OCT
    (196) intnumber -> . INTNUMBER_HEX
    (197) intnumber -> . SIGNED_INTNUMBER_HEX
    (189) floatnumber -> . FLOATNUMBER
    (174) concat -> . LBRACE concatlist RBRACE
    (177) repeat -> . LBRACE expression concat RBRACE
    (178) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (179) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (180) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (181) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (182) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (183) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (184) pointer -> . identifier LBRACKET expression RBRACKET
    (185) pointer -> . pointer LBRACKET expression RBRACKET
    (373) functioncall -> . identifier LPAREN func_args RPAREN
    (351) systemcall -> . DOLLER ID
    (352) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (353) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (186) const_expression -> . intnumber
    (187) const_expression -> . floatnumber
    (188) const_expression -> . stringliteral
    (394) scope -> . identifier DOT
    (395) scope -> . pointer DOT
    (198) stringliteral -> . STRING_LITERAL

    LPAREN          shift and go to state 359
    MINUS           shift and go to state 88
    PLUS            shift and go to state 89
    LNOT            shift and go to state 90
    NOT             shift and go to state 91
    AND             shift and go to state 92
    NAND            shift and go to state 93
    NOR             shift and go to state 94
    OR              shift and go to state 95
    XOR             shift and go to state 96
    XNOR            shift and go to state 97
    ID              shift and go to state 86
    INTNUMBER_DEC   shift and go to state 112
    SIGNED_INTNUMBER_DEC shift and go to state 113
    INTNUMBER_BIN   shift and go to state 114
    SIGNED_INTNUMBER_BIN shift and go to state 115
    INTNUMBER_OCT   shift and go to state 116
    SIGNED_INTNUMBER_OCT shift and go to state 117
    INTNUMBER_HEX   shift and go to state 118
    SIGNED_INTNUMBER_HEX shift and go to state 119
    FLOATNUMBER     shift and go to state 120
    LBRACE          shift and go to state 106
    DOLLER          shift and go to state 107
    STRING_LITERAL  shift and go to state 121

    expression                     shift and go to state 358
    identifier                     shift and go to state 360
    intnumber                      shift and go to state 361
    floatnumber                    shift and go to state 362
    concat                         shift and go to state 98
    repeat                         shift and go to state 99
    partselect                     shift and go to state 100
    pointer                        shift and go to state 101
    functioncall                   shift and go to state 102
    systemcall                     shift and go to state 103
    const_expression               shift and go to state 105
    scope                          shift and go to state 108
    stringliteral                  shift and go to state 111

state 205

    (398) single_statement -> systemcall . SEMICOLON

    SEMICOLON       shift and go to state 363


state 206

    (399) single_statement -> disable . SEMICOLON

    SEMICOLON       shift and go to state 364


state 207

    (244) delays -> empty .
    (209) senslist -> empty .

    IF              reduce using rule 244 (delays -> empty .)
    LBRACE          reduce using rule 244 (delays -> empty .)
    ID              reduce using rule 244 (delays -> empty .)
    SEMICOLON       reduce using rule 209 (senslist -> empty .)


state 208

    (396) disable -> DISABLE . ID

    ID              shift and go to state 365


state 209

    (297) instance -> ID parameterlist . instance_bodylist SEMICOLON
    (299) instance_bodylist -> . instance_bodylist COMMA instance_body
    (300) instance_bodylist -> . instance_body
    (301) instance_body -> . ID LPAREN instance_ports RPAREN
    (302) instance_body -> . ID width LPAREN instance_ports RPAREN

    ID              shift and go to state 366

    instance_bodylist              shift and go to state 367
    instance_body                  shift and go to state 368

state 210

    (303) instance -> ID instance_bodylist_noname . SEMICOLON
    (305) instance_bodylist_noname -> instance_bodylist_noname . COMMA instance_body_noname

    SEMICOLON       shift and go to state 369
    COMMA           shift and go to state 370


state 211

    (308) parameterlist -> DELAY . LPAREN param_args RPAREN
    (309) parameterlist -> DELAY . LPAREN param_args_noname RPAREN

    LPAREN          shift and go to state 371


state 212

    (307) instance_body_noname -> LPAREN . instance_ports RPAREN
    (318) instance_ports -> . instance_ports_list
    (319) instance_ports -> . instance_ports_arg
    (320) instance_ports_list -> . instance_ports_list COMMA instance_port_list
    (321) instance_ports_list -> . instance_port_list
    (322) instance_ports_list -> . empty
    (324) instance_ports_arg -> . instance_ports_arg COMMA instance_port_arg
    (325) instance_ports_arg -> . instance_port_arg
    (323) instance_port_list -> . expression
    (400) empty -> .
    (326) instance_port_arg -> . DOT ID LPAREN identifier RPAREN
    (327) instance_port_arg -> . DOT ID LPAREN expression RPAREN
    (328) instance_port_arg -> . DOT ID LPAREN RPAREN
    (130) expression -> . MINUS expression
    (131) expression -> . PLUS expression
    (132) expression -> . LNOT expression
    (133) expression -> . NOT expression
    (134) expression -> . AND expression
    (135) expression -> . NAND expression
    (136) expression -> . NOR expression
    (137) expression -> . OR expression
    (138) expression -> . XOR expression
    (139) expression -> . XNOR expression
    (140) expression -> . expression POWER expression
    (141) expression -> . expression TIMES expression
    (142) expression -> . expression DIVIDE expression
    (143) expression -> . expression MOD expression
    (144) expression -> . expression PLUS expression
    (145) expression -> . expression MINUS expression
    (146) expression -> . expression LSHIFT expression
    (147) expression -> . expression RSHIFT expression
    (148) expression -> . expression LSHIFTA expression
    (149) expression -> . expression RSHIFTA expression
    (150) expression -> . expression LT expression
    (151) expression -> . expression GT expression
    (152) expression -> . expression LE expression
    (153) expression -> . expression GE expression
    (154) expression -> . expression EQ expression
    (155) expression -> . expression NE expression
    (156) expression -> . expression EQL expression
    (157) expression -> . expression NEL expression
    (158) expression -> . expression AND expression
    (159) expression -> . expression XOR expression
    (160) expression -> . expression XNOR expression
    (161) expression -> . expression OR expression
    (162) expression -> . expression LAND expression
    (163) expression -> . expression LOR expression
    (164) expression -> . expression COND expression COLON expression
    (165) expression -> . LPAREN expression RPAREN
    (166) expression -> . concat
    (167) expression -> . repeat
    (168) expression -> . partselect
    (169) expression -> . pointer
    (170) expression -> . functioncall
    (171) expression -> . systemcall
    (172) expression -> . identifier
    (173) expression -> . const_expression
    (174) concat -> . LBRACE concatlist RBRACE
    (177) repeat -> . LBRACE expression concat RBRACE
    (178) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (179) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (180) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (181) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (182) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (183) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (184) pointer -> . identifier LBRACKET expression RBRACKET
    (185) pointer -> . pointer LBRACKET expression RBRACKET
    (373) functioncall -> . identifier LPAREN func_args RPAREN
    (351) systemcall -> . DOLLER ID
    (352) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (353) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (392) identifier -> . ID
    (393) identifier -> . scope ID
    (186) const_expression -> . intnumber
    (187) const_expression -> . floatnumber
    (188) const_expression -> . stringliteral
    (394) scope -> . identifier DOT
    (395) scope -> . pointer DOT
    (190) intnumber -> . INTNUMBER_DEC
    (191) intnumber -> . SIGNED_INTNUMBER_DEC
    (192) intnumber -> . INTNUMBER_BIN
    (193) intnumber -> . SIGNED_INTNUMBER_BIN
    (194) intnumber -> . INTNUMBER_OCT
    (195) intnumber -> . SIGNED_INTNUMBER_OCT
    (196) intnumber -> . INTNUMBER_HEX
    (197) intnumber -> . SIGNED_INTNUMBER_HEX
    (189) floatnumber -> . FLOATNUMBER
    (198) stringliteral -> . STRING_LITERAL

    COMMA           reduce using rule 400 (empty -> .)
    RPAREN          reduce using rule 400 (empty -> .)
    DOT             shift and go to state 379
    MINUS           shift and go to state 88
    PLUS            shift and go to state 89
    LNOT            shift and go to state 90
    NOT             shift and go to state 91
    AND             shift and go to state 92
    NAND            shift and go to state 93
    NOR             shift and go to state 94
    OR              shift and go to state 95
    XOR             shift and go to state 96
    XNOR            shift and go to state 97
    LPAREN          shift and go to state 85
    LBRACE          shift and go to state 106
    DOLLER          shift and go to state 107
    ID              shift and go to state 86
    INTNUMBER_DEC   shift and go to state 112
    SIGNED_INTNUMBER_DEC shift and go to state 113
    INTNUMBER_BIN   shift and go to state 114
    SIGNED_INTNUMBER_BIN shift and go to state 115
    INTNUMBER_OCT   shift and go to state 116
    SIGNED_INTNUMBER_OCT shift and go to state 117
    INTNUMBER_HEX   shift and go to state 118
    SIGNED_INTNUMBER_HEX shift and go to state 119
    FLOATNUMBER     shift and go to state 120
    STRING_LITERAL  shift and go to state 121

    instance_ports                 shift and go to state 372
    instance_ports_list            shift and go to state 373
    instance_ports_arg             shift and go to state 374
    instance_port_list             shift and go to state 375
    empty                          shift and go to state 376
    instance_port_arg              shift and go to state 377
    expression                     shift and go to state 378
    identifier                     shift and go to state 104
    concat                         shift and go to state 98
    repeat                         shift and go to state 99
    partselect                     shift and go to state 100
    pointer                        shift and go to state 101
    functioncall                   shift and go to state 102
    systemcall                     shift and go to state 103
    const_expression               shift and go to state 105
    scope                          shift and go to state 108
    intnumber                      shift and go to state 109
    floatnumber                    shift and go to state 110
    stringliteral                  shift and go to state 111

state 213

    (310) parameterlist -> empty .

    ID              reduce using rule 310 (parameterlist -> empty .)


state 214

    (306) instance_bodylist_noname -> instance_body_noname .

    SEMICOLON       reduce using rule 306 (instance_bodylist_noname -> instance_body_noname .)
    COMMA           reduce using rule 306 (instance_bodylist_noname -> instance_body_noname .)


state 215

    (298) instance -> SENS_OR parameterlist . instance_bodylist SEMICOLON
    (299) instance_bodylist -> . instance_bodylist COMMA instance_body
    (300) instance_bodylist -> . instance_body
    (301) instance_body -> . ID LPAREN instance_ports RPAREN
    (302) instance_body -> . ID width LPAREN instance_ports RPAREN

    ID              shift and go to state 366

    instance_bodylist              shift and go to state 380
    instance_body                  shift and go to state 368

state 216

    (304) instance -> SENS_OR instance_bodylist_noname . SEMICOLON
    (305) instance_bodylist_noname -> instance_bodylist_noname . COMMA instance_body_noname

    SEMICOLON       shift and go to state 381
    COMMA           shift and go to state 370


state 217

    (358) function -> FUNCTION width . ID SEMICOLON function_statement ENDFUNCTION

    ID              shift and go to state 382


state 218

    (359) function -> FUNCTION ID . SEMICOLON function_statement ENDFUNCTION

    SEMICOLON       shift and go to state 383


state 219

    (377) task -> TASK ID . SEMICOLON task_statement ENDTASK

    SEMICOLON       shift and go to state 384


state 220

    (28) portlist -> LPAREN ports RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 385


state 221

    (32) ports -> ports COMMA . portname
    (34) portname -> . ID

    ID              shift and go to state 77

    portname                       shift and go to state 386

state 222

    (30) portlist -> LPAREN RPAREN SEMICOLON .

    GENERATE        reduce using rule 30 (portlist -> LPAREN RPAREN SEMICOLON .)
    INTEGER         reduce using rule 30 (portlist -> LPAREN RPAREN SEMICOLON .)
    REAL            reduce using rule 30 (portlist -> LPAREN RPAREN SEMICOLON .)
    PARAMETER       reduce using rule 30 (portlist -> LPAREN RPAREN SEMICOLON .)
    LOCALPARAM      reduce using rule 30 (portlist -> LPAREN RPAREN SEMICOLON .)
    GENVAR          reduce using rule 30 (portlist -> LPAREN RPAREN SEMICOLON .)
    ASSIGN          reduce using rule 30 (portlist -> LPAREN RPAREN SEMICOLON .)
    ALWAYS          reduce using rule 30 (portlist -> LPAREN RPAREN SEMICOLON .)
    ALWAYS_FF       reduce using rule 30 (portlist -> LPAREN RPAREN SEMICOLON .)
    ALWAYS_COMB     reduce using rule 30 (portlist -> LPAREN RPAREN SEMICOLON .)
    INITIAL         reduce using rule 30 (portlist -> LPAREN RPAREN SEMICOLON .)
    ID              reduce using rule 30 (portlist -> LPAREN RPAREN SEMICOLON .)
    SENS_OR         reduce using rule 30 (portlist -> LPAREN RPAREN SEMICOLON .)
    FUNCTION        reduce using rule 30 (portlist -> LPAREN RPAREN SEMICOLON .)
    TASK            reduce using rule 30 (portlist -> LPAREN RPAREN SEMICOLON .)
    LPAREN          reduce using rule 30 (portlist -> LPAREN RPAREN SEMICOLON .)
    INPUT           reduce using rule 30 (portlist -> LPAREN RPAREN SEMICOLON .)
    OUTPUT          reduce using rule 30 (portlist -> LPAREN RPAREN SEMICOLON .)
    INOUT           reduce using rule 30 (portlist -> LPAREN RPAREN SEMICOLON .)
    TRI             reduce using rule 30 (portlist -> LPAREN RPAREN SEMICOLON .)
    REG             reduce using rule 30 (portlist -> LPAREN RPAREN SEMICOLON .)
    LOGIC           reduce using rule 30 (portlist -> LPAREN RPAREN SEMICOLON .)
    WIRE            reduce using rule 30 (portlist -> LPAREN RPAREN SEMICOLON .)
    SIGNED          reduce using rule 30 (portlist -> LPAREN RPAREN SEMICOLON .)
    SUPPLY0         reduce using rule 30 (portlist -> LPAREN RPAREN SEMICOLON .)
    SUPPLY1         reduce using rule 30 (portlist -> LPAREN RPAREN SEMICOLON .)
    ENDMODULE       reduce using rule 30 (portlist -> LPAREN RPAREN SEMICOLON .)


state 223

    (29) portlist -> LPAREN ioports RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 387


state 224

    (47) ioports -> ioports COMMA . ioport
    (49) ioport -> . sigtypes portname
    (50) ioport -> . sigtypes width portname
    (53) ioport -> . portname
    (35) sigtypes -> . sigtypes sigtype
    (36) sigtypes -> . sigtype
    (34) portname -> . ID
    (37) sigtype -> . INPUT
    (38) sigtype -> . OUTPUT
    (39) sigtype -> . INOUT
    (40) sigtype -> . TRI
    (41) sigtype -> . REG
    (42) sigtype -> . LOGIC
    (43) sigtype -> . WIRE
    (44) sigtype -> . SIGNED
    (45) sigtype -> . SUPPLY0
    (46) sigtype -> . SUPPLY1

    ID              shift and go to state 77
    INPUT           shift and go to state 63
    OUTPUT          shift and go to state 64
    INOUT           shift and go to state 65
    TRI             shift and go to state 66
    REG             shift and go to state 67
    LOGIC           shift and go to state 68
    WIRE            shift and go to state 69
    SIGNED          shift and go to state 48
    SUPPLY0         shift and go to state 70
    SUPPLY1         shift and go to state 71

    ioport                         shift and go to state 388
    sigtypes                       shift and go to state 389
    portname                       shift and go to state 390
    sigtype                        shift and go to state 62

state 225

    (51) ioport_head -> sigtypes portname .

    RPAREN          reduce using rule 51 (ioport_head -> sigtypes portname .)
    COMMA           reduce using rule 51 (ioport_head -> sigtypes portname .)


state 226

    (52) ioport_head -> sigtypes width . portname
    (34) portname -> . ID

    ID              shift and go to state 77

    portname                       shift and go to state 391

state 227

    (12) paramlist -> DELAY LPAREN params RPAREN .

    LPAREN          reduce using rule 12 (paramlist -> DELAY LPAREN params RPAREN .)
    SEMICOLON       reduce using rule 12 (paramlist -> DELAY LPAREN params RPAREN .)


state 228

    (14) params -> params_begin param_end .

    RPAREN          reduce using rule 14 (params -> params_begin param_end .)


state 229

    (15) params_begin -> params_begin param .

    PARAMETER       reduce using rule 15 (params_begin -> params_begin param .)


state 230

    (23) param_end -> PARAMETER param_substitution_list .
    (18) param -> PARAMETER param_substitution_list . COMMA
    (106) param_substitution_list -> param_substitution_list . COMMA param_substitution

    RPAREN          reduce using rule 23 (param_end -> PARAMETER param_substitution_list .)
    COMMA           shift and go to state 392


state 231

    (24) param_end -> PARAMETER SIGNED . param_substitution_list
    (26) param_end -> PARAMETER SIGNED . width param_substitution_list
    (19) param -> PARAMETER SIGNED . param_substitution_list COMMA
    (21) param -> PARAMETER SIGNED . width param_substitution_list COMMA
    (106) param_substitution_list -> . param_substitution_list COMMA param_substitution
    (107) param_substitution_list -> . param_substitution
    (54) width -> . LBRACKET expression COLON expression RBRACKET
    (108) param_substitution -> . ID EQUALS rvalue

    LBRACKET        shift and go to state 137
    ID              shift and go to state 154

    param_substitution_list        shift and go to state 393
    width                          shift and go to state 394
    param_substitution             shift and go to state 153

state 232

    (25) param_end -> PARAMETER width . param_substitution_list
    (20) param -> PARAMETER width . param_substitution_list COMMA
    (106) param_substitution_list -> . param_substitution_list COMMA param_substitution
    (107) param_substitution_list -> . param_substitution
    (108) param_substitution -> . ID EQUALS rvalue

    ID              shift and go to state 154

    param_substitution_list        shift and go to state 395
    param_substitution             shift and go to state 153

state 233

    (27) param_end -> PARAMETER INTEGER . param_substitution_list
    (22) param -> PARAMETER INTEGER . param_substitution_list COMMA
    (106) param_substitution_list -> . param_substitution_list COMMA param_substitution
    (107) param_substitution_list -> . param_substitution
    (108) param_substitution -> . ID EQUALS rvalue

    ID              shift and go to state 154

    param_substitution_list        shift and go to state 396
    param_substitution             shift and go to state 153

state 234

    (165) expression -> LPAREN expression . RPAREN
    (140) expression -> expression . POWER expression
    (141) expression -> expression . TIMES expression
    (142) expression -> expression . DIVIDE expression
    (143) expression -> expression . MOD expression
    (144) expression -> expression . PLUS expression
    (145) expression -> expression . MINUS expression
    (146) expression -> expression . LSHIFT expression
    (147) expression -> expression . RSHIFT expression
    (148) expression -> expression . LSHIFTA expression
    (149) expression -> expression . RSHIFTA expression
    (150) expression -> expression . LT expression
    (151) expression -> expression . GT expression
    (152) expression -> expression . LE expression
    (153) expression -> expression . GE expression
    (154) expression -> expression . EQ expression
    (155) expression -> expression . NE expression
    (156) expression -> expression . EQL expression
    (157) expression -> expression . NEL expression
    (158) expression -> expression . AND expression
    (159) expression -> expression . XOR expression
    (160) expression -> expression . XNOR expression
    (161) expression -> expression . OR expression
    (162) expression -> expression . LAND expression
    (163) expression -> expression . LOR expression
    (164) expression -> expression . COND expression COLON expression

    RPAREN          shift and go to state 397
    POWER           shift and go to state 236
    TIMES           shift and go to state 398
    DIVIDE          shift and go to state 237
    MOD             shift and go to state 238
    PLUS            shift and go to state 239
    MINUS           shift and go to state 240
    LSHIFT          shift and go to state 241
    RSHIFT          shift and go to state 242
    LSHIFTA         shift and go to state 243
    RSHIFTA         shift and go to state 244
    LT              shift and go to state 245
    GT              shift and go to state 246
    LE              shift and go to state 247
    GE              shift and go to state 248
    EQ              shift and go to state 249
    NE              shift and go to state 250
    EQL             shift and go to state 251
    NEL             shift and go to state 252
    AND             shift and go to state 253
    XOR             shift and go to state 254
    XNOR            shift and go to state 255
    OR              shift and go to state 256
    LAND            shift and go to state 257
    LOR             shift and go to state 258
    COND            shift and go to state 259


state 235

    (7) pragma -> LPAREN TIMES ID EQUALS expression TIMES . RPAREN
    (141) expression -> expression TIMES . expression
    (130) expression -> . MINUS expression
    (131) expression -> . PLUS expression
    (132) expression -> . LNOT expression
    (133) expression -> . NOT expression
    (134) expression -> . AND expression
    (135) expression -> . NAND expression
    (136) expression -> . NOR expression
    (137) expression -> . OR expression
    (138) expression -> . XOR expression
    (139) expression -> . XNOR expression
    (140) expression -> . expression POWER expression
    (141) expression -> . expression TIMES expression
    (142) expression -> . expression DIVIDE expression
    (143) expression -> . expression MOD expression
    (144) expression -> . expression PLUS expression
    (145) expression -> . expression MINUS expression
    (146) expression -> . expression LSHIFT expression
    (147) expression -> . expression RSHIFT expression
    (148) expression -> . expression LSHIFTA expression
    (149) expression -> . expression RSHIFTA expression
    (150) expression -> . expression LT expression
    (151) expression -> . expression GT expression
    (152) expression -> . expression LE expression
    (153) expression -> . expression GE expression
    (154) expression -> . expression EQ expression
    (155) expression -> . expression NE expression
    (156) expression -> . expression EQL expression
    (157) expression -> . expression NEL expression
    (158) expression -> . expression AND expression
    (159) expression -> . expression XOR expression
    (160) expression -> . expression XNOR expression
    (161) expression -> . expression OR expression
    (162) expression -> . expression LAND expression
    (163) expression -> . expression LOR expression
    (164) expression -> . expression COND expression COLON expression
    (165) expression -> . LPAREN expression RPAREN
    (166) expression -> . concat
    (167) expression -> . repeat
    (168) expression -> . partselect
    (169) expression -> . pointer
    (170) expression -> . functioncall
    (171) expression -> . systemcall
    (172) expression -> . identifier
    (173) expression -> . const_expression
    (174) concat -> . LBRACE concatlist RBRACE
    (177) repeat -> . LBRACE expression concat RBRACE
    (178) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (179) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (180) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (181) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (182) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (183) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (184) pointer -> . identifier LBRACKET expression RBRACKET
    (185) pointer -> . pointer LBRACKET expression RBRACKET
    (373) functioncall -> . identifier LPAREN func_args RPAREN
    (351) systemcall -> . DOLLER ID
    (352) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (353) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (392) identifier -> . ID
    (393) identifier -> . scope ID
    (186) const_expression -> . intnumber
    (187) const_expression -> . floatnumber
    (188) const_expression -> . stringliteral
    (394) scope -> . identifier DOT
    (395) scope -> . pointer DOT
    (190) intnumber -> . INTNUMBER_DEC
    (191) intnumber -> . SIGNED_INTNUMBER_DEC
    (192) intnumber -> . INTNUMBER_BIN
    (193) intnumber -> . SIGNED_INTNUMBER_BIN
    (194) intnumber -> . INTNUMBER_OCT
    (195) intnumber -> . SIGNED_INTNUMBER_OCT
    (196) intnumber -> . INTNUMBER_HEX
    (197) intnumber -> . SIGNED_INTNUMBER_HEX
    (189) floatnumber -> . FLOATNUMBER
    (198) stringliteral -> . STRING_LITERAL

    RPAREN          shift and go to state 400
    MINUS           shift and go to state 88
    PLUS            shift and go to state 89
    LNOT            shift and go to state 90
    NOT             shift and go to state 91
    AND             shift and go to state 92
    NAND            shift and go to state 93
    NOR             shift and go to state 94
    OR              shift and go to state 95
    XOR             shift and go to state 96
    XNOR            shift and go to state 97
    LPAREN          shift and go to state 85
    LBRACE          shift and go to state 106
    DOLLER          shift and go to state 107
    ID              shift and go to state 86
    INTNUMBER_DEC   shift and go to state 112
    SIGNED_INTNUMBER_DEC shift and go to state 113
    INTNUMBER_BIN   shift and go to state 114
    SIGNED_INTNUMBER_BIN shift and go to state 115
    INTNUMBER_OCT   shift and go to state 116
    SIGNED_INTNUMBER_OCT shift and go to state 117
    INTNUMBER_HEX   shift and go to state 118
    SIGNED_INTNUMBER_HEX shift and go to state 119
    FLOATNUMBER     shift and go to state 120
    STRING_LITERAL  shift and go to state 121

    expression                     shift and go to state 399
    concat                         shift and go to state 98
    repeat                         shift and go to state 99
    partselect                     shift and go to state 100
    pointer                        shift and go to state 101
    functioncall                   shift and go to state 102
    systemcall                     shift and go to state 103
    identifier                     shift and go to state 104
    const_expression               shift and go to state 105
    scope                          shift and go to state 108
    intnumber                      shift and go to state 109
    floatnumber                    shift and go to state 110
    stringliteral                  shift and go to state 111

state 236

    (140) expression -> expression POWER . expression
    (130) expression -> . MINUS expression
    (131) expression -> . PLUS expression
    (132) expression -> . LNOT expression
    (133) expression -> . NOT expression
    (134) expression -> . AND expression
    (135) expression -> . NAND expression
    (136) expression -> . NOR expression
    (137) expression -> . OR expression
    (138) expression -> . XOR expression
    (139) expression -> . XNOR expression
    (140) expression -> . expression POWER expression
    (141) expression -> . expression TIMES expression
    (142) expression -> . expression DIVIDE expression
    (143) expression -> . expression MOD expression
    (144) expression -> . expression PLUS expression
    (145) expression -> . expression MINUS expression
    (146) expression -> . expression LSHIFT expression
    (147) expression -> . expression RSHIFT expression
    (148) expression -> . expression LSHIFTA expression
    (149) expression -> . expression RSHIFTA expression
    (150) expression -> . expression LT expression
    (151) expression -> . expression GT expression
    (152) expression -> . expression LE expression
    (153) expression -> . expression GE expression
    (154) expression -> . expression EQ expression
    (155) expression -> . expression NE expression
    (156) expression -> . expression EQL expression
    (157) expression -> . expression NEL expression
    (158) expression -> . expression AND expression
    (159) expression -> . expression XOR expression
    (160) expression -> . expression XNOR expression
    (161) expression -> . expression OR expression
    (162) expression -> . expression LAND expression
    (163) expression -> . expression LOR expression
    (164) expression -> . expression COND expression COLON expression
    (165) expression -> . LPAREN expression RPAREN
    (166) expression -> . concat
    (167) expression -> . repeat
    (168) expression -> . partselect
    (169) expression -> . pointer
    (170) expression -> . functioncall
    (171) expression -> . systemcall
    (172) expression -> . identifier
    (173) expression -> . const_expression
    (174) concat -> . LBRACE concatlist RBRACE
    (177) repeat -> . LBRACE expression concat RBRACE
    (178) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (179) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (180) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (181) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (182) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (183) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (184) pointer -> . identifier LBRACKET expression RBRACKET
    (185) pointer -> . pointer LBRACKET expression RBRACKET
    (373) functioncall -> . identifier LPAREN func_args RPAREN
    (351) systemcall -> . DOLLER ID
    (352) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (353) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (392) identifier -> . ID
    (393) identifier -> . scope ID
    (186) const_expression -> . intnumber
    (187) const_expression -> . floatnumber
    (188) const_expression -> . stringliteral
    (394) scope -> . identifier DOT
    (395) scope -> . pointer DOT
    (190) intnumber -> . INTNUMBER_DEC
    (191) intnumber -> . SIGNED_INTNUMBER_DEC
    (192) intnumber -> . INTNUMBER_BIN
    (193) intnumber -> . SIGNED_INTNUMBER_BIN
    (194) intnumber -> . INTNUMBER_OCT
    (195) intnumber -> . SIGNED_INTNUMBER_OCT
    (196) intnumber -> . INTNUMBER_HEX
    (197) intnumber -> . SIGNED_INTNUMBER_HEX
    (189) floatnumber -> . FLOATNUMBER
    (198) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 88
    PLUS            shift and go to state 89
    LNOT            shift and go to state 90
    NOT             shift and go to state 91
    AND             shift and go to state 92
    NAND            shift and go to state 93
    NOR             shift and go to state 94
    OR              shift and go to state 95
    XOR             shift and go to state 96
    XNOR            shift and go to state 97
    LPAREN          shift and go to state 85
    LBRACE          shift and go to state 106
    DOLLER          shift and go to state 107
    ID              shift and go to state 86
    INTNUMBER_DEC   shift and go to state 112
    SIGNED_INTNUMBER_DEC shift and go to state 113
    INTNUMBER_BIN   shift and go to state 114
    SIGNED_INTNUMBER_BIN shift and go to state 115
    INTNUMBER_OCT   shift and go to state 116
    SIGNED_INTNUMBER_OCT shift and go to state 117
    INTNUMBER_HEX   shift and go to state 118
    SIGNED_INTNUMBER_HEX shift and go to state 119
    FLOATNUMBER     shift and go to state 120
    STRING_LITERAL  shift and go to state 121

    expression                     shift and go to state 401
    concat                         shift and go to state 98
    repeat                         shift and go to state 99
    partselect                     shift and go to state 100
    pointer                        shift and go to state 101
    functioncall                   shift and go to state 102
    systemcall                     shift and go to state 103
    identifier                     shift and go to state 104
    const_expression               shift and go to state 105
    scope                          shift and go to state 108
    intnumber                      shift and go to state 109
    floatnumber                    shift and go to state 110
    stringliteral                  shift and go to state 111

state 237

    (142) expression -> expression DIVIDE . expression
    (130) expression -> . MINUS expression
    (131) expression -> . PLUS expression
    (132) expression -> . LNOT expression
    (133) expression -> . NOT expression
    (134) expression -> . AND expression
    (135) expression -> . NAND expression
    (136) expression -> . NOR expression
    (137) expression -> . OR expression
    (138) expression -> . XOR expression
    (139) expression -> . XNOR expression
    (140) expression -> . expression POWER expression
    (141) expression -> . expression TIMES expression
    (142) expression -> . expression DIVIDE expression
    (143) expression -> . expression MOD expression
    (144) expression -> . expression PLUS expression
    (145) expression -> . expression MINUS expression
    (146) expression -> . expression LSHIFT expression
    (147) expression -> . expression RSHIFT expression
    (148) expression -> . expression LSHIFTA expression
    (149) expression -> . expression RSHIFTA expression
    (150) expression -> . expression LT expression
    (151) expression -> . expression GT expression
    (152) expression -> . expression LE expression
    (153) expression -> . expression GE expression
    (154) expression -> . expression EQ expression
    (155) expression -> . expression NE expression
    (156) expression -> . expression EQL expression
    (157) expression -> . expression NEL expression
    (158) expression -> . expression AND expression
    (159) expression -> . expression XOR expression
    (160) expression -> . expression XNOR expression
    (161) expression -> . expression OR expression
    (162) expression -> . expression LAND expression
    (163) expression -> . expression LOR expression
    (164) expression -> . expression COND expression COLON expression
    (165) expression -> . LPAREN expression RPAREN
    (166) expression -> . concat
    (167) expression -> . repeat
    (168) expression -> . partselect
    (169) expression -> . pointer
    (170) expression -> . functioncall
    (171) expression -> . systemcall
    (172) expression -> . identifier
    (173) expression -> . const_expression
    (174) concat -> . LBRACE concatlist RBRACE
    (177) repeat -> . LBRACE expression concat RBRACE
    (178) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (179) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (180) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (181) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (182) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (183) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (184) pointer -> . identifier LBRACKET expression RBRACKET
    (185) pointer -> . pointer LBRACKET expression RBRACKET
    (373) functioncall -> . identifier LPAREN func_args RPAREN
    (351) systemcall -> . DOLLER ID
    (352) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (353) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (392) identifier -> . ID
    (393) identifier -> . scope ID
    (186) const_expression -> . intnumber
    (187) const_expression -> . floatnumber
    (188) const_expression -> . stringliteral
    (394) scope -> . identifier DOT
    (395) scope -> . pointer DOT
    (190) intnumber -> . INTNUMBER_DEC
    (191) intnumber -> . SIGNED_INTNUMBER_DEC
    (192) intnumber -> . INTNUMBER_BIN
    (193) intnumber -> . SIGNED_INTNUMBER_BIN
    (194) intnumber -> . INTNUMBER_OCT
    (195) intnumber -> . SIGNED_INTNUMBER_OCT
    (196) intnumber -> . INTNUMBER_HEX
    (197) intnumber -> . SIGNED_INTNUMBER_HEX
    (189) floatnumber -> . FLOATNUMBER
    (198) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 88
    PLUS            shift and go to state 89
    LNOT            shift and go to state 90
    NOT             shift and go to state 91
    AND             shift and go to state 92
    NAND            shift and go to state 93
    NOR             shift and go to state 94
    OR              shift and go to state 95
    XOR             shift and go to state 96
    XNOR            shift and go to state 97
    LPAREN          shift and go to state 85
    LBRACE          shift and go to state 106
    DOLLER          shift and go to state 107
    ID              shift and go to state 86
    INTNUMBER_DEC   shift and go to state 112
    SIGNED_INTNUMBER_DEC shift and go to state 113
    INTNUMBER_BIN   shift and go to state 114
    SIGNED_INTNUMBER_BIN shift and go to state 115
    INTNUMBER_OCT   shift and go to state 116
    SIGNED_INTNUMBER_OCT shift and go to state 117
    INTNUMBER_HEX   shift and go to state 118
    SIGNED_INTNUMBER_HEX shift and go to state 119
    FLOATNUMBER     shift and go to state 120
    STRING_LITERAL  shift and go to state 121

    expression                     shift and go to state 402
    concat                         shift and go to state 98
    repeat                         shift and go to state 99
    partselect                     shift and go to state 100
    pointer                        shift and go to state 101
    functioncall                   shift and go to state 102
    systemcall                     shift and go to state 103
    identifier                     shift and go to state 104
    const_expression               shift and go to state 105
    scope                          shift and go to state 108
    intnumber                      shift and go to state 109
    floatnumber                    shift and go to state 110
    stringliteral                  shift and go to state 111

state 238

    (143) expression -> expression MOD . expression
    (130) expression -> . MINUS expression
    (131) expression -> . PLUS expression
    (132) expression -> . LNOT expression
    (133) expression -> . NOT expression
    (134) expression -> . AND expression
    (135) expression -> . NAND expression
    (136) expression -> . NOR expression
    (137) expression -> . OR expression
    (138) expression -> . XOR expression
    (139) expression -> . XNOR expression
    (140) expression -> . expression POWER expression
    (141) expression -> . expression TIMES expression
    (142) expression -> . expression DIVIDE expression
    (143) expression -> . expression MOD expression
    (144) expression -> . expression PLUS expression
    (145) expression -> . expression MINUS expression
    (146) expression -> . expression LSHIFT expression
    (147) expression -> . expression RSHIFT expression
    (148) expression -> . expression LSHIFTA expression
    (149) expression -> . expression RSHIFTA expression
    (150) expression -> . expression LT expression
    (151) expression -> . expression GT expression
    (152) expression -> . expression LE expression
    (153) expression -> . expression GE expression
    (154) expression -> . expression EQ expression
    (155) expression -> . expression NE expression
    (156) expression -> . expression EQL expression
    (157) expression -> . expression NEL expression
    (158) expression -> . expression AND expression
    (159) expression -> . expression XOR expression
    (160) expression -> . expression XNOR expression
    (161) expression -> . expression OR expression
    (162) expression -> . expression LAND expression
    (163) expression -> . expression LOR expression
    (164) expression -> . expression COND expression COLON expression
    (165) expression -> . LPAREN expression RPAREN
    (166) expression -> . concat
    (167) expression -> . repeat
    (168) expression -> . partselect
    (169) expression -> . pointer
    (170) expression -> . functioncall
    (171) expression -> . systemcall
    (172) expression -> . identifier
    (173) expression -> . const_expression
    (174) concat -> . LBRACE concatlist RBRACE
    (177) repeat -> . LBRACE expression concat RBRACE
    (178) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (179) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (180) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (181) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (182) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (183) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (184) pointer -> . identifier LBRACKET expression RBRACKET
    (185) pointer -> . pointer LBRACKET expression RBRACKET
    (373) functioncall -> . identifier LPAREN func_args RPAREN
    (351) systemcall -> . DOLLER ID
    (352) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (353) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (392) identifier -> . ID
    (393) identifier -> . scope ID
    (186) const_expression -> . intnumber
    (187) const_expression -> . floatnumber
    (188) const_expression -> . stringliteral
    (394) scope -> . identifier DOT
    (395) scope -> . pointer DOT
    (190) intnumber -> . INTNUMBER_DEC
    (191) intnumber -> . SIGNED_INTNUMBER_DEC
    (192) intnumber -> . INTNUMBER_BIN
    (193) intnumber -> . SIGNED_INTNUMBER_BIN
    (194) intnumber -> . INTNUMBER_OCT
    (195) intnumber -> . SIGNED_INTNUMBER_OCT
    (196) intnumber -> . INTNUMBER_HEX
    (197) intnumber -> . SIGNED_INTNUMBER_HEX
    (189) floatnumber -> . FLOATNUMBER
    (198) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 88
    PLUS            shift and go to state 89
    LNOT            shift and go to state 90
    NOT             shift and go to state 91
    AND             shift and go to state 92
    NAND            shift and go to state 93
    NOR             shift and go to state 94
    OR              shift and go to state 95
    XOR             shift and go to state 96
    XNOR            shift and go to state 97
    LPAREN          shift and go to state 85
    LBRACE          shift and go to state 106
    DOLLER          shift and go to state 107
    ID              shift and go to state 86
    INTNUMBER_DEC   shift and go to state 112
    SIGNED_INTNUMBER_DEC shift and go to state 113
    INTNUMBER_BIN   shift and go to state 114
    SIGNED_INTNUMBER_BIN shift and go to state 115
    INTNUMBER_OCT   shift and go to state 116
    SIGNED_INTNUMBER_OCT shift and go to state 117
    INTNUMBER_HEX   shift and go to state 118
    SIGNED_INTNUMBER_HEX shift and go to state 119
    FLOATNUMBER     shift and go to state 120
    STRING_LITERAL  shift and go to state 121

    expression                     shift and go to state 403
    concat                         shift and go to state 98
    repeat                         shift and go to state 99
    partselect                     shift and go to state 100
    pointer                        shift and go to state 101
    functioncall                   shift and go to state 102
    systemcall                     shift and go to state 103
    identifier                     shift and go to state 104
    const_expression               shift and go to state 105
    scope                          shift and go to state 108
    intnumber                      shift and go to state 109
    floatnumber                    shift and go to state 110
    stringliteral                  shift and go to state 111

state 239

    (144) expression -> expression PLUS . expression
    (130) expression -> . MINUS expression
    (131) expression -> . PLUS expression
    (132) expression -> . LNOT expression
    (133) expression -> . NOT expression
    (134) expression -> . AND expression
    (135) expression -> . NAND expression
    (136) expression -> . NOR expression
    (137) expression -> . OR expression
    (138) expression -> . XOR expression
    (139) expression -> . XNOR expression
    (140) expression -> . expression POWER expression
    (141) expression -> . expression TIMES expression
    (142) expression -> . expression DIVIDE expression
    (143) expression -> . expression MOD expression
    (144) expression -> . expression PLUS expression
    (145) expression -> . expression MINUS expression
    (146) expression -> . expression LSHIFT expression
    (147) expression -> . expression RSHIFT expression
    (148) expression -> . expression LSHIFTA expression
    (149) expression -> . expression RSHIFTA expression
    (150) expression -> . expression LT expression
    (151) expression -> . expression GT expression
    (152) expression -> . expression LE expression
    (153) expression -> . expression GE expression
    (154) expression -> . expression EQ expression
    (155) expression -> . expression NE expression
    (156) expression -> . expression EQL expression
    (157) expression -> . expression NEL expression
    (158) expression -> . expression AND expression
    (159) expression -> . expression XOR expression
    (160) expression -> . expression XNOR expression
    (161) expression -> . expression OR expression
    (162) expression -> . expression LAND expression
    (163) expression -> . expression LOR expression
    (164) expression -> . expression COND expression COLON expression
    (165) expression -> . LPAREN expression RPAREN
    (166) expression -> . concat
    (167) expression -> . repeat
    (168) expression -> . partselect
    (169) expression -> . pointer
    (170) expression -> . functioncall
    (171) expression -> . systemcall
    (172) expression -> . identifier
    (173) expression -> . const_expression
    (174) concat -> . LBRACE concatlist RBRACE
    (177) repeat -> . LBRACE expression concat RBRACE
    (178) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (179) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (180) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (181) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (182) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (183) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (184) pointer -> . identifier LBRACKET expression RBRACKET
    (185) pointer -> . pointer LBRACKET expression RBRACKET
    (373) functioncall -> . identifier LPAREN func_args RPAREN
    (351) systemcall -> . DOLLER ID
    (352) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (353) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (392) identifier -> . ID
    (393) identifier -> . scope ID
    (186) const_expression -> . intnumber
    (187) const_expression -> . floatnumber
    (188) const_expression -> . stringliteral
    (394) scope -> . identifier DOT
    (395) scope -> . pointer DOT
    (190) intnumber -> . INTNUMBER_DEC
    (191) intnumber -> . SIGNED_INTNUMBER_DEC
    (192) intnumber -> . INTNUMBER_BIN
    (193) intnumber -> . SIGNED_INTNUMBER_BIN
    (194) intnumber -> . INTNUMBER_OCT
    (195) intnumber -> . SIGNED_INTNUMBER_OCT
    (196) intnumber -> . INTNUMBER_HEX
    (197) intnumber -> . SIGNED_INTNUMBER_HEX
    (189) floatnumber -> . FLOATNUMBER
    (198) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 88
    PLUS            shift and go to state 89
    LNOT            shift and go to state 90
    NOT             shift and go to state 91
    AND             shift and go to state 92
    NAND            shift and go to state 93
    NOR             shift and go to state 94
    OR              shift and go to state 95
    XOR             shift and go to state 96
    XNOR            shift and go to state 97
    LPAREN          shift and go to state 85
    LBRACE          shift and go to state 106
    DOLLER          shift and go to state 107
    ID              shift and go to state 86
    INTNUMBER_DEC   shift and go to state 112
    SIGNED_INTNUMBER_DEC shift and go to state 113
    INTNUMBER_BIN   shift and go to state 114
    SIGNED_INTNUMBER_BIN shift and go to state 115
    INTNUMBER_OCT   shift and go to state 116
    SIGNED_INTNUMBER_OCT shift and go to state 117
    INTNUMBER_HEX   shift and go to state 118
    SIGNED_INTNUMBER_HEX shift and go to state 119
    FLOATNUMBER     shift and go to state 120
    STRING_LITERAL  shift and go to state 121

    expression                     shift and go to state 404
    concat                         shift and go to state 98
    repeat                         shift and go to state 99
    partselect                     shift and go to state 100
    pointer                        shift and go to state 101
    functioncall                   shift and go to state 102
    systemcall                     shift and go to state 103
    identifier                     shift and go to state 104
    const_expression               shift and go to state 105
    scope                          shift and go to state 108
    intnumber                      shift and go to state 109
    floatnumber                    shift and go to state 110
    stringliteral                  shift and go to state 111

state 240

    (145) expression -> expression MINUS . expression
    (130) expression -> . MINUS expression
    (131) expression -> . PLUS expression
    (132) expression -> . LNOT expression
    (133) expression -> . NOT expression
    (134) expression -> . AND expression
    (135) expression -> . NAND expression
    (136) expression -> . NOR expression
    (137) expression -> . OR expression
    (138) expression -> . XOR expression
    (139) expression -> . XNOR expression
    (140) expression -> . expression POWER expression
    (141) expression -> . expression TIMES expression
    (142) expression -> . expression DIVIDE expression
    (143) expression -> . expression MOD expression
    (144) expression -> . expression PLUS expression
    (145) expression -> . expression MINUS expression
    (146) expression -> . expression LSHIFT expression
    (147) expression -> . expression RSHIFT expression
    (148) expression -> . expression LSHIFTA expression
    (149) expression -> . expression RSHIFTA expression
    (150) expression -> . expression LT expression
    (151) expression -> . expression GT expression
    (152) expression -> . expression LE expression
    (153) expression -> . expression GE expression
    (154) expression -> . expression EQ expression
    (155) expression -> . expression NE expression
    (156) expression -> . expression EQL expression
    (157) expression -> . expression NEL expression
    (158) expression -> . expression AND expression
    (159) expression -> . expression XOR expression
    (160) expression -> . expression XNOR expression
    (161) expression -> . expression OR expression
    (162) expression -> . expression LAND expression
    (163) expression -> . expression LOR expression
    (164) expression -> . expression COND expression COLON expression
    (165) expression -> . LPAREN expression RPAREN
    (166) expression -> . concat
    (167) expression -> . repeat
    (168) expression -> . partselect
    (169) expression -> . pointer
    (170) expression -> . functioncall
    (171) expression -> . systemcall
    (172) expression -> . identifier
    (173) expression -> . const_expression
    (174) concat -> . LBRACE concatlist RBRACE
    (177) repeat -> . LBRACE expression concat RBRACE
    (178) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (179) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (180) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (181) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (182) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (183) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (184) pointer -> . identifier LBRACKET expression RBRACKET
    (185) pointer -> . pointer LBRACKET expression RBRACKET
    (373) functioncall -> . identifier LPAREN func_args RPAREN
    (351) systemcall -> . DOLLER ID
    (352) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (353) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (392) identifier -> . ID
    (393) identifier -> . scope ID
    (186) const_expression -> . intnumber
    (187) const_expression -> . floatnumber
    (188) const_expression -> . stringliteral
    (394) scope -> . identifier DOT
    (395) scope -> . pointer DOT
    (190) intnumber -> . INTNUMBER_DEC
    (191) intnumber -> . SIGNED_INTNUMBER_DEC
    (192) intnumber -> . INTNUMBER_BIN
    (193) intnumber -> . SIGNED_INTNUMBER_BIN
    (194) intnumber -> . INTNUMBER_OCT
    (195) intnumber -> . SIGNED_INTNUMBER_OCT
    (196) intnumber -> . INTNUMBER_HEX
    (197) intnumber -> . SIGNED_INTNUMBER_HEX
    (189) floatnumber -> . FLOATNUMBER
    (198) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 88
    PLUS            shift and go to state 89
    LNOT            shift and go to state 90
    NOT             shift and go to state 91
    AND             shift and go to state 92
    NAND            shift and go to state 93
    NOR             shift and go to state 94
    OR              shift and go to state 95
    XOR             shift and go to state 96
    XNOR            shift and go to state 97
    LPAREN          shift and go to state 85
    LBRACE          shift and go to state 106
    DOLLER          shift and go to state 107
    ID              shift and go to state 86
    INTNUMBER_DEC   shift and go to state 112
    SIGNED_INTNUMBER_DEC shift and go to state 113
    INTNUMBER_BIN   shift and go to state 114
    SIGNED_INTNUMBER_BIN shift and go to state 115
    INTNUMBER_OCT   shift and go to state 116
    SIGNED_INTNUMBER_OCT shift and go to state 117
    INTNUMBER_HEX   shift and go to state 118
    SIGNED_INTNUMBER_HEX shift and go to state 119
    FLOATNUMBER     shift and go to state 120
    STRING_LITERAL  shift and go to state 121

    expression                     shift and go to state 405
    concat                         shift and go to state 98
    repeat                         shift and go to state 99
    partselect                     shift and go to state 100
    pointer                        shift and go to state 101
    functioncall                   shift and go to state 102
    systemcall                     shift and go to state 103
    identifier                     shift and go to state 104
    const_expression               shift and go to state 105
    scope                          shift and go to state 108
    intnumber                      shift and go to state 109
    floatnumber                    shift and go to state 110
    stringliteral                  shift and go to state 111

state 241

    (146) expression -> expression LSHIFT . expression
    (130) expression -> . MINUS expression
    (131) expression -> . PLUS expression
    (132) expression -> . LNOT expression
    (133) expression -> . NOT expression
    (134) expression -> . AND expression
    (135) expression -> . NAND expression
    (136) expression -> . NOR expression
    (137) expression -> . OR expression
    (138) expression -> . XOR expression
    (139) expression -> . XNOR expression
    (140) expression -> . expression POWER expression
    (141) expression -> . expression TIMES expression
    (142) expression -> . expression DIVIDE expression
    (143) expression -> . expression MOD expression
    (144) expression -> . expression PLUS expression
    (145) expression -> . expression MINUS expression
    (146) expression -> . expression LSHIFT expression
    (147) expression -> . expression RSHIFT expression
    (148) expression -> . expression LSHIFTA expression
    (149) expression -> . expression RSHIFTA expression
    (150) expression -> . expression LT expression
    (151) expression -> . expression GT expression
    (152) expression -> . expression LE expression
    (153) expression -> . expression GE expression
    (154) expression -> . expression EQ expression
    (155) expression -> . expression NE expression
    (156) expression -> . expression EQL expression
    (157) expression -> . expression NEL expression
    (158) expression -> . expression AND expression
    (159) expression -> . expression XOR expression
    (160) expression -> . expression XNOR expression
    (161) expression -> . expression OR expression
    (162) expression -> . expression LAND expression
    (163) expression -> . expression LOR expression
    (164) expression -> . expression COND expression COLON expression
    (165) expression -> . LPAREN expression RPAREN
    (166) expression -> . concat
    (167) expression -> . repeat
    (168) expression -> . partselect
    (169) expression -> . pointer
    (170) expression -> . functioncall
    (171) expression -> . systemcall
    (172) expression -> . identifier
    (173) expression -> . const_expression
    (174) concat -> . LBRACE concatlist RBRACE
    (177) repeat -> . LBRACE expression concat RBRACE
    (178) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (179) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (180) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (181) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (182) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (183) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (184) pointer -> . identifier LBRACKET expression RBRACKET
    (185) pointer -> . pointer LBRACKET expression RBRACKET
    (373) functioncall -> . identifier LPAREN func_args RPAREN
    (351) systemcall -> . DOLLER ID
    (352) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (353) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (392) identifier -> . ID
    (393) identifier -> . scope ID
    (186) const_expression -> . intnumber
    (187) const_expression -> . floatnumber
    (188) const_expression -> . stringliteral
    (394) scope -> . identifier DOT
    (395) scope -> . pointer DOT
    (190) intnumber -> . INTNUMBER_DEC
    (191) intnumber -> . SIGNED_INTNUMBER_DEC
    (192) intnumber -> . INTNUMBER_BIN
    (193) intnumber -> . SIGNED_INTNUMBER_BIN
    (194) intnumber -> . INTNUMBER_OCT
    (195) intnumber -> . SIGNED_INTNUMBER_OCT
    (196) intnumber -> . INTNUMBER_HEX
    (197) intnumber -> . SIGNED_INTNUMBER_HEX
    (189) floatnumber -> . FLOATNUMBER
    (198) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 88
    PLUS            shift and go to state 89
    LNOT            shift and go to state 90
    NOT             shift and go to state 91
    AND             shift and go to state 92
    NAND            shift and go to state 93
    NOR             shift and go to state 94
    OR              shift and go to state 95
    XOR             shift and go to state 96
    XNOR            shift and go to state 97
    LPAREN          shift and go to state 85
    LBRACE          shift and go to state 106
    DOLLER          shift and go to state 107
    ID              shift and go to state 86
    INTNUMBER_DEC   shift and go to state 112
    SIGNED_INTNUMBER_DEC shift and go to state 113
    INTNUMBER_BIN   shift and go to state 114
    SIGNED_INTNUMBER_BIN shift and go to state 115
    INTNUMBER_OCT   shift and go to state 116
    SIGNED_INTNUMBER_OCT shift and go to state 117
    INTNUMBER_HEX   shift and go to state 118
    SIGNED_INTNUMBER_HEX shift and go to state 119
    FLOATNUMBER     shift and go to state 120
    STRING_LITERAL  shift and go to state 121

    expression                     shift and go to state 406
    concat                         shift and go to state 98
    repeat                         shift and go to state 99
    partselect                     shift and go to state 100
    pointer                        shift and go to state 101
    functioncall                   shift and go to state 102
    systemcall                     shift and go to state 103
    identifier                     shift and go to state 104
    const_expression               shift and go to state 105
    scope                          shift and go to state 108
    intnumber                      shift and go to state 109
    floatnumber                    shift and go to state 110
    stringliteral                  shift and go to state 111

state 242

    (147) expression -> expression RSHIFT . expression
    (130) expression -> . MINUS expression
    (131) expression -> . PLUS expression
    (132) expression -> . LNOT expression
    (133) expression -> . NOT expression
    (134) expression -> . AND expression
    (135) expression -> . NAND expression
    (136) expression -> . NOR expression
    (137) expression -> . OR expression
    (138) expression -> . XOR expression
    (139) expression -> . XNOR expression
    (140) expression -> . expression POWER expression
    (141) expression -> . expression TIMES expression
    (142) expression -> . expression DIVIDE expression
    (143) expression -> . expression MOD expression
    (144) expression -> . expression PLUS expression
    (145) expression -> . expression MINUS expression
    (146) expression -> . expression LSHIFT expression
    (147) expression -> . expression RSHIFT expression
    (148) expression -> . expression LSHIFTA expression
    (149) expression -> . expression RSHIFTA expression
    (150) expression -> . expression LT expression
    (151) expression -> . expression GT expression
    (152) expression -> . expression LE expression
    (153) expression -> . expression GE expression
    (154) expression -> . expression EQ expression
    (155) expression -> . expression NE expression
    (156) expression -> . expression EQL expression
    (157) expression -> . expression NEL expression
    (158) expression -> . expression AND expression
    (159) expression -> . expression XOR expression
    (160) expression -> . expression XNOR expression
    (161) expression -> . expression OR expression
    (162) expression -> . expression LAND expression
    (163) expression -> . expression LOR expression
    (164) expression -> . expression COND expression COLON expression
    (165) expression -> . LPAREN expression RPAREN
    (166) expression -> . concat
    (167) expression -> . repeat
    (168) expression -> . partselect
    (169) expression -> . pointer
    (170) expression -> . functioncall
    (171) expression -> . systemcall
    (172) expression -> . identifier
    (173) expression -> . const_expression
    (174) concat -> . LBRACE concatlist RBRACE
    (177) repeat -> . LBRACE expression concat RBRACE
    (178) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (179) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (180) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (181) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (182) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (183) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (184) pointer -> . identifier LBRACKET expression RBRACKET
    (185) pointer -> . pointer LBRACKET expression RBRACKET
    (373) functioncall -> . identifier LPAREN func_args RPAREN
    (351) systemcall -> . DOLLER ID
    (352) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (353) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (392) identifier -> . ID
    (393) identifier -> . scope ID
    (186) const_expression -> . intnumber
    (187) const_expression -> . floatnumber
    (188) const_expression -> . stringliteral
    (394) scope -> . identifier DOT
    (395) scope -> . pointer DOT
    (190) intnumber -> . INTNUMBER_DEC
    (191) intnumber -> . SIGNED_INTNUMBER_DEC
    (192) intnumber -> . INTNUMBER_BIN
    (193) intnumber -> . SIGNED_INTNUMBER_BIN
    (194) intnumber -> . INTNUMBER_OCT
    (195) intnumber -> . SIGNED_INTNUMBER_OCT
    (196) intnumber -> . INTNUMBER_HEX
    (197) intnumber -> . SIGNED_INTNUMBER_HEX
    (189) floatnumber -> . FLOATNUMBER
    (198) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 88
    PLUS            shift and go to state 89
    LNOT            shift and go to state 90
    NOT             shift and go to state 91
    AND             shift and go to state 92
    NAND            shift and go to state 93
    NOR             shift and go to state 94
    OR              shift and go to state 95
    XOR             shift and go to state 96
    XNOR            shift and go to state 97
    LPAREN          shift and go to state 85
    LBRACE          shift and go to state 106
    DOLLER          shift and go to state 107
    ID              shift and go to state 86
    INTNUMBER_DEC   shift and go to state 112
    SIGNED_INTNUMBER_DEC shift and go to state 113
    INTNUMBER_BIN   shift and go to state 114
    SIGNED_INTNUMBER_BIN shift and go to state 115
    INTNUMBER_OCT   shift and go to state 116
    SIGNED_INTNUMBER_OCT shift and go to state 117
    INTNUMBER_HEX   shift and go to state 118
    SIGNED_INTNUMBER_HEX shift and go to state 119
    FLOATNUMBER     shift and go to state 120
    STRING_LITERAL  shift and go to state 121

    expression                     shift and go to state 407
    concat                         shift and go to state 98
    repeat                         shift and go to state 99
    partselect                     shift and go to state 100
    pointer                        shift and go to state 101
    functioncall                   shift and go to state 102
    systemcall                     shift and go to state 103
    identifier                     shift and go to state 104
    const_expression               shift and go to state 105
    scope                          shift and go to state 108
    intnumber                      shift and go to state 109
    floatnumber                    shift and go to state 110
    stringliteral                  shift and go to state 111

state 243

    (148) expression -> expression LSHIFTA . expression
    (130) expression -> . MINUS expression
    (131) expression -> . PLUS expression
    (132) expression -> . LNOT expression
    (133) expression -> . NOT expression
    (134) expression -> . AND expression
    (135) expression -> . NAND expression
    (136) expression -> . NOR expression
    (137) expression -> . OR expression
    (138) expression -> . XOR expression
    (139) expression -> . XNOR expression
    (140) expression -> . expression POWER expression
    (141) expression -> . expression TIMES expression
    (142) expression -> . expression DIVIDE expression
    (143) expression -> . expression MOD expression
    (144) expression -> . expression PLUS expression
    (145) expression -> . expression MINUS expression
    (146) expression -> . expression LSHIFT expression
    (147) expression -> . expression RSHIFT expression
    (148) expression -> . expression LSHIFTA expression
    (149) expression -> . expression RSHIFTA expression
    (150) expression -> . expression LT expression
    (151) expression -> . expression GT expression
    (152) expression -> . expression LE expression
    (153) expression -> . expression GE expression
    (154) expression -> . expression EQ expression
    (155) expression -> . expression NE expression
    (156) expression -> . expression EQL expression
    (157) expression -> . expression NEL expression
    (158) expression -> . expression AND expression
    (159) expression -> . expression XOR expression
    (160) expression -> . expression XNOR expression
    (161) expression -> . expression OR expression
    (162) expression -> . expression LAND expression
    (163) expression -> . expression LOR expression
    (164) expression -> . expression COND expression COLON expression
    (165) expression -> . LPAREN expression RPAREN
    (166) expression -> . concat
    (167) expression -> . repeat
    (168) expression -> . partselect
    (169) expression -> . pointer
    (170) expression -> . functioncall
    (171) expression -> . systemcall
    (172) expression -> . identifier
    (173) expression -> . const_expression
    (174) concat -> . LBRACE concatlist RBRACE
    (177) repeat -> . LBRACE expression concat RBRACE
    (178) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (179) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (180) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (181) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (182) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (183) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (184) pointer -> . identifier LBRACKET expression RBRACKET
    (185) pointer -> . pointer LBRACKET expression RBRACKET
    (373) functioncall -> . identifier LPAREN func_args RPAREN
    (351) systemcall -> . DOLLER ID
    (352) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (353) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (392) identifier -> . ID
    (393) identifier -> . scope ID
    (186) const_expression -> . intnumber
    (187) const_expression -> . floatnumber
    (188) const_expression -> . stringliteral
    (394) scope -> . identifier DOT
    (395) scope -> . pointer DOT
    (190) intnumber -> . INTNUMBER_DEC
    (191) intnumber -> . SIGNED_INTNUMBER_DEC
    (192) intnumber -> . INTNUMBER_BIN
    (193) intnumber -> . SIGNED_INTNUMBER_BIN
    (194) intnumber -> . INTNUMBER_OCT
    (195) intnumber -> . SIGNED_INTNUMBER_OCT
    (196) intnumber -> . INTNUMBER_HEX
    (197) intnumber -> . SIGNED_INTNUMBER_HEX
    (189) floatnumber -> . FLOATNUMBER
    (198) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 88
    PLUS            shift and go to state 89
    LNOT            shift and go to state 90
    NOT             shift and go to state 91
    AND             shift and go to state 92
    NAND            shift and go to state 93
    NOR             shift and go to state 94
    OR              shift and go to state 95
    XOR             shift and go to state 96
    XNOR            shift and go to state 97
    LPAREN          shift and go to state 85
    LBRACE          shift and go to state 106
    DOLLER          shift and go to state 107
    ID              shift and go to state 86
    INTNUMBER_DEC   shift and go to state 112
    SIGNED_INTNUMBER_DEC shift and go to state 113
    INTNUMBER_BIN   shift and go to state 114
    SIGNED_INTNUMBER_BIN shift and go to state 115
    INTNUMBER_OCT   shift and go to state 116
    SIGNED_INTNUMBER_OCT shift and go to state 117
    INTNUMBER_HEX   shift and go to state 118
    SIGNED_INTNUMBER_HEX shift and go to state 119
    FLOATNUMBER     shift and go to state 120
    STRING_LITERAL  shift and go to state 121

    expression                     shift and go to state 408
    concat                         shift and go to state 98
    repeat                         shift and go to state 99
    partselect                     shift and go to state 100
    pointer                        shift and go to state 101
    functioncall                   shift and go to state 102
    systemcall                     shift and go to state 103
    identifier                     shift and go to state 104
    const_expression               shift and go to state 105
    scope                          shift and go to state 108
    intnumber                      shift and go to state 109
    floatnumber                    shift and go to state 110
    stringliteral                  shift and go to state 111

state 244

    (149) expression -> expression RSHIFTA . expression
    (130) expression -> . MINUS expression
    (131) expression -> . PLUS expression
    (132) expression -> . LNOT expression
    (133) expression -> . NOT expression
    (134) expression -> . AND expression
    (135) expression -> . NAND expression
    (136) expression -> . NOR expression
    (137) expression -> . OR expression
    (138) expression -> . XOR expression
    (139) expression -> . XNOR expression
    (140) expression -> . expression POWER expression
    (141) expression -> . expression TIMES expression
    (142) expression -> . expression DIVIDE expression
    (143) expression -> . expression MOD expression
    (144) expression -> . expression PLUS expression
    (145) expression -> . expression MINUS expression
    (146) expression -> . expression LSHIFT expression
    (147) expression -> . expression RSHIFT expression
    (148) expression -> . expression LSHIFTA expression
    (149) expression -> . expression RSHIFTA expression
    (150) expression -> . expression LT expression
    (151) expression -> . expression GT expression
    (152) expression -> . expression LE expression
    (153) expression -> . expression GE expression
    (154) expression -> . expression EQ expression
    (155) expression -> . expression NE expression
    (156) expression -> . expression EQL expression
    (157) expression -> . expression NEL expression
    (158) expression -> . expression AND expression
    (159) expression -> . expression XOR expression
    (160) expression -> . expression XNOR expression
    (161) expression -> . expression OR expression
    (162) expression -> . expression LAND expression
    (163) expression -> . expression LOR expression
    (164) expression -> . expression COND expression COLON expression
    (165) expression -> . LPAREN expression RPAREN
    (166) expression -> . concat
    (167) expression -> . repeat
    (168) expression -> . partselect
    (169) expression -> . pointer
    (170) expression -> . functioncall
    (171) expression -> . systemcall
    (172) expression -> . identifier
    (173) expression -> . const_expression
    (174) concat -> . LBRACE concatlist RBRACE
    (177) repeat -> . LBRACE expression concat RBRACE
    (178) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (179) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (180) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (181) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (182) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (183) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (184) pointer -> . identifier LBRACKET expression RBRACKET
    (185) pointer -> . pointer LBRACKET expression RBRACKET
    (373) functioncall -> . identifier LPAREN func_args RPAREN
    (351) systemcall -> . DOLLER ID
    (352) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (353) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (392) identifier -> . ID
    (393) identifier -> . scope ID
    (186) const_expression -> . intnumber
    (187) const_expression -> . floatnumber
    (188) const_expression -> . stringliteral
    (394) scope -> . identifier DOT
    (395) scope -> . pointer DOT
    (190) intnumber -> . INTNUMBER_DEC
    (191) intnumber -> . SIGNED_INTNUMBER_DEC
    (192) intnumber -> . INTNUMBER_BIN
    (193) intnumber -> . SIGNED_INTNUMBER_BIN
    (194) intnumber -> . INTNUMBER_OCT
    (195) intnumber -> . SIGNED_INTNUMBER_OCT
    (196) intnumber -> . INTNUMBER_HEX
    (197) intnumber -> . SIGNED_INTNUMBER_HEX
    (189) floatnumber -> . FLOATNUMBER
    (198) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 88
    PLUS            shift and go to state 89
    LNOT            shift and go to state 90
    NOT             shift and go to state 91
    AND             shift and go to state 92
    NAND            shift and go to state 93
    NOR             shift and go to state 94
    OR              shift and go to state 95
    XOR             shift and go to state 96
    XNOR            shift and go to state 97
    LPAREN          shift and go to state 85
    LBRACE          shift and go to state 106
    DOLLER          shift and go to state 107
    ID              shift and go to state 86
    INTNUMBER_DEC   shift and go to state 112
    SIGNED_INTNUMBER_DEC shift and go to state 113
    INTNUMBER_BIN   shift and go to state 114
    SIGNED_INTNUMBER_BIN shift and go to state 115
    INTNUMBER_OCT   shift and go to state 116
    SIGNED_INTNUMBER_OCT shift and go to state 117
    INTNUMBER_HEX   shift and go to state 118
    SIGNED_INTNUMBER_HEX shift and go to state 119
    FLOATNUMBER     shift and go to state 120
    STRING_LITERAL  shift and go to state 121

    expression                     shift and go to state 409
    concat                         shift and go to state 98
    repeat                         shift and go to state 99
    partselect                     shift and go to state 100
    pointer                        shift and go to state 101
    functioncall                   shift and go to state 102
    systemcall                     shift and go to state 103
    identifier                     shift and go to state 104
    const_expression               shift and go to state 105
    scope                          shift and go to state 108
    intnumber                      shift and go to state 109
    floatnumber                    shift and go to state 110
    stringliteral                  shift and go to state 111

state 245

    (150) expression -> expression LT . expression
    (130) expression -> . MINUS expression
    (131) expression -> . PLUS expression
    (132) expression -> . LNOT expression
    (133) expression -> . NOT expression
    (134) expression -> . AND expression
    (135) expression -> . NAND expression
    (136) expression -> . NOR expression
    (137) expression -> . OR expression
    (138) expression -> . XOR expression
    (139) expression -> . XNOR expression
    (140) expression -> . expression POWER expression
    (141) expression -> . expression TIMES expression
    (142) expression -> . expression DIVIDE expression
    (143) expression -> . expression MOD expression
    (144) expression -> . expression PLUS expression
    (145) expression -> . expression MINUS expression
    (146) expression -> . expression LSHIFT expression
    (147) expression -> . expression RSHIFT expression
    (148) expression -> . expression LSHIFTA expression
    (149) expression -> . expression RSHIFTA expression
    (150) expression -> . expression LT expression
    (151) expression -> . expression GT expression
    (152) expression -> . expression LE expression
    (153) expression -> . expression GE expression
    (154) expression -> . expression EQ expression
    (155) expression -> . expression NE expression
    (156) expression -> . expression EQL expression
    (157) expression -> . expression NEL expression
    (158) expression -> . expression AND expression
    (159) expression -> . expression XOR expression
    (160) expression -> . expression XNOR expression
    (161) expression -> . expression OR expression
    (162) expression -> . expression LAND expression
    (163) expression -> . expression LOR expression
    (164) expression -> . expression COND expression COLON expression
    (165) expression -> . LPAREN expression RPAREN
    (166) expression -> . concat
    (167) expression -> . repeat
    (168) expression -> . partselect
    (169) expression -> . pointer
    (170) expression -> . functioncall
    (171) expression -> . systemcall
    (172) expression -> . identifier
    (173) expression -> . const_expression
    (174) concat -> . LBRACE concatlist RBRACE
    (177) repeat -> . LBRACE expression concat RBRACE
    (178) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (179) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (180) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (181) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (182) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (183) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (184) pointer -> . identifier LBRACKET expression RBRACKET
    (185) pointer -> . pointer LBRACKET expression RBRACKET
    (373) functioncall -> . identifier LPAREN func_args RPAREN
    (351) systemcall -> . DOLLER ID
    (352) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (353) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (392) identifier -> . ID
    (393) identifier -> . scope ID
    (186) const_expression -> . intnumber
    (187) const_expression -> . floatnumber
    (188) const_expression -> . stringliteral
    (394) scope -> . identifier DOT
    (395) scope -> . pointer DOT
    (190) intnumber -> . INTNUMBER_DEC
    (191) intnumber -> . SIGNED_INTNUMBER_DEC
    (192) intnumber -> . INTNUMBER_BIN
    (193) intnumber -> . SIGNED_INTNUMBER_BIN
    (194) intnumber -> . INTNUMBER_OCT
    (195) intnumber -> . SIGNED_INTNUMBER_OCT
    (196) intnumber -> . INTNUMBER_HEX
    (197) intnumber -> . SIGNED_INTNUMBER_HEX
    (189) floatnumber -> . FLOATNUMBER
    (198) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 88
    PLUS            shift and go to state 89
    LNOT            shift and go to state 90
    NOT             shift and go to state 91
    AND             shift and go to state 92
    NAND            shift and go to state 93
    NOR             shift and go to state 94
    OR              shift and go to state 95
    XOR             shift and go to state 96
    XNOR            shift and go to state 97
    LPAREN          shift and go to state 85
    LBRACE          shift and go to state 106
    DOLLER          shift and go to state 107
    ID              shift and go to state 86
    INTNUMBER_DEC   shift and go to state 112
    SIGNED_INTNUMBER_DEC shift and go to state 113
    INTNUMBER_BIN   shift and go to state 114
    SIGNED_INTNUMBER_BIN shift and go to state 115
    INTNUMBER_OCT   shift and go to state 116
    SIGNED_INTNUMBER_OCT shift and go to state 117
    INTNUMBER_HEX   shift and go to state 118
    SIGNED_INTNUMBER_HEX shift and go to state 119
    FLOATNUMBER     shift and go to state 120
    STRING_LITERAL  shift and go to state 121

    expression                     shift and go to state 410
    concat                         shift and go to state 98
    repeat                         shift and go to state 99
    partselect                     shift and go to state 100
    pointer                        shift and go to state 101
    functioncall                   shift and go to state 102
    systemcall                     shift and go to state 103
    identifier                     shift and go to state 104
    const_expression               shift and go to state 105
    scope                          shift and go to state 108
    intnumber                      shift and go to state 109
    floatnumber                    shift and go to state 110
    stringliteral                  shift and go to state 111

state 246

    (151) expression -> expression GT . expression
    (130) expression -> . MINUS expression
    (131) expression -> . PLUS expression
    (132) expression -> . LNOT expression
    (133) expression -> . NOT expression
    (134) expression -> . AND expression
    (135) expression -> . NAND expression
    (136) expression -> . NOR expression
    (137) expression -> . OR expression
    (138) expression -> . XOR expression
    (139) expression -> . XNOR expression
    (140) expression -> . expression POWER expression
    (141) expression -> . expression TIMES expression
    (142) expression -> . expression DIVIDE expression
    (143) expression -> . expression MOD expression
    (144) expression -> . expression PLUS expression
    (145) expression -> . expression MINUS expression
    (146) expression -> . expression LSHIFT expression
    (147) expression -> . expression RSHIFT expression
    (148) expression -> . expression LSHIFTA expression
    (149) expression -> . expression RSHIFTA expression
    (150) expression -> . expression LT expression
    (151) expression -> . expression GT expression
    (152) expression -> . expression LE expression
    (153) expression -> . expression GE expression
    (154) expression -> . expression EQ expression
    (155) expression -> . expression NE expression
    (156) expression -> . expression EQL expression
    (157) expression -> . expression NEL expression
    (158) expression -> . expression AND expression
    (159) expression -> . expression XOR expression
    (160) expression -> . expression XNOR expression
    (161) expression -> . expression OR expression
    (162) expression -> . expression LAND expression
    (163) expression -> . expression LOR expression
    (164) expression -> . expression COND expression COLON expression
    (165) expression -> . LPAREN expression RPAREN
    (166) expression -> . concat
    (167) expression -> . repeat
    (168) expression -> . partselect
    (169) expression -> . pointer
    (170) expression -> . functioncall
    (171) expression -> . systemcall
    (172) expression -> . identifier
    (173) expression -> . const_expression
    (174) concat -> . LBRACE concatlist RBRACE
    (177) repeat -> . LBRACE expression concat RBRACE
    (178) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (179) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (180) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (181) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (182) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (183) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (184) pointer -> . identifier LBRACKET expression RBRACKET
    (185) pointer -> . pointer LBRACKET expression RBRACKET
    (373) functioncall -> . identifier LPAREN func_args RPAREN
    (351) systemcall -> . DOLLER ID
    (352) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (353) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (392) identifier -> . ID
    (393) identifier -> . scope ID
    (186) const_expression -> . intnumber
    (187) const_expression -> . floatnumber
    (188) const_expression -> . stringliteral
    (394) scope -> . identifier DOT
    (395) scope -> . pointer DOT
    (190) intnumber -> . INTNUMBER_DEC
    (191) intnumber -> . SIGNED_INTNUMBER_DEC
    (192) intnumber -> . INTNUMBER_BIN
    (193) intnumber -> . SIGNED_INTNUMBER_BIN
    (194) intnumber -> . INTNUMBER_OCT
    (195) intnumber -> . SIGNED_INTNUMBER_OCT
    (196) intnumber -> . INTNUMBER_HEX
    (197) intnumber -> . SIGNED_INTNUMBER_HEX
    (189) floatnumber -> . FLOATNUMBER
    (198) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 88
    PLUS            shift and go to state 89
    LNOT            shift and go to state 90
    NOT             shift and go to state 91
    AND             shift and go to state 92
    NAND            shift and go to state 93
    NOR             shift and go to state 94
    OR              shift and go to state 95
    XOR             shift and go to state 96
    XNOR            shift and go to state 97
    LPAREN          shift and go to state 85
    LBRACE          shift and go to state 106
    DOLLER          shift and go to state 107
    ID              shift and go to state 86
    INTNUMBER_DEC   shift and go to state 112
    SIGNED_INTNUMBER_DEC shift and go to state 113
    INTNUMBER_BIN   shift and go to state 114
    SIGNED_INTNUMBER_BIN shift and go to state 115
    INTNUMBER_OCT   shift and go to state 116
    SIGNED_INTNUMBER_OCT shift and go to state 117
    INTNUMBER_HEX   shift and go to state 118
    SIGNED_INTNUMBER_HEX shift and go to state 119
    FLOATNUMBER     shift and go to state 120
    STRING_LITERAL  shift and go to state 121

    expression                     shift and go to state 411
    concat                         shift and go to state 98
    repeat                         shift and go to state 99
    partselect                     shift and go to state 100
    pointer                        shift and go to state 101
    functioncall                   shift and go to state 102
    systemcall                     shift and go to state 103
    identifier                     shift and go to state 104
    const_expression               shift and go to state 105
    scope                          shift and go to state 108
    intnumber                      shift and go to state 109
    floatnumber                    shift and go to state 110
    stringliteral                  shift and go to state 111

state 247

    (152) expression -> expression LE . expression
    (130) expression -> . MINUS expression
    (131) expression -> . PLUS expression
    (132) expression -> . LNOT expression
    (133) expression -> . NOT expression
    (134) expression -> . AND expression
    (135) expression -> . NAND expression
    (136) expression -> . NOR expression
    (137) expression -> . OR expression
    (138) expression -> . XOR expression
    (139) expression -> . XNOR expression
    (140) expression -> . expression POWER expression
    (141) expression -> . expression TIMES expression
    (142) expression -> . expression DIVIDE expression
    (143) expression -> . expression MOD expression
    (144) expression -> . expression PLUS expression
    (145) expression -> . expression MINUS expression
    (146) expression -> . expression LSHIFT expression
    (147) expression -> . expression RSHIFT expression
    (148) expression -> . expression LSHIFTA expression
    (149) expression -> . expression RSHIFTA expression
    (150) expression -> . expression LT expression
    (151) expression -> . expression GT expression
    (152) expression -> . expression LE expression
    (153) expression -> . expression GE expression
    (154) expression -> . expression EQ expression
    (155) expression -> . expression NE expression
    (156) expression -> . expression EQL expression
    (157) expression -> . expression NEL expression
    (158) expression -> . expression AND expression
    (159) expression -> . expression XOR expression
    (160) expression -> . expression XNOR expression
    (161) expression -> . expression OR expression
    (162) expression -> . expression LAND expression
    (163) expression -> . expression LOR expression
    (164) expression -> . expression COND expression COLON expression
    (165) expression -> . LPAREN expression RPAREN
    (166) expression -> . concat
    (167) expression -> . repeat
    (168) expression -> . partselect
    (169) expression -> . pointer
    (170) expression -> . functioncall
    (171) expression -> . systemcall
    (172) expression -> . identifier
    (173) expression -> . const_expression
    (174) concat -> . LBRACE concatlist RBRACE
    (177) repeat -> . LBRACE expression concat RBRACE
    (178) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (179) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (180) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (181) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (182) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (183) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (184) pointer -> . identifier LBRACKET expression RBRACKET
    (185) pointer -> . pointer LBRACKET expression RBRACKET
    (373) functioncall -> . identifier LPAREN func_args RPAREN
    (351) systemcall -> . DOLLER ID
    (352) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (353) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (392) identifier -> . ID
    (393) identifier -> . scope ID
    (186) const_expression -> . intnumber
    (187) const_expression -> . floatnumber
    (188) const_expression -> . stringliteral
    (394) scope -> . identifier DOT
    (395) scope -> . pointer DOT
    (190) intnumber -> . INTNUMBER_DEC
    (191) intnumber -> . SIGNED_INTNUMBER_DEC
    (192) intnumber -> . INTNUMBER_BIN
    (193) intnumber -> . SIGNED_INTNUMBER_BIN
    (194) intnumber -> . INTNUMBER_OCT
    (195) intnumber -> . SIGNED_INTNUMBER_OCT
    (196) intnumber -> . INTNUMBER_HEX
    (197) intnumber -> . SIGNED_INTNUMBER_HEX
    (189) floatnumber -> . FLOATNUMBER
    (198) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 88
    PLUS            shift and go to state 89
    LNOT            shift and go to state 90
    NOT             shift and go to state 91
    AND             shift and go to state 92
    NAND            shift and go to state 93
    NOR             shift and go to state 94
    OR              shift and go to state 95
    XOR             shift and go to state 96
    XNOR            shift and go to state 97
    LPAREN          shift and go to state 85
    LBRACE          shift and go to state 106
    DOLLER          shift and go to state 107
    ID              shift and go to state 86
    INTNUMBER_DEC   shift and go to state 112
    SIGNED_INTNUMBER_DEC shift and go to state 113
    INTNUMBER_BIN   shift and go to state 114
    SIGNED_INTNUMBER_BIN shift and go to state 115
    INTNUMBER_OCT   shift and go to state 116
    SIGNED_INTNUMBER_OCT shift and go to state 117
    INTNUMBER_HEX   shift and go to state 118
    SIGNED_INTNUMBER_HEX shift and go to state 119
    FLOATNUMBER     shift and go to state 120
    STRING_LITERAL  shift and go to state 121

    expression                     shift and go to state 412
    concat                         shift and go to state 98
    repeat                         shift and go to state 99
    partselect                     shift and go to state 100
    pointer                        shift and go to state 101
    functioncall                   shift and go to state 102
    systemcall                     shift and go to state 103
    identifier                     shift and go to state 104
    const_expression               shift and go to state 105
    scope                          shift and go to state 108
    intnumber                      shift and go to state 109
    floatnumber                    shift and go to state 110
    stringliteral                  shift and go to state 111

state 248

    (153) expression -> expression GE . expression
    (130) expression -> . MINUS expression
    (131) expression -> . PLUS expression
    (132) expression -> . LNOT expression
    (133) expression -> . NOT expression
    (134) expression -> . AND expression
    (135) expression -> . NAND expression
    (136) expression -> . NOR expression
    (137) expression -> . OR expression
    (138) expression -> . XOR expression
    (139) expression -> . XNOR expression
    (140) expression -> . expression POWER expression
    (141) expression -> . expression TIMES expression
    (142) expression -> . expression DIVIDE expression
    (143) expression -> . expression MOD expression
    (144) expression -> . expression PLUS expression
    (145) expression -> . expression MINUS expression
    (146) expression -> . expression LSHIFT expression
    (147) expression -> . expression RSHIFT expression
    (148) expression -> . expression LSHIFTA expression
    (149) expression -> . expression RSHIFTA expression
    (150) expression -> . expression LT expression
    (151) expression -> . expression GT expression
    (152) expression -> . expression LE expression
    (153) expression -> . expression GE expression
    (154) expression -> . expression EQ expression
    (155) expression -> . expression NE expression
    (156) expression -> . expression EQL expression
    (157) expression -> . expression NEL expression
    (158) expression -> . expression AND expression
    (159) expression -> . expression XOR expression
    (160) expression -> . expression XNOR expression
    (161) expression -> . expression OR expression
    (162) expression -> . expression LAND expression
    (163) expression -> . expression LOR expression
    (164) expression -> . expression COND expression COLON expression
    (165) expression -> . LPAREN expression RPAREN
    (166) expression -> . concat
    (167) expression -> . repeat
    (168) expression -> . partselect
    (169) expression -> . pointer
    (170) expression -> . functioncall
    (171) expression -> . systemcall
    (172) expression -> . identifier
    (173) expression -> . const_expression
    (174) concat -> . LBRACE concatlist RBRACE
    (177) repeat -> . LBRACE expression concat RBRACE
    (178) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (179) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (180) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (181) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (182) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (183) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (184) pointer -> . identifier LBRACKET expression RBRACKET
    (185) pointer -> . pointer LBRACKET expression RBRACKET
    (373) functioncall -> . identifier LPAREN func_args RPAREN
    (351) systemcall -> . DOLLER ID
    (352) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (353) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (392) identifier -> . ID
    (393) identifier -> . scope ID
    (186) const_expression -> . intnumber
    (187) const_expression -> . floatnumber
    (188) const_expression -> . stringliteral
    (394) scope -> . identifier DOT
    (395) scope -> . pointer DOT
    (190) intnumber -> . INTNUMBER_DEC
    (191) intnumber -> . SIGNED_INTNUMBER_DEC
    (192) intnumber -> . INTNUMBER_BIN
    (193) intnumber -> . SIGNED_INTNUMBER_BIN
    (194) intnumber -> . INTNUMBER_OCT
    (195) intnumber -> . SIGNED_INTNUMBER_OCT
    (196) intnumber -> . INTNUMBER_HEX
    (197) intnumber -> . SIGNED_INTNUMBER_HEX
    (189) floatnumber -> . FLOATNUMBER
    (198) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 88
    PLUS            shift and go to state 89
    LNOT            shift and go to state 90
    NOT             shift and go to state 91
    AND             shift and go to state 92
    NAND            shift and go to state 93
    NOR             shift and go to state 94
    OR              shift and go to state 95
    XOR             shift and go to state 96
    XNOR            shift and go to state 97
    LPAREN          shift and go to state 85
    LBRACE          shift and go to state 106
    DOLLER          shift and go to state 107
    ID              shift and go to state 86
    INTNUMBER_DEC   shift and go to state 112
    SIGNED_INTNUMBER_DEC shift and go to state 113
    INTNUMBER_BIN   shift and go to state 114
    SIGNED_INTNUMBER_BIN shift and go to state 115
    INTNUMBER_OCT   shift and go to state 116
    SIGNED_INTNUMBER_OCT shift and go to state 117
    INTNUMBER_HEX   shift and go to state 118
    SIGNED_INTNUMBER_HEX shift and go to state 119
    FLOATNUMBER     shift and go to state 120
    STRING_LITERAL  shift and go to state 121

    expression                     shift and go to state 413
    concat                         shift and go to state 98
    repeat                         shift and go to state 99
    partselect                     shift and go to state 100
    pointer                        shift and go to state 101
    functioncall                   shift and go to state 102
    systemcall                     shift and go to state 103
    identifier                     shift and go to state 104
    const_expression               shift and go to state 105
    scope                          shift and go to state 108
    intnumber                      shift and go to state 109
    floatnumber                    shift and go to state 110
    stringliteral                  shift and go to state 111

state 249

    (154) expression -> expression EQ . expression
    (130) expression -> . MINUS expression
    (131) expression -> . PLUS expression
    (132) expression -> . LNOT expression
    (133) expression -> . NOT expression
    (134) expression -> . AND expression
    (135) expression -> . NAND expression
    (136) expression -> . NOR expression
    (137) expression -> . OR expression
    (138) expression -> . XOR expression
    (139) expression -> . XNOR expression
    (140) expression -> . expression POWER expression
    (141) expression -> . expression TIMES expression
    (142) expression -> . expression DIVIDE expression
    (143) expression -> . expression MOD expression
    (144) expression -> . expression PLUS expression
    (145) expression -> . expression MINUS expression
    (146) expression -> . expression LSHIFT expression
    (147) expression -> . expression RSHIFT expression
    (148) expression -> . expression LSHIFTA expression
    (149) expression -> . expression RSHIFTA expression
    (150) expression -> . expression LT expression
    (151) expression -> . expression GT expression
    (152) expression -> . expression LE expression
    (153) expression -> . expression GE expression
    (154) expression -> . expression EQ expression
    (155) expression -> . expression NE expression
    (156) expression -> . expression EQL expression
    (157) expression -> . expression NEL expression
    (158) expression -> . expression AND expression
    (159) expression -> . expression XOR expression
    (160) expression -> . expression XNOR expression
    (161) expression -> . expression OR expression
    (162) expression -> . expression LAND expression
    (163) expression -> . expression LOR expression
    (164) expression -> . expression COND expression COLON expression
    (165) expression -> . LPAREN expression RPAREN
    (166) expression -> . concat
    (167) expression -> . repeat
    (168) expression -> . partselect
    (169) expression -> . pointer
    (170) expression -> . functioncall
    (171) expression -> . systemcall
    (172) expression -> . identifier
    (173) expression -> . const_expression
    (174) concat -> . LBRACE concatlist RBRACE
    (177) repeat -> . LBRACE expression concat RBRACE
    (178) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (179) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (180) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (181) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (182) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (183) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (184) pointer -> . identifier LBRACKET expression RBRACKET
    (185) pointer -> . pointer LBRACKET expression RBRACKET
    (373) functioncall -> . identifier LPAREN func_args RPAREN
    (351) systemcall -> . DOLLER ID
    (352) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (353) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (392) identifier -> . ID
    (393) identifier -> . scope ID
    (186) const_expression -> . intnumber
    (187) const_expression -> . floatnumber
    (188) const_expression -> . stringliteral
    (394) scope -> . identifier DOT
    (395) scope -> . pointer DOT
    (190) intnumber -> . INTNUMBER_DEC
    (191) intnumber -> . SIGNED_INTNUMBER_DEC
    (192) intnumber -> . INTNUMBER_BIN
    (193) intnumber -> . SIGNED_INTNUMBER_BIN
    (194) intnumber -> . INTNUMBER_OCT
    (195) intnumber -> . SIGNED_INTNUMBER_OCT
    (196) intnumber -> . INTNUMBER_HEX
    (197) intnumber -> . SIGNED_INTNUMBER_HEX
    (189) floatnumber -> . FLOATNUMBER
    (198) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 88
    PLUS            shift and go to state 89
    LNOT            shift and go to state 90
    NOT             shift and go to state 91
    AND             shift and go to state 92
    NAND            shift and go to state 93
    NOR             shift and go to state 94
    OR              shift and go to state 95
    XOR             shift and go to state 96
    XNOR            shift and go to state 97
    LPAREN          shift and go to state 85
    LBRACE          shift and go to state 106
    DOLLER          shift and go to state 107
    ID              shift and go to state 86
    INTNUMBER_DEC   shift and go to state 112
    SIGNED_INTNUMBER_DEC shift and go to state 113
    INTNUMBER_BIN   shift and go to state 114
    SIGNED_INTNUMBER_BIN shift and go to state 115
    INTNUMBER_OCT   shift and go to state 116
    SIGNED_INTNUMBER_OCT shift and go to state 117
    INTNUMBER_HEX   shift and go to state 118
    SIGNED_INTNUMBER_HEX shift and go to state 119
    FLOATNUMBER     shift and go to state 120
    STRING_LITERAL  shift and go to state 121

    expression                     shift and go to state 414
    concat                         shift and go to state 98
    repeat                         shift and go to state 99
    partselect                     shift and go to state 100
    pointer                        shift and go to state 101
    functioncall                   shift and go to state 102
    systemcall                     shift and go to state 103
    identifier                     shift and go to state 104
    const_expression               shift and go to state 105
    scope                          shift and go to state 108
    intnumber                      shift and go to state 109
    floatnumber                    shift and go to state 110
    stringliteral                  shift and go to state 111

state 250

    (155) expression -> expression NE . expression
    (130) expression -> . MINUS expression
    (131) expression -> . PLUS expression
    (132) expression -> . LNOT expression
    (133) expression -> . NOT expression
    (134) expression -> . AND expression
    (135) expression -> . NAND expression
    (136) expression -> . NOR expression
    (137) expression -> . OR expression
    (138) expression -> . XOR expression
    (139) expression -> . XNOR expression
    (140) expression -> . expression POWER expression
    (141) expression -> . expression TIMES expression
    (142) expression -> . expression DIVIDE expression
    (143) expression -> . expression MOD expression
    (144) expression -> . expression PLUS expression
    (145) expression -> . expression MINUS expression
    (146) expression -> . expression LSHIFT expression
    (147) expression -> . expression RSHIFT expression
    (148) expression -> . expression LSHIFTA expression
    (149) expression -> . expression RSHIFTA expression
    (150) expression -> . expression LT expression
    (151) expression -> . expression GT expression
    (152) expression -> . expression LE expression
    (153) expression -> . expression GE expression
    (154) expression -> . expression EQ expression
    (155) expression -> . expression NE expression
    (156) expression -> . expression EQL expression
    (157) expression -> . expression NEL expression
    (158) expression -> . expression AND expression
    (159) expression -> . expression XOR expression
    (160) expression -> . expression XNOR expression
    (161) expression -> . expression OR expression
    (162) expression -> . expression LAND expression
    (163) expression -> . expression LOR expression
    (164) expression -> . expression COND expression COLON expression
    (165) expression -> . LPAREN expression RPAREN
    (166) expression -> . concat
    (167) expression -> . repeat
    (168) expression -> . partselect
    (169) expression -> . pointer
    (170) expression -> . functioncall
    (171) expression -> . systemcall
    (172) expression -> . identifier
    (173) expression -> . const_expression
    (174) concat -> . LBRACE concatlist RBRACE
    (177) repeat -> . LBRACE expression concat RBRACE
    (178) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (179) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (180) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (181) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (182) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (183) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (184) pointer -> . identifier LBRACKET expression RBRACKET
    (185) pointer -> . pointer LBRACKET expression RBRACKET
    (373) functioncall -> . identifier LPAREN func_args RPAREN
    (351) systemcall -> . DOLLER ID
    (352) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (353) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (392) identifier -> . ID
    (393) identifier -> . scope ID
    (186) const_expression -> . intnumber
    (187) const_expression -> . floatnumber
    (188) const_expression -> . stringliteral
    (394) scope -> . identifier DOT
    (395) scope -> . pointer DOT
    (190) intnumber -> . INTNUMBER_DEC
    (191) intnumber -> . SIGNED_INTNUMBER_DEC
    (192) intnumber -> . INTNUMBER_BIN
    (193) intnumber -> . SIGNED_INTNUMBER_BIN
    (194) intnumber -> . INTNUMBER_OCT
    (195) intnumber -> . SIGNED_INTNUMBER_OCT
    (196) intnumber -> . INTNUMBER_HEX
    (197) intnumber -> . SIGNED_INTNUMBER_HEX
    (189) floatnumber -> . FLOATNUMBER
    (198) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 88
    PLUS            shift and go to state 89
    LNOT            shift and go to state 90
    NOT             shift and go to state 91
    AND             shift and go to state 92
    NAND            shift and go to state 93
    NOR             shift and go to state 94
    OR              shift and go to state 95
    XOR             shift and go to state 96
    XNOR            shift and go to state 97
    LPAREN          shift and go to state 85
    LBRACE          shift and go to state 106
    DOLLER          shift and go to state 107
    ID              shift and go to state 86
    INTNUMBER_DEC   shift and go to state 112
    SIGNED_INTNUMBER_DEC shift and go to state 113
    INTNUMBER_BIN   shift and go to state 114
    SIGNED_INTNUMBER_BIN shift and go to state 115
    INTNUMBER_OCT   shift and go to state 116
    SIGNED_INTNUMBER_OCT shift and go to state 117
    INTNUMBER_HEX   shift and go to state 118
    SIGNED_INTNUMBER_HEX shift and go to state 119
    FLOATNUMBER     shift and go to state 120
    STRING_LITERAL  shift and go to state 121

    expression                     shift and go to state 415
    concat                         shift and go to state 98
    repeat                         shift and go to state 99
    partselect                     shift and go to state 100
    pointer                        shift and go to state 101
    functioncall                   shift and go to state 102
    systemcall                     shift and go to state 103
    identifier                     shift and go to state 104
    const_expression               shift and go to state 105
    scope                          shift and go to state 108
    intnumber                      shift and go to state 109
    floatnumber                    shift and go to state 110
    stringliteral                  shift and go to state 111

state 251

    (156) expression -> expression EQL . expression
    (130) expression -> . MINUS expression
    (131) expression -> . PLUS expression
    (132) expression -> . LNOT expression
    (133) expression -> . NOT expression
    (134) expression -> . AND expression
    (135) expression -> . NAND expression
    (136) expression -> . NOR expression
    (137) expression -> . OR expression
    (138) expression -> . XOR expression
    (139) expression -> . XNOR expression
    (140) expression -> . expression POWER expression
    (141) expression -> . expression TIMES expression
    (142) expression -> . expression DIVIDE expression
    (143) expression -> . expression MOD expression
    (144) expression -> . expression PLUS expression
    (145) expression -> . expression MINUS expression
    (146) expression -> . expression LSHIFT expression
    (147) expression -> . expression RSHIFT expression
    (148) expression -> . expression LSHIFTA expression
    (149) expression -> . expression RSHIFTA expression
    (150) expression -> . expression LT expression
    (151) expression -> . expression GT expression
    (152) expression -> . expression LE expression
    (153) expression -> . expression GE expression
    (154) expression -> . expression EQ expression
    (155) expression -> . expression NE expression
    (156) expression -> . expression EQL expression
    (157) expression -> . expression NEL expression
    (158) expression -> . expression AND expression
    (159) expression -> . expression XOR expression
    (160) expression -> . expression XNOR expression
    (161) expression -> . expression OR expression
    (162) expression -> . expression LAND expression
    (163) expression -> . expression LOR expression
    (164) expression -> . expression COND expression COLON expression
    (165) expression -> . LPAREN expression RPAREN
    (166) expression -> . concat
    (167) expression -> . repeat
    (168) expression -> . partselect
    (169) expression -> . pointer
    (170) expression -> . functioncall
    (171) expression -> . systemcall
    (172) expression -> . identifier
    (173) expression -> . const_expression
    (174) concat -> . LBRACE concatlist RBRACE
    (177) repeat -> . LBRACE expression concat RBRACE
    (178) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (179) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (180) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (181) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (182) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (183) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (184) pointer -> . identifier LBRACKET expression RBRACKET
    (185) pointer -> . pointer LBRACKET expression RBRACKET
    (373) functioncall -> . identifier LPAREN func_args RPAREN
    (351) systemcall -> . DOLLER ID
    (352) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (353) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (392) identifier -> . ID
    (393) identifier -> . scope ID
    (186) const_expression -> . intnumber
    (187) const_expression -> . floatnumber
    (188) const_expression -> . stringliteral
    (394) scope -> . identifier DOT
    (395) scope -> . pointer DOT
    (190) intnumber -> . INTNUMBER_DEC
    (191) intnumber -> . SIGNED_INTNUMBER_DEC
    (192) intnumber -> . INTNUMBER_BIN
    (193) intnumber -> . SIGNED_INTNUMBER_BIN
    (194) intnumber -> . INTNUMBER_OCT
    (195) intnumber -> . SIGNED_INTNUMBER_OCT
    (196) intnumber -> . INTNUMBER_HEX
    (197) intnumber -> . SIGNED_INTNUMBER_HEX
    (189) floatnumber -> . FLOATNUMBER
    (198) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 88
    PLUS            shift and go to state 89
    LNOT            shift and go to state 90
    NOT             shift and go to state 91
    AND             shift and go to state 92
    NAND            shift and go to state 93
    NOR             shift and go to state 94
    OR              shift and go to state 95
    XOR             shift and go to state 96
    XNOR            shift and go to state 97
    LPAREN          shift and go to state 85
    LBRACE          shift and go to state 106
    DOLLER          shift and go to state 107
    ID              shift and go to state 86
    INTNUMBER_DEC   shift and go to state 112
    SIGNED_INTNUMBER_DEC shift and go to state 113
    INTNUMBER_BIN   shift and go to state 114
    SIGNED_INTNUMBER_BIN shift and go to state 115
    INTNUMBER_OCT   shift and go to state 116
    SIGNED_INTNUMBER_OCT shift and go to state 117
    INTNUMBER_HEX   shift and go to state 118
    SIGNED_INTNUMBER_HEX shift and go to state 119
    FLOATNUMBER     shift and go to state 120
    STRING_LITERAL  shift and go to state 121

    expression                     shift and go to state 416
    concat                         shift and go to state 98
    repeat                         shift and go to state 99
    partselect                     shift and go to state 100
    pointer                        shift and go to state 101
    functioncall                   shift and go to state 102
    systemcall                     shift and go to state 103
    identifier                     shift and go to state 104
    const_expression               shift and go to state 105
    scope                          shift and go to state 108
    intnumber                      shift and go to state 109
    floatnumber                    shift and go to state 110
    stringliteral                  shift and go to state 111

state 252

    (157) expression -> expression NEL . expression
    (130) expression -> . MINUS expression
    (131) expression -> . PLUS expression
    (132) expression -> . LNOT expression
    (133) expression -> . NOT expression
    (134) expression -> . AND expression
    (135) expression -> . NAND expression
    (136) expression -> . NOR expression
    (137) expression -> . OR expression
    (138) expression -> . XOR expression
    (139) expression -> . XNOR expression
    (140) expression -> . expression POWER expression
    (141) expression -> . expression TIMES expression
    (142) expression -> . expression DIVIDE expression
    (143) expression -> . expression MOD expression
    (144) expression -> . expression PLUS expression
    (145) expression -> . expression MINUS expression
    (146) expression -> . expression LSHIFT expression
    (147) expression -> . expression RSHIFT expression
    (148) expression -> . expression LSHIFTA expression
    (149) expression -> . expression RSHIFTA expression
    (150) expression -> . expression LT expression
    (151) expression -> . expression GT expression
    (152) expression -> . expression LE expression
    (153) expression -> . expression GE expression
    (154) expression -> . expression EQ expression
    (155) expression -> . expression NE expression
    (156) expression -> . expression EQL expression
    (157) expression -> . expression NEL expression
    (158) expression -> . expression AND expression
    (159) expression -> . expression XOR expression
    (160) expression -> . expression XNOR expression
    (161) expression -> . expression OR expression
    (162) expression -> . expression LAND expression
    (163) expression -> . expression LOR expression
    (164) expression -> . expression COND expression COLON expression
    (165) expression -> . LPAREN expression RPAREN
    (166) expression -> . concat
    (167) expression -> . repeat
    (168) expression -> . partselect
    (169) expression -> . pointer
    (170) expression -> . functioncall
    (171) expression -> . systemcall
    (172) expression -> . identifier
    (173) expression -> . const_expression
    (174) concat -> . LBRACE concatlist RBRACE
    (177) repeat -> . LBRACE expression concat RBRACE
    (178) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (179) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (180) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (181) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (182) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (183) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (184) pointer -> . identifier LBRACKET expression RBRACKET
    (185) pointer -> . pointer LBRACKET expression RBRACKET
    (373) functioncall -> . identifier LPAREN func_args RPAREN
    (351) systemcall -> . DOLLER ID
    (352) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (353) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (392) identifier -> . ID
    (393) identifier -> . scope ID
    (186) const_expression -> . intnumber
    (187) const_expression -> . floatnumber
    (188) const_expression -> . stringliteral
    (394) scope -> . identifier DOT
    (395) scope -> . pointer DOT
    (190) intnumber -> . INTNUMBER_DEC
    (191) intnumber -> . SIGNED_INTNUMBER_DEC
    (192) intnumber -> . INTNUMBER_BIN
    (193) intnumber -> . SIGNED_INTNUMBER_BIN
    (194) intnumber -> . INTNUMBER_OCT
    (195) intnumber -> . SIGNED_INTNUMBER_OCT
    (196) intnumber -> . INTNUMBER_HEX
    (197) intnumber -> . SIGNED_INTNUMBER_HEX
    (189) floatnumber -> . FLOATNUMBER
    (198) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 88
    PLUS            shift and go to state 89
    LNOT            shift and go to state 90
    NOT             shift and go to state 91
    AND             shift and go to state 92
    NAND            shift and go to state 93
    NOR             shift and go to state 94
    OR              shift and go to state 95
    XOR             shift and go to state 96
    XNOR            shift and go to state 97
    LPAREN          shift and go to state 85
    LBRACE          shift and go to state 106
    DOLLER          shift and go to state 107
    ID              shift and go to state 86
    INTNUMBER_DEC   shift and go to state 112
    SIGNED_INTNUMBER_DEC shift and go to state 113
    INTNUMBER_BIN   shift and go to state 114
    SIGNED_INTNUMBER_BIN shift and go to state 115
    INTNUMBER_OCT   shift and go to state 116
    SIGNED_INTNUMBER_OCT shift and go to state 117
    INTNUMBER_HEX   shift and go to state 118
    SIGNED_INTNUMBER_HEX shift and go to state 119
    FLOATNUMBER     shift and go to state 120
    STRING_LITERAL  shift and go to state 121

    expression                     shift and go to state 417
    concat                         shift and go to state 98
    repeat                         shift and go to state 99
    partselect                     shift and go to state 100
    pointer                        shift and go to state 101
    functioncall                   shift and go to state 102
    systemcall                     shift and go to state 103
    identifier                     shift and go to state 104
    const_expression               shift and go to state 105
    scope                          shift and go to state 108
    intnumber                      shift and go to state 109
    floatnumber                    shift and go to state 110
    stringliteral                  shift and go to state 111

state 253

    (158) expression -> expression AND . expression
    (130) expression -> . MINUS expression
    (131) expression -> . PLUS expression
    (132) expression -> . LNOT expression
    (133) expression -> . NOT expression
    (134) expression -> . AND expression
    (135) expression -> . NAND expression
    (136) expression -> . NOR expression
    (137) expression -> . OR expression
    (138) expression -> . XOR expression
    (139) expression -> . XNOR expression
    (140) expression -> . expression POWER expression
    (141) expression -> . expression TIMES expression
    (142) expression -> . expression DIVIDE expression
    (143) expression -> . expression MOD expression
    (144) expression -> . expression PLUS expression
    (145) expression -> . expression MINUS expression
    (146) expression -> . expression LSHIFT expression
    (147) expression -> . expression RSHIFT expression
    (148) expression -> . expression LSHIFTA expression
    (149) expression -> . expression RSHIFTA expression
    (150) expression -> . expression LT expression
    (151) expression -> . expression GT expression
    (152) expression -> . expression LE expression
    (153) expression -> . expression GE expression
    (154) expression -> . expression EQ expression
    (155) expression -> . expression NE expression
    (156) expression -> . expression EQL expression
    (157) expression -> . expression NEL expression
    (158) expression -> . expression AND expression
    (159) expression -> . expression XOR expression
    (160) expression -> . expression XNOR expression
    (161) expression -> . expression OR expression
    (162) expression -> . expression LAND expression
    (163) expression -> . expression LOR expression
    (164) expression -> . expression COND expression COLON expression
    (165) expression -> . LPAREN expression RPAREN
    (166) expression -> . concat
    (167) expression -> . repeat
    (168) expression -> . partselect
    (169) expression -> . pointer
    (170) expression -> . functioncall
    (171) expression -> . systemcall
    (172) expression -> . identifier
    (173) expression -> . const_expression
    (174) concat -> . LBRACE concatlist RBRACE
    (177) repeat -> . LBRACE expression concat RBRACE
    (178) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (179) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (180) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (181) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (182) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (183) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (184) pointer -> . identifier LBRACKET expression RBRACKET
    (185) pointer -> . pointer LBRACKET expression RBRACKET
    (373) functioncall -> . identifier LPAREN func_args RPAREN
    (351) systemcall -> . DOLLER ID
    (352) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (353) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (392) identifier -> . ID
    (393) identifier -> . scope ID
    (186) const_expression -> . intnumber
    (187) const_expression -> . floatnumber
    (188) const_expression -> . stringliteral
    (394) scope -> . identifier DOT
    (395) scope -> . pointer DOT
    (190) intnumber -> . INTNUMBER_DEC
    (191) intnumber -> . SIGNED_INTNUMBER_DEC
    (192) intnumber -> . INTNUMBER_BIN
    (193) intnumber -> . SIGNED_INTNUMBER_BIN
    (194) intnumber -> . INTNUMBER_OCT
    (195) intnumber -> . SIGNED_INTNUMBER_OCT
    (196) intnumber -> . INTNUMBER_HEX
    (197) intnumber -> . SIGNED_INTNUMBER_HEX
    (189) floatnumber -> . FLOATNUMBER
    (198) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 88
    PLUS            shift and go to state 89
    LNOT            shift and go to state 90
    NOT             shift and go to state 91
    AND             shift and go to state 92
    NAND            shift and go to state 93
    NOR             shift and go to state 94
    OR              shift and go to state 95
    XOR             shift and go to state 96
    XNOR            shift and go to state 97
    LPAREN          shift and go to state 85
    LBRACE          shift and go to state 106
    DOLLER          shift and go to state 107
    ID              shift and go to state 86
    INTNUMBER_DEC   shift and go to state 112
    SIGNED_INTNUMBER_DEC shift and go to state 113
    INTNUMBER_BIN   shift and go to state 114
    SIGNED_INTNUMBER_BIN shift and go to state 115
    INTNUMBER_OCT   shift and go to state 116
    SIGNED_INTNUMBER_OCT shift and go to state 117
    INTNUMBER_HEX   shift and go to state 118
    SIGNED_INTNUMBER_HEX shift and go to state 119
    FLOATNUMBER     shift and go to state 120
    STRING_LITERAL  shift and go to state 121

    expression                     shift and go to state 418
    concat                         shift and go to state 98
    repeat                         shift and go to state 99
    partselect                     shift and go to state 100
    pointer                        shift and go to state 101
    functioncall                   shift and go to state 102
    systemcall                     shift and go to state 103
    identifier                     shift and go to state 104
    const_expression               shift and go to state 105
    scope                          shift and go to state 108
    intnumber                      shift and go to state 109
    floatnumber                    shift and go to state 110
    stringliteral                  shift and go to state 111

state 254

    (159) expression -> expression XOR . expression
    (130) expression -> . MINUS expression
    (131) expression -> . PLUS expression
    (132) expression -> . LNOT expression
    (133) expression -> . NOT expression
    (134) expression -> . AND expression
    (135) expression -> . NAND expression
    (136) expression -> . NOR expression
    (137) expression -> . OR expression
    (138) expression -> . XOR expression
    (139) expression -> . XNOR expression
    (140) expression -> . expression POWER expression
    (141) expression -> . expression TIMES expression
    (142) expression -> . expression DIVIDE expression
    (143) expression -> . expression MOD expression
    (144) expression -> . expression PLUS expression
    (145) expression -> . expression MINUS expression
    (146) expression -> . expression LSHIFT expression
    (147) expression -> . expression RSHIFT expression
    (148) expression -> . expression LSHIFTA expression
    (149) expression -> . expression RSHIFTA expression
    (150) expression -> . expression LT expression
    (151) expression -> . expression GT expression
    (152) expression -> . expression LE expression
    (153) expression -> . expression GE expression
    (154) expression -> . expression EQ expression
    (155) expression -> . expression NE expression
    (156) expression -> . expression EQL expression
    (157) expression -> . expression NEL expression
    (158) expression -> . expression AND expression
    (159) expression -> . expression XOR expression
    (160) expression -> . expression XNOR expression
    (161) expression -> . expression OR expression
    (162) expression -> . expression LAND expression
    (163) expression -> . expression LOR expression
    (164) expression -> . expression COND expression COLON expression
    (165) expression -> . LPAREN expression RPAREN
    (166) expression -> . concat
    (167) expression -> . repeat
    (168) expression -> . partselect
    (169) expression -> . pointer
    (170) expression -> . functioncall
    (171) expression -> . systemcall
    (172) expression -> . identifier
    (173) expression -> . const_expression
    (174) concat -> . LBRACE concatlist RBRACE
    (177) repeat -> . LBRACE expression concat RBRACE
    (178) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (179) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (180) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (181) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (182) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (183) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (184) pointer -> . identifier LBRACKET expression RBRACKET
    (185) pointer -> . pointer LBRACKET expression RBRACKET
    (373) functioncall -> . identifier LPAREN func_args RPAREN
    (351) systemcall -> . DOLLER ID
    (352) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (353) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (392) identifier -> . ID
    (393) identifier -> . scope ID
    (186) const_expression -> . intnumber
    (187) const_expression -> . floatnumber
    (188) const_expression -> . stringliteral
    (394) scope -> . identifier DOT
    (395) scope -> . pointer DOT
    (190) intnumber -> . INTNUMBER_DEC
    (191) intnumber -> . SIGNED_INTNUMBER_DEC
    (192) intnumber -> . INTNUMBER_BIN
    (193) intnumber -> . SIGNED_INTNUMBER_BIN
    (194) intnumber -> . INTNUMBER_OCT
    (195) intnumber -> . SIGNED_INTNUMBER_OCT
    (196) intnumber -> . INTNUMBER_HEX
    (197) intnumber -> . SIGNED_INTNUMBER_HEX
    (189) floatnumber -> . FLOATNUMBER
    (198) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 88
    PLUS            shift and go to state 89
    LNOT            shift and go to state 90
    NOT             shift and go to state 91
    AND             shift and go to state 92
    NAND            shift and go to state 93
    NOR             shift and go to state 94
    OR              shift and go to state 95
    XOR             shift and go to state 96
    XNOR            shift and go to state 97
    LPAREN          shift and go to state 85
    LBRACE          shift and go to state 106
    DOLLER          shift and go to state 107
    ID              shift and go to state 86
    INTNUMBER_DEC   shift and go to state 112
    SIGNED_INTNUMBER_DEC shift and go to state 113
    INTNUMBER_BIN   shift and go to state 114
    SIGNED_INTNUMBER_BIN shift and go to state 115
    INTNUMBER_OCT   shift and go to state 116
    SIGNED_INTNUMBER_OCT shift and go to state 117
    INTNUMBER_HEX   shift and go to state 118
    SIGNED_INTNUMBER_HEX shift and go to state 119
    FLOATNUMBER     shift and go to state 120
    STRING_LITERAL  shift and go to state 121

    expression                     shift and go to state 419
    concat                         shift and go to state 98
    repeat                         shift and go to state 99
    partselect                     shift and go to state 100
    pointer                        shift and go to state 101
    functioncall                   shift and go to state 102
    systemcall                     shift and go to state 103
    identifier                     shift and go to state 104
    const_expression               shift and go to state 105
    scope                          shift and go to state 108
    intnumber                      shift and go to state 109
    floatnumber                    shift and go to state 110
    stringliteral                  shift and go to state 111

state 255

    (160) expression -> expression XNOR . expression
    (130) expression -> . MINUS expression
    (131) expression -> . PLUS expression
    (132) expression -> . LNOT expression
    (133) expression -> . NOT expression
    (134) expression -> . AND expression
    (135) expression -> . NAND expression
    (136) expression -> . NOR expression
    (137) expression -> . OR expression
    (138) expression -> . XOR expression
    (139) expression -> . XNOR expression
    (140) expression -> . expression POWER expression
    (141) expression -> . expression TIMES expression
    (142) expression -> . expression DIVIDE expression
    (143) expression -> . expression MOD expression
    (144) expression -> . expression PLUS expression
    (145) expression -> . expression MINUS expression
    (146) expression -> . expression LSHIFT expression
    (147) expression -> . expression RSHIFT expression
    (148) expression -> . expression LSHIFTA expression
    (149) expression -> . expression RSHIFTA expression
    (150) expression -> . expression LT expression
    (151) expression -> . expression GT expression
    (152) expression -> . expression LE expression
    (153) expression -> . expression GE expression
    (154) expression -> . expression EQ expression
    (155) expression -> . expression NE expression
    (156) expression -> . expression EQL expression
    (157) expression -> . expression NEL expression
    (158) expression -> . expression AND expression
    (159) expression -> . expression XOR expression
    (160) expression -> . expression XNOR expression
    (161) expression -> . expression OR expression
    (162) expression -> . expression LAND expression
    (163) expression -> . expression LOR expression
    (164) expression -> . expression COND expression COLON expression
    (165) expression -> . LPAREN expression RPAREN
    (166) expression -> . concat
    (167) expression -> . repeat
    (168) expression -> . partselect
    (169) expression -> . pointer
    (170) expression -> . functioncall
    (171) expression -> . systemcall
    (172) expression -> . identifier
    (173) expression -> . const_expression
    (174) concat -> . LBRACE concatlist RBRACE
    (177) repeat -> . LBRACE expression concat RBRACE
    (178) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (179) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (180) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (181) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (182) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (183) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (184) pointer -> . identifier LBRACKET expression RBRACKET
    (185) pointer -> . pointer LBRACKET expression RBRACKET
    (373) functioncall -> . identifier LPAREN func_args RPAREN
    (351) systemcall -> . DOLLER ID
    (352) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (353) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (392) identifier -> . ID
    (393) identifier -> . scope ID
    (186) const_expression -> . intnumber
    (187) const_expression -> . floatnumber
    (188) const_expression -> . stringliteral
    (394) scope -> . identifier DOT
    (395) scope -> . pointer DOT
    (190) intnumber -> . INTNUMBER_DEC
    (191) intnumber -> . SIGNED_INTNUMBER_DEC
    (192) intnumber -> . INTNUMBER_BIN
    (193) intnumber -> . SIGNED_INTNUMBER_BIN
    (194) intnumber -> . INTNUMBER_OCT
    (195) intnumber -> . SIGNED_INTNUMBER_OCT
    (196) intnumber -> . INTNUMBER_HEX
    (197) intnumber -> . SIGNED_INTNUMBER_HEX
    (189) floatnumber -> . FLOATNUMBER
    (198) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 88
    PLUS            shift and go to state 89
    LNOT            shift and go to state 90
    NOT             shift and go to state 91
    AND             shift and go to state 92
    NAND            shift and go to state 93
    NOR             shift and go to state 94
    OR              shift and go to state 95
    XOR             shift and go to state 96
    XNOR            shift and go to state 97
    LPAREN          shift and go to state 85
    LBRACE          shift and go to state 106
    DOLLER          shift and go to state 107
    ID              shift and go to state 86
    INTNUMBER_DEC   shift and go to state 112
    SIGNED_INTNUMBER_DEC shift and go to state 113
    INTNUMBER_BIN   shift and go to state 114
    SIGNED_INTNUMBER_BIN shift and go to state 115
    INTNUMBER_OCT   shift and go to state 116
    SIGNED_INTNUMBER_OCT shift and go to state 117
    INTNUMBER_HEX   shift and go to state 118
    SIGNED_INTNUMBER_HEX shift and go to state 119
    FLOATNUMBER     shift and go to state 120
    STRING_LITERAL  shift and go to state 121

    expression                     shift and go to state 420
    concat                         shift and go to state 98
    repeat                         shift and go to state 99
    partselect                     shift and go to state 100
    pointer                        shift and go to state 101
    functioncall                   shift and go to state 102
    systemcall                     shift and go to state 103
    identifier                     shift and go to state 104
    const_expression               shift and go to state 105
    scope                          shift and go to state 108
    intnumber                      shift and go to state 109
    floatnumber                    shift and go to state 110
    stringliteral                  shift and go to state 111

state 256

    (161) expression -> expression OR . expression
    (130) expression -> . MINUS expression
    (131) expression -> . PLUS expression
    (132) expression -> . LNOT expression
    (133) expression -> . NOT expression
    (134) expression -> . AND expression
    (135) expression -> . NAND expression
    (136) expression -> . NOR expression
    (137) expression -> . OR expression
    (138) expression -> . XOR expression
    (139) expression -> . XNOR expression
    (140) expression -> . expression POWER expression
    (141) expression -> . expression TIMES expression
    (142) expression -> . expression DIVIDE expression
    (143) expression -> . expression MOD expression
    (144) expression -> . expression PLUS expression
    (145) expression -> . expression MINUS expression
    (146) expression -> . expression LSHIFT expression
    (147) expression -> . expression RSHIFT expression
    (148) expression -> . expression LSHIFTA expression
    (149) expression -> . expression RSHIFTA expression
    (150) expression -> . expression LT expression
    (151) expression -> . expression GT expression
    (152) expression -> . expression LE expression
    (153) expression -> . expression GE expression
    (154) expression -> . expression EQ expression
    (155) expression -> . expression NE expression
    (156) expression -> . expression EQL expression
    (157) expression -> . expression NEL expression
    (158) expression -> . expression AND expression
    (159) expression -> . expression XOR expression
    (160) expression -> . expression XNOR expression
    (161) expression -> . expression OR expression
    (162) expression -> . expression LAND expression
    (163) expression -> . expression LOR expression
    (164) expression -> . expression COND expression COLON expression
    (165) expression -> . LPAREN expression RPAREN
    (166) expression -> . concat
    (167) expression -> . repeat
    (168) expression -> . partselect
    (169) expression -> . pointer
    (170) expression -> . functioncall
    (171) expression -> . systemcall
    (172) expression -> . identifier
    (173) expression -> . const_expression
    (174) concat -> . LBRACE concatlist RBRACE
    (177) repeat -> . LBRACE expression concat RBRACE
    (178) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (179) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (180) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (181) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (182) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (183) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (184) pointer -> . identifier LBRACKET expression RBRACKET
    (185) pointer -> . pointer LBRACKET expression RBRACKET
    (373) functioncall -> . identifier LPAREN func_args RPAREN
    (351) systemcall -> . DOLLER ID
    (352) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (353) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (392) identifier -> . ID
    (393) identifier -> . scope ID
    (186) const_expression -> . intnumber
    (187) const_expression -> . floatnumber
    (188) const_expression -> . stringliteral
    (394) scope -> . identifier DOT
    (395) scope -> . pointer DOT
    (190) intnumber -> . INTNUMBER_DEC
    (191) intnumber -> . SIGNED_INTNUMBER_DEC
    (192) intnumber -> . INTNUMBER_BIN
    (193) intnumber -> . SIGNED_INTNUMBER_BIN
    (194) intnumber -> . INTNUMBER_OCT
    (195) intnumber -> . SIGNED_INTNUMBER_OCT
    (196) intnumber -> . INTNUMBER_HEX
    (197) intnumber -> . SIGNED_INTNUMBER_HEX
    (189) floatnumber -> . FLOATNUMBER
    (198) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 88
    PLUS            shift and go to state 89
    LNOT            shift and go to state 90
    NOT             shift and go to state 91
    AND             shift and go to state 92
    NAND            shift and go to state 93
    NOR             shift and go to state 94
    OR              shift and go to state 95
    XOR             shift and go to state 96
    XNOR            shift and go to state 97
    LPAREN          shift and go to state 85
    LBRACE          shift and go to state 106
    DOLLER          shift and go to state 107
    ID              shift and go to state 86
    INTNUMBER_DEC   shift and go to state 112
    SIGNED_INTNUMBER_DEC shift and go to state 113
    INTNUMBER_BIN   shift and go to state 114
    SIGNED_INTNUMBER_BIN shift and go to state 115
    INTNUMBER_OCT   shift and go to state 116
    SIGNED_INTNUMBER_OCT shift and go to state 117
    INTNUMBER_HEX   shift and go to state 118
    SIGNED_INTNUMBER_HEX shift and go to state 119
    FLOATNUMBER     shift and go to state 120
    STRING_LITERAL  shift and go to state 121

    expression                     shift and go to state 421
    concat                         shift and go to state 98
    repeat                         shift and go to state 99
    partselect                     shift and go to state 100
    pointer                        shift and go to state 101
    functioncall                   shift and go to state 102
    systemcall                     shift and go to state 103
    identifier                     shift and go to state 104
    const_expression               shift and go to state 105
    scope                          shift and go to state 108
    intnumber                      shift and go to state 109
    floatnumber                    shift and go to state 110
    stringliteral                  shift and go to state 111

state 257

    (162) expression -> expression LAND . expression
    (130) expression -> . MINUS expression
    (131) expression -> . PLUS expression
    (132) expression -> . LNOT expression
    (133) expression -> . NOT expression
    (134) expression -> . AND expression
    (135) expression -> . NAND expression
    (136) expression -> . NOR expression
    (137) expression -> . OR expression
    (138) expression -> . XOR expression
    (139) expression -> . XNOR expression
    (140) expression -> . expression POWER expression
    (141) expression -> . expression TIMES expression
    (142) expression -> . expression DIVIDE expression
    (143) expression -> . expression MOD expression
    (144) expression -> . expression PLUS expression
    (145) expression -> . expression MINUS expression
    (146) expression -> . expression LSHIFT expression
    (147) expression -> . expression RSHIFT expression
    (148) expression -> . expression LSHIFTA expression
    (149) expression -> . expression RSHIFTA expression
    (150) expression -> . expression LT expression
    (151) expression -> . expression GT expression
    (152) expression -> . expression LE expression
    (153) expression -> . expression GE expression
    (154) expression -> . expression EQ expression
    (155) expression -> . expression NE expression
    (156) expression -> . expression EQL expression
    (157) expression -> . expression NEL expression
    (158) expression -> . expression AND expression
    (159) expression -> . expression XOR expression
    (160) expression -> . expression XNOR expression
    (161) expression -> . expression OR expression
    (162) expression -> . expression LAND expression
    (163) expression -> . expression LOR expression
    (164) expression -> . expression COND expression COLON expression
    (165) expression -> . LPAREN expression RPAREN
    (166) expression -> . concat
    (167) expression -> . repeat
    (168) expression -> . partselect
    (169) expression -> . pointer
    (170) expression -> . functioncall
    (171) expression -> . systemcall
    (172) expression -> . identifier
    (173) expression -> . const_expression
    (174) concat -> . LBRACE concatlist RBRACE
    (177) repeat -> . LBRACE expression concat RBRACE
    (178) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (179) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (180) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (181) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (182) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (183) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (184) pointer -> . identifier LBRACKET expression RBRACKET
    (185) pointer -> . pointer LBRACKET expression RBRACKET
    (373) functioncall -> . identifier LPAREN func_args RPAREN
    (351) systemcall -> . DOLLER ID
    (352) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (353) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (392) identifier -> . ID
    (393) identifier -> . scope ID
    (186) const_expression -> . intnumber
    (187) const_expression -> . floatnumber
    (188) const_expression -> . stringliteral
    (394) scope -> . identifier DOT
    (395) scope -> . pointer DOT
    (190) intnumber -> . INTNUMBER_DEC
    (191) intnumber -> . SIGNED_INTNUMBER_DEC
    (192) intnumber -> . INTNUMBER_BIN
    (193) intnumber -> . SIGNED_INTNUMBER_BIN
    (194) intnumber -> . INTNUMBER_OCT
    (195) intnumber -> . SIGNED_INTNUMBER_OCT
    (196) intnumber -> . INTNUMBER_HEX
    (197) intnumber -> . SIGNED_INTNUMBER_HEX
    (189) floatnumber -> . FLOATNUMBER
    (198) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 88
    PLUS            shift and go to state 89
    LNOT            shift and go to state 90
    NOT             shift and go to state 91
    AND             shift and go to state 92
    NAND            shift and go to state 93
    NOR             shift and go to state 94
    OR              shift and go to state 95
    XOR             shift and go to state 96
    XNOR            shift and go to state 97
    LPAREN          shift and go to state 85
    LBRACE          shift and go to state 106
    DOLLER          shift and go to state 107
    ID              shift and go to state 86
    INTNUMBER_DEC   shift and go to state 112
    SIGNED_INTNUMBER_DEC shift and go to state 113
    INTNUMBER_BIN   shift and go to state 114
    SIGNED_INTNUMBER_BIN shift and go to state 115
    INTNUMBER_OCT   shift and go to state 116
    SIGNED_INTNUMBER_OCT shift and go to state 117
    INTNUMBER_HEX   shift and go to state 118
    SIGNED_INTNUMBER_HEX shift and go to state 119
    FLOATNUMBER     shift and go to state 120
    STRING_LITERAL  shift and go to state 121

    expression                     shift and go to state 422
    concat                         shift and go to state 98
    repeat                         shift and go to state 99
    partselect                     shift and go to state 100
    pointer                        shift and go to state 101
    functioncall                   shift and go to state 102
    systemcall                     shift and go to state 103
    identifier                     shift and go to state 104
    const_expression               shift and go to state 105
    scope                          shift and go to state 108
    intnumber                      shift and go to state 109
    floatnumber                    shift and go to state 110
    stringliteral                  shift and go to state 111

state 258

    (163) expression -> expression LOR . expression
    (130) expression -> . MINUS expression
    (131) expression -> . PLUS expression
    (132) expression -> . LNOT expression
    (133) expression -> . NOT expression
    (134) expression -> . AND expression
    (135) expression -> . NAND expression
    (136) expression -> . NOR expression
    (137) expression -> . OR expression
    (138) expression -> . XOR expression
    (139) expression -> . XNOR expression
    (140) expression -> . expression POWER expression
    (141) expression -> . expression TIMES expression
    (142) expression -> . expression DIVIDE expression
    (143) expression -> . expression MOD expression
    (144) expression -> . expression PLUS expression
    (145) expression -> . expression MINUS expression
    (146) expression -> . expression LSHIFT expression
    (147) expression -> . expression RSHIFT expression
    (148) expression -> . expression LSHIFTA expression
    (149) expression -> . expression RSHIFTA expression
    (150) expression -> . expression LT expression
    (151) expression -> . expression GT expression
    (152) expression -> . expression LE expression
    (153) expression -> . expression GE expression
    (154) expression -> . expression EQ expression
    (155) expression -> . expression NE expression
    (156) expression -> . expression EQL expression
    (157) expression -> . expression NEL expression
    (158) expression -> . expression AND expression
    (159) expression -> . expression XOR expression
    (160) expression -> . expression XNOR expression
    (161) expression -> . expression OR expression
    (162) expression -> . expression LAND expression
    (163) expression -> . expression LOR expression
    (164) expression -> . expression COND expression COLON expression
    (165) expression -> . LPAREN expression RPAREN
    (166) expression -> . concat
    (167) expression -> . repeat
    (168) expression -> . partselect
    (169) expression -> . pointer
    (170) expression -> . functioncall
    (171) expression -> . systemcall
    (172) expression -> . identifier
    (173) expression -> . const_expression
    (174) concat -> . LBRACE concatlist RBRACE
    (177) repeat -> . LBRACE expression concat RBRACE
    (178) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (179) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (180) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (181) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (182) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (183) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (184) pointer -> . identifier LBRACKET expression RBRACKET
    (185) pointer -> . pointer LBRACKET expression RBRACKET
    (373) functioncall -> . identifier LPAREN func_args RPAREN
    (351) systemcall -> . DOLLER ID
    (352) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (353) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (392) identifier -> . ID
    (393) identifier -> . scope ID
    (186) const_expression -> . intnumber
    (187) const_expression -> . floatnumber
    (188) const_expression -> . stringliteral
    (394) scope -> . identifier DOT
    (395) scope -> . pointer DOT
    (190) intnumber -> . INTNUMBER_DEC
    (191) intnumber -> . SIGNED_INTNUMBER_DEC
    (192) intnumber -> . INTNUMBER_BIN
    (193) intnumber -> . SIGNED_INTNUMBER_BIN
    (194) intnumber -> . INTNUMBER_OCT
    (195) intnumber -> . SIGNED_INTNUMBER_OCT
    (196) intnumber -> . INTNUMBER_HEX
    (197) intnumber -> . SIGNED_INTNUMBER_HEX
    (189) floatnumber -> . FLOATNUMBER
    (198) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 88
    PLUS            shift and go to state 89
    LNOT            shift and go to state 90
    NOT             shift and go to state 91
    AND             shift and go to state 92
    NAND            shift and go to state 93
    NOR             shift and go to state 94
    OR              shift and go to state 95
    XOR             shift and go to state 96
    XNOR            shift and go to state 97
    LPAREN          shift and go to state 85
    LBRACE          shift and go to state 106
    DOLLER          shift and go to state 107
    ID              shift and go to state 86
    INTNUMBER_DEC   shift and go to state 112
    SIGNED_INTNUMBER_DEC shift and go to state 113
    INTNUMBER_BIN   shift and go to state 114
    SIGNED_INTNUMBER_BIN shift and go to state 115
    INTNUMBER_OCT   shift and go to state 116
    SIGNED_INTNUMBER_OCT shift and go to state 117
    INTNUMBER_HEX   shift and go to state 118
    SIGNED_INTNUMBER_HEX shift and go to state 119
    FLOATNUMBER     shift and go to state 120
    STRING_LITERAL  shift and go to state 121

    expression                     shift and go to state 423
    concat                         shift and go to state 98
    repeat                         shift and go to state 99
    partselect                     shift and go to state 100
    pointer                        shift and go to state 101
    functioncall                   shift and go to state 102
    systemcall                     shift and go to state 103
    identifier                     shift and go to state 104
    const_expression               shift and go to state 105
    scope                          shift and go to state 108
    intnumber                      shift and go to state 109
    floatnumber                    shift and go to state 110
    stringliteral                  shift and go to state 111

state 259

    (164) expression -> expression COND . expression COLON expression
    (130) expression -> . MINUS expression
    (131) expression -> . PLUS expression
    (132) expression -> . LNOT expression
    (133) expression -> . NOT expression
    (134) expression -> . AND expression
    (135) expression -> . NAND expression
    (136) expression -> . NOR expression
    (137) expression -> . OR expression
    (138) expression -> . XOR expression
    (139) expression -> . XNOR expression
    (140) expression -> . expression POWER expression
    (141) expression -> . expression TIMES expression
    (142) expression -> . expression DIVIDE expression
    (143) expression -> . expression MOD expression
    (144) expression -> . expression PLUS expression
    (145) expression -> . expression MINUS expression
    (146) expression -> . expression LSHIFT expression
    (147) expression -> . expression RSHIFT expression
    (148) expression -> . expression LSHIFTA expression
    (149) expression -> . expression RSHIFTA expression
    (150) expression -> . expression LT expression
    (151) expression -> . expression GT expression
    (152) expression -> . expression LE expression
    (153) expression -> . expression GE expression
    (154) expression -> . expression EQ expression
    (155) expression -> . expression NE expression
    (156) expression -> . expression EQL expression
    (157) expression -> . expression NEL expression
    (158) expression -> . expression AND expression
    (159) expression -> . expression XOR expression
    (160) expression -> . expression XNOR expression
    (161) expression -> . expression OR expression
    (162) expression -> . expression LAND expression
    (163) expression -> . expression LOR expression
    (164) expression -> . expression COND expression COLON expression
    (165) expression -> . LPAREN expression RPAREN
    (166) expression -> . concat
    (167) expression -> . repeat
    (168) expression -> . partselect
    (169) expression -> . pointer
    (170) expression -> . functioncall
    (171) expression -> . systemcall
    (172) expression -> . identifier
    (173) expression -> . const_expression
    (174) concat -> . LBRACE concatlist RBRACE
    (177) repeat -> . LBRACE expression concat RBRACE
    (178) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (179) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (180) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (181) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (182) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (183) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (184) pointer -> . identifier LBRACKET expression RBRACKET
    (185) pointer -> . pointer LBRACKET expression RBRACKET
    (373) functioncall -> . identifier LPAREN func_args RPAREN
    (351) systemcall -> . DOLLER ID
    (352) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (353) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (392) identifier -> . ID
    (393) identifier -> . scope ID
    (186) const_expression -> . intnumber
    (187) const_expression -> . floatnumber
    (188) const_expression -> . stringliteral
    (394) scope -> . identifier DOT
    (395) scope -> . pointer DOT
    (190) intnumber -> . INTNUMBER_DEC
    (191) intnumber -> . SIGNED_INTNUMBER_DEC
    (192) intnumber -> . INTNUMBER_BIN
    (193) intnumber -> . SIGNED_INTNUMBER_BIN
    (194) intnumber -> . INTNUMBER_OCT
    (195) intnumber -> . SIGNED_INTNUMBER_OCT
    (196) intnumber -> . INTNUMBER_HEX
    (197) intnumber -> . SIGNED_INTNUMBER_HEX
    (189) floatnumber -> . FLOATNUMBER
    (198) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 88
    PLUS            shift and go to state 89
    LNOT            shift and go to state 90
    NOT             shift and go to state 91
    AND             shift and go to state 92
    NAND            shift and go to state 93
    NOR             shift and go to state 94
    OR              shift and go to state 95
    XOR             shift and go to state 96
    XNOR            shift and go to state 97
    LPAREN          shift and go to state 85
    LBRACE          shift and go to state 106
    DOLLER          shift and go to state 107
    ID              shift and go to state 86
    INTNUMBER_DEC   shift and go to state 112
    SIGNED_INTNUMBER_DEC shift and go to state 113
    INTNUMBER_BIN   shift and go to state 114
    SIGNED_INTNUMBER_BIN shift and go to state 115
    INTNUMBER_OCT   shift and go to state 116
    SIGNED_INTNUMBER_OCT shift and go to state 117
    INTNUMBER_HEX   shift and go to state 118
    SIGNED_INTNUMBER_HEX shift and go to state 119
    FLOATNUMBER     shift and go to state 120
    STRING_LITERAL  shift and go to state 121

    expression                     shift and go to state 424
    concat                         shift and go to state 98
    repeat                         shift and go to state 99
    partselect                     shift and go to state 100
    pointer                        shift and go to state 101
    functioncall                   shift and go to state 102
    systemcall                     shift and go to state 103
    identifier                     shift and go to state 104
    const_expression               shift and go to state 105
    scope                          shift and go to state 108
    intnumber                      shift and go to state 109
    floatnumber                    shift and go to state 110
    stringliteral                  shift and go to state 111

state 260

    (130) expression -> MINUS expression .
    (140) expression -> expression . POWER expression
    (141) expression -> expression . TIMES expression
    (142) expression -> expression . DIVIDE expression
    (143) expression -> expression . MOD expression
    (144) expression -> expression . PLUS expression
    (145) expression -> expression . MINUS expression
    (146) expression -> expression . LSHIFT expression
    (147) expression -> expression . RSHIFT expression
    (148) expression -> expression . LSHIFTA expression
    (149) expression -> expression . RSHIFTA expression
    (150) expression -> expression . LT expression
    (151) expression -> expression . GT expression
    (152) expression -> expression . LE expression
    (153) expression -> expression . GE expression
    (154) expression -> expression . EQ expression
    (155) expression -> expression . NE expression
    (156) expression -> expression . EQL expression
    (157) expression -> expression . NEL expression
    (158) expression -> expression . AND expression
    (159) expression -> expression . XOR expression
    (160) expression -> expression . XNOR expression
    (161) expression -> expression . OR expression
    (162) expression -> expression . LAND expression
    (163) expression -> expression . LOR expression
    (164) expression -> expression . COND expression COLON expression

    TIMES           reduce using rule 130 (expression -> MINUS expression .)
    POWER           reduce using rule 130 (expression -> MINUS expression .)
    DIVIDE          reduce using rule 130 (expression -> MINUS expression .)
    MOD             reduce using rule 130 (expression -> MINUS expression .)
    PLUS            reduce using rule 130 (expression -> MINUS expression .)
    MINUS           reduce using rule 130 (expression -> MINUS expression .)
    LSHIFT          reduce using rule 130 (expression -> MINUS expression .)
    RSHIFT          reduce using rule 130 (expression -> MINUS expression .)
    LSHIFTA         reduce using rule 130 (expression -> MINUS expression .)
    RSHIFTA         reduce using rule 130 (expression -> MINUS expression .)
    LT              reduce using rule 130 (expression -> MINUS expression .)
    GT              reduce using rule 130 (expression -> MINUS expression .)
    LE              reduce using rule 130 (expression -> MINUS expression .)
    GE              reduce using rule 130 (expression -> MINUS expression .)
    EQ              reduce using rule 130 (expression -> MINUS expression .)
    NE              reduce using rule 130 (expression -> MINUS expression .)
    EQL             reduce using rule 130 (expression -> MINUS expression .)
    NEL             reduce using rule 130 (expression -> MINUS expression .)
    AND             reduce using rule 130 (expression -> MINUS expression .)
    XOR             reduce using rule 130 (expression -> MINUS expression .)
    XNOR            reduce using rule 130 (expression -> MINUS expression .)
    OR              reduce using rule 130 (expression -> MINUS expression .)
    LAND            reduce using rule 130 (expression -> MINUS expression .)
    LOR             reduce using rule 130 (expression -> MINUS expression .)
    COND            reduce using rule 130 (expression -> MINUS expression .)
    RPAREN          reduce using rule 130 (expression -> MINUS expression .)
    LBRACE          reduce using rule 130 (expression -> MINUS expression .)
    RBRACE          reduce using rule 130 (expression -> MINUS expression .)
    COMMA           reduce using rule 130 (expression -> MINUS expression .)
    COLON           reduce using rule 130 (expression -> MINUS expression .)
    SEMICOLON       reduce using rule 130 (expression -> MINUS expression .)
    PLUSCOLON       reduce using rule 130 (expression -> MINUS expression .)
    MINUSCOLON      reduce using rule 130 (expression -> MINUS expression .)
    RBRACKET        reduce using rule 130 (expression -> MINUS expression .)

  ! POWER           [ shift and go to state 236 ]
  ! TIMES           [ shift and go to state 398 ]
  ! DIVIDE          [ shift and go to state 237 ]
  ! MOD             [ shift and go to state 238 ]
  ! PLUS            [ shift and go to state 239 ]
  ! MINUS           [ shift and go to state 240 ]
  ! LSHIFT          [ shift and go to state 241 ]
  ! RSHIFT          [ shift and go to state 242 ]
  ! LSHIFTA         [ shift and go to state 243 ]
  ! RSHIFTA         [ shift and go to state 244 ]
  ! LT              [ shift and go to state 245 ]
  ! GT              [ shift and go to state 246 ]
  ! LE              [ shift and go to state 247 ]
  ! GE              [ shift and go to state 248 ]
  ! EQ              [ shift and go to state 249 ]
  ! NE              [ shift and go to state 250 ]
  ! EQL             [ shift and go to state 251 ]
  ! NEL             [ shift and go to state 252 ]
  ! AND             [ shift and go to state 253 ]
  ! XOR             [ shift and go to state 254 ]
  ! XNOR            [ shift and go to state 255 ]
  ! OR              [ shift and go to state 256 ]
  ! LAND            [ shift and go to state 257 ]
  ! LOR             [ shift and go to state 258 ]
  ! COND            [ shift and go to state 259 ]


state 261

    (131) expression -> PLUS expression .
    (140) expression -> expression . POWER expression
    (141) expression -> expression . TIMES expression
    (142) expression -> expression . DIVIDE expression
    (143) expression -> expression . MOD expression
    (144) expression -> expression . PLUS expression
    (145) expression -> expression . MINUS expression
    (146) expression -> expression . LSHIFT expression
    (147) expression -> expression . RSHIFT expression
    (148) expression -> expression . LSHIFTA expression
    (149) expression -> expression . RSHIFTA expression
    (150) expression -> expression . LT expression
    (151) expression -> expression . GT expression
    (152) expression -> expression . LE expression
    (153) expression -> expression . GE expression
    (154) expression -> expression . EQ expression
    (155) expression -> expression . NE expression
    (156) expression -> expression . EQL expression
    (157) expression -> expression . NEL expression
    (158) expression -> expression . AND expression
    (159) expression -> expression . XOR expression
    (160) expression -> expression . XNOR expression
    (161) expression -> expression . OR expression
    (162) expression -> expression . LAND expression
    (163) expression -> expression . LOR expression
    (164) expression -> expression . COND expression COLON expression

    TIMES           reduce using rule 131 (expression -> PLUS expression .)
    POWER           reduce using rule 131 (expression -> PLUS expression .)
    DIVIDE          reduce using rule 131 (expression -> PLUS expression .)
    MOD             reduce using rule 131 (expression -> PLUS expression .)
    PLUS            reduce using rule 131 (expression -> PLUS expression .)
    MINUS           reduce using rule 131 (expression -> PLUS expression .)
    LSHIFT          reduce using rule 131 (expression -> PLUS expression .)
    RSHIFT          reduce using rule 131 (expression -> PLUS expression .)
    LSHIFTA         reduce using rule 131 (expression -> PLUS expression .)
    RSHIFTA         reduce using rule 131 (expression -> PLUS expression .)
    LT              reduce using rule 131 (expression -> PLUS expression .)
    GT              reduce using rule 131 (expression -> PLUS expression .)
    LE              reduce using rule 131 (expression -> PLUS expression .)
    GE              reduce using rule 131 (expression -> PLUS expression .)
    EQ              reduce using rule 131 (expression -> PLUS expression .)
    NE              reduce using rule 131 (expression -> PLUS expression .)
    EQL             reduce using rule 131 (expression -> PLUS expression .)
    NEL             reduce using rule 131 (expression -> PLUS expression .)
    AND             reduce using rule 131 (expression -> PLUS expression .)
    XOR             reduce using rule 131 (expression -> PLUS expression .)
    XNOR            reduce using rule 131 (expression -> PLUS expression .)
    OR              reduce using rule 131 (expression -> PLUS expression .)
    LAND            reduce using rule 131 (expression -> PLUS expression .)
    LOR             reduce using rule 131 (expression -> PLUS expression .)
    COND            reduce using rule 131 (expression -> PLUS expression .)
    RPAREN          reduce using rule 131 (expression -> PLUS expression .)
    LBRACE          reduce using rule 131 (expression -> PLUS expression .)
    RBRACE          reduce using rule 131 (expression -> PLUS expression .)
    COMMA           reduce using rule 131 (expression -> PLUS expression .)
    COLON           reduce using rule 131 (expression -> PLUS expression .)
    SEMICOLON       reduce using rule 131 (expression -> PLUS expression .)
    PLUSCOLON       reduce using rule 131 (expression -> PLUS expression .)
    MINUSCOLON      reduce using rule 131 (expression -> PLUS expression .)
    RBRACKET        reduce using rule 131 (expression -> PLUS expression .)

  ! POWER           [ shift and go to state 236 ]
  ! TIMES           [ shift and go to state 398 ]
  ! DIVIDE          [ shift and go to state 237 ]
  ! MOD             [ shift and go to state 238 ]
  ! PLUS            [ shift and go to state 239 ]
  ! MINUS           [ shift and go to state 240 ]
  ! LSHIFT          [ shift and go to state 241 ]
  ! RSHIFT          [ shift and go to state 242 ]
  ! LSHIFTA         [ shift and go to state 243 ]
  ! RSHIFTA         [ shift and go to state 244 ]
  ! LT              [ shift and go to state 245 ]
  ! GT              [ shift and go to state 246 ]
  ! LE              [ shift and go to state 247 ]
  ! GE              [ shift and go to state 248 ]
  ! EQ              [ shift and go to state 249 ]
  ! NE              [ shift and go to state 250 ]
  ! EQL             [ shift and go to state 251 ]
  ! NEL             [ shift and go to state 252 ]
  ! AND             [ shift and go to state 253 ]
  ! XOR             [ shift and go to state 254 ]
  ! XNOR            [ shift and go to state 255 ]
  ! OR              [ shift and go to state 256 ]
  ! LAND            [ shift and go to state 257 ]
  ! LOR             [ shift and go to state 258 ]
  ! COND            [ shift and go to state 259 ]


state 262

    (132) expression -> LNOT expression .
    (140) expression -> expression . POWER expression
    (141) expression -> expression . TIMES expression
    (142) expression -> expression . DIVIDE expression
    (143) expression -> expression . MOD expression
    (144) expression -> expression . PLUS expression
    (145) expression -> expression . MINUS expression
    (146) expression -> expression . LSHIFT expression
    (147) expression -> expression . RSHIFT expression
    (148) expression -> expression . LSHIFTA expression
    (149) expression -> expression . RSHIFTA expression
    (150) expression -> expression . LT expression
    (151) expression -> expression . GT expression
    (152) expression -> expression . LE expression
    (153) expression -> expression . GE expression
    (154) expression -> expression . EQ expression
    (155) expression -> expression . NE expression
    (156) expression -> expression . EQL expression
    (157) expression -> expression . NEL expression
    (158) expression -> expression . AND expression
    (159) expression -> expression . XOR expression
    (160) expression -> expression . XNOR expression
    (161) expression -> expression . OR expression
    (162) expression -> expression . LAND expression
    (163) expression -> expression . LOR expression
    (164) expression -> expression . COND expression COLON expression

    TIMES           reduce using rule 132 (expression -> LNOT expression .)
    POWER           reduce using rule 132 (expression -> LNOT expression .)
    DIVIDE          reduce using rule 132 (expression -> LNOT expression .)
    MOD             reduce using rule 132 (expression -> LNOT expression .)
    PLUS            reduce using rule 132 (expression -> LNOT expression .)
    MINUS           reduce using rule 132 (expression -> LNOT expression .)
    LSHIFT          reduce using rule 132 (expression -> LNOT expression .)
    RSHIFT          reduce using rule 132 (expression -> LNOT expression .)
    LSHIFTA         reduce using rule 132 (expression -> LNOT expression .)
    RSHIFTA         reduce using rule 132 (expression -> LNOT expression .)
    LT              reduce using rule 132 (expression -> LNOT expression .)
    GT              reduce using rule 132 (expression -> LNOT expression .)
    LE              reduce using rule 132 (expression -> LNOT expression .)
    GE              reduce using rule 132 (expression -> LNOT expression .)
    EQ              reduce using rule 132 (expression -> LNOT expression .)
    NE              reduce using rule 132 (expression -> LNOT expression .)
    EQL             reduce using rule 132 (expression -> LNOT expression .)
    NEL             reduce using rule 132 (expression -> LNOT expression .)
    AND             reduce using rule 132 (expression -> LNOT expression .)
    XOR             reduce using rule 132 (expression -> LNOT expression .)
    XNOR            reduce using rule 132 (expression -> LNOT expression .)
    OR              reduce using rule 132 (expression -> LNOT expression .)
    LAND            reduce using rule 132 (expression -> LNOT expression .)
    LOR             reduce using rule 132 (expression -> LNOT expression .)
    COND            reduce using rule 132 (expression -> LNOT expression .)
    RPAREN          reduce using rule 132 (expression -> LNOT expression .)
    LBRACE          reduce using rule 132 (expression -> LNOT expression .)
    RBRACE          reduce using rule 132 (expression -> LNOT expression .)
    COMMA           reduce using rule 132 (expression -> LNOT expression .)
    COLON           reduce using rule 132 (expression -> LNOT expression .)
    SEMICOLON       reduce using rule 132 (expression -> LNOT expression .)
    PLUSCOLON       reduce using rule 132 (expression -> LNOT expression .)
    MINUSCOLON      reduce using rule 132 (expression -> LNOT expression .)
    RBRACKET        reduce using rule 132 (expression -> LNOT expression .)

  ! POWER           [ shift and go to state 236 ]
  ! TIMES           [ shift and go to state 398 ]
  ! DIVIDE          [ shift and go to state 237 ]
  ! MOD             [ shift and go to state 238 ]
  ! PLUS            [ shift and go to state 239 ]
  ! MINUS           [ shift and go to state 240 ]
  ! LSHIFT          [ shift and go to state 241 ]
  ! RSHIFT          [ shift and go to state 242 ]
  ! LSHIFTA         [ shift and go to state 243 ]
  ! RSHIFTA         [ shift and go to state 244 ]
  ! LT              [ shift and go to state 245 ]
  ! GT              [ shift and go to state 246 ]
  ! LE              [ shift and go to state 247 ]
  ! GE              [ shift and go to state 248 ]
  ! EQ              [ shift and go to state 249 ]
  ! NE              [ shift and go to state 250 ]
  ! EQL             [ shift and go to state 251 ]
  ! NEL             [ shift and go to state 252 ]
  ! AND             [ shift and go to state 253 ]
  ! XOR             [ shift and go to state 254 ]
  ! XNOR            [ shift and go to state 255 ]
  ! OR              [ shift and go to state 256 ]
  ! LAND            [ shift and go to state 257 ]
  ! LOR             [ shift and go to state 258 ]
  ! COND            [ shift and go to state 259 ]


state 263

    (133) expression -> NOT expression .
    (140) expression -> expression . POWER expression
    (141) expression -> expression . TIMES expression
    (142) expression -> expression . DIVIDE expression
    (143) expression -> expression . MOD expression
    (144) expression -> expression . PLUS expression
    (145) expression -> expression . MINUS expression
    (146) expression -> expression . LSHIFT expression
    (147) expression -> expression . RSHIFT expression
    (148) expression -> expression . LSHIFTA expression
    (149) expression -> expression . RSHIFTA expression
    (150) expression -> expression . LT expression
    (151) expression -> expression . GT expression
    (152) expression -> expression . LE expression
    (153) expression -> expression . GE expression
    (154) expression -> expression . EQ expression
    (155) expression -> expression . NE expression
    (156) expression -> expression . EQL expression
    (157) expression -> expression . NEL expression
    (158) expression -> expression . AND expression
    (159) expression -> expression . XOR expression
    (160) expression -> expression . XNOR expression
    (161) expression -> expression . OR expression
    (162) expression -> expression . LAND expression
    (163) expression -> expression . LOR expression
    (164) expression -> expression . COND expression COLON expression

    TIMES           reduce using rule 133 (expression -> NOT expression .)
    POWER           reduce using rule 133 (expression -> NOT expression .)
    DIVIDE          reduce using rule 133 (expression -> NOT expression .)
    MOD             reduce using rule 133 (expression -> NOT expression .)
    PLUS            reduce using rule 133 (expression -> NOT expression .)
    MINUS           reduce using rule 133 (expression -> NOT expression .)
    LSHIFT          reduce using rule 133 (expression -> NOT expression .)
    RSHIFT          reduce using rule 133 (expression -> NOT expression .)
    LSHIFTA         reduce using rule 133 (expression -> NOT expression .)
    RSHIFTA         reduce using rule 133 (expression -> NOT expression .)
    LT              reduce using rule 133 (expression -> NOT expression .)
    GT              reduce using rule 133 (expression -> NOT expression .)
    LE              reduce using rule 133 (expression -> NOT expression .)
    GE              reduce using rule 133 (expression -> NOT expression .)
    EQ              reduce using rule 133 (expression -> NOT expression .)
    NE              reduce using rule 133 (expression -> NOT expression .)
    EQL             reduce using rule 133 (expression -> NOT expression .)
    NEL             reduce using rule 133 (expression -> NOT expression .)
    AND             reduce using rule 133 (expression -> NOT expression .)
    XOR             reduce using rule 133 (expression -> NOT expression .)
    XNOR            reduce using rule 133 (expression -> NOT expression .)
    OR              reduce using rule 133 (expression -> NOT expression .)
    LAND            reduce using rule 133 (expression -> NOT expression .)
    LOR             reduce using rule 133 (expression -> NOT expression .)
    COND            reduce using rule 133 (expression -> NOT expression .)
    RPAREN          reduce using rule 133 (expression -> NOT expression .)
    LBRACE          reduce using rule 133 (expression -> NOT expression .)
    RBRACE          reduce using rule 133 (expression -> NOT expression .)
    COMMA           reduce using rule 133 (expression -> NOT expression .)
    COLON           reduce using rule 133 (expression -> NOT expression .)
    SEMICOLON       reduce using rule 133 (expression -> NOT expression .)
    PLUSCOLON       reduce using rule 133 (expression -> NOT expression .)
    MINUSCOLON      reduce using rule 133 (expression -> NOT expression .)
    RBRACKET        reduce using rule 133 (expression -> NOT expression .)

  ! POWER           [ shift and go to state 236 ]
  ! TIMES           [ shift and go to state 398 ]
  ! DIVIDE          [ shift and go to state 237 ]
  ! MOD             [ shift and go to state 238 ]
  ! PLUS            [ shift and go to state 239 ]
  ! MINUS           [ shift and go to state 240 ]
  ! LSHIFT          [ shift and go to state 241 ]
  ! RSHIFT          [ shift and go to state 242 ]
  ! LSHIFTA         [ shift and go to state 243 ]
  ! RSHIFTA         [ shift and go to state 244 ]
  ! LT              [ shift and go to state 245 ]
  ! GT              [ shift and go to state 246 ]
  ! LE              [ shift and go to state 247 ]
  ! GE              [ shift and go to state 248 ]
  ! EQ              [ shift and go to state 249 ]
  ! NE              [ shift and go to state 250 ]
  ! EQL             [ shift and go to state 251 ]
  ! NEL             [ shift and go to state 252 ]
  ! AND             [ shift and go to state 253 ]
  ! XOR             [ shift and go to state 254 ]
  ! XNOR            [ shift and go to state 255 ]
  ! OR              [ shift and go to state 256 ]
  ! LAND            [ shift and go to state 257 ]
  ! LOR             [ shift and go to state 258 ]
  ! COND            [ shift and go to state 259 ]


state 264

    (134) expression -> AND expression .
    (140) expression -> expression . POWER expression
    (141) expression -> expression . TIMES expression
    (142) expression -> expression . DIVIDE expression
    (143) expression -> expression . MOD expression
    (144) expression -> expression . PLUS expression
    (145) expression -> expression . MINUS expression
    (146) expression -> expression . LSHIFT expression
    (147) expression -> expression . RSHIFT expression
    (148) expression -> expression . LSHIFTA expression
    (149) expression -> expression . RSHIFTA expression
    (150) expression -> expression . LT expression
    (151) expression -> expression . GT expression
    (152) expression -> expression . LE expression
    (153) expression -> expression . GE expression
    (154) expression -> expression . EQ expression
    (155) expression -> expression . NE expression
    (156) expression -> expression . EQL expression
    (157) expression -> expression . NEL expression
    (158) expression -> expression . AND expression
    (159) expression -> expression . XOR expression
    (160) expression -> expression . XNOR expression
    (161) expression -> expression . OR expression
    (162) expression -> expression . LAND expression
    (163) expression -> expression . LOR expression
    (164) expression -> expression . COND expression COLON expression

    TIMES           reduce using rule 134 (expression -> AND expression .)
    POWER           reduce using rule 134 (expression -> AND expression .)
    DIVIDE          reduce using rule 134 (expression -> AND expression .)
    MOD             reduce using rule 134 (expression -> AND expression .)
    PLUS            reduce using rule 134 (expression -> AND expression .)
    MINUS           reduce using rule 134 (expression -> AND expression .)
    LSHIFT          reduce using rule 134 (expression -> AND expression .)
    RSHIFT          reduce using rule 134 (expression -> AND expression .)
    LSHIFTA         reduce using rule 134 (expression -> AND expression .)
    RSHIFTA         reduce using rule 134 (expression -> AND expression .)
    LT              reduce using rule 134 (expression -> AND expression .)
    GT              reduce using rule 134 (expression -> AND expression .)
    LE              reduce using rule 134 (expression -> AND expression .)
    GE              reduce using rule 134 (expression -> AND expression .)
    EQ              reduce using rule 134 (expression -> AND expression .)
    NE              reduce using rule 134 (expression -> AND expression .)
    EQL             reduce using rule 134 (expression -> AND expression .)
    NEL             reduce using rule 134 (expression -> AND expression .)
    AND             reduce using rule 134 (expression -> AND expression .)
    XOR             reduce using rule 134 (expression -> AND expression .)
    XNOR            reduce using rule 134 (expression -> AND expression .)
    OR              reduce using rule 134 (expression -> AND expression .)
    LAND            reduce using rule 134 (expression -> AND expression .)
    LOR             reduce using rule 134 (expression -> AND expression .)
    COND            reduce using rule 134 (expression -> AND expression .)
    RPAREN          reduce using rule 134 (expression -> AND expression .)
    LBRACE          reduce using rule 134 (expression -> AND expression .)
    RBRACE          reduce using rule 134 (expression -> AND expression .)
    COMMA           reduce using rule 134 (expression -> AND expression .)
    COLON           reduce using rule 134 (expression -> AND expression .)
    SEMICOLON       reduce using rule 134 (expression -> AND expression .)
    PLUSCOLON       reduce using rule 134 (expression -> AND expression .)
    MINUSCOLON      reduce using rule 134 (expression -> AND expression .)
    RBRACKET        reduce using rule 134 (expression -> AND expression .)

  ! POWER           [ shift and go to state 236 ]
  ! TIMES           [ shift and go to state 398 ]
  ! DIVIDE          [ shift and go to state 237 ]
  ! MOD             [ shift and go to state 238 ]
  ! PLUS            [ shift and go to state 239 ]
  ! MINUS           [ shift and go to state 240 ]
  ! LSHIFT          [ shift and go to state 241 ]
  ! RSHIFT          [ shift and go to state 242 ]
  ! LSHIFTA         [ shift and go to state 243 ]
  ! RSHIFTA         [ shift and go to state 244 ]
  ! LT              [ shift and go to state 245 ]
  ! GT              [ shift and go to state 246 ]
  ! LE              [ shift and go to state 247 ]
  ! GE              [ shift and go to state 248 ]
  ! EQ              [ shift and go to state 249 ]
  ! NE              [ shift and go to state 250 ]
  ! EQL             [ shift and go to state 251 ]
  ! NEL             [ shift and go to state 252 ]
  ! AND             [ shift and go to state 253 ]
  ! XOR             [ shift and go to state 254 ]
  ! XNOR            [ shift and go to state 255 ]
  ! OR              [ shift and go to state 256 ]
  ! LAND            [ shift and go to state 257 ]
  ! LOR             [ shift and go to state 258 ]
  ! COND            [ shift and go to state 259 ]


state 265

    (135) expression -> NAND expression .
    (140) expression -> expression . POWER expression
    (141) expression -> expression . TIMES expression
    (142) expression -> expression . DIVIDE expression
    (143) expression -> expression . MOD expression
    (144) expression -> expression . PLUS expression
    (145) expression -> expression . MINUS expression
    (146) expression -> expression . LSHIFT expression
    (147) expression -> expression . RSHIFT expression
    (148) expression -> expression . LSHIFTA expression
    (149) expression -> expression . RSHIFTA expression
    (150) expression -> expression . LT expression
    (151) expression -> expression . GT expression
    (152) expression -> expression . LE expression
    (153) expression -> expression . GE expression
    (154) expression -> expression . EQ expression
    (155) expression -> expression . NE expression
    (156) expression -> expression . EQL expression
    (157) expression -> expression . NEL expression
    (158) expression -> expression . AND expression
    (159) expression -> expression . XOR expression
    (160) expression -> expression . XNOR expression
    (161) expression -> expression . OR expression
    (162) expression -> expression . LAND expression
    (163) expression -> expression . LOR expression
    (164) expression -> expression . COND expression COLON expression

    TIMES           reduce using rule 135 (expression -> NAND expression .)
    POWER           reduce using rule 135 (expression -> NAND expression .)
    DIVIDE          reduce using rule 135 (expression -> NAND expression .)
    MOD             reduce using rule 135 (expression -> NAND expression .)
    PLUS            reduce using rule 135 (expression -> NAND expression .)
    MINUS           reduce using rule 135 (expression -> NAND expression .)
    LSHIFT          reduce using rule 135 (expression -> NAND expression .)
    RSHIFT          reduce using rule 135 (expression -> NAND expression .)
    LSHIFTA         reduce using rule 135 (expression -> NAND expression .)
    RSHIFTA         reduce using rule 135 (expression -> NAND expression .)
    LT              reduce using rule 135 (expression -> NAND expression .)
    GT              reduce using rule 135 (expression -> NAND expression .)
    LE              reduce using rule 135 (expression -> NAND expression .)
    GE              reduce using rule 135 (expression -> NAND expression .)
    EQ              reduce using rule 135 (expression -> NAND expression .)
    NE              reduce using rule 135 (expression -> NAND expression .)
    EQL             reduce using rule 135 (expression -> NAND expression .)
    NEL             reduce using rule 135 (expression -> NAND expression .)
    AND             reduce using rule 135 (expression -> NAND expression .)
    XOR             reduce using rule 135 (expression -> NAND expression .)
    XNOR            reduce using rule 135 (expression -> NAND expression .)
    OR              reduce using rule 135 (expression -> NAND expression .)
    LAND            reduce using rule 135 (expression -> NAND expression .)
    LOR             reduce using rule 135 (expression -> NAND expression .)
    COND            reduce using rule 135 (expression -> NAND expression .)
    RPAREN          reduce using rule 135 (expression -> NAND expression .)
    LBRACE          reduce using rule 135 (expression -> NAND expression .)
    RBRACE          reduce using rule 135 (expression -> NAND expression .)
    COMMA           reduce using rule 135 (expression -> NAND expression .)
    COLON           reduce using rule 135 (expression -> NAND expression .)
    SEMICOLON       reduce using rule 135 (expression -> NAND expression .)
    PLUSCOLON       reduce using rule 135 (expression -> NAND expression .)
    MINUSCOLON      reduce using rule 135 (expression -> NAND expression .)
    RBRACKET        reduce using rule 135 (expression -> NAND expression .)

  ! POWER           [ shift and go to state 236 ]
  ! TIMES           [ shift and go to state 398 ]
  ! DIVIDE          [ shift and go to state 237 ]
  ! MOD             [ shift and go to state 238 ]
  ! PLUS            [ shift and go to state 239 ]
  ! MINUS           [ shift and go to state 240 ]
  ! LSHIFT          [ shift and go to state 241 ]
  ! RSHIFT          [ shift and go to state 242 ]
  ! LSHIFTA         [ shift and go to state 243 ]
  ! RSHIFTA         [ shift and go to state 244 ]
  ! LT              [ shift and go to state 245 ]
  ! GT              [ shift and go to state 246 ]
  ! LE              [ shift and go to state 247 ]
  ! GE              [ shift and go to state 248 ]
  ! EQ              [ shift and go to state 249 ]
  ! NE              [ shift and go to state 250 ]
  ! EQL             [ shift and go to state 251 ]
  ! NEL             [ shift and go to state 252 ]
  ! AND             [ shift and go to state 253 ]
  ! XOR             [ shift and go to state 254 ]
  ! XNOR            [ shift and go to state 255 ]
  ! OR              [ shift and go to state 256 ]
  ! LAND            [ shift and go to state 257 ]
  ! LOR             [ shift and go to state 258 ]
  ! COND            [ shift and go to state 259 ]


state 266

    (136) expression -> NOR expression .
    (140) expression -> expression . POWER expression
    (141) expression -> expression . TIMES expression
    (142) expression -> expression . DIVIDE expression
    (143) expression -> expression . MOD expression
    (144) expression -> expression . PLUS expression
    (145) expression -> expression . MINUS expression
    (146) expression -> expression . LSHIFT expression
    (147) expression -> expression . RSHIFT expression
    (148) expression -> expression . LSHIFTA expression
    (149) expression -> expression . RSHIFTA expression
    (150) expression -> expression . LT expression
    (151) expression -> expression . GT expression
    (152) expression -> expression . LE expression
    (153) expression -> expression . GE expression
    (154) expression -> expression . EQ expression
    (155) expression -> expression . NE expression
    (156) expression -> expression . EQL expression
    (157) expression -> expression . NEL expression
    (158) expression -> expression . AND expression
    (159) expression -> expression . XOR expression
    (160) expression -> expression . XNOR expression
    (161) expression -> expression . OR expression
    (162) expression -> expression . LAND expression
    (163) expression -> expression . LOR expression
    (164) expression -> expression . COND expression COLON expression

    TIMES           reduce using rule 136 (expression -> NOR expression .)
    POWER           reduce using rule 136 (expression -> NOR expression .)
    DIVIDE          reduce using rule 136 (expression -> NOR expression .)
    MOD             reduce using rule 136 (expression -> NOR expression .)
    PLUS            reduce using rule 136 (expression -> NOR expression .)
    MINUS           reduce using rule 136 (expression -> NOR expression .)
    LSHIFT          reduce using rule 136 (expression -> NOR expression .)
    RSHIFT          reduce using rule 136 (expression -> NOR expression .)
    LSHIFTA         reduce using rule 136 (expression -> NOR expression .)
    RSHIFTA         reduce using rule 136 (expression -> NOR expression .)
    LT              reduce using rule 136 (expression -> NOR expression .)
    GT              reduce using rule 136 (expression -> NOR expression .)
    LE              reduce using rule 136 (expression -> NOR expression .)
    GE              reduce using rule 136 (expression -> NOR expression .)
    EQ              reduce using rule 136 (expression -> NOR expression .)
    NE              reduce using rule 136 (expression -> NOR expression .)
    EQL             reduce using rule 136 (expression -> NOR expression .)
    NEL             reduce using rule 136 (expression -> NOR expression .)
    AND             reduce using rule 136 (expression -> NOR expression .)
    XOR             reduce using rule 136 (expression -> NOR expression .)
    XNOR            reduce using rule 136 (expression -> NOR expression .)
    OR              reduce using rule 136 (expression -> NOR expression .)
    LAND            reduce using rule 136 (expression -> NOR expression .)
    LOR             reduce using rule 136 (expression -> NOR expression .)
    COND            reduce using rule 136 (expression -> NOR expression .)
    RPAREN          reduce using rule 136 (expression -> NOR expression .)
    LBRACE          reduce using rule 136 (expression -> NOR expression .)
    RBRACE          reduce using rule 136 (expression -> NOR expression .)
    COMMA           reduce using rule 136 (expression -> NOR expression .)
    COLON           reduce using rule 136 (expression -> NOR expression .)
    SEMICOLON       reduce using rule 136 (expression -> NOR expression .)
    PLUSCOLON       reduce using rule 136 (expression -> NOR expression .)
    MINUSCOLON      reduce using rule 136 (expression -> NOR expression .)
    RBRACKET        reduce using rule 136 (expression -> NOR expression .)

  ! POWER           [ shift and go to state 236 ]
  ! TIMES           [ shift and go to state 398 ]
  ! DIVIDE          [ shift and go to state 237 ]
  ! MOD             [ shift and go to state 238 ]
  ! PLUS            [ shift and go to state 239 ]
  ! MINUS           [ shift and go to state 240 ]
  ! LSHIFT          [ shift and go to state 241 ]
  ! RSHIFT          [ shift and go to state 242 ]
  ! LSHIFTA         [ shift and go to state 243 ]
  ! RSHIFTA         [ shift and go to state 244 ]
  ! LT              [ shift and go to state 245 ]
  ! GT              [ shift and go to state 246 ]
  ! LE              [ shift and go to state 247 ]
  ! GE              [ shift and go to state 248 ]
  ! EQ              [ shift and go to state 249 ]
  ! NE              [ shift and go to state 250 ]
  ! EQL             [ shift and go to state 251 ]
  ! NEL             [ shift and go to state 252 ]
  ! AND             [ shift and go to state 253 ]
  ! XOR             [ shift and go to state 254 ]
  ! XNOR            [ shift and go to state 255 ]
  ! OR              [ shift and go to state 256 ]
  ! LAND            [ shift and go to state 257 ]
  ! LOR             [ shift and go to state 258 ]
  ! COND            [ shift and go to state 259 ]


state 267

    (137) expression -> OR expression .
    (140) expression -> expression . POWER expression
    (141) expression -> expression . TIMES expression
    (142) expression -> expression . DIVIDE expression
    (143) expression -> expression . MOD expression
    (144) expression -> expression . PLUS expression
    (145) expression -> expression . MINUS expression
    (146) expression -> expression . LSHIFT expression
    (147) expression -> expression . RSHIFT expression
    (148) expression -> expression . LSHIFTA expression
    (149) expression -> expression . RSHIFTA expression
    (150) expression -> expression . LT expression
    (151) expression -> expression . GT expression
    (152) expression -> expression . LE expression
    (153) expression -> expression . GE expression
    (154) expression -> expression . EQ expression
    (155) expression -> expression . NE expression
    (156) expression -> expression . EQL expression
    (157) expression -> expression . NEL expression
    (158) expression -> expression . AND expression
    (159) expression -> expression . XOR expression
    (160) expression -> expression . XNOR expression
    (161) expression -> expression . OR expression
    (162) expression -> expression . LAND expression
    (163) expression -> expression . LOR expression
    (164) expression -> expression . COND expression COLON expression

    TIMES           reduce using rule 137 (expression -> OR expression .)
    POWER           reduce using rule 137 (expression -> OR expression .)
    DIVIDE          reduce using rule 137 (expression -> OR expression .)
    MOD             reduce using rule 137 (expression -> OR expression .)
    PLUS            reduce using rule 137 (expression -> OR expression .)
    MINUS           reduce using rule 137 (expression -> OR expression .)
    LSHIFT          reduce using rule 137 (expression -> OR expression .)
    RSHIFT          reduce using rule 137 (expression -> OR expression .)
    LSHIFTA         reduce using rule 137 (expression -> OR expression .)
    RSHIFTA         reduce using rule 137 (expression -> OR expression .)
    LT              reduce using rule 137 (expression -> OR expression .)
    GT              reduce using rule 137 (expression -> OR expression .)
    LE              reduce using rule 137 (expression -> OR expression .)
    GE              reduce using rule 137 (expression -> OR expression .)
    EQ              reduce using rule 137 (expression -> OR expression .)
    NE              reduce using rule 137 (expression -> OR expression .)
    EQL             reduce using rule 137 (expression -> OR expression .)
    NEL             reduce using rule 137 (expression -> OR expression .)
    AND             reduce using rule 137 (expression -> OR expression .)
    XOR             reduce using rule 137 (expression -> OR expression .)
    XNOR            reduce using rule 137 (expression -> OR expression .)
    OR              reduce using rule 137 (expression -> OR expression .)
    LAND            reduce using rule 137 (expression -> OR expression .)
    LOR             reduce using rule 137 (expression -> OR expression .)
    COND            reduce using rule 137 (expression -> OR expression .)
    RPAREN          reduce using rule 137 (expression -> OR expression .)
    LBRACE          reduce using rule 137 (expression -> OR expression .)
    RBRACE          reduce using rule 137 (expression -> OR expression .)
    COMMA           reduce using rule 137 (expression -> OR expression .)
    COLON           reduce using rule 137 (expression -> OR expression .)
    SEMICOLON       reduce using rule 137 (expression -> OR expression .)
    PLUSCOLON       reduce using rule 137 (expression -> OR expression .)
    MINUSCOLON      reduce using rule 137 (expression -> OR expression .)
    RBRACKET        reduce using rule 137 (expression -> OR expression .)

  ! POWER           [ shift and go to state 236 ]
  ! TIMES           [ shift and go to state 398 ]
  ! DIVIDE          [ shift and go to state 237 ]
  ! MOD             [ shift and go to state 238 ]
  ! PLUS            [ shift and go to state 239 ]
  ! MINUS           [ shift and go to state 240 ]
  ! LSHIFT          [ shift and go to state 241 ]
  ! RSHIFT          [ shift and go to state 242 ]
  ! LSHIFTA         [ shift and go to state 243 ]
  ! RSHIFTA         [ shift and go to state 244 ]
  ! LT              [ shift and go to state 245 ]
  ! GT              [ shift and go to state 246 ]
  ! LE              [ shift and go to state 247 ]
  ! GE              [ shift and go to state 248 ]
  ! EQ              [ shift and go to state 249 ]
  ! NE              [ shift and go to state 250 ]
  ! EQL             [ shift and go to state 251 ]
  ! NEL             [ shift and go to state 252 ]
  ! AND             [ shift and go to state 253 ]
  ! XOR             [ shift and go to state 254 ]
  ! XNOR            [ shift and go to state 255 ]
  ! OR              [ shift and go to state 256 ]
  ! LAND            [ shift and go to state 257 ]
  ! LOR             [ shift and go to state 258 ]
  ! COND            [ shift and go to state 259 ]


state 268

    (138) expression -> XOR expression .
    (140) expression -> expression . POWER expression
    (141) expression -> expression . TIMES expression
    (142) expression -> expression . DIVIDE expression
    (143) expression -> expression . MOD expression
    (144) expression -> expression . PLUS expression
    (145) expression -> expression . MINUS expression
    (146) expression -> expression . LSHIFT expression
    (147) expression -> expression . RSHIFT expression
    (148) expression -> expression . LSHIFTA expression
    (149) expression -> expression . RSHIFTA expression
    (150) expression -> expression . LT expression
    (151) expression -> expression . GT expression
    (152) expression -> expression . LE expression
    (153) expression -> expression . GE expression
    (154) expression -> expression . EQ expression
    (155) expression -> expression . NE expression
    (156) expression -> expression . EQL expression
    (157) expression -> expression . NEL expression
    (158) expression -> expression . AND expression
    (159) expression -> expression . XOR expression
    (160) expression -> expression . XNOR expression
    (161) expression -> expression . OR expression
    (162) expression -> expression . LAND expression
    (163) expression -> expression . LOR expression
    (164) expression -> expression . COND expression COLON expression

    TIMES           reduce using rule 138 (expression -> XOR expression .)
    POWER           reduce using rule 138 (expression -> XOR expression .)
    DIVIDE          reduce using rule 138 (expression -> XOR expression .)
    MOD             reduce using rule 138 (expression -> XOR expression .)
    PLUS            reduce using rule 138 (expression -> XOR expression .)
    MINUS           reduce using rule 138 (expression -> XOR expression .)
    LSHIFT          reduce using rule 138 (expression -> XOR expression .)
    RSHIFT          reduce using rule 138 (expression -> XOR expression .)
    LSHIFTA         reduce using rule 138 (expression -> XOR expression .)
    RSHIFTA         reduce using rule 138 (expression -> XOR expression .)
    LT              reduce using rule 138 (expression -> XOR expression .)
    GT              reduce using rule 138 (expression -> XOR expression .)
    LE              reduce using rule 138 (expression -> XOR expression .)
    GE              reduce using rule 138 (expression -> XOR expression .)
    EQ              reduce using rule 138 (expression -> XOR expression .)
    NE              reduce using rule 138 (expression -> XOR expression .)
    EQL             reduce using rule 138 (expression -> XOR expression .)
    NEL             reduce using rule 138 (expression -> XOR expression .)
    AND             reduce using rule 138 (expression -> XOR expression .)
    XOR             reduce using rule 138 (expression -> XOR expression .)
    XNOR            reduce using rule 138 (expression -> XOR expression .)
    OR              reduce using rule 138 (expression -> XOR expression .)
    LAND            reduce using rule 138 (expression -> XOR expression .)
    LOR             reduce using rule 138 (expression -> XOR expression .)
    COND            reduce using rule 138 (expression -> XOR expression .)
    RPAREN          reduce using rule 138 (expression -> XOR expression .)
    LBRACE          reduce using rule 138 (expression -> XOR expression .)
    RBRACE          reduce using rule 138 (expression -> XOR expression .)
    COMMA           reduce using rule 138 (expression -> XOR expression .)
    COLON           reduce using rule 138 (expression -> XOR expression .)
    SEMICOLON       reduce using rule 138 (expression -> XOR expression .)
    PLUSCOLON       reduce using rule 138 (expression -> XOR expression .)
    MINUSCOLON      reduce using rule 138 (expression -> XOR expression .)
    RBRACKET        reduce using rule 138 (expression -> XOR expression .)

  ! POWER           [ shift and go to state 236 ]
  ! TIMES           [ shift and go to state 398 ]
  ! DIVIDE          [ shift and go to state 237 ]
  ! MOD             [ shift and go to state 238 ]
  ! PLUS            [ shift and go to state 239 ]
  ! MINUS           [ shift and go to state 240 ]
  ! LSHIFT          [ shift and go to state 241 ]
  ! RSHIFT          [ shift and go to state 242 ]
  ! LSHIFTA         [ shift and go to state 243 ]
  ! RSHIFTA         [ shift and go to state 244 ]
  ! LT              [ shift and go to state 245 ]
  ! GT              [ shift and go to state 246 ]
  ! LE              [ shift and go to state 247 ]
  ! GE              [ shift and go to state 248 ]
  ! EQ              [ shift and go to state 249 ]
  ! NE              [ shift and go to state 250 ]
  ! EQL             [ shift and go to state 251 ]
  ! NEL             [ shift and go to state 252 ]
  ! AND             [ shift and go to state 253 ]
  ! XOR             [ shift and go to state 254 ]
  ! XNOR            [ shift and go to state 255 ]
  ! OR              [ shift and go to state 256 ]
  ! LAND            [ shift and go to state 257 ]
  ! LOR             [ shift and go to state 258 ]
  ! COND            [ shift and go to state 259 ]


state 269

    (139) expression -> XNOR expression .
    (140) expression -> expression . POWER expression
    (141) expression -> expression . TIMES expression
    (142) expression -> expression . DIVIDE expression
    (143) expression -> expression . MOD expression
    (144) expression -> expression . PLUS expression
    (145) expression -> expression . MINUS expression
    (146) expression -> expression . LSHIFT expression
    (147) expression -> expression . RSHIFT expression
    (148) expression -> expression . LSHIFTA expression
    (149) expression -> expression . RSHIFTA expression
    (150) expression -> expression . LT expression
    (151) expression -> expression . GT expression
    (152) expression -> expression . LE expression
    (153) expression -> expression . GE expression
    (154) expression -> expression . EQ expression
    (155) expression -> expression . NE expression
    (156) expression -> expression . EQL expression
    (157) expression -> expression . NEL expression
    (158) expression -> expression . AND expression
    (159) expression -> expression . XOR expression
    (160) expression -> expression . XNOR expression
    (161) expression -> expression . OR expression
    (162) expression -> expression . LAND expression
    (163) expression -> expression . LOR expression
    (164) expression -> expression . COND expression COLON expression

    TIMES           reduce using rule 139 (expression -> XNOR expression .)
    POWER           reduce using rule 139 (expression -> XNOR expression .)
    DIVIDE          reduce using rule 139 (expression -> XNOR expression .)
    MOD             reduce using rule 139 (expression -> XNOR expression .)
    PLUS            reduce using rule 139 (expression -> XNOR expression .)
    MINUS           reduce using rule 139 (expression -> XNOR expression .)
    LSHIFT          reduce using rule 139 (expression -> XNOR expression .)
    RSHIFT          reduce using rule 139 (expression -> XNOR expression .)
    LSHIFTA         reduce using rule 139 (expression -> XNOR expression .)
    RSHIFTA         reduce using rule 139 (expression -> XNOR expression .)
    LT              reduce using rule 139 (expression -> XNOR expression .)
    GT              reduce using rule 139 (expression -> XNOR expression .)
    LE              reduce using rule 139 (expression -> XNOR expression .)
    GE              reduce using rule 139 (expression -> XNOR expression .)
    EQ              reduce using rule 139 (expression -> XNOR expression .)
    NE              reduce using rule 139 (expression -> XNOR expression .)
    EQL             reduce using rule 139 (expression -> XNOR expression .)
    NEL             reduce using rule 139 (expression -> XNOR expression .)
    AND             reduce using rule 139 (expression -> XNOR expression .)
    XOR             reduce using rule 139 (expression -> XNOR expression .)
    XNOR            reduce using rule 139 (expression -> XNOR expression .)
    OR              reduce using rule 139 (expression -> XNOR expression .)
    LAND            reduce using rule 139 (expression -> XNOR expression .)
    LOR             reduce using rule 139 (expression -> XNOR expression .)
    COND            reduce using rule 139 (expression -> XNOR expression .)
    RPAREN          reduce using rule 139 (expression -> XNOR expression .)
    LBRACE          reduce using rule 139 (expression -> XNOR expression .)
    RBRACE          reduce using rule 139 (expression -> XNOR expression .)
    COMMA           reduce using rule 139 (expression -> XNOR expression .)
    COLON           reduce using rule 139 (expression -> XNOR expression .)
    SEMICOLON       reduce using rule 139 (expression -> XNOR expression .)
    PLUSCOLON       reduce using rule 139 (expression -> XNOR expression .)
    MINUSCOLON      reduce using rule 139 (expression -> XNOR expression .)
    RBRACKET        reduce using rule 139 (expression -> XNOR expression .)

  ! POWER           [ shift and go to state 236 ]
  ! TIMES           [ shift and go to state 398 ]
  ! DIVIDE          [ shift and go to state 237 ]
  ! MOD             [ shift and go to state 238 ]
  ! PLUS            [ shift and go to state 239 ]
  ! MINUS           [ shift and go to state 240 ]
  ! LSHIFT          [ shift and go to state 241 ]
  ! RSHIFT          [ shift and go to state 242 ]
  ! LSHIFTA         [ shift and go to state 243 ]
  ! RSHIFTA         [ shift and go to state 244 ]
  ! LT              [ shift and go to state 245 ]
  ! GT              [ shift and go to state 246 ]
  ! LE              [ shift and go to state 247 ]
  ! GE              [ shift and go to state 248 ]
  ! EQ              [ shift and go to state 249 ]
  ! NE              [ shift and go to state 250 ]
  ! EQL             [ shift and go to state 251 ]
  ! NEL             [ shift and go to state 252 ]
  ! AND             [ shift and go to state 253 ]
  ! XOR             [ shift and go to state 254 ]
  ! XNOR            [ shift and go to state 255 ]
  ! OR              [ shift and go to state 256 ]
  ! LAND            [ shift and go to state 257 ]
  ! LOR             [ shift and go to state 258 ]
  ! COND            [ shift and go to state 259 ]


state 270

    (181) partselect -> pointer LBRACKET . expression COLON expression RBRACKET
    (182) partselect -> pointer LBRACKET . expression PLUSCOLON expression RBRACKET
    (183) partselect -> pointer LBRACKET . expression MINUSCOLON expression RBRACKET
    (185) pointer -> pointer LBRACKET . expression RBRACKET
    (130) expression -> . MINUS expression
    (131) expression -> . PLUS expression
    (132) expression -> . LNOT expression
    (133) expression -> . NOT expression
    (134) expression -> . AND expression
    (135) expression -> . NAND expression
    (136) expression -> . NOR expression
    (137) expression -> . OR expression
    (138) expression -> . XOR expression
    (139) expression -> . XNOR expression
    (140) expression -> . expression POWER expression
    (141) expression -> . expression TIMES expression
    (142) expression -> . expression DIVIDE expression
    (143) expression -> . expression MOD expression
    (144) expression -> . expression PLUS expression
    (145) expression -> . expression MINUS expression
    (146) expression -> . expression LSHIFT expression
    (147) expression -> . expression RSHIFT expression
    (148) expression -> . expression LSHIFTA expression
    (149) expression -> . expression RSHIFTA expression
    (150) expression -> . expression LT expression
    (151) expression -> . expression GT expression
    (152) expression -> . expression LE expression
    (153) expression -> . expression GE expression
    (154) expression -> . expression EQ expression
    (155) expression -> . expression NE expression
    (156) expression -> . expression EQL expression
    (157) expression -> . expression NEL expression
    (158) expression -> . expression AND expression
    (159) expression -> . expression XOR expression
    (160) expression -> . expression XNOR expression
    (161) expression -> . expression OR expression
    (162) expression -> . expression LAND expression
    (163) expression -> . expression LOR expression
    (164) expression -> . expression COND expression COLON expression
    (165) expression -> . LPAREN expression RPAREN
    (166) expression -> . concat
    (167) expression -> . repeat
    (168) expression -> . partselect
    (169) expression -> . pointer
    (170) expression -> . functioncall
    (171) expression -> . systemcall
    (172) expression -> . identifier
    (173) expression -> . const_expression
    (174) concat -> . LBRACE concatlist RBRACE
    (177) repeat -> . LBRACE expression concat RBRACE
    (178) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (179) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (180) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (181) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (182) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (183) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (184) pointer -> . identifier LBRACKET expression RBRACKET
    (185) pointer -> . pointer LBRACKET expression RBRACKET
    (373) functioncall -> . identifier LPAREN func_args RPAREN
    (351) systemcall -> . DOLLER ID
    (352) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (353) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (392) identifier -> . ID
    (393) identifier -> . scope ID
    (186) const_expression -> . intnumber
    (187) const_expression -> . floatnumber
    (188) const_expression -> . stringliteral
    (394) scope -> . identifier DOT
    (395) scope -> . pointer DOT
    (190) intnumber -> . INTNUMBER_DEC
    (191) intnumber -> . SIGNED_INTNUMBER_DEC
    (192) intnumber -> . INTNUMBER_BIN
    (193) intnumber -> . SIGNED_INTNUMBER_BIN
    (194) intnumber -> . INTNUMBER_OCT
    (195) intnumber -> . SIGNED_INTNUMBER_OCT
    (196) intnumber -> . INTNUMBER_HEX
    (197) intnumber -> . SIGNED_INTNUMBER_HEX
    (189) floatnumber -> . FLOATNUMBER
    (198) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 88
    PLUS            shift and go to state 89
    LNOT            shift and go to state 90
    NOT             shift and go to state 91
    AND             shift and go to state 92
    NAND            shift and go to state 93
    NOR             shift and go to state 94
    OR              shift and go to state 95
    XOR             shift and go to state 96
    XNOR            shift and go to state 97
    LPAREN          shift and go to state 85
    LBRACE          shift and go to state 106
    DOLLER          shift and go to state 107
    ID              shift and go to state 86
    INTNUMBER_DEC   shift and go to state 112
    SIGNED_INTNUMBER_DEC shift and go to state 113
    INTNUMBER_BIN   shift and go to state 114
    SIGNED_INTNUMBER_BIN shift and go to state 115
    INTNUMBER_OCT   shift and go to state 116
    SIGNED_INTNUMBER_OCT shift and go to state 117
    INTNUMBER_HEX   shift and go to state 118
    SIGNED_INTNUMBER_HEX shift and go to state 119
    FLOATNUMBER     shift and go to state 120
    STRING_LITERAL  shift and go to state 121

    pointer                        shift and go to state 101
    expression                     shift and go to state 425
    concat                         shift and go to state 98
    repeat                         shift and go to state 99
    partselect                     shift and go to state 100
    functioncall                   shift and go to state 102
    systemcall                     shift and go to state 103
    identifier                     shift and go to state 104
    const_expression               shift and go to state 105
    scope                          shift and go to state 108
    intnumber                      shift and go to state 109
    floatnumber                    shift and go to state 110
    stringliteral                  shift and go to state 111

state 271

    (395) scope -> pointer DOT .

    ID              reduce using rule 395 (scope -> pointer DOT .)


state 272

    (178) partselect -> identifier LBRACKET . expression COLON expression RBRACKET
    (179) partselect -> identifier LBRACKET . expression PLUSCOLON expression RBRACKET
    (180) partselect -> identifier LBRACKET . expression MINUSCOLON expression RBRACKET
    (184) pointer -> identifier LBRACKET . expression RBRACKET
    (130) expression -> . MINUS expression
    (131) expression -> . PLUS expression
    (132) expression -> . LNOT expression
    (133) expression -> . NOT expression
    (134) expression -> . AND expression
    (135) expression -> . NAND expression
    (136) expression -> . NOR expression
    (137) expression -> . OR expression
    (138) expression -> . XOR expression
    (139) expression -> . XNOR expression
    (140) expression -> . expression POWER expression
    (141) expression -> . expression TIMES expression
    (142) expression -> . expression DIVIDE expression
    (143) expression -> . expression MOD expression
    (144) expression -> . expression PLUS expression
    (145) expression -> . expression MINUS expression
    (146) expression -> . expression LSHIFT expression
    (147) expression -> . expression RSHIFT expression
    (148) expression -> . expression LSHIFTA expression
    (149) expression -> . expression RSHIFTA expression
    (150) expression -> . expression LT expression
    (151) expression -> . expression GT expression
    (152) expression -> . expression LE expression
    (153) expression -> . expression GE expression
    (154) expression -> . expression EQ expression
    (155) expression -> . expression NE expression
    (156) expression -> . expression EQL expression
    (157) expression -> . expression NEL expression
    (158) expression -> . expression AND expression
    (159) expression -> . expression XOR expression
    (160) expression -> . expression XNOR expression
    (161) expression -> . expression OR expression
    (162) expression -> . expression LAND expression
    (163) expression -> . expression LOR expression
    (164) expression -> . expression COND expression COLON expression
    (165) expression -> . LPAREN expression RPAREN
    (166) expression -> . concat
    (167) expression -> . repeat
    (168) expression -> . partselect
    (169) expression -> . pointer
    (170) expression -> . functioncall
    (171) expression -> . systemcall
    (172) expression -> . identifier
    (173) expression -> . const_expression
    (174) concat -> . LBRACE concatlist RBRACE
    (177) repeat -> . LBRACE expression concat RBRACE
    (178) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (179) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (180) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (181) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (182) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (183) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (184) pointer -> . identifier LBRACKET expression RBRACKET
    (185) pointer -> . pointer LBRACKET expression RBRACKET
    (373) functioncall -> . identifier LPAREN func_args RPAREN
    (351) systemcall -> . DOLLER ID
    (352) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (353) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (392) identifier -> . ID
    (393) identifier -> . scope ID
    (186) const_expression -> . intnumber
    (187) const_expression -> . floatnumber
    (188) const_expression -> . stringliteral
    (394) scope -> . identifier DOT
    (395) scope -> . pointer DOT
    (190) intnumber -> . INTNUMBER_DEC
    (191) intnumber -> . SIGNED_INTNUMBER_DEC
    (192) intnumber -> . INTNUMBER_BIN
    (193) intnumber -> . SIGNED_INTNUMBER_BIN
    (194) intnumber -> . INTNUMBER_OCT
    (195) intnumber -> . SIGNED_INTNUMBER_OCT
    (196) intnumber -> . INTNUMBER_HEX
    (197) intnumber -> . SIGNED_INTNUMBER_HEX
    (189) floatnumber -> . FLOATNUMBER
    (198) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 88
    PLUS            shift and go to state 89
    LNOT            shift and go to state 90
    NOT             shift and go to state 91
    AND             shift and go to state 92
    NAND            shift and go to state 93
    NOR             shift and go to state 94
    OR              shift and go to state 95
    XOR             shift and go to state 96
    XNOR            shift and go to state 97
    LPAREN          shift and go to state 85
    LBRACE          shift and go to state 106
    DOLLER          shift and go to state 107
    ID              shift and go to state 86
    INTNUMBER_DEC   shift and go to state 112
    SIGNED_INTNUMBER_DEC shift and go to state 113
    INTNUMBER_BIN   shift and go to state 114
    SIGNED_INTNUMBER_BIN shift and go to state 115
    INTNUMBER_OCT   shift and go to state 116
    SIGNED_INTNUMBER_OCT shift and go to state 117
    INTNUMBER_HEX   shift and go to state 118
    SIGNED_INTNUMBER_HEX shift and go to state 119
    FLOATNUMBER     shift and go to state 120
    STRING_LITERAL  shift and go to state 121

    identifier                     shift and go to state 104
    expression                     shift and go to state 426
    concat                         shift and go to state 98
    repeat                         shift and go to state 99
    partselect                     shift and go to state 100
    pointer                        shift and go to state 101
    functioncall                   shift and go to state 102
    systemcall                     shift and go to state 103
    const_expression               shift and go to state 105
    scope                          shift and go to state 108
    intnumber                      shift and go to state 109
    floatnumber                    shift and go to state 110
    stringliteral                  shift and go to state 111

state 273

    (373) functioncall -> identifier LPAREN . func_args RPAREN
    (374) func_args -> . func_args COMMA expression
    (375) func_args -> . expression
    (376) func_args -> . empty
    (130) expression -> . MINUS expression
    (131) expression -> . PLUS expression
    (132) expression -> . LNOT expression
    (133) expression -> . NOT expression
    (134) expression -> . AND expression
    (135) expression -> . NAND expression
    (136) expression -> . NOR expression
    (137) expression -> . OR expression
    (138) expression -> . XOR expression
    (139) expression -> . XNOR expression
    (140) expression -> . expression POWER expression
    (141) expression -> . expression TIMES expression
    (142) expression -> . expression DIVIDE expression
    (143) expression -> . expression MOD expression
    (144) expression -> . expression PLUS expression
    (145) expression -> . expression MINUS expression
    (146) expression -> . expression LSHIFT expression
    (147) expression -> . expression RSHIFT expression
    (148) expression -> . expression LSHIFTA expression
    (149) expression -> . expression RSHIFTA expression
    (150) expression -> . expression LT expression
    (151) expression -> . expression GT expression
    (152) expression -> . expression LE expression
    (153) expression -> . expression GE expression
    (154) expression -> . expression EQ expression
    (155) expression -> . expression NE expression
    (156) expression -> . expression EQL expression
    (157) expression -> . expression NEL expression
    (158) expression -> . expression AND expression
    (159) expression -> . expression XOR expression
    (160) expression -> . expression XNOR expression
    (161) expression -> . expression OR expression
    (162) expression -> . expression LAND expression
    (163) expression -> . expression LOR expression
    (164) expression -> . expression COND expression COLON expression
    (165) expression -> . LPAREN expression RPAREN
    (166) expression -> . concat
    (167) expression -> . repeat
    (168) expression -> . partselect
    (169) expression -> . pointer
    (170) expression -> . functioncall
    (171) expression -> . systemcall
    (172) expression -> . identifier
    (173) expression -> . const_expression
    (400) empty -> .
    (174) concat -> . LBRACE concatlist RBRACE
    (177) repeat -> . LBRACE expression concat RBRACE
    (178) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (179) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (180) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (181) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (182) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (183) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (184) pointer -> . identifier LBRACKET expression RBRACKET
    (185) pointer -> . pointer LBRACKET expression RBRACKET
    (373) functioncall -> . identifier LPAREN func_args RPAREN
    (351) systemcall -> . DOLLER ID
    (352) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (353) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (392) identifier -> . ID
    (393) identifier -> . scope ID
    (186) const_expression -> . intnumber
    (187) const_expression -> . floatnumber
    (188) const_expression -> . stringliteral
    (394) scope -> . identifier DOT
    (395) scope -> . pointer DOT
    (190) intnumber -> . INTNUMBER_DEC
    (191) intnumber -> . SIGNED_INTNUMBER_DEC
    (192) intnumber -> . INTNUMBER_BIN
    (193) intnumber -> . SIGNED_INTNUMBER_BIN
    (194) intnumber -> . INTNUMBER_OCT
    (195) intnumber -> . SIGNED_INTNUMBER_OCT
    (196) intnumber -> . INTNUMBER_HEX
    (197) intnumber -> . SIGNED_INTNUMBER_HEX
    (189) floatnumber -> . FLOATNUMBER
    (198) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 88
    PLUS            shift and go to state 89
    LNOT            shift and go to state 90
    NOT             shift and go to state 91
    AND             shift and go to state 92
    NAND            shift and go to state 93
    NOR             shift and go to state 94
    OR              shift and go to state 95
    XOR             shift and go to state 96
    XNOR            shift and go to state 97
    LPAREN          shift and go to state 85
    RPAREN          reduce using rule 400 (empty -> .)
    COMMA           reduce using rule 400 (empty -> .)
    LBRACE          shift and go to state 106
    DOLLER          shift and go to state 107
    ID              shift and go to state 86
    INTNUMBER_DEC   shift and go to state 112
    SIGNED_INTNUMBER_DEC shift and go to state 113
    INTNUMBER_BIN   shift and go to state 114
    SIGNED_INTNUMBER_BIN shift and go to state 115
    INTNUMBER_OCT   shift and go to state 116
    SIGNED_INTNUMBER_OCT shift and go to state 117
    INTNUMBER_HEX   shift and go to state 118
    SIGNED_INTNUMBER_HEX shift and go to state 119
    FLOATNUMBER     shift and go to state 120
    STRING_LITERAL  shift and go to state 121

    identifier                     shift and go to state 104
    func_args                      shift and go to state 427
    expression                     shift and go to state 428
    empty                          shift and go to state 429
    concat                         shift and go to state 98
    repeat                         shift and go to state 99
    partselect                     shift and go to state 100
    pointer                        shift and go to state 101
    functioncall                   shift and go to state 102
    systemcall                     shift and go to state 103
    const_expression               shift and go to state 105
    scope                          shift and go to state 108
    intnumber                      shift and go to state 109
    floatnumber                    shift and go to state 110
    stringliteral                  shift and go to state 111

state 274

    (394) scope -> identifier DOT .

    ID              reduce using rule 394 (scope -> identifier DOT .)


state 275

    (174) concat -> LBRACE concatlist . RBRACE
    (175) concatlist -> concatlist . COMMA expression

    RBRACE          shift and go to state 430
    COMMA           shift and go to state 431


state 276

    (177) repeat -> LBRACE expression . concat RBRACE
    (176) concatlist -> expression .
    (140) expression -> expression . POWER expression
    (141) expression -> expression . TIMES expression
    (142) expression -> expression . DIVIDE expression
    (143) expression -> expression . MOD expression
    (144) expression -> expression . PLUS expression
    (145) expression -> expression . MINUS expression
    (146) expression -> expression . LSHIFT expression
    (147) expression -> expression . RSHIFT expression
    (148) expression -> expression . LSHIFTA expression
    (149) expression -> expression . RSHIFTA expression
    (150) expression -> expression . LT expression
    (151) expression -> expression . GT expression
    (152) expression -> expression . LE expression
    (153) expression -> expression . GE expression
    (154) expression -> expression . EQ expression
    (155) expression -> expression . NE expression
    (156) expression -> expression . EQL expression
    (157) expression -> expression . NEL expression
    (158) expression -> expression . AND expression
    (159) expression -> expression . XOR expression
    (160) expression -> expression . XNOR expression
    (161) expression -> expression . OR expression
    (162) expression -> expression . LAND expression
    (163) expression -> expression . LOR expression
    (164) expression -> expression . COND expression COLON expression
    (174) concat -> . LBRACE concatlist RBRACE

    RBRACE          reduce using rule 176 (concatlist -> expression .)
    COMMA           reduce using rule 176 (concatlist -> expression .)
    POWER           shift and go to state 236
    TIMES           shift and go to state 398
    DIVIDE          shift and go to state 237
    MOD             shift and go to state 238
    PLUS            shift and go to state 239
    MINUS           shift and go to state 240
    LSHIFT          shift and go to state 241
    RSHIFT          shift and go to state 242
    LSHIFTA         shift and go to state 243
    RSHIFTA         shift and go to state 244
    LT              shift and go to state 245
    GT              shift and go to state 246
    LE              shift and go to state 247
    GE              shift and go to state 248
    EQ              shift and go to state 249
    NE              shift and go to state 250
    EQL             shift and go to state 251
    NEL             shift and go to state 252
    AND             shift and go to state 253
    XOR             shift and go to state 254
    XNOR            shift and go to state 255
    OR              shift and go to state 256
    LAND            shift and go to state 257
    LOR             shift and go to state 258
    COND            shift and go to state 259
    LBRACE          shift and go to state 432

    concat                         shift and go to state 433

state 277

    (351) systemcall -> DOLLER ID .
    (352) systemcall -> DOLLER ID . LPAREN sysargs RPAREN

    TIMES           reduce using rule 351 (systemcall -> DOLLER ID .)
    POWER           reduce using rule 351 (systemcall -> DOLLER ID .)
    DIVIDE          reduce using rule 351 (systemcall -> DOLLER ID .)
    MOD             reduce using rule 351 (systemcall -> DOLLER ID .)
    PLUS            reduce using rule 351 (systemcall -> DOLLER ID .)
    MINUS           reduce using rule 351 (systemcall -> DOLLER ID .)
    LSHIFT          reduce using rule 351 (systemcall -> DOLLER ID .)
    RSHIFT          reduce using rule 351 (systemcall -> DOLLER ID .)
    LSHIFTA         reduce using rule 351 (systemcall -> DOLLER ID .)
    RSHIFTA         reduce using rule 351 (systemcall -> DOLLER ID .)
    LT              reduce using rule 351 (systemcall -> DOLLER ID .)
    GT              reduce using rule 351 (systemcall -> DOLLER ID .)
    LE              reduce using rule 351 (systemcall -> DOLLER ID .)
    GE              reduce using rule 351 (systemcall -> DOLLER ID .)
    EQ              reduce using rule 351 (systemcall -> DOLLER ID .)
    NE              reduce using rule 351 (systemcall -> DOLLER ID .)
    EQL             reduce using rule 351 (systemcall -> DOLLER ID .)
    NEL             reduce using rule 351 (systemcall -> DOLLER ID .)
    AND             reduce using rule 351 (systemcall -> DOLLER ID .)
    XOR             reduce using rule 351 (systemcall -> DOLLER ID .)
    XNOR            reduce using rule 351 (systemcall -> DOLLER ID .)
    OR              reduce using rule 351 (systemcall -> DOLLER ID .)
    LAND            reduce using rule 351 (systemcall -> DOLLER ID .)
    LOR             reduce using rule 351 (systemcall -> DOLLER ID .)
    COND            reduce using rule 351 (systemcall -> DOLLER ID .)
    SEMICOLON       reduce using rule 351 (systemcall -> DOLLER ID .)
    RPAREN          reduce using rule 351 (systemcall -> DOLLER ID .)
    LBRACE          reduce using rule 351 (systemcall -> DOLLER ID .)
    RBRACE          reduce using rule 351 (systemcall -> DOLLER ID .)
    COMMA           reduce using rule 351 (systemcall -> DOLLER ID .)
    COLON           reduce using rule 351 (systemcall -> DOLLER ID .)
    PLUSCOLON       reduce using rule 351 (systemcall -> DOLLER ID .)
    MINUSCOLON      reduce using rule 351 (systemcall -> DOLLER ID .)
    RBRACKET        reduce using rule 351 (systemcall -> DOLLER ID .)
    LPAREN          shift and go to state 434


state 278

    (353) systemcall -> DOLLER SIGNED . LPAREN sysargs RPAREN

    LPAREN          shift and go to state 435


state 279

    (393) identifier -> scope ID .

    LBRACKET        reduce using rule 393 (identifier -> scope ID .)
    LPAREN          reduce using rule 393 (identifier -> scope ID .)
    DOT             reduce using rule 393 (identifier -> scope ID .)
    TIMES           reduce using rule 393 (identifier -> scope ID .)
    POWER           reduce using rule 393 (identifier -> scope ID .)
    DIVIDE          reduce using rule 393 (identifier -> scope ID .)
    MOD             reduce using rule 393 (identifier -> scope ID .)
    PLUS            reduce using rule 393 (identifier -> scope ID .)
    MINUS           reduce using rule 393 (identifier -> scope ID .)
    LSHIFT          reduce using rule 393 (identifier -> scope ID .)
    RSHIFT          reduce using rule 393 (identifier -> scope ID .)
    LSHIFTA         reduce using rule 393 (identifier -> scope ID .)
    RSHIFTA         reduce using rule 393 (identifier -> scope ID .)
    LT              reduce using rule 393 (identifier -> scope ID .)
    GT              reduce using rule 393 (identifier -> scope ID .)
    LE              reduce using rule 393 (identifier -> scope ID .)
    GE              reduce using rule 393 (identifier -> scope ID .)
    EQ              reduce using rule 393 (identifier -> scope ID .)
    NE              reduce using rule 393 (identifier -> scope ID .)
    EQL             reduce using rule 393 (identifier -> scope ID .)
    NEL             reduce using rule 393 (identifier -> scope ID .)
    AND             reduce using rule 393 (identifier -> scope ID .)
    XOR             reduce using rule 393 (identifier -> scope ID .)
    XNOR            reduce using rule 393 (identifier -> scope ID .)
    OR              reduce using rule 393 (identifier -> scope ID .)
    LAND            reduce using rule 393 (identifier -> scope ID .)
    LOR             reduce using rule 393 (identifier -> scope ID .)
    COND            reduce using rule 393 (identifier -> scope ID .)
    EQUALS          reduce using rule 393 (identifier -> scope ID .)
    RPAREN          reduce using rule 393 (identifier -> scope ID .)
    LBRACE          reduce using rule 393 (identifier -> scope ID .)
    RBRACE          reduce using rule 393 (identifier -> scope ID .)
    COMMA           reduce using rule 393 (identifier -> scope ID .)
    COLON           reduce using rule 393 (identifier -> scope ID .)
    SEMICOLON       reduce using rule 393 (identifier -> scope ID .)
    PLUSCOLON       reduce using rule 393 (identifier -> scope ID .)
    MINUSCOLON      reduce using rule 393 (identifier -> scope ID .)
    RBRACKET        reduce using rule 393 (identifier -> scope ID .)
    ID              reduce using rule 393 (identifier -> scope ID .)
    LNOT            reduce using rule 393 (identifier -> scope ID .)
    NOT             reduce using rule 393 (identifier -> scope ID .)
    NAND            reduce using rule 393 (identifier -> scope ID .)
    NOR             reduce using rule 393 (identifier -> scope ID .)
    DOLLER          reduce using rule 393 (identifier -> scope ID .)
    INTNUMBER_DEC   reduce using rule 393 (identifier -> scope ID .)
    SIGNED_INTNUMBER_DEC reduce using rule 393 (identifier -> scope ID .)
    INTNUMBER_BIN   reduce using rule 393 (identifier -> scope ID .)
    SIGNED_INTNUMBER_BIN reduce using rule 393 (identifier -> scope ID .)
    INTNUMBER_OCT   reduce using rule 393 (identifier -> scope ID .)
    SIGNED_INTNUMBER_OCT reduce using rule 393 (identifier -> scope ID .)
    INTNUMBER_HEX   reduce using rule 393 (identifier -> scope ID .)
    SIGNED_INTNUMBER_HEX reduce using rule 393 (identifier -> scope ID .)
    FLOATNUMBER     reduce using rule 393 (identifier -> scope ID .)
    STRING_LITERAL  reduce using rule 393 (identifier -> scope ID .)
    IF              reduce using rule 393 (identifier -> scope ID .)
    CASE            reduce using rule 393 (identifier -> scope ID .)
    CASEX           reduce using rule 393 (identifier -> scope ID .)
    UNIQUE          reduce using rule 393 (identifier -> scope ID .)
    FOR             reduce using rule 393 (identifier -> scope ID .)
    WHILE           reduce using rule 393 (identifier -> scope ID .)
    WAIT            reduce using rule 393 (identifier -> scope ID .)
    FOREVER         reduce using rule 393 (identifier -> scope ID .)
    BEGIN           reduce using rule 393 (identifier -> scope ID .)
    FORK            reduce using rule 393 (identifier -> scope ID .)
    DELAY           reduce using rule 393 (identifier -> scope ID .)
    AT              reduce using rule 393 (identifier -> scope ID .)
    DISABLE         reduce using rule 393 (identifier -> scope ID .)
    SENS_OR         reduce using rule 393 (identifier -> scope ID .)


state 280

    (333) generate -> GENERATE generate_items ENDGENERATE .

    ENDMODULE       reduce using rule 333 (generate -> GENERATE generate_items ENDGENERATE .)
    GENERATE        reduce using rule 333 (generate -> GENERATE generate_items ENDGENERATE .)
    INTEGER         reduce using rule 333 (generate -> GENERATE generate_items ENDGENERATE .)
    REAL            reduce using rule 333 (generate -> GENERATE generate_items ENDGENERATE .)
    PARAMETER       reduce using rule 333 (generate -> GENERATE generate_items ENDGENERATE .)
    LOCALPARAM      reduce using rule 333 (generate -> GENERATE generate_items ENDGENERATE .)
    GENVAR          reduce using rule 333 (generate -> GENERATE generate_items ENDGENERATE .)
    ASSIGN          reduce using rule 333 (generate -> GENERATE generate_items ENDGENERATE .)
    ALWAYS          reduce using rule 333 (generate -> GENERATE generate_items ENDGENERATE .)
    ALWAYS_FF       reduce using rule 333 (generate -> GENERATE generate_items ENDGENERATE .)
    ALWAYS_COMB     reduce using rule 333 (generate -> GENERATE generate_items ENDGENERATE .)
    INITIAL         reduce using rule 333 (generate -> GENERATE generate_items ENDGENERATE .)
    ID              reduce using rule 333 (generate -> GENERATE generate_items ENDGENERATE .)
    SENS_OR         reduce using rule 333 (generate -> GENERATE generate_items ENDGENERATE .)
    FUNCTION        reduce using rule 333 (generate -> GENERATE generate_items ENDGENERATE .)
    TASK            reduce using rule 333 (generate -> GENERATE generate_items ENDGENERATE .)
    LPAREN          reduce using rule 333 (generate -> GENERATE generate_items ENDGENERATE .)
    INPUT           reduce using rule 333 (generate -> GENERATE generate_items ENDGENERATE .)
    OUTPUT          reduce using rule 333 (generate -> GENERATE generate_items ENDGENERATE .)
    INOUT           reduce using rule 333 (generate -> GENERATE generate_items ENDGENERATE .)
    TRI             reduce using rule 333 (generate -> GENERATE generate_items ENDGENERATE .)
    REG             reduce using rule 333 (generate -> GENERATE generate_items ENDGENERATE .)
    LOGIC           reduce using rule 333 (generate -> GENERATE generate_items ENDGENERATE .)
    WIRE            reduce using rule 333 (generate -> GENERATE generate_items ENDGENERATE .)
    SIGNED          reduce using rule 333 (generate -> GENERATE generate_items ENDGENERATE .)
    SUPPLY0         reduce using rule 333 (generate -> GENERATE generate_items ENDGENERATE .)
    SUPPLY1         reduce using rule 333 (generate -> GENERATE generate_items ENDGENERATE .)


state 281

    (335) generate_items -> generate_items generate_item .

    ENDGENERATE     reduce using rule 335 (generate_items -> generate_items generate_item .)
    IF              reduce using rule 335 (generate_items -> generate_items generate_item .)
    FOR             reduce using rule 335 (generate_items -> generate_items generate_item .)
    INTEGER         reduce using rule 335 (generate_items -> generate_items generate_item .)
    REAL            reduce using rule 335 (generate_items -> generate_items generate_item .)
    PARAMETER       reduce using rule 335 (generate_items -> generate_items generate_item .)
    LOCALPARAM      reduce using rule 335 (generate_items -> generate_items generate_item .)
    GENVAR          reduce using rule 335 (generate_items -> generate_items generate_item .)
    ASSIGN          reduce using rule 335 (generate_items -> generate_items generate_item .)
    ALWAYS          reduce using rule 335 (generate_items -> generate_items generate_item .)
    ALWAYS_FF       reduce using rule 335 (generate_items -> generate_items generate_item .)
    ALWAYS_COMB     reduce using rule 335 (generate_items -> generate_items generate_item .)
    INITIAL         reduce using rule 335 (generate_items -> generate_items generate_item .)
    ID              reduce using rule 335 (generate_items -> generate_items generate_item .)
    SENS_OR         reduce using rule 335 (generate_items -> generate_items generate_item .)
    FUNCTION        reduce using rule 335 (generate_items -> generate_items generate_item .)
    TASK            reduce using rule 335 (generate_items -> generate_items generate_item .)
    LPAREN          reduce using rule 335 (generate_items -> generate_items generate_item .)
    INPUT           reduce using rule 335 (generate_items -> generate_items generate_item .)
    OUTPUT          reduce using rule 335 (generate_items -> generate_items generate_item .)
    INOUT           reduce using rule 335 (generate_items -> generate_items generate_item .)
    TRI             reduce using rule 335 (generate_items -> generate_items generate_item .)
    REG             reduce using rule 335 (generate_items -> generate_items generate_item .)
    LOGIC           reduce using rule 335 (generate_items -> generate_items generate_item .)
    WIRE            reduce using rule 335 (generate_items -> generate_items generate_item .)
    SIGNED          reduce using rule 335 (generate_items -> generate_items generate_item .)
    SUPPLY0         reduce using rule 335 (generate_items -> generate_items generate_item .)
    SUPPLY1         reduce using rule 335 (generate_items -> generate_items generate_item .)
    END             reduce using rule 335 (generate_items -> generate_items generate_item .)


state 282

    (342) generate_if -> IF LPAREN . cond RPAREN gif_true_item ELSE gif_false_item
    (343) generate_if -> IF LPAREN . cond RPAREN gif_true_item
    (266) cond -> . expression
    (130) expression -> . MINUS expression
    (131) expression -> . PLUS expression
    (132) expression -> . LNOT expression
    (133) expression -> . NOT expression
    (134) expression -> . AND expression
    (135) expression -> . NAND expression
    (136) expression -> . NOR expression
    (137) expression -> . OR expression
    (138) expression -> . XOR expression
    (139) expression -> . XNOR expression
    (140) expression -> . expression POWER expression
    (141) expression -> . expression TIMES expression
    (142) expression -> . expression DIVIDE expression
    (143) expression -> . expression MOD expression
    (144) expression -> . expression PLUS expression
    (145) expression -> . expression MINUS expression
    (146) expression -> . expression LSHIFT expression
    (147) expression -> . expression RSHIFT expression
    (148) expression -> . expression LSHIFTA expression
    (149) expression -> . expression RSHIFTA expression
    (150) expression -> . expression LT expression
    (151) expression -> . expression GT expression
    (152) expression -> . expression LE expression
    (153) expression -> . expression GE expression
    (154) expression -> . expression EQ expression
    (155) expression -> . expression NE expression
    (156) expression -> . expression EQL expression
    (157) expression -> . expression NEL expression
    (158) expression -> . expression AND expression
    (159) expression -> . expression XOR expression
    (160) expression -> . expression XNOR expression
    (161) expression -> . expression OR expression
    (162) expression -> . expression LAND expression
    (163) expression -> . expression LOR expression
    (164) expression -> . expression COND expression COLON expression
    (165) expression -> . LPAREN expression RPAREN
    (166) expression -> . concat
    (167) expression -> . repeat
    (168) expression -> . partselect
    (169) expression -> . pointer
    (170) expression -> . functioncall
    (171) expression -> . systemcall
    (172) expression -> . identifier
    (173) expression -> . const_expression
    (174) concat -> . LBRACE concatlist RBRACE
    (177) repeat -> . LBRACE expression concat RBRACE
    (178) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (179) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (180) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (181) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (182) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (183) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (184) pointer -> . identifier LBRACKET expression RBRACKET
    (185) pointer -> . pointer LBRACKET expression RBRACKET
    (373) functioncall -> . identifier LPAREN func_args RPAREN
    (351) systemcall -> . DOLLER ID
    (352) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (353) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (392) identifier -> . ID
    (393) identifier -> . scope ID
    (186) const_expression -> . intnumber
    (187) const_expression -> . floatnumber
    (188) const_expression -> . stringliteral
    (394) scope -> . identifier DOT
    (395) scope -> . pointer DOT
    (190) intnumber -> . INTNUMBER_DEC
    (191) intnumber -> . SIGNED_INTNUMBER_DEC
    (192) intnumber -> . INTNUMBER_BIN
    (193) intnumber -> . SIGNED_INTNUMBER_BIN
    (194) intnumber -> . INTNUMBER_OCT
    (195) intnumber -> . SIGNED_INTNUMBER_OCT
    (196) intnumber -> . INTNUMBER_HEX
    (197) intnumber -> . SIGNED_INTNUMBER_HEX
    (189) floatnumber -> . FLOATNUMBER
    (198) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 88
    PLUS            shift and go to state 89
    LNOT            shift and go to state 90
    NOT             shift and go to state 91
    AND             shift and go to state 92
    NAND            shift and go to state 93
    NOR             shift and go to state 94
    OR              shift and go to state 95
    XOR             shift and go to state 96
    XNOR            shift and go to state 97
    LPAREN          shift and go to state 85
    LBRACE          shift and go to state 106
    DOLLER          shift and go to state 107
    ID              shift and go to state 86
    INTNUMBER_DEC   shift and go to state 112
    SIGNED_INTNUMBER_DEC shift and go to state 113
    INTNUMBER_BIN   shift and go to state 114
    SIGNED_INTNUMBER_BIN shift and go to state 115
    INTNUMBER_OCT   shift and go to state 116
    SIGNED_INTNUMBER_OCT shift and go to state 117
    INTNUMBER_HEX   shift and go to state 118
    SIGNED_INTNUMBER_HEX shift and go to state 119
    FLOATNUMBER     shift and go to state 120
    STRING_LITERAL  shift and go to state 121

    cond                           shift and go to state 436
    expression                     shift and go to state 437
    concat                         shift and go to state 98
    repeat                         shift and go to state 99
    partselect                     shift and go to state 100
    pointer                        shift and go to state 101
    functioncall                   shift and go to state 102
    systemcall                     shift and go to state 103
    identifier                     shift and go to state 104
    const_expression               shift and go to state 105
    scope                          shift and go to state 108
    intnumber                      shift and go to state 109
    floatnumber                    shift and go to state 110
    stringliteral                  shift and go to state 111

state 283

    (348) generate_for -> FOR LPAREN . forpre forcond forpost RPAREN generate_forcontent
    (271) forpre -> . blocking_substitution
    (272) forpre -> . SEMICOLON
    (237) blocking_substitution -> . delays lvalue EQUALS delays rvalue SEMICOLON
    (240) delays -> . DELAY LPAREN expression RPAREN
    (241) delays -> . DELAY identifier
    (242) delays -> . DELAY intnumber
    (243) delays -> . DELAY floatnumber
    (244) delays -> . empty
    (400) empty -> .

    SEMICOLON       shift and go to state 440
    DELAY           shift and go to state 140
    LBRACE          reduce using rule 400 (empty -> .)
    ID              reduce using rule 400 (empty -> .)

    forpre                         shift and go to state 438
    blocking_substitution          shift and go to state 439
    delays                         shift and go to state 441
    empty                          shift and go to state 141

state 284

    (77) decl -> sigtypes declnamelist SEMICOLON .

    ENDMODULE       reduce using rule 77 (decl -> sigtypes declnamelist SEMICOLON .)
    GENERATE        reduce using rule 77 (decl -> sigtypes declnamelist SEMICOLON .)
    INTEGER         reduce using rule 77 (decl -> sigtypes declnamelist SEMICOLON .)
    REAL            reduce using rule 77 (decl -> sigtypes declnamelist SEMICOLON .)
    PARAMETER       reduce using rule 77 (decl -> sigtypes declnamelist SEMICOLON .)
    LOCALPARAM      reduce using rule 77 (decl -> sigtypes declnamelist SEMICOLON .)
    GENVAR          reduce using rule 77 (decl -> sigtypes declnamelist SEMICOLON .)
    ASSIGN          reduce using rule 77 (decl -> sigtypes declnamelist SEMICOLON .)
    ALWAYS          reduce using rule 77 (decl -> sigtypes declnamelist SEMICOLON .)
    ALWAYS_FF       reduce using rule 77 (decl -> sigtypes declnamelist SEMICOLON .)
    ALWAYS_COMB     reduce using rule 77 (decl -> sigtypes declnamelist SEMICOLON .)
    INITIAL         reduce using rule 77 (decl -> sigtypes declnamelist SEMICOLON .)
    ID              reduce using rule 77 (decl -> sigtypes declnamelist SEMICOLON .)
    SENS_OR         reduce using rule 77 (decl -> sigtypes declnamelist SEMICOLON .)
    FUNCTION        reduce using rule 77 (decl -> sigtypes declnamelist SEMICOLON .)
    TASK            reduce using rule 77 (decl -> sigtypes declnamelist SEMICOLON .)
    LPAREN          reduce using rule 77 (decl -> sigtypes declnamelist SEMICOLON .)
    INPUT           reduce using rule 77 (decl -> sigtypes declnamelist SEMICOLON .)
    OUTPUT          reduce using rule 77 (decl -> sigtypes declnamelist SEMICOLON .)
    INOUT           reduce using rule 77 (decl -> sigtypes declnamelist SEMICOLON .)
    TRI             reduce using rule 77 (decl -> sigtypes declnamelist SEMICOLON .)
    REG             reduce using rule 77 (decl -> sigtypes declnamelist SEMICOLON .)
    LOGIC           reduce using rule 77 (decl -> sigtypes declnamelist SEMICOLON .)
    WIRE            reduce using rule 77 (decl -> sigtypes declnamelist SEMICOLON .)
    SIGNED          reduce using rule 77 (decl -> sigtypes declnamelist SEMICOLON .)
    SUPPLY0         reduce using rule 77 (decl -> sigtypes declnamelist SEMICOLON .)
    SUPPLY1         reduce using rule 77 (decl -> sigtypes declnamelist SEMICOLON .)
    ENDGENERATE     reduce using rule 77 (decl -> sigtypes declnamelist SEMICOLON .)
    IF              reduce using rule 77 (decl -> sigtypes declnamelist SEMICOLON .)
    FOR             reduce using rule 77 (decl -> sigtypes declnamelist SEMICOLON .)
    WHILE           reduce using rule 77 (decl -> sigtypes declnamelist SEMICOLON .)
    CASE            reduce using rule 77 (decl -> sigtypes declnamelist SEMICOLON .)
    CASEX           reduce using rule 77 (decl -> sigtypes declnamelist SEMICOLON .)
    BEGIN           reduce using rule 77 (decl -> sigtypes declnamelist SEMICOLON .)
    DELAY           reduce using rule 77 (decl -> sigtypes declnamelist SEMICOLON .)
    LBRACE          reduce using rule 77 (decl -> sigtypes declnamelist SEMICOLON .)
    END             reduce using rule 77 (decl -> sigtypes declnamelist SEMICOLON .)
    UNIQUE          reduce using rule 77 (decl -> sigtypes declnamelist SEMICOLON .)
    WAIT            reduce using rule 77 (decl -> sigtypes declnamelist SEMICOLON .)
    FOREVER         reduce using rule 77 (decl -> sigtypes declnamelist SEMICOLON .)
    FORK            reduce using rule 77 (decl -> sigtypes declnamelist SEMICOLON .)
    AT              reduce using rule 77 (decl -> sigtypes declnamelist SEMICOLON .)
    DOLLER          reduce using rule 77 (decl -> sigtypes declnamelist SEMICOLON .)
    DISABLE         reduce using rule 77 (decl -> sigtypes declnamelist SEMICOLON .)
    SEMICOLON       reduce using rule 77 (decl -> sigtypes declnamelist SEMICOLON .)
    ELSE            reduce using rule 77 (decl -> sigtypes declnamelist SEMICOLON .)


state 285

    (79) declnamelist -> declnamelist COMMA . declname
    (81) declname -> . ID
    (82) declname -> . ID length

    ID              shift and go to state 443

    declname                       shift and go to state 442

state 286

    (78) decl -> sigtypes width declnamelist . SEMICOLON
    (79) declnamelist -> declnamelist . COMMA declname

    SEMICOLON       shift and go to state 444
    COMMA           shift and go to state 285


state 287

    (84) declassign -> sigtypes width declassign_element . SEMICOLON

    SEMICOLON       shift and go to state 445


state 288

    (83) declassign -> sigtypes declassign_element SEMICOLON .

    ENDMODULE       reduce using rule 83 (declassign -> sigtypes declassign_element SEMICOLON .)
    GENERATE        reduce using rule 83 (declassign -> sigtypes declassign_element SEMICOLON .)
    INTEGER         reduce using rule 83 (declassign -> sigtypes declassign_element SEMICOLON .)
    REAL            reduce using rule 83 (declassign -> sigtypes declassign_element SEMICOLON .)
    PARAMETER       reduce using rule 83 (declassign -> sigtypes declassign_element SEMICOLON .)
    LOCALPARAM      reduce using rule 83 (declassign -> sigtypes declassign_element SEMICOLON .)
    GENVAR          reduce using rule 83 (declassign -> sigtypes declassign_element SEMICOLON .)
    ASSIGN          reduce using rule 83 (declassign -> sigtypes declassign_element SEMICOLON .)
    ALWAYS          reduce using rule 83 (declassign -> sigtypes declassign_element SEMICOLON .)
    ALWAYS_FF       reduce using rule 83 (declassign -> sigtypes declassign_element SEMICOLON .)
    ALWAYS_COMB     reduce using rule 83 (declassign -> sigtypes declassign_element SEMICOLON .)
    INITIAL         reduce using rule 83 (declassign -> sigtypes declassign_element SEMICOLON .)
    ID              reduce using rule 83 (declassign -> sigtypes declassign_element SEMICOLON .)
    SENS_OR         reduce using rule 83 (declassign -> sigtypes declassign_element SEMICOLON .)
    FUNCTION        reduce using rule 83 (declassign -> sigtypes declassign_element SEMICOLON .)
    TASK            reduce using rule 83 (declassign -> sigtypes declassign_element SEMICOLON .)
    LPAREN          reduce using rule 83 (declassign -> sigtypes declassign_element SEMICOLON .)
    INPUT           reduce using rule 83 (declassign -> sigtypes declassign_element SEMICOLON .)
    OUTPUT          reduce using rule 83 (declassign -> sigtypes declassign_element SEMICOLON .)
    INOUT           reduce using rule 83 (declassign -> sigtypes declassign_element SEMICOLON .)
    TRI             reduce using rule 83 (declassign -> sigtypes declassign_element SEMICOLON .)
    REG             reduce using rule 83 (declassign -> sigtypes declassign_element SEMICOLON .)
    LOGIC           reduce using rule 83 (declassign -> sigtypes declassign_element SEMICOLON .)
    WIRE            reduce using rule 83 (declassign -> sigtypes declassign_element SEMICOLON .)
    SIGNED          reduce using rule 83 (declassign -> sigtypes declassign_element SEMICOLON .)
    SUPPLY0         reduce using rule 83 (declassign -> sigtypes declassign_element SEMICOLON .)
    SUPPLY1         reduce using rule 83 (declassign -> sigtypes declassign_element SEMICOLON .)
    ENDGENERATE     reduce using rule 83 (declassign -> sigtypes declassign_element SEMICOLON .)
    IF              reduce using rule 83 (declassign -> sigtypes declassign_element SEMICOLON .)
    FOR             reduce using rule 83 (declassign -> sigtypes declassign_element SEMICOLON .)
    ELSE            reduce using rule 83 (declassign -> sigtypes declassign_element SEMICOLON .)
    END             reduce using rule 83 (declassign -> sigtypes declassign_element SEMICOLON .)


state 289

    (54) width -> LBRACKET expression . COLON expression RBRACKET
    (140) expression -> expression . POWER expression
    (141) expression -> expression . TIMES expression
    (142) expression -> expression . DIVIDE expression
    (143) expression -> expression . MOD expression
    (144) expression -> expression . PLUS expression
    (145) expression -> expression . MINUS expression
    (146) expression -> expression . LSHIFT expression
    (147) expression -> expression . RSHIFT expression
    (148) expression -> expression . LSHIFTA expression
    (149) expression -> expression . RSHIFTA expression
    (150) expression -> expression . LT expression
    (151) expression -> expression . GT expression
    (152) expression -> expression . LE expression
    (153) expression -> expression . GE expression
    (154) expression -> expression . EQ expression
    (155) expression -> expression . NE expression
    (156) expression -> expression . EQL expression
    (157) expression -> expression . NEL expression
    (158) expression -> expression . AND expression
    (159) expression -> expression . XOR expression
    (160) expression -> expression . XNOR expression
    (161) expression -> expression . OR expression
    (162) expression -> expression . LAND expression
    (163) expression -> expression . LOR expression
    (164) expression -> expression . COND expression COLON expression

    COLON           shift and go to state 446
    POWER           shift and go to state 236
    TIMES           shift and go to state 398
    DIVIDE          shift and go to state 237
    MOD             shift and go to state 238
    PLUS            shift and go to state 239
    MINUS           shift and go to state 240
    LSHIFT          shift and go to state 241
    RSHIFT          shift and go to state 242
    LSHIFTA         shift and go to state 243
    RSHIFTA         shift and go to state 244
    LT              shift and go to state 245
    GT              shift and go to state 246
    LE              shift and go to state 247
    GE              shift and go to state 248
    EQ              shift and go to state 249
    NE              shift and go to state 250
    EQL             shift and go to state 251
    NEL             shift and go to state 252
    AND             shift and go to state 253
    XOR             shift and go to state 254
    XNOR            shift and go to state 255
    OR              shift and go to state 256
    LAND            shift and go to state 257
    LOR             shift and go to state 258
    COND            shift and go to state 259


state 290

    (85) declassign_element -> ID EQUALS . rvalue
    (129) rvalue -> . expression
    (130) expression -> . MINUS expression
    (131) expression -> . PLUS expression
    (132) expression -> . LNOT expression
    (133) expression -> . NOT expression
    (134) expression -> . AND expression
    (135) expression -> . NAND expression
    (136) expression -> . NOR expression
    (137) expression -> . OR expression
    (138) expression -> . XOR expression
    (139) expression -> . XNOR expression
    (140) expression -> . expression POWER expression
    (141) expression -> . expression TIMES expression
    (142) expression -> . expression DIVIDE expression
    (143) expression -> . expression MOD expression
    (144) expression -> . expression PLUS expression
    (145) expression -> . expression MINUS expression
    (146) expression -> . expression LSHIFT expression
    (147) expression -> . expression RSHIFT expression
    (148) expression -> . expression LSHIFTA expression
    (149) expression -> . expression RSHIFTA expression
    (150) expression -> . expression LT expression
    (151) expression -> . expression GT expression
    (152) expression -> . expression LE expression
    (153) expression -> . expression GE expression
    (154) expression -> . expression EQ expression
    (155) expression -> . expression NE expression
    (156) expression -> . expression EQL expression
    (157) expression -> . expression NEL expression
    (158) expression -> . expression AND expression
    (159) expression -> . expression XOR expression
    (160) expression -> . expression XNOR expression
    (161) expression -> . expression OR expression
    (162) expression -> . expression LAND expression
    (163) expression -> . expression LOR expression
    (164) expression -> . expression COND expression COLON expression
    (165) expression -> . LPAREN expression RPAREN
    (166) expression -> . concat
    (167) expression -> . repeat
    (168) expression -> . partselect
    (169) expression -> . pointer
    (170) expression -> . functioncall
    (171) expression -> . systemcall
    (172) expression -> . identifier
    (173) expression -> . const_expression
    (174) concat -> . LBRACE concatlist RBRACE
    (177) repeat -> . LBRACE expression concat RBRACE
    (178) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (179) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (180) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (181) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (182) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (183) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (184) pointer -> . identifier LBRACKET expression RBRACKET
    (185) pointer -> . pointer LBRACKET expression RBRACKET
    (373) functioncall -> . identifier LPAREN func_args RPAREN
    (351) systemcall -> . DOLLER ID
    (352) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (353) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (392) identifier -> . ID
    (393) identifier -> . scope ID
    (186) const_expression -> . intnumber
    (187) const_expression -> . floatnumber
    (188) const_expression -> . stringliteral
    (394) scope -> . identifier DOT
    (395) scope -> . pointer DOT
    (190) intnumber -> . INTNUMBER_DEC
    (191) intnumber -> . SIGNED_INTNUMBER_DEC
    (192) intnumber -> . INTNUMBER_BIN
    (193) intnumber -> . SIGNED_INTNUMBER_BIN
    (194) intnumber -> . INTNUMBER_OCT
    (195) intnumber -> . SIGNED_INTNUMBER_OCT
    (196) intnumber -> . INTNUMBER_HEX
    (197) intnumber -> . SIGNED_INTNUMBER_HEX
    (189) floatnumber -> . FLOATNUMBER
    (198) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 88
    PLUS            shift and go to state 89
    LNOT            shift and go to state 90
    NOT             shift and go to state 91
    AND             shift and go to state 92
    NAND            shift and go to state 93
    NOR             shift and go to state 94
    OR              shift and go to state 95
    XOR             shift and go to state 96
    XNOR            shift and go to state 97
    LPAREN          shift and go to state 85
    LBRACE          shift and go to state 106
    DOLLER          shift and go to state 107
    ID              shift and go to state 86
    INTNUMBER_DEC   shift and go to state 112
    SIGNED_INTNUMBER_DEC shift and go to state 113
    INTNUMBER_BIN   shift and go to state 114
    SIGNED_INTNUMBER_BIN shift and go to state 115
    INTNUMBER_OCT   shift and go to state 116
    SIGNED_INTNUMBER_OCT shift and go to state 117
    INTNUMBER_HEX   shift and go to state 118
    SIGNED_INTNUMBER_HEX shift and go to state 119
    FLOATNUMBER     shift and go to state 120
    STRING_LITERAL  shift and go to state 121

    rvalue                         shift and go to state 447
    expression                     shift and go to state 448
    concat                         shift and go to state 98
    repeat                         shift and go to state 99
    partselect                     shift and go to state 100
    pointer                        shift and go to state 101
    functioncall                   shift and go to state 102
    systemcall                     shift and go to state 103
    identifier                     shift and go to state 104
    const_expression               shift and go to state 105
    scope                          shift and go to state 108
    intnumber                      shift and go to state 109
    floatnumber                    shift and go to state 110
    stringliteral                  shift and go to state 111

state 291

    (82) declname -> ID length .

    SEMICOLON       reduce using rule 82 (declname -> ID length .)
    COMMA           reduce using rule 82 (declname -> ID length .)


state 292

    (55) length -> LBRACKET . expression COLON expression RBRACKET
    (130) expression -> . MINUS expression
    (131) expression -> . PLUS expression
    (132) expression -> . LNOT expression
    (133) expression -> . NOT expression
    (134) expression -> . AND expression
    (135) expression -> . NAND expression
    (136) expression -> . NOR expression
    (137) expression -> . OR expression
    (138) expression -> . XOR expression
    (139) expression -> . XNOR expression
    (140) expression -> . expression POWER expression
    (141) expression -> . expression TIMES expression
    (142) expression -> . expression DIVIDE expression
    (143) expression -> . expression MOD expression
    (144) expression -> . expression PLUS expression
    (145) expression -> . expression MINUS expression
    (146) expression -> . expression LSHIFT expression
    (147) expression -> . expression RSHIFT expression
    (148) expression -> . expression LSHIFTA expression
    (149) expression -> . expression RSHIFTA expression
    (150) expression -> . expression LT expression
    (151) expression -> . expression GT expression
    (152) expression -> . expression LE expression
    (153) expression -> . expression GE expression
    (154) expression -> . expression EQ expression
    (155) expression -> . expression NE expression
    (156) expression -> . expression EQL expression
    (157) expression -> . expression NEL expression
    (158) expression -> . expression AND expression
    (159) expression -> . expression XOR expression
    (160) expression -> . expression XNOR expression
    (161) expression -> . expression OR expression
    (162) expression -> . expression LAND expression
    (163) expression -> . expression LOR expression
    (164) expression -> . expression COND expression COLON expression
    (165) expression -> . LPAREN expression RPAREN
    (166) expression -> . concat
    (167) expression -> . repeat
    (168) expression -> . partselect
    (169) expression -> . pointer
    (170) expression -> . functioncall
    (171) expression -> . systemcall
    (172) expression -> . identifier
    (173) expression -> . const_expression
    (174) concat -> . LBRACE concatlist RBRACE
    (177) repeat -> . LBRACE expression concat RBRACE
    (178) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (179) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (180) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (181) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (182) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (183) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (184) pointer -> . identifier LBRACKET expression RBRACKET
    (185) pointer -> . pointer LBRACKET expression RBRACKET
    (373) functioncall -> . identifier LPAREN func_args RPAREN
    (351) systemcall -> . DOLLER ID
    (352) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (353) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (392) identifier -> . ID
    (393) identifier -> . scope ID
    (186) const_expression -> . intnumber
    (187) const_expression -> . floatnumber
    (188) const_expression -> . stringliteral
    (394) scope -> . identifier DOT
    (395) scope -> . pointer DOT
    (190) intnumber -> . INTNUMBER_DEC
    (191) intnumber -> . SIGNED_INTNUMBER_DEC
    (192) intnumber -> . INTNUMBER_BIN
    (193) intnumber -> . SIGNED_INTNUMBER_BIN
    (194) intnumber -> . INTNUMBER_OCT
    (195) intnumber -> . SIGNED_INTNUMBER_OCT
    (196) intnumber -> . INTNUMBER_HEX
    (197) intnumber -> . SIGNED_INTNUMBER_HEX
    (189) floatnumber -> . FLOATNUMBER
    (198) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 88
    PLUS            shift and go to state 89
    LNOT            shift and go to state 90
    NOT             shift and go to state 91
    AND             shift and go to state 92
    NAND            shift and go to state 93
    NOR             shift and go to state 94
    OR              shift and go to state 95
    XOR             shift and go to state 96
    XNOR            shift and go to state 97
    LPAREN          shift and go to state 85
    LBRACE          shift and go to state 106
    DOLLER          shift and go to state 107
    ID              shift and go to state 86
    INTNUMBER_DEC   shift and go to state 112
    SIGNED_INTNUMBER_DEC shift and go to state 113
    INTNUMBER_BIN   shift and go to state 114
    SIGNED_INTNUMBER_BIN shift and go to state 115
    INTNUMBER_OCT   shift and go to state 116
    SIGNED_INTNUMBER_OCT shift and go to state 117
    INTNUMBER_HEX   shift and go to state 118
    SIGNED_INTNUMBER_HEX shift and go to state 119
    FLOATNUMBER     shift and go to state 120
    STRING_LITERAL  shift and go to state 121

    expression                     shift and go to state 449
    concat                         shift and go to state 98
    repeat                         shift and go to state 99
    partselect                     shift and go to state 100
    pointer                        shift and go to state 101
    functioncall                   shift and go to state 102
    systemcall                     shift and go to state 103
    identifier                     shift and go to state 104
    const_expression               shift and go to state 105
    scope                          shift and go to state 108
    intnumber                      shift and go to state 109
    floatnumber                    shift and go to state 110
    stringliteral                  shift and go to state 111

state 293

    (86) declassign_element -> delays ID . EQUALS delays rvalue

    EQUALS          shift and go to state 450


state 294

    (240) delays -> DELAY LPAREN . expression RPAREN
    (130) expression -> . MINUS expression
    (131) expression -> . PLUS expression
    (132) expression -> . LNOT expression
    (133) expression -> . NOT expression
    (134) expression -> . AND expression
    (135) expression -> . NAND expression
    (136) expression -> . NOR expression
    (137) expression -> . OR expression
    (138) expression -> . XOR expression
    (139) expression -> . XNOR expression
    (140) expression -> . expression POWER expression
    (141) expression -> . expression TIMES expression
    (142) expression -> . expression DIVIDE expression
    (143) expression -> . expression MOD expression
    (144) expression -> . expression PLUS expression
    (145) expression -> . expression MINUS expression
    (146) expression -> . expression LSHIFT expression
    (147) expression -> . expression RSHIFT expression
    (148) expression -> . expression LSHIFTA expression
    (149) expression -> . expression RSHIFTA expression
    (150) expression -> . expression LT expression
    (151) expression -> . expression GT expression
    (152) expression -> . expression LE expression
    (153) expression -> . expression GE expression
    (154) expression -> . expression EQ expression
    (155) expression -> . expression NE expression
    (156) expression -> . expression EQL expression
    (157) expression -> . expression NEL expression
    (158) expression -> . expression AND expression
    (159) expression -> . expression XOR expression
    (160) expression -> . expression XNOR expression
    (161) expression -> . expression OR expression
    (162) expression -> . expression LAND expression
    (163) expression -> . expression LOR expression
    (164) expression -> . expression COND expression COLON expression
    (165) expression -> . LPAREN expression RPAREN
    (166) expression -> . concat
    (167) expression -> . repeat
    (168) expression -> . partselect
    (169) expression -> . pointer
    (170) expression -> . functioncall
    (171) expression -> . systemcall
    (172) expression -> . identifier
    (173) expression -> . const_expression
    (174) concat -> . LBRACE concatlist RBRACE
    (177) repeat -> . LBRACE expression concat RBRACE
    (178) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (179) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (180) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (181) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (182) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (183) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (184) pointer -> . identifier LBRACKET expression RBRACKET
    (185) pointer -> . pointer LBRACKET expression RBRACKET
    (373) functioncall -> . identifier LPAREN func_args RPAREN
    (351) systemcall -> . DOLLER ID
    (352) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (353) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (392) identifier -> . ID
    (393) identifier -> . scope ID
    (186) const_expression -> . intnumber
    (187) const_expression -> . floatnumber
    (188) const_expression -> . stringliteral
    (394) scope -> . identifier DOT
    (395) scope -> . pointer DOT
    (190) intnumber -> . INTNUMBER_DEC
    (191) intnumber -> . SIGNED_INTNUMBER_DEC
    (192) intnumber -> . INTNUMBER_BIN
    (193) intnumber -> . SIGNED_INTNUMBER_BIN
    (194) intnumber -> . INTNUMBER_OCT
    (195) intnumber -> . SIGNED_INTNUMBER_OCT
    (196) intnumber -> . INTNUMBER_HEX
    (197) intnumber -> . SIGNED_INTNUMBER_HEX
    (189) floatnumber -> . FLOATNUMBER
    (198) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 88
    PLUS            shift and go to state 89
    LNOT            shift and go to state 90
    NOT             shift and go to state 91
    AND             shift and go to state 92
    NAND            shift and go to state 93
    NOR             shift and go to state 94
    OR              shift and go to state 95
    XOR             shift and go to state 96
    XNOR            shift and go to state 97
    LPAREN          shift and go to state 85
    LBRACE          shift and go to state 106
    DOLLER          shift and go to state 107
    ID              shift and go to state 86
    INTNUMBER_DEC   shift and go to state 112
    SIGNED_INTNUMBER_DEC shift and go to state 113
    INTNUMBER_BIN   shift and go to state 114
    SIGNED_INTNUMBER_BIN shift and go to state 115
    INTNUMBER_OCT   shift and go to state 116
    SIGNED_INTNUMBER_OCT shift and go to state 117
    INTNUMBER_HEX   shift and go to state 118
    SIGNED_INTNUMBER_HEX shift and go to state 119
    FLOATNUMBER     shift and go to state 120
    STRING_LITERAL  shift and go to state 121

    expression                     shift and go to state 451
    concat                         shift and go to state 98
    repeat                         shift and go to state 99
    partselect                     shift and go to state 100
    pointer                        shift and go to state 101
    functioncall                   shift and go to state 102
    systemcall                     shift and go to state 103
    identifier                     shift and go to state 104
    const_expression               shift and go to state 105
    scope                          shift and go to state 108
    intnumber                      shift and go to state 109
    floatnumber                    shift and go to state 110
    stringliteral                  shift and go to state 111

state 295

    (241) delays -> DELAY identifier .
    (394) scope -> identifier . DOT
    (184) pointer -> identifier . LBRACKET expression RBRACKET

    ID              reduce using rule 241 (delays -> DELAY identifier .)
    LBRACE          reduce using rule 241 (delays -> DELAY identifier .)
    MINUS           reduce using rule 241 (delays -> DELAY identifier .)
    PLUS            reduce using rule 241 (delays -> DELAY identifier .)
    LNOT            reduce using rule 241 (delays -> DELAY identifier .)
    NOT             reduce using rule 241 (delays -> DELAY identifier .)
    AND             reduce using rule 241 (delays -> DELAY identifier .)
    NAND            reduce using rule 241 (delays -> DELAY identifier .)
    NOR             reduce using rule 241 (delays -> DELAY identifier .)
    OR              reduce using rule 241 (delays -> DELAY identifier .)
    XOR             reduce using rule 241 (delays -> DELAY identifier .)
    XNOR            reduce using rule 241 (delays -> DELAY identifier .)
    LPAREN          reduce using rule 241 (delays -> DELAY identifier .)
    DOLLER          reduce using rule 241 (delays -> DELAY identifier .)
    INTNUMBER_DEC   reduce using rule 241 (delays -> DELAY identifier .)
    SIGNED_INTNUMBER_DEC reduce using rule 241 (delays -> DELAY identifier .)
    INTNUMBER_BIN   reduce using rule 241 (delays -> DELAY identifier .)
    SIGNED_INTNUMBER_BIN reduce using rule 241 (delays -> DELAY identifier .)
    INTNUMBER_OCT   reduce using rule 241 (delays -> DELAY identifier .)
    SIGNED_INTNUMBER_OCT reduce using rule 241 (delays -> DELAY identifier .)
    INTNUMBER_HEX   reduce using rule 241 (delays -> DELAY identifier .)
    SIGNED_INTNUMBER_HEX reduce using rule 241 (delays -> DELAY identifier .)
    FLOATNUMBER     reduce using rule 241 (delays -> DELAY identifier .)
    STRING_LITERAL  reduce using rule 241 (delays -> DELAY identifier .)
    IF              reduce using rule 241 (delays -> DELAY identifier .)
    DOT             shift and go to state 274
    LBRACKET        shift and go to state 452


state 296

    (242) delays -> DELAY intnumber .

    ID              reduce using rule 242 (delays -> DELAY intnumber .)
    LBRACE          reduce using rule 242 (delays -> DELAY intnumber .)
    MINUS           reduce using rule 242 (delays -> DELAY intnumber .)
    PLUS            reduce using rule 242 (delays -> DELAY intnumber .)
    LNOT            reduce using rule 242 (delays -> DELAY intnumber .)
    NOT             reduce using rule 242 (delays -> DELAY intnumber .)
    AND             reduce using rule 242 (delays -> DELAY intnumber .)
    NAND            reduce using rule 242 (delays -> DELAY intnumber .)
    NOR             reduce using rule 242 (delays -> DELAY intnumber .)
    OR              reduce using rule 242 (delays -> DELAY intnumber .)
    XOR             reduce using rule 242 (delays -> DELAY intnumber .)
    XNOR            reduce using rule 242 (delays -> DELAY intnumber .)
    LPAREN          reduce using rule 242 (delays -> DELAY intnumber .)
    DOLLER          reduce using rule 242 (delays -> DELAY intnumber .)
    INTNUMBER_DEC   reduce using rule 242 (delays -> DELAY intnumber .)
    SIGNED_INTNUMBER_DEC reduce using rule 242 (delays -> DELAY intnumber .)
    INTNUMBER_BIN   reduce using rule 242 (delays -> DELAY intnumber .)
    SIGNED_INTNUMBER_BIN reduce using rule 242 (delays -> DELAY intnumber .)
    INTNUMBER_OCT   reduce using rule 242 (delays -> DELAY intnumber .)
    SIGNED_INTNUMBER_OCT reduce using rule 242 (delays -> DELAY intnumber .)
    INTNUMBER_HEX   reduce using rule 242 (delays -> DELAY intnumber .)
    SIGNED_INTNUMBER_HEX reduce using rule 242 (delays -> DELAY intnumber .)
    FLOATNUMBER     reduce using rule 242 (delays -> DELAY intnumber .)
    STRING_LITERAL  reduce using rule 242 (delays -> DELAY intnumber .)
    IF              reduce using rule 242 (delays -> DELAY intnumber .)


state 297

    (243) delays -> DELAY floatnumber .

    ID              reduce using rule 243 (delays -> DELAY floatnumber .)
    LBRACE          reduce using rule 243 (delays -> DELAY floatnumber .)
    MINUS           reduce using rule 243 (delays -> DELAY floatnumber .)
    PLUS            reduce using rule 243 (delays -> DELAY floatnumber .)
    LNOT            reduce using rule 243 (delays -> DELAY floatnumber .)
    NOT             reduce using rule 243 (delays -> DELAY floatnumber .)
    AND             reduce using rule 243 (delays -> DELAY floatnumber .)
    NAND            reduce using rule 243 (delays -> DELAY floatnumber .)
    NOR             reduce using rule 243 (delays -> DELAY floatnumber .)
    OR              reduce using rule 243 (delays -> DELAY floatnumber .)
    XOR             reduce using rule 243 (delays -> DELAY floatnumber .)
    XNOR            reduce using rule 243 (delays -> DELAY floatnumber .)
    LPAREN          reduce using rule 243 (delays -> DELAY floatnumber .)
    DOLLER          reduce using rule 243 (delays -> DELAY floatnumber .)
    INTNUMBER_DEC   reduce using rule 243 (delays -> DELAY floatnumber .)
    SIGNED_INTNUMBER_DEC reduce using rule 243 (delays -> DELAY floatnumber .)
    INTNUMBER_BIN   reduce using rule 243 (delays -> DELAY floatnumber .)
    SIGNED_INTNUMBER_BIN reduce using rule 243 (delays -> DELAY floatnumber .)
    INTNUMBER_OCT   reduce using rule 243 (delays -> DELAY floatnumber .)
    SIGNED_INTNUMBER_OCT reduce using rule 243 (delays -> DELAY floatnumber .)
    INTNUMBER_HEX   reduce using rule 243 (delays -> DELAY floatnumber .)
    SIGNED_INTNUMBER_HEX reduce using rule 243 (delays -> DELAY floatnumber .)
    FLOATNUMBER     reduce using rule 243 (delays -> DELAY floatnumber .)
    STRING_LITERAL  reduce using rule 243 (delays -> DELAY floatnumber .)
    IF              reduce using rule 243 (delays -> DELAY floatnumber .)


state 298

    (395) scope -> pointer . DOT
    (185) pointer -> pointer . LBRACKET expression RBRACKET

    DOT             shift and go to state 271
    LBRACKET        shift and go to state 453


state 299

    (87) integerdecl -> INTEGER integernamelist SEMICOLON .

    ENDMODULE       reduce using rule 87 (integerdecl -> INTEGER integernamelist SEMICOLON .)
    GENERATE        reduce using rule 87 (integerdecl -> INTEGER integernamelist SEMICOLON .)
    INTEGER         reduce using rule 87 (integerdecl -> INTEGER integernamelist SEMICOLON .)
    REAL            reduce using rule 87 (integerdecl -> INTEGER integernamelist SEMICOLON .)
    PARAMETER       reduce using rule 87 (integerdecl -> INTEGER integernamelist SEMICOLON .)
    LOCALPARAM      reduce using rule 87 (integerdecl -> INTEGER integernamelist SEMICOLON .)
    GENVAR          reduce using rule 87 (integerdecl -> INTEGER integernamelist SEMICOLON .)
    ASSIGN          reduce using rule 87 (integerdecl -> INTEGER integernamelist SEMICOLON .)
    ALWAYS          reduce using rule 87 (integerdecl -> INTEGER integernamelist SEMICOLON .)
    ALWAYS_FF       reduce using rule 87 (integerdecl -> INTEGER integernamelist SEMICOLON .)
    ALWAYS_COMB     reduce using rule 87 (integerdecl -> INTEGER integernamelist SEMICOLON .)
    INITIAL         reduce using rule 87 (integerdecl -> INTEGER integernamelist SEMICOLON .)
    ID              reduce using rule 87 (integerdecl -> INTEGER integernamelist SEMICOLON .)
    SENS_OR         reduce using rule 87 (integerdecl -> INTEGER integernamelist SEMICOLON .)
    FUNCTION        reduce using rule 87 (integerdecl -> INTEGER integernamelist SEMICOLON .)
    TASK            reduce using rule 87 (integerdecl -> INTEGER integernamelist SEMICOLON .)
    LPAREN          reduce using rule 87 (integerdecl -> INTEGER integernamelist SEMICOLON .)
    INPUT           reduce using rule 87 (integerdecl -> INTEGER integernamelist SEMICOLON .)
    OUTPUT          reduce using rule 87 (integerdecl -> INTEGER integernamelist SEMICOLON .)
    INOUT           reduce using rule 87 (integerdecl -> INTEGER integernamelist SEMICOLON .)
    TRI             reduce using rule 87 (integerdecl -> INTEGER integernamelist SEMICOLON .)
    REG             reduce using rule 87 (integerdecl -> INTEGER integernamelist SEMICOLON .)
    LOGIC           reduce using rule 87 (integerdecl -> INTEGER integernamelist SEMICOLON .)
    WIRE            reduce using rule 87 (integerdecl -> INTEGER integernamelist SEMICOLON .)
    SIGNED          reduce using rule 87 (integerdecl -> INTEGER integernamelist SEMICOLON .)
    SUPPLY0         reduce using rule 87 (integerdecl -> INTEGER integernamelist SEMICOLON .)
    SUPPLY1         reduce using rule 87 (integerdecl -> INTEGER integernamelist SEMICOLON .)
    ENDGENERATE     reduce using rule 87 (integerdecl -> INTEGER integernamelist SEMICOLON .)
    IF              reduce using rule 87 (integerdecl -> INTEGER integernamelist SEMICOLON .)
    FOR             reduce using rule 87 (integerdecl -> INTEGER integernamelist SEMICOLON .)
    WHILE           reduce using rule 87 (integerdecl -> INTEGER integernamelist SEMICOLON .)
    CASE            reduce using rule 87 (integerdecl -> INTEGER integernamelist SEMICOLON .)
    CASEX           reduce using rule 87 (integerdecl -> INTEGER integernamelist SEMICOLON .)
    BEGIN           reduce using rule 87 (integerdecl -> INTEGER integernamelist SEMICOLON .)
    DELAY           reduce using rule 87 (integerdecl -> INTEGER integernamelist SEMICOLON .)
    LBRACE          reduce using rule 87 (integerdecl -> INTEGER integernamelist SEMICOLON .)
    END             reduce using rule 87 (integerdecl -> INTEGER integernamelist SEMICOLON .)
    UNIQUE          reduce using rule 87 (integerdecl -> INTEGER integernamelist SEMICOLON .)
    WAIT            reduce using rule 87 (integerdecl -> INTEGER integernamelist SEMICOLON .)
    FOREVER         reduce using rule 87 (integerdecl -> INTEGER integernamelist SEMICOLON .)
    FORK            reduce using rule 87 (integerdecl -> INTEGER integernamelist SEMICOLON .)
    AT              reduce using rule 87 (integerdecl -> INTEGER integernamelist SEMICOLON .)
    DOLLER          reduce using rule 87 (integerdecl -> INTEGER integernamelist SEMICOLON .)
    DISABLE         reduce using rule 87 (integerdecl -> INTEGER integernamelist SEMICOLON .)
    SEMICOLON       reduce using rule 87 (integerdecl -> INTEGER integernamelist SEMICOLON .)
    ELSE            reduce using rule 87 (integerdecl -> INTEGER integernamelist SEMICOLON .)


state 300

    (89) integernamelist -> integernamelist COMMA . integername
    (91) integername -> . ID

    ID              shift and go to state 145

    integername                    shift and go to state 454

state 301

    (88) integerdecl -> INTEGER SIGNED integernamelist . SEMICOLON
    (89) integernamelist -> integernamelist . COMMA integername

    SEMICOLON       shift and go to state 455
    COMMA           shift and go to state 300


state 302

    (92) realdecl -> REAL realnamelist SEMICOLON .

    ENDMODULE       reduce using rule 92 (realdecl -> REAL realnamelist SEMICOLON .)
    GENERATE        reduce using rule 92 (realdecl -> REAL realnamelist SEMICOLON .)
    INTEGER         reduce using rule 92 (realdecl -> REAL realnamelist SEMICOLON .)
    REAL            reduce using rule 92 (realdecl -> REAL realnamelist SEMICOLON .)
    PARAMETER       reduce using rule 92 (realdecl -> REAL realnamelist SEMICOLON .)
    LOCALPARAM      reduce using rule 92 (realdecl -> REAL realnamelist SEMICOLON .)
    GENVAR          reduce using rule 92 (realdecl -> REAL realnamelist SEMICOLON .)
    ASSIGN          reduce using rule 92 (realdecl -> REAL realnamelist SEMICOLON .)
    ALWAYS          reduce using rule 92 (realdecl -> REAL realnamelist SEMICOLON .)
    ALWAYS_FF       reduce using rule 92 (realdecl -> REAL realnamelist SEMICOLON .)
    ALWAYS_COMB     reduce using rule 92 (realdecl -> REAL realnamelist SEMICOLON .)
    INITIAL         reduce using rule 92 (realdecl -> REAL realnamelist SEMICOLON .)
    ID              reduce using rule 92 (realdecl -> REAL realnamelist SEMICOLON .)
    SENS_OR         reduce using rule 92 (realdecl -> REAL realnamelist SEMICOLON .)
    FUNCTION        reduce using rule 92 (realdecl -> REAL realnamelist SEMICOLON .)
    TASK            reduce using rule 92 (realdecl -> REAL realnamelist SEMICOLON .)
    LPAREN          reduce using rule 92 (realdecl -> REAL realnamelist SEMICOLON .)
    INPUT           reduce using rule 92 (realdecl -> REAL realnamelist SEMICOLON .)
    OUTPUT          reduce using rule 92 (realdecl -> REAL realnamelist SEMICOLON .)
    INOUT           reduce using rule 92 (realdecl -> REAL realnamelist SEMICOLON .)
    TRI             reduce using rule 92 (realdecl -> REAL realnamelist SEMICOLON .)
    REG             reduce using rule 92 (realdecl -> REAL realnamelist SEMICOLON .)
    LOGIC           reduce using rule 92 (realdecl -> REAL realnamelist SEMICOLON .)
    WIRE            reduce using rule 92 (realdecl -> REAL realnamelist SEMICOLON .)
    SIGNED          reduce using rule 92 (realdecl -> REAL realnamelist SEMICOLON .)
    SUPPLY0         reduce using rule 92 (realdecl -> REAL realnamelist SEMICOLON .)
    SUPPLY1         reduce using rule 92 (realdecl -> REAL realnamelist SEMICOLON .)
    ENDGENERATE     reduce using rule 92 (realdecl -> REAL realnamelist SEMICOLON .)
    IF              reduce using rule 92 (realdecl -> REAL realnamelist SEMICOLON .)
    FOR             reduce using rule 92 (realdecl -> REAL realnamelist SEMICOLON .)
    END             reduce using rule 92 (realdecl -> REAL realnamelist SEMICOLON .)
    CASE            reduce using rule 92 (realdecl -> REAL realnamelist SEMICOLON .)
    CASEX           reduce using rule 92 (realdecl -> REAL realnamelist SEMICOLON .)
    UNIQUE          reduce using rule 92 (realdecl -> REAL realnamelist SEMICOLON .)
    WHILE           reduce using rule 92 (realdecl -> REAL realnamelist SEMICOLON .)
    WAIT            reduce using rule 92 (realdecl -> REAL realnamelist SEMICOLON .)
    FOREVER         reduce using rule 92 (realdecl -> REAL realnamelist SEMICOLON .)
    BEGIN           reduce using rule 92 (realdecl -> REAL realnamelist SEMICOLON .)
    FORK            reduce using rule 92 (realdecl -> REAL realnamelist SEMICOLON .)
    DELAY           reduce using rule 92 (realdecl -> REAL realnamelist SEMICOLON .)
    AT              reduce using rule 92 (realdecl -> REAL realnamelist SEMICOLON .)
    DOLLER          reduce using rule 92 (realdecl -> REAL realnamelist SEMICOLON .)
    DISABLE         reduce using rule 92 (realdecl -> REAL realnamelist SEMICOLON .)
    LBRACE          reduce using rule 92 (realdecl -> REAL realnamelist SEMICOLON .)
    SEMICOLON       reduce using rule 92 (realdecl -> REAL realnamelist SEMICOLON .)
    ELSE            reduce using rule 92 (realdecl -> REAL realnamelist SEMICOLON .)


state 303

    (93) realnamelist -> realnamelist COMMA . realname
    (95) realname -> . ID

    ID              shift and go to state 148

    realname                       shift and go to state 456

state 304

    (96) parameterdecl -> PARAMETER param_substitution_list SEMICOLON .

    ENDMODULE       reduce using rule 96 (parameterdecl -> PARAMETER param_substitution_list SEMICOLON .)
    GENERATE        reduce using rule 96 (parameterdecl -> PARAMETER param_substitution_list SEMICOLON .)
    INTEGER         reduce using rule 96 (parameterdecl -> PARAMETER param_substitution_list SEMICOLON .)
    REAL            reduce using rule 96 (parameterdecl -> PARAMETER param_substitution_list SEMICOLON .)
    PARAMETER       reduce using rule 96 (parameterdecl -> PARAMETER param_substitution_list SEMICOLON .)
    LOCALPARAM      reduce using rule 96 (parameterdecl -> PARAMETER param_substitution_list SEMICOLON .)
    GENVAR          reduce using rule 96 (parameterdecl -> PARAMETER param_substitution_list SEMICOLON .)
    ASSIGN          reduce using rule 96 (parameterdecl -> PARAMETER param_substitution_list SEMICOLON .)
    ALWAYS          reduce using rule 96 (parameterdecl -> PARAMETER param_substitution_list SEMICOLON .)
    ALWAYS_FF       reduce using rule 96 (parameterdecl -> PARAMETER param_substitution_list SEMICOLON .)
    ALWAYS_COMB     reduce using rule 96 (parameterdecl -> PARAMETER param_substitution_list SEMICOLON .)
    INITIAL         reduce using rule 96 (parameterdecl -> PARAMETER param_substitution_list SEMICOLON .)
    ID              reduce using rule 96 (parameterdecl -> PARAMETER param_substitution_list SEMICOLON .)
    SENS_OR         reduce using rule 96 (parameterdecl -> PARAMETER param_substitution_list SEMICOLON .)
    FUNCTION        reduce using rule 96 (parameterdecl -> PARAMETER param_substitution_list SEMICOLON .)
    TASK            reduce using rule 96 (parameterdecl -> PARAMETER param_substitution_list SEMICOLON .)
    LPAREN          reduce using rule 96 (parameterdecl -> PARAMETER param_substitution_list SEMICOLON .)
    INPUT           reduce using rule 96 (parameterdecl -> PARAMETER param_substitution_list SEMICOLON .)
    OUTPUT          reduce using rule 96 (parameterdecl -> PARAMETER param_substitution_list SEMICOLON .)
    INOUT           reduce using rule 96 (parameterdecl -> PARAMETER param_substitution_list SEMICOLON .)
    TRI             reduce using rule 96 (parameterdecl -> PARAMETER param_substitution_list SEMICOLON .)
    REG             reduce using rule 96 (parameterdecl -> PARAMETER param_substitution_list SEMICOLON .)
    LOGIC           reduce using rule 96 (parameterdecl -> PARAMETER param_substitution_list SEMICOLON .)
    WIRE            reduce using rule 96 (parameterdecl -> PARAMETER param_substitution_list SEMICOLON .)
    SIGNED          reduce using rule 96 (parameterdecl -> PARAMETER param_substitution_list SEMICOLON .)
    SUPPLY0         reduce using rule 96 (parameterdecl -> PARAMETER param_substitution_list SEMICOLON .)
    SUPPLY1         reduce using rule 96 (parameterdecl -> PARAMETER param_substitution_list SEMICOLON .)
    ENDGENERATE     reduce using rule 96 (parameterdecl -> PARAMETER param_substitution_list SEMICOLON .)
    IF              reduce using rule 96 (parameterdecl -> PARAMETER param_substitution_list SEMICOLON .)
    FOR             reduce using rule 96 (parameterdecl -> PARAMETER param_substitution_list SEMICOLON .)
    END             reduce using rule 96 (parameterdecl -> PARAMETER param_substitution_list SEMICOLON .)
    CASE            reduce using rule 96 (parameterdecl -> PARAMETER param_substitution_list SEMICOLON .)
    CASEX           reduce using rule 96 (parameterdecl -> PARAMETER param_substitution_list SEMICOLON .)
    UNIQUE          reduce using rule 96 (parameterdecl -> PARAMETER param_substitution_list SEMICOLON .)
    WHILE           reduce using rule 96 (parameterdecl -> PARAMETER param_substitution_list SEMICOLON .)
    WAIT            reduce using rule 96 (parameterdecl -> PARAMETER param_substitution_list SEMICOLON .)
    FOREVER         reduce using rule 96 (parameterdecl -> PARAMETER param_substitution_list SEMICOLON .)
    BEGIN           reduce using rule 96 (parameterdecl -> PARAMETER param_substitution_list SEMICOLON .)
    FORK            reduce using rule 96 (parameterdecl -> PARAMETER param_substitution_list SEMICOLON .)
    DELAY           reduce using rule 96 (parameterdecl -> PARAMETER param_substitution_list SEMICOLON .)
    AT              reduce using rule 96 (parameterdecl -> PARAMETER param_substitution_list SEMICOLON .)
    DOLLER          reduce using rule 96 (parameterdecl -> PARAMETER param_substitution_list SEMICOLON .)
    DISABLE         reduce using rule 96 (parameterdecl -> PARAMETER param_substitution_list SEMICOLON .)
    LBRACE          reduce using rule 96 (parameterdecl -> PARAMETER param_substitution_list SEMICOLON .)
    SEMICOLON       reduce using rule 96 (parameterdecl -> PARAMETER param_substitution_list SEMICOLON .)
    ELSE            reduce using rule 96 (parameterdecl -> PARAMETER param_substitution_list SEMICOLON .)


state 305

    (106) param_substitution_list -> param_substitution_list COMMA . param_substitution
    (108) param_substitution -> . ID EQUALS rvalue

    ID              shift and go to state 154

    param_substitution             shift and go to state 457

state 306

    (97) parameterdecl -> PARAMETER SIGNED param_substitution_list . SEMICOLON
    (106) param_substitution_list -> param_substitution_list . COMMA param_substitution

    SEMICOLON       shift and go to state 458
    COMMA           shift and go to state 305


state 307

    (99) parameterdecl -> PARAMETER SIGNED width . param_substitution_list SEMICOLON
    (106) param_substitution_list -> . param_substitution_list COMMA param_substitution
    (107) param_substitution_list -> . param_substitution
    (108) param_substitution -> . ID EQUALS rvalue

    ID              shift and go to state 154

    param_substitution_list        shift and go to state 459
    param_substitution             shift and go to state 153

state 308

    (98) parameterdecl -> PARAMETER width param_substitution_list . SEMICOLON
    (106) param_substitution_list -> param_substitution_list . COMMA param_substitution

    SEMICOLON       shift and go to state 460
    COMMA           shift and go to state 305


state 309

    (100) parameterdecl -> PARAMETER INTEGER param_substitution_list . SEMICOLON
    (106) param_substitution_list -> param_substitution_list . COMMA param_substitution

    SEMICOLON       shift and go to state 461
    COMMA           shift and go to state 305


state 310

    (108) param_substitution -> ID EQUALS . rvalue
    (129) rvalue -> . expression
    (130) expression -> . MINUS expression
    (131) expression -> . PLUS expression
    (132) expression -> . LNOT expression
    (133) expression -> . NOT expression
    (134) expression -> . AND expression
    (135) expression -> . NAND expression
    (136) expression -> . NOR expression
    (137) expression -> . OR expression
    (138) expression -> . XOR expression
    (139) expression -> . XNOR expression
    (140) expression -> . expression POWER expression
    (141) expression -> . expression TIMES expression
    (142) expression -> . expression DIVIDE expression
    (143) expression -> . expression MOD expression
    (144) expression -> . expression PLUS expression
    (145) expression -> . expression MINUS expression
    (146) expression -> . expression LSHIFT expression
    (147) expression -> . expression RSHIFT expression
    (148) expression -> . expression LSHIFTA expression
    (149) expression -> . expression RSHIFTA expression
    (150) expression -> . expression LT expression
    (151) expression -> . expression GT expression
    (152) expression -> . expression LE expression
    (153) expression -> . expression GE expression
    (154) expression -> . expression EQ expression
    (155) expression -> . expression NE expression
    (156) expression -> . expression EQL expression
    (157) expression -> . expression NEL expression
    (158) expression -> . expression AND expression
    (159) expression -> . expression XOR expression
    (160) expression -> . expression XNOR expression
    (161) expression -> . expression OR expression
    (162) expression -> . expression LAND expression
    (163) expression -> . expression LOR expression
    (164) expression -> . expression COND expression COLON expression
    (165) expression -> . LPAREN expression RPAREN
    (166) expression -> . concat
    (167) expression -> . repeat
    (168) expression -> . partselect
    (169) expression -> . pointer
    (170) expression -> . functioncall
    (171) expression -> . systemcall
    (172) expression -> . identifier
    (173) expression -> . const_expression
    (174) concat -> . LBRACE concatlist RBRACE
    (177) repeat -> . LBRACE expression concat RBRACE
    (178) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (179) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (180) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (181) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (182) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (183) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (184) pointer -> . identifier LBRACKET expression RBRACKET
    (185) pointer -> . pointer LBRACKET expression RBRACKET
    (373) functioncall -> . identifier LPAREN func_args RPAREN
    (351) systemcall -> . DOLLER ID
    (352) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (353) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (392) identifier -> . ID
    (393) identifier -> . scope ID
    (186) const_expression -> . intnumber
    (187) const_expression -> . floatnumber
    (188) const_expression -> . stringliteral
    (394) scope -> . identifier DOT
    (395) scope -> . pointer DOT
    (190) intnumber -> . INTNUMBER_DEC
    (191) intnumber -> . SIGNED_INTNUMBER_DEC
    (192) intnumber -> . INTNUMBER_BIN
    (193) intnumber -> . SIGNED_INTNUMBER_BIN
    (194) intnumber -> . INTNUMBER_OCT
    (195) intnumber -> . SIGNED_INTNUMBER_OCT
    (196) intnumber -> . INTNUMBER_HEX
    (197) intnumber -> . SIGNED_INTNUMBER_HEX
    (189) floatnumber -> . FLOATNUMBER
    (198) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 88
    PLUS            shift and go to state 89
    LNOT            shift and go to state 90
    NOT             shift and go to state 91
    AND             shift and go to state 92
    NAND            shift and go to state 93
    NOR             shift and go to state 94
    OR              shift and go to state 95
    XOR             shift and go to state 96
    XNOR            shift and go to state 97
    LPAREN          shift and go to state 85
    LBRACE          shift and go to state 106
    DOLLER          shift and go to state 107
    ID              shift and go to state 86
    INTNUMBER_DEC   shift and go to state 112
    SIGNED_INTNUMBER_DEC shift and go to state 113
    INTNUMBER_BIN   shift and go to state 114
    SIGNED_INTNUMBER_BIN shift and go to state 115
    INTNUMBER_OCT   shift and go to state 116
    SIGNED_INTNUMBER_OCT shift and go to state 117
    INTNUMBER_HEX   shift and go to state 118
    SIGNED_INTNUMBER_HEX shift and go to state 119
    FLOATNUMBER     shift and go to state 120
    STRING_LITERAL  shift and go to state 121

    rvalue                         shift and go to state 462
    expression                     shift and go to state 448
    concat                         shift and go to state 98
    repeat                         shift and go to state 99
    partselect                     shift and go to state 100
    pointer                        shift and go to state 101
    functioncall                   shift and go to state 102
    systemcall                     shift and go to state 103
    identifier                     shift and go to state 104
    const_expression               shift and go to state 105
    scope                          shift and go to state 108
    intnumber                      shift and go to state 109
    floatnumber                    shift and go to state 110
    stringliteral                  shift and go to state 111

state 311

    (101) localparamdecl -> LOCALPARAM param_substitution_list SEMICOLON .

    ENDMODULE       reduce using rule 101 (localparamdecl -> LOCALPARAM param_substitution_list SEMICOLON .)
    GENERATE        reduce using rule 101 (localparamdecl -> LOCALPARAM param_substitution_list SEMICOLON .)
    INTEGER         reduce using rule 101 (localparamdecl -> LOCALPARAM param_substitution_list SEMICOLON .)
    REAL            reduce using rule 101 (localparamdecl -> LOCALPARAM param_substitution_list SEMICOLON .)
    PARAMETER       reduce using rule 101 (localparamdecl -> LOCALPARAM param_substitution_list SEMICOLON .)
    LOCALPARAM      reduce using rule 101 (localparamdecl -> LOCALPARAM param_substitution_list SEMICOLON .)
    GENVAR          reduce using rule 101 (localparamdecl -> LOCALPARAM param_substitution_list SEMICOLON .)
    ASSIGN          reduce using rule 101 (localparamdecl -> LOCALPARAM param_substitution_list SEMICOLON .)
    ALWAYS          reduce using rule 101 (localparamdecl -> LOCALPARAM param_substitution_list SEMICOLON .)
    ALWAYS_FF       reduce using rule 101 (localparamdecl -> LOCALPARAM param_substitution_list SEMICOLON .)
    ALWAYS_COMB     reduce using rule 101 (localparamdecl -> LOCALPARAM param_substitution_list SEMICOLON .)
    INITIAL         reduce using rule 101 (localparamdecl -> LOCALPARAM param_substitution_list SEMICOLON .)
    ID              reduce using rule 101 (localparamdecl -> LOCALPARAM param_substitution_list SEMICOLON .)
    SENS_OR         reduce using rule 101 (localparamdecl -> LOCALPARAM param_substitution_list SEMICOLON .)
    FUNCTION        reduce using rule 101 (localparamdecl -> LOCALPARAM param_substitution_list SEMICOLON .)
    TASK            reduce using rule 101 (localparamdecl -> LOCALPARAM param_substitution_list SEMICOLON .)
    LPAREN          reduce using rule 101 (localparamdecl -> LOCALPARAM param_substitution_list SEMICOLON .)
    INPUT           reduce using rule 101 (localparamdecl -> LOCALPARAM param_substitution_list SEMICOLON .)
    OUTPUT          reduce using rule 101 (localparamdecl -> LOCALPARAM param_substitution_list SEMICOLON .)
    INOUT           reduce using rule 101 (localparamdecl -> LOCALPARAM param_substitution_list SEMICOLON .)
    TRI             reduce using rule 101 (localparamdecl -> LOCALPARAM param_substitution_list SEMICOLON .)
    REG             reduce using rule 101 (localparamdecl -> LOCALPARAM param_substitution_list SEMICOLON .)
    LOGIC           reduce using rule 101 (localparamdecl -> LOCALPARAM param_substitution_list SEMICOLON .)
    WIRE            reduce using rule 101 (localparamdecl -> LOCALPARAM param_substitution_list SEMICOLON .)
    SIGNED          reduce using rule 101 (localparamdecl -> LOCALPARAM param_substitution_list SEMICOLON .)
    SUPPLY0         reduce using rule 101 (localparamdecl -> LOCALPARAM param_substitution_list SEMICOLON .)
    SUPPLY1         reduce using rule 101 (localparamdecl -> LOCALPARAM param_substitution_list SEMICOLON .)
    ENDGENERATE     reduce using rule 101 (localparamdecl -> LOCALPARAM param_substitution_list SEMICOLON .)
    IF              reduce using rule 101 (localparamdecl -> LOCALPARAM param_substitution_list SEMICOLON .)
    FOR             reduce using rule 101 (localparamdecl -> LOCALPARAM param_substitution_list SEMICOLON .)
    END             reduce using rule 101 (localparamdecl -> LOCALPARAM param_substitution_list SEMICOLON .)
    CASE            reduce using rule 101 (localparamdecl -> LOCALPARAM param_substitution_list SEMICOLON .)
    CASEX           reduce using rule 101 (localparamdecl -> LOCALPARAM param_substitution_list SEMICOLON .)
    UNIQUE          reduce using rule 101 (localparamdecl -> LOCALPARAM param_substitution_list SEMICOLON .)
    WHILE           reduce using rule 101 (localparamdecl -> LOCALPARAM param_substitution_list SEMICOLON .)
    WAIT            reduce using rule 101 (localparamdecl -> LOCALPARAM param_substitution_list SEMICOLON .)
    FOREVER         reduce using rule 101 (localparamdecl -> LOCALPARAM param_substitution_list SEMICOLON .)
    BEGIN           reduce using rule 101 (localparamdecl -> LOCALPARAM param_substitution_list SEMICOLON .)
    FORK            reduce using rule 101 (localparamdecl -> LOCALPARAM param_substitution_list SEMICOLON .)
    DELAY           reduce using rule 101 (localparamdecl -> LOCALPARAM param_substitution_list SEMICOLON .)
    AT              reduce using rule 101 (localparamdecl -> LOCALPARAM param_substitution_list SEMICOLON .)
    DOLLER          reduce using rule 101 (localparamdecl -> LOCALPARAM param_substitution_list SEMICOLON .)
    DISABLE         reduce using rule 101 (localparamdecl -> LOCALPARAM param_substitution_list SEMICOLON .)
    LBRACE          reduce using rule 101 (localparamdecl -> LOCALPARAM param_substitution_list SEMICOLON .)
    SEMICOLON       reduce using rule 101 (localparamdecl -> LOCALPARAM param_substitution_list SEMICOLON .)
    ELSE            reduce using rule 101 (localparamdecl -> LOCALPARAM param_substitution_list SEMICOLON .)


state 312

    (102) localparamdecl -> LOCALPARAM SIGNED param_substitution_list . SEMICOLON
    (106) param_substitution_list -> param_substitution_list . COMMA param_substitution

    SEMICOLON       shift and go to state 463
    COMMA           shift and go to state 305


state 313

    (104) localparamdecl -> LOCALPARAM SIGNED width . param_substitution_list SEMICOLON
    (106) param_substitution_list -> . param_substitution_list COMMA param_substitution
    (107) param_substitution_list -> . param_substitution
    (108) param_substitution -> . ID EQUALS rvalue

    ID              shift and go to state 154

    param_substitution_list        shift and go to state 464
    param_substitution             shift and go to state 153

state 314

    (103) localparamdecl -> LOCALPARAM width param_substitution_list . SEMICOLON
    (106) param_substitution_list -> param_substitution_list . COMMA param_substitution

    SEMICOLON       shift and go to state 465
    COMMA           shift and go to state 305


state 315

    (105) localparamdecl -> LOCALPARAM INTEGER param_substitution_list . SEMICOLON
    (106) param_substitution_list -> param_substitution_list . COMMA param_substitution

    SEMICOLON       shift and go to state 466
    COMMA           shift and go to state 305


state 316

    (329) genvardecl -> GENVAR genvarlist SEMICOLON .

    ENDMODULE       reduce using rule 329 (genvardecl -> GENVAR genvarlist SEMICOLON .)
    GENERATE        reduce using rule 329 (genvardecl -> GENVAR genvarlist SEMICOLON .)
    INTEGER         reduce using rule 329 (genvardecl -> GENVAR genvarlist SEMICOLON .)
    REAL            reduce using rule 329 (genvardecl -> GENVAR genvarlist SEMICOLON .)
    PARAMETER       reduce using rule 329 (genvardecl -> GENVAR genvarlist SEMICOLON .)
    LOCALPARAM      reduce using rule 329 (genvardecl -> GENVAR genvarlist SEMICOLON .)
    GENVAR          reduce using rule 329 (genvardecl -> GENVAR genvarlist SEMICOLON .)
    ASSIGN          reduce using rule 329 (genvardecl -> GENVAR genvarlist SEMICOLON .)
    ALWAYS          reduce using rule 329 (genvardecl -> GENVAR genvarlist SEMICOLON .)
    ALWAYS_FF       reduce using rule 329 (genvardecl -> GENVAR genvarlist SEMICOLON .)
    ALWAYS_COMB     reduce using rule 329 (genvardecl -> GENVAR genvarlist SEMICOLON .)
    INITIAL         reduce using rule 329 (genvardecl -> GENVAR genvarlist SEMICOLON .)
    ID              reduce using rule 329 (genvardecl -> GENVAR genvarlist SEMICOLON .)
    SENS_OR         reduce using rule 329 (genvardecl -> GENVAR genvarlist SEMICOLON .)
    FUNCTION        reduce using rule 329 (genvardecl -> GENVAR genvarlist SEMICOLON .)
    TASK            reduce using rule 329 (genvardecl -> GENVAR genvarlist SEMICOLON .)
    LPAREN          reduce using rule 329 (genvardecl -> GENVAR genvarlist SEMICOLON .)
    INPUT           reduce using rule 329 (genvardecl -> GENVAR genvarlist SEMICOLON .)
    OUTPUT          reduce using rule 329 (genvardecl -> GENVAR genvarlist SEMICOLON .)
    INOUT           reduce using rule 329 (genvardecl -> GENVAR genvarlist SEMICOLON .)
    TRI             reduce using rule 329 (genvardecl -> GENVAR genvarlist SEMICOLON .)
    REG             reduce using rule 329 (genvardecl -> GENVAR genvarlist SEMICOLON .)
    LOGIC           reduce using rule 329 (genvardecl -> GENVAR genvarlist SEMICOLON .)
    WIRE            reduce using rule 329 (genvardecl -> GENVAR genvarlist SEMICOLON .)
    SIGNED          reduce using rule 329 (genvardecl -> GENVAR genvarlist SEMICOLON .)
    SUPPLY0         reduce using rule 329 (genvardecl -> GENVAR genvarlist SEMICOLON .)
    SUPPLY1         reduce using rule 329 (genvardecl -> GENVAR genvarlist SEMICOLON .)
    ENDGENERATE     reduce using rule 329 (genvardecl -> GENVAR genvarlist SEMICOLON .)
    IF              reduce using rule 329 (genvardecl -> GENVAR genvarlist SEMICOLON .)
    FOR             reduce using rule 329 (genvardecl -> GENVAR genvarlist SEMICOLON .)
    ELSE            reduce using rule 329 (genvardecl -> GENVAR genvarlist SEMICOLON .)
    END             reduce using rule 329 (genvardecl -> GENVAR genvarlist SEMICOLON .)


state 317

    (330) genvarlist -> genvarlist COMMA . genvar
    (332) genvar -> . ID

    ID              shift and go to state 161

    genvar                         shift and go to state 467

state 318

    (109) assignment -> ASSIGN lvalue EQUALS . rvalue SEMICOLON
    (129) rvalue -> . expression
    (130) expression -> . MINUS expression
    (131) expression -> . PLUS expression
    (132) expression -> . LNOT expression
    (133) expression -> . NOT expression
    (134) expression -> . AND expression
    (135) expression -> . NAND expression
    (136) expression -> . NOR expression
    (137) expression -> . OR expression
    (138) expression -> . XOR expression
    (139) expression -> . XNOR expression
    (140) expression -> . expression POWER expression
    (141) expression -> . expression TIMES expression
    (142) expression -> . expression DIVIDE expression
    (143) expression -> . expression MOD expression
    (144) expression -> . expression PLUS expression
    (145) expression -> . expression MINUS expression
    (146) expression -> . expression LSHIFT expression
    (147) expression -> . expression RSHIFT expression
    (148) expression -> . expression LSHIFTA expression
    (149) expression -> . expression RSHIFTA expression
    (150) expression -> . expression LT expression
    (151) expression -> . expression GT expression
    (152) expression -> . expression LE expression
    (153) expression -> . expression GE expression
    (154) expression -> . expression EQ expression
    (155) expression -> . expression NE expression
    (156) expression -> . expression EQL expression
    (157) expression -> . expression NEL expression
    (158) expression -> . expression AND expression
    (159) expression -> . expression XOR expression
    (160) expression -> . expression XNOR expression
    (161) expression -> . expression OR expression
    (162) expression -> . expression LAND expression
    (163) expression -> . expression LOR expression
    (164) expression -> . expression COND expression COLON expression
    (165) expression -> . LPAREN expression RPAREN
    (166) expression -> . concat
    (167) expression -> . repeat
    (168) expression -> . partselect
    (169) expression -> . pointer
    (170) expression -> . functioncall
    (171) expression -> . systemcall
    (172) expression -> . identifier
    (173) expression -> . const_expression
    (174) concat -> . LBRACE concatlist RBRACE
    (177) repeat -> . LBRACE expression concat RBRACE
    (178) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (179) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (180) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (181) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (182) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (183) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (184) pointer -> . identifier LBRACKET expression RBRACKET
    (185) pointer -> . pointer LBRACKET expression RBRACKET
    (373) functioncall -> . identifier LPAREN func_args RPAREN
    (351) systemcall -> . DOLLER ID
    (352) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (353) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (392) identifier -> . ID
    (393) identifier -> . scope ID
    (186) const_expression -> . intnumber
    (187) const_expression -> . floatnumber
    (188) const_expression -> . stringliteral
    (394) scope -> . identifier DOT
    (395) scope -> . pointer DOT
    (190) intnumber -> . INTNUMBER_DEC
    (191) intnumber -> . SIGNED_INTNUMBER_DEC
    (192) intnumber -> . INTNUMBER_BIN
    (193) intnumber -> . SIGNED_INTNUMBER_BIN
    (194) intnumber -> . INTNUMBER_OCT
    (195) intnumber -> . SIGNED_INTNUMBER_OCT
    (196) intnumber -> . INTNUMBER_HEX
    (197) intnumber -> . SIGNED_INTNUMBER_HEX
    (189) floatnumber -> . FLOATNUMBER
    (198) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 88
    PLUS            shift and go to state 89
    LNOT            shift and go to state 90
    NOT             shift and go to state 91
    AND             shift and go to state 92
    NAND            shift and go to state 93
    NOR             shift and go to state 94
    OR              shift and go to state 95
    XOR             shift and go to state 96
    XNOR            shift and go to state 97
    LPAREN          shift and go to state 85
    LBRACE          shift and go to state 106
    DOLLER          shift and go to state 107
    ID              shift and go to state 86
    INTNUMBER_DEC   shift and go to state 112
    SIGNED_INTNUMBER_DEC shift and go to state 113
    INTNUMBER_BIN   shift and go to state 114
    SIGNED_INTNUMBER_BIN shift and go to state 115
    INTNUMBER_OCT   shift and go to state 116
    SIGNED_INTNUMBER_OCT shift and go to state 117
    INTNUMBER_HEX   shift and go to state 118
    SIGNED_INTNUMBER_HEX shift and go to state 119
    FLOATNUMBER     shift and go to state 120
    STRING_LITERAL  shift and go to state 121

    rvalue                         shift and go to state 468
    expression                     shift and go to state 448
    concat                         shift and go to state 98
    repeat                         shift and go to state 99
    partselect                     shift and go to state 100
    pointer                        shift and go to state 101
    functioncall                   shift and go to state 102
    systemcall                     shift and go to state 103
    identifier                     shift and go to state 104
    const_expression               shift and go to state 105
    scope                          shift and go to state 108
    intnumber                      shift and go to state 109
    floatnumber                    shift and go to state 110
    stringliteral                  shift and go to state 111

state 319

    (110) assignment -> ASSIGN delays lvalue . EQUALS delays rvalue SEMICOLON

    EQUALS          shift and go to state 469


state 320

    (114) lpartselect -> identifier LBRACKET . expression COLON expression RBRACKET
    (115) lpartselect -> identifier LBRACKET . expression PLUSCOLON expression RBRACKET
    (116) lpartselect -> identifier LBRACKET . expression MINUSCOLON expression RBRACKET
    (184) pointer -> identifier LBRACKET . expression RBRACKET
    (130) expression -> . MINUS expression
    (131) expression -> . PLUS expression
    (132) expression -> . LNOT expression
    (133) expression -> . NOT expression
    (134) expression -> . AND expression
    (135) expression -> . NAND expression
    (136) expression -> . NOR expression
    (137) expression -> . OR expression
    (138) expression -> . XOR expression
    (139) expression -> . XNOR expression
    (140) expression -> . expression POWER expression
    (141) expression -> . expression TIMES expression
    (142) expression -> . expression DIVIDE expression
    (143) expression -> . expression MOD expression
    (144) expression -> . expression PLUS expression
    (145) expression -> . expression MINUS expression
    (146) expression -> . expression LSHIFT expression
    (147) expression -> . expression RSHIFT expression
    (148) expression -> . expression LSHIFTA expression
    (149) expression -> . expression RSHIFTA expression
    (150) expression -> . expression LT expression
    (151) expression -> . expression GT expression
    (152) expression -> . expression LE expression
    (153) expression -> . expression GE expression
    (154) expression -> . expression EQ expression
    (155) expression -> . expression NE expression
    (156) expression -> . expression EQL expression
    (157) expression -> . expression NEL expression
    (158) expression -> . expression AND expression
    (159) expression -> . expression XOR expression
    (160) expression -> . expression XNOR expression
    (161) expression -> . expression OR expression
    (162) expression -> . expression LAND expression
    (163) expression -> . expression LOR expression
    (164) expression -> . expression COND expression COLON expression
    (165) expression -> . LPAREN expression RPAREN
    (166) expression -> . concat
    (167) expression -> . repeat
    (168) expression -> . partselect
    (169) expression -> . pointer
    (170) expression -> . functioncall
    (171) expression -> . systemcall
    (172) expression -> . identifier
    (173) expression -> . const_expression
    (174) concat -> . LBRACE concatlist RBRACE
    (177) repeat -> . LBRACE expression concat RBRACE
    (178) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (179) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (180) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (181) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (182) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (183) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (184) pointer -> . identifier LBRACKET expression RBRACKET
    (185) pointer -> . pointer LBRACKET expression RBRACKET
    (373) functioncall -> . identifier LPAREN func_args RPAREN
    (351) systemcall -> . DOLLER ID
    (352) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (353) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (392) identifier -> . ID
    (393) identifier -> . scope ID
    (186) const_expression -> . intnumber
    (187) const_expression -> . floatnumber
    (188) const_expression -> . stringliteral
    (394) scope -> . identifier DOT
    (395) scope -> . pointer DOT
    (190) intnumber -> . INTNUMBER_DEC
    (191) intnumber -> . SIGNED_INTNUMBER_DEC
    (192) intnumber -> . INTNUMBER_BIN
    (193) intnumber -> . SIGNED_INTNUMBER_BIN
    (194) intnumber -> . INTNUMBER_OCT
    (195) intnumber -> . SIGNED_INTNUMBER_OCT
    (196) intnumber -> . INTNUMBER_HEX
    (197) intnumber -> . SIGNED_INTNUMBER_HEX
    (189) floatnumber -> . FLOATNUMBER
    (198) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 88
    PLUS            shift and go to state 89
    LNOT            shift and go to state 90
    NOT             shift and go to state 91
    AND             shift and go to state 92
    NAND            shift and go to state 93
    NOR             shift and go to state 94
    OR              shift and go to state 95
    XOR             shift and go to state 96
    XNOR            shift and go to state 97
    LPAREN          shift and go to state 85
    LBRACE          shift and go to state 106
    DOLLER          shift and go to state 107
    ID              shift and go to state 86
    INTNUMBER_DEC   shift and go to state 112
    SIGNED_INTNUMBER_DEC shift and go to state 113
    INTNUMBER_BIN   shift and go to state 114
    SIGNED_INTNUMBER_BIN shift and go to state 115
    INTNUMBER_OCT   shift and go to state 116
    SIGNED_INTNUMBER_OCT shift and go to state 117
    INTNUMBER_HEX   shift and go to state 118
    SIGNED_INTNUMBER_HEX shift and go to state 119
    FLOATNUMBER     shift and go to state 120
    STRING_LITERAL  shift and go to state 121

    identifier                     shift and go to state 104
    expression                     shift and go to state 470
    concat                         shift and go to state 98
    repeat                         shift and go to state 99
    partselect                     shift and go to state 100
    pointer                        shift and go to state 101
    functioncall                   shift and go to state 102
    systemcall                     shift and go to state 103
    const_expression               shift and go to state 105
    scope                          shift and go to state 108
    intnumber                      shift and go to state 109
    floatnumber                    shift and go to state 110
    stringliteral                  shift and go to state 111

state 321

    (111) lpartselect -> pointer LBRACKET . expression COLON expression RBRACKET
    (112) lpartselect -> pointer LBRACKET . expression PLUSCOLON expression RBRACKET
    (113) lpartselect -> pointer LBRACKET . expression MINUSCOLON expression RBRACKET
    (185) pointer -> pointer LBRACKET . expression RBRACKET
    (130) expression -> . MINUS expression
    (131) expression -> . PLUS expression
    (132) expression -> . LNOT expression
    (133) expression -> . NOT expression
    (134) expression -> . AND expression
    (135) expression -> . NAND expression
    (136) expression -> . NOR expression
    (137) expression -> . OR expression
    (138) expression -> . XOR expression
    (139) expression -> . XNOR expression
    (140) expression -> . expression POWER expression
    (141) expression -> . expression TIMES expression
    (142) expression -> . expression DIVIDE expression
    (143) expression -> . expression MOD expression
    (144) expression -> . expression PLUS expression
    (145) expression -> . expression MINUS expression
    (146) expression -> . expression LSHIFT expression
    (147) expression -> . expression RSHIFT expression
    (148) expression -> . expression LSHIFTA expression
    (149) expression -> . expression RSHIFTA expression
    (150) expression -> . expression LT expression
    (151) expression -> . expression GT expression
    (152) expression -> . expression LE expression
    (153) expression -> . expression GE expression
    (154) expression -> . expression EQ expression
    (155) expression -> . expression NE expression
    (156) expression -> . expression EQL expression
    (157) expression -> . expression NEL expression
    (158) expression -> . expression AND expression
    (159) expression -> . expression XOR expression
    (160) expression -> . expression XNOR expression
    (161) expression -> . expression OR expression
    (162) expression -> . expression LAND expression
    (163) expression -> . expression LOR expression
    (164) expression -> . expression COND expression COLON expression
    (165) expression -> . LPAREN expression RPAREN
    (166) expression -> . concat
    (167) expression -> . repeat
    (168) expression -> . partselect
    (169) expression -> . pointer
    (170) expression -> . functioncall
    (171) expression -> . systemcall
    (172) expression -> . identifier
    (173) expression -> . const_expression
    (174) concat -> . LBRACE concatlist RBRACE
    (177) repeat -> . LBRACE expression concat RBRACE
    (178) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (179) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (180) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (181) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (182) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (183) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (184) pointer -> . identifier LBRACKET expression RBRACKET
    (185) pointer -> . pointer LBRACKET expression RBRACKET
    (373) functioncall -> . identifier LPAREN func_args RPAREN
    (351) systemcall -> . DOLLER ID
    (352) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (353) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (392) identifier -> . ID
    (393) identifier -> . scope ID
    (186) const_expression -> . intnumber
    (187) const_expression -> . floatnumber
    (188) const_expression -> . stringliteral
    (394) scope -> . identifier DOT
    (395) scope -> . pointer DOT
    (190) intnumber -> . INTNUMBER_DEC
    (191) intnumber -> . SIGNED_INTNUMBER_DEC
    (192) intnumber -> . INTNUMBER_BIN
    (193) intnumber -> . SIGNED_INTNUMBER_BIN
    (194) intnumber -> . INTNUMBER_OCT
    (195) intnumber -> . SIGNED_INTNUMBER_OCT
    (196) intnumber -> . INTNUMBER_HEX
    (197) intnumber -> . SIGNED_INTNUMBER_HEX
    (189) floatnumber -> . FLOATNUMBER
    (198) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 88
    PLUS            shift and go to state 89
    LNOT            shift and go to state 90
    NOT             shift and go to state 91
    AND             shift and go to state 92
    NAND            shift and go to state 93
    NOR             shift and go to state 94
    OR              shift and go to state 95
    XOR             shift and go to state 96
    XNOR            shift and go to state 97
    LPAREN          shift and go to state 85
    LBRACE          shift and go to state 106
    DOLLER          shift and go to state 107
    ID              shift and go to state 86
    INTNUMBER_DEC   shift and go to state 112
    SIGNED_INTNUMBER_DEC shift and go to state 113
    INTNUMBER_BIN   shift and go to state 114
    SIGNED_INTNUMBER_BIN shift and go to state 115
    INTNUMBER_OCT   shift and go to state 116
    SIGNED_INTNUMBER_OCT shift and go to state 117
    INTNUMBER_HEX   shift and go to state 118
    SIGNED_INTNUMBER_HEX shift and go to state 119
    FLOATNUMBER     shift and go to state 120
    STRING_LITERAL  shift and go to state 121

    pointer                        shift and go to state 101
    expression                     shift and go to state 471
    concat                         shift and go to state 98
    repeat                         shift and go to state 99
    partselect                     shift and go to state 100
    functioncall                   shift and go to state 102
    systemcall                     shift and go to state 103
    identifier                     shift and go to state 104
    const_expression               shift and go to state 105
    scope                          shift and go to state 108
    intnumber                      shift and go to state 109
    floatnumber                    shift and go to state 110
    stringliteral                  shift and go to state 111

state 322

    (118) lconcat -> LBRACE lconcatlist . RBRACE
    (119) lconcatlist -> lconcatlist . COMMA lconcat_one

    RBRACE          shift and go to state 472
    COMMA           shift and go to state 473


state 323

    (120) lconcatlist -> lconcat_one .

    RBRACE          reduce using rule 120 (lconcatlist -> lconcat_one .)
    COMMA           reduce using rule 120 (lconcatlist -> lconcat_one .)


state 324

    (121) lconcat_one -> identifier .
    (114) lpartselect -> identifier . LBRACKET expression COLON expression RBRACKET
    (115) lpartselect -> identifier . LBRACKET expression PLUSCOLON expression RBRACKET
    (116) lpartselect -> identifier . LBRACKET expression MINUSCOLON expression RBRACKET
    (394) scope -> identifier . DOT
    (184) pointer -> identifier . LBRACKET expression RBRACKET

    RBRACE          reduce using rule 121 (lconcat_one -> identifier .)
    COMMA           reduce using rule 121 (lconcat_one -> identifier .)
    LBRACKET        shift and go to state 320
    DOT             shift and go to state 274


state 325

    (122) lconcat_one -> lpartselect .

    RBRACE          reduce using rule 122 (lconcat_one -> lpartselect .)
    COMMA           reduce using rule 122 (lconcat_one -> lpartselect .)


state 326

    (123) lconcat_one -> lpointer .

    RBRACE          reduce using rule 123 (lconcat_one -> lpointer .)
    COMMA           reduce using rule 123 (lconcat_one -> lpointer .)


state 327

    (124) lconcat_one -> lconcat .

    RBRACE          reduce using rule 124 (lconcat_one -> lconcat .)
    COMMA           reduce using rule 124 (lconcat_one -> lconcat .)


state 328

    (111) lpartselect -> pointer . LBRACKET expression COLON expression RBRACKET
    (112) lpartselect -> pointer . LBRACKET expression PLUSCOLON expression RBRACKET
    (113) lpartselect -> pointer . LBRACKET expression MINUSCOLON expression RBRACKET
    (117) lpointer -> pointer .
    (395) scope -> pointer . DOT
    (185) pointer -> pointer . LBRACKET expression RBRACKET

    LBRACKET        shift and go to state 321
    RBRACE          reduce using rule 117 (lpointer -> pointer .)
    COMMA           reduce using rule 117 (lpointer -> pointer .)
    DOT             shift and go to state 271


state 329

    (199) always -> ALWAYS senslist always_statement .

    ENDMODULE       reduce using rule 199 (always -> ALWAYS senslist always_statement .)
    GENERATE        reduce using rule 199 (always -> ALWAYS senslist always_statement .)
    INTEGER         reduce using rule 199 (always -> ALWAYS senslist always_statement .)
    REAL            reduce using rule 199 (always -> ALWAYS senslist always_statement .)
    PARAMETER       reduce using rule 199 (always -> ALWAYS senslist always_statement .)
    LOCALPARAM      reduce using rule 199 (always -> ALWAYS senslist always_statement .)
    GENVAR          reduce using rule 199 (always -> ALWAYS senslist always_statement .)
    ASSIGN          reduce using rule 199 (always -> ALWAYS senslist always_statement .)
    ALWAYS          reduce using rule 199 (always -> ALWAYS senslist always_statement .)
    ALWAYS_FF       reduce using rule 199 (always -> ALWAYS senslist always_statement .)
    ALWAYS_COMB     reduce using rule 199 (always -> ALWAYS senslist always_statement .)
    INITIAL         reduce using rule 199 (always -> ALWAYS senslist always_statement .)
    ID              reduce using rule 199 (always -> ALWAYS senslist always_statement .)
    SENS_OR         reduce using rule 199 (always -> ALWAYS senslist always_statement .)
    FUNCTION        reduce using rule 199 (always -> ALWAYS senslist always_statement .)
    TASK            reduce using rule 199 (always -> ALWAYS senslist always_statement .)
    LPAREN          reduce using rule 199 (always -> ALWAYS senslist always_statement .)
    INPUT           reduce using rule 199 (always -> ALWAYS senslist always_statement .)
    OUTPUT          reduce using rule 199 (always -> ALWAYS senslist always_statement .)
    INOUT           reduce using rule 199 (always -> ALWAYS senslist always_statement .)
    TRI             reduce using rule 199 (always -> ALWAYS senslist always_statement .)
    REG             reduce using rule 199 (always -> ALWAYS senslist always_statement .)
    LOGIC           reduce using rule 199 (always -> ALWAYS senslist always_statement .)
    WIRE            reduce using rule 199 (always -> ALWAYS senslist always_statement .)
    SIGNED          reduce using rule 199 (always -> ALWAYS senslist always_statement .)
    SUPPLY0         reduce using rule 199 (always -> ALWAYS senslist always_statement .)
    SUPPLY1         reduce using rule 199 (always -> ALWAYS senslist always_statement .)
    ENDGENERATE     reduce using rule 199 (always -> ALWAYS senslist always_statement .)
    IF              reduce using rule 199 (always -> ALWAYS senslist always_statement .)
    FOR             reduce using rule 199 (always -> ALWAYS senslist always_statement .)
    ELSE            reduce using rule 199 (always -> ALWAYS senslist always_statement .)
    END             reduce using rule 199 (always -> ALWAYS senslist always_statement .)


state 330

    (236) always_statement -> basic_statement .

    ENDMODULE       reduce using rule 236 (always_statement -> basic_statement .)
    GENERATE        reduce using rule 236 (always_statement -> basic_statement .)
    INTEGER         reduce using rule 236 (always_statement -> basic_statement .)
    REAL            reduce using rule 236 (always_statement -> basic_statement .)
    PARAMETER       reduce using rule 236 (always_statement -> basic_statement .)
    LOCALPARAM      reduce using rule 236 (always_statement -> basic_statement .)
    GENVAR          reduce using rule 236 (always_statement -> basic_statement .)
    ASSIGN          reduce using rule 236 (always_statement -> basic_statement .)
    ALWAYS          reduce using rule 236 (always_statement -> basic_statement .)
    ALWAYS_FF       reduce using rule 236 (always_statement -> basic_statement .)
    ALWAYS_COMB     reduce using rule 236 (always_statement -> basic_statement .)
    INITIAL         reduce using rule 236 (always_statement -> basic_statement .)
    ID              reduce using rule 236 (always_statement -> basic_statement .)
    SENS_OR         reduce using rule 236 (always_statement -> basic_statement .)
    FUNCTION        reduce using rule 236 (always_statement -> basic_statement .)
    TASK            reduce using rule 236 (always_statement -> basic_statement .)
    LPAREN          reduce using rule 236 (always_statement -> basic_statement .)
    INPUT           reduce using rule 236 (always_statement -> basic_statement .)
    OUTPUT          reduce using rule 236 (always_statement -> basic_statement .)
    INOUT           reduce using rule 236 (always_statement -> basic_statement .)
    TRI             reduce using rule 236 (always_statement -> basic_statement .)
    REG             reduce using rule 236 (always_statement -> basic_statement .)
    LOGIC           reduce using rule 236 (always_statement -> basic_statement .)
    WIRE            reduce using rule 236 (always_statement -> basic_statement .)
    SIGNED          reduce using rule 236 (always_statement -> basic_statement .)
    SUPPLY0         reduce using rule 236 (always_statement -> basic_statement .)
    SUPPLY1         reduce using rule 236 (always_statement -> basic_statement .)
    ENDGENERATE     reduce using rule 236 (always_statement -> basic_statement .)
    IF              reduce using rule 236 (always_statement -> basic_statement .)
    FOR             reduce using rule 236 (always_statement -> basic_statement .)
    ELSE            reduce using rule 236 (always_statement -> basic_statement .)
    END             reduce using rule 236 (always_statement -> basic_statement .)


state 331

    (202) senslist -> AT LPAREN . edgesigs RPAREN
    (211) senslist -> AT LPAREN . levelsigs RPAREN
    (220) senslist -> AT LPAREN . TIMES RPAREN
    (207) edgesigs -> . edgesigs SENS_OR edgesig
    (208) edgesigs -> . edgesig
    (216) levelsigs -> . levelsigs SENS_OR levelsig
    (217) levelsigs -> . levelsigs COMMA levelsig
    (218) levelsigs -> . levelsig
    (203) edgesig -> . POSEDGE edgesig_base
    (204) edgesig -> . NEGEDGE edgesig_base
    (212) levelsig -> . levelsig_base
    (213) levelsig_base -> . identifier
    (214) levelsig_base -> . pointer
    (215) levelsig_base -> . partselect
    (392) identifier -> . ID
    (393) identifier -> . scope ID
    (184) pointer -> . identifier LBRACKET expression RBRACKET
    (185) pointer -> . pointer LBRACKET expression RBRACKET
    (178) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (179) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (180) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (181) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (182) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (183) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (394) scope -> . identifier DOT
    (395) scope -> . pointer DOT

    TIMES           shift and go to state 476
    POSEDGE         shift and go to state 479
    NEGEDGE         shift and go to state 480
    ID              shift and go to state 86

    edgesigs                       shift and go to state 474
    levelsigs                      shift and go to state 475
    edgesig                        shift and go to state 477
    levelsig                       shift and go to state 478
    levelsig_base                  shift and go to state 334
    identifier                     shift and go to state 335
    pointer                        shift and go to state 336
    partselect                     shift and go to state 337
    scope                          shift and go to state 108

state 332

    (210) senslist -> AT levelsig .

    IF              reduce using rule 210 (senslist -> AT levelsig .)
    CASE            reduce using rule 210 (senslist -> AT levelsig .)
    CASEX           reduce using rule 210 (senslist -> AT levelsig .)
    UNIQUE          reduce using rule 210 (senslist -> AT levelsig .)
    FOR             reduce using rule 210 (senslist -> AT levelsig .)
    WHILE           reduce using rule 210 (senslist -> AT levelsig .)
    WAIT            reduce using rule 210 (senslist -> AT levelsig .)
    FOREVER         reduce using rule 210 (senslist -> AT levelsig .)
    BEGIN           reduce using rule 210 (senslist -> AT levelsig .)
    FORK            reduce using rule 210 (senslist -> AT levelsig .)
    DELAY           reduce using rule 210 (senslist -> AT levelsig .)
    AT              reduce using rule 210 (senslist -> AT levelsig .)
    DOLLER          reduce using rule 210 (senslist -> AT levelsig .)
    DISABLE         reduce using rule 210 (senslist -> AT levelsig .)
    LBRACE          reduce using rule 210 (senslist -> AT levelsig .)
    ID              reduce using rule 210 (senslist -> AT levelsig .)
    SEMICOLON       reduce using rule 210 (senslist -> AT levelsig .)


state 333

    (219) senslist -> AT TIMES .

    IF              reduce using rule 219 (senslist -> AT TIMES .)
    CASE            reduce using rule 219 (senslist -> AT TIMES .)
    CASEX           reduce using rule 219 (senslist -> AT TIMES .)
    UNIQUE          reduce using rule 219 (senslist -> AT TIMES .)
    FOR             reduce using rule 219 (senslist -> AT TIMES .)
    WHILE           reduce using rule 219 (senslist -> AT TIMES .)
    WAIT            reduce using rule 219 (senslist -> AT TIMES .)
    FOREVER         reduce using rule 219 (senslist -> AT TIMES .)
    BEGIN           reduce using rule 219 (senslist -> AT TIMES .)
    FORK            reduce using rule 219 (senslist -> AT TIMES .)
    DELAY           reduce using rule 219 (senslist -> AT TIMES .)
    AT              reduce using rule 219 (senslist -> AT TIMES .)
    DOLLER          reduce using rule 219 (senslist -> AT TIMES .)
    DISABLE         reduce using rule 219 (senslist -> AT TIMES .)
    LBRACE          reduce using rule 219 (senslist -> AT TIMES .)
    ID              reduce using rule 219 (senslist -> AT TIMES .)
    SEMICOLON       reduce using rule 219 (senslist -> AT TIMES .)


state 334

    (212) levelsig -> levelsig_base .

    IF              reduce using rule 212 (levelsig -> levelsig_base .)
    CASE            reduce using rule 212 (levelsig -> levelsig_base .)
    CASEX           reduce using rule 212 (levelsig -> levelsig_base .)
    UNIQUE          reduce using rule 212 (levelsig -> levelsig_base .)
    FOR             reduce using rule 212 (levelsig -> levelsig_base .)
    WHILE           reduce using rule 212 (levelsig -> levelsig_base .)
    WAIT            reduce using rule 212 (levelsig -> levelsig_base .)
    FOREVER         reduce using rule 212 (levelsig -> levelsig_base .)
    BEGIN           reduce using rule 212 (levelsig -> levelsig_base .)
    FORK            reduce using rule 212 (levelsig -> levelsig_base .)
    DELAY           reduce using rule 212 (levelsig -> levelsig_base .)
    AT              reduce using rule 212 (levelsig -> levelsig_base .)
    DOLLER          reduce using rule 212 (levelsig -> levelsig_base .)
    DISABLE         reduce using rule 212 (levelsig -> levelsig_base .)
    LBRACE          reduce using rule 212 (levelsig -> levelsig_base .)
    ID              reduce using rule 212 (levelsig -> levelsig_base .)
    SEMICOLON       reduce using rule 212 (levelsig -> levelsig_base .)
    RPAREN          reduce using rule 212 (levelsig -> levelsig_base .)
    SENS_OR         reduce using rule 212 (levelsig -> levelsig_base .)
    COMMA           reduce using rule 212 (levelsig -> levelsig_base .)


state 335

    (213) levelsig_base -> identifier .
    (184) pointer -> identifier . LBRACKET expression RBRACKET
    (178) partselect -> identifier . LBRACKET expression COLON expression RBRACKET
    (179) partselect -> identifier . LBRACKET expression PLUSCOLON expression RBRACKET
    (180) partselect -> identifier . LBRACKET expression MINUSCOLON expression RBRACKET
    (394) scope -> identifier . DOT

    IF              reduce using rule 213 (levelsig_base -> identifier .)
    CASE            reduce using rule 213 (levelsig_base -> identifier .)
    CASEX           reduce using rule 213 (levelsig_base -> identifier .)
    UNIQUE          reduce using rule 213 (levelsig_base -> identifier .)
    FOR             reduce using rule 213 (levelsig_base -> identifier .)
    WHILE           reduce using rule 213 (levelsig_base -> identifier .)
    WAIT            reduce using rule 213 (levelsig_base -> identifier .)
    FOREVER         reduce using rule 213 (levelsig_base -> identifier .)
    BEGIN           reduce using rule 213 (levelsig_base -> identifier .)
    FORK            reduce using rule 213 (levelsig_base -> identifier .)
    DELAY           reduce using rule 213 (levelsig_base -> identifier .)
    AT              reduce using rule 213 (levelsig_base -> identifier .)
    DOLLER          reduce using rule 213 (levelsig_base -> identifier .)
    DISABLE         reduce using rule 213 (levelsig_base -> identifier .)
    LBRACE          reduce using rule 213 (levelsig_base -> identifier .)
    ID              reduce using rule 213 (levelsig_base -> identifier .)
    SEMICOLON       reduce using rule 213 (levelsig_base -> identifier .)
    RPAREN          reduce using rule 213 (levelsig_base -> identifier .)
    SENS_OR         reduce using rule 213 (levelsig_base -> identifier .)
    COMMA           reduce using rule 213 (levelsig_base -> identifier .)
    LBRACKET        shift and go to state 481
    DOT             shift and go to state 274


state 336

    (214) levelsig_base -> pointer .
    (185) pointer -> pointer . LBRACKET expression RBRACKET
    (181) partselect -> pointer . LBRACKET expression COLON expression RBRACKET
    (182) partselect -> pointer . LBRACKET expression PLUSCOLON expression RBRACKET
    (183) partselect -> pointer . LBRACKET expression MINUSCOLON expression RBRACKET
    (395) scope -> pointer . DOT

    IF              reduce using rule 214 (levelsig_base -> pointer .)
    CASE            reduce using rule 214 (levelsig_base -> pointer .)
    CASEX           reduce using rule 214 (levelsig_base -> pointer .)
    UNIQUE          reduce using rule 214 (levelsig_base -> pointer .)
    FOR             reduce using rule 214 (levelsig_base -> pointer .)
    WHILE           reduce using rule 214 (levelsig_base -> pointer .)
    WAIT            reduce using rule 214 (levelsig_base -> pointer .)
    FOREVER         reduce using rule 214 (levelsig_base -> pointer .)
    BEGIN           reduce using rule 214 (levelsig_base -> pointer .)
    FORK            reduce using rule 214 (levelsig_base -> pointer .)
    DELAY           reduce using rule 214 (levelsig_base -> pointer .)
    AT              reduce using rule 214 (levelsig_base -> pointer .)
    DOLLER          reduce using rule 214 (levelsig_base -> pointer .)
    DISABLE         reduce using rule 214 (levelsig_base -> pointer .)
    LBRACE          reduce using rule 214 (levelsig_base -> pointer .)
    ID              reduce using rule 214 (levelsig_base -> pointer .)
    SEMICOLON       reduce using rule 214 (levelsig_base -> pointer .)
    RPAREN          reduce using rule 214 (levelsig_base -> pointer .)
    SENS_OR         reduce using rule 214 (levelsig_base -> pointer .)
    COMMA           reduce using rule 214 (levelsig_base -> pointer .)
    LBRACKET        shift and go to state 482
    DOT             shift and go to state 271


state 337

    (215) levelsig_base -> partselect .

    IF              reduce using rule 215 (levelsig_base -> partselect .)
    CASE            reduce using rule 215 (levelsig_base -> partselect .)
    CASEX           reduce using rule 215 (levelsig_base -> partselect .)
    UNIQUE          reduce using rule 215 (levelsig_base -> partselect .)
    FOR             reduce using rule 215 (levelsig_base -> partselect .)
    WHILE           reduce using rule 215 (levelsig_base -> partselect .)
    WAIT            reduce using rule 215 (levelsig_base -> partselect .)
    FOREVER         reduce using rule 215 (levelsig_base -> partselect .)
    BEGIN           reduce using rule 215 (levelsig_base -> partselect .)
    FORK            reduce using rule 215 (levelsig_base -> partselect .)
    DELAY           reduce using rule 215 (levelsig_base -> partselect .)
    AT              reduce using rule 215 (levelsig_base -> partselect .)
    DOLLER          reduce using rule 215 (levelsig_base -> partselect .)
    DISABLE         reduce using rule 215 (levelsig_base -> partselect .)
    LBRACE          reduce using rule 215 (levelsig_base -> partselect .)
    ID              reduce using rule 215 (levelsig_base -> partselect .)
    SEMICOLON       reduce using rule 215 (levelsig_base -> partselect .)
    RPAREN          reduce using rule 215 (levelsig_base -> partselect .)
    SENS_OR         reduce using rule 215 (levelsig_base -> partselect .)
    COMMA           reduce using rule 215 (levelsig_base -> partselect .)


state 338

    (200) always_ff -> ALWAYS_FF senslist always_statement .

    ENDMODULE       reduce using rule 200 (always_ff -> ALWAYS_FF senslist always_statement .)
    GENERATE        reduce using rule 200 (always_ff -> ALWAYS_FF senslist always_statement .)
    INTEGER         reduce using rule 200 (always_ff -> ALWAYS_FF senslist always_statement .)
    REAL            reduce using rule 200 (always_ff -> ALWAYS_FF senslist always_statement .)
    PARAMETER       reduce using rule 200 (always_ff -> ALWAYS_FF senslist always_statement .)
    LOCALPARAM      reduce using rule 200 (always_ff -> ALWAYS_FF senslist always_statement .)
    GENVAR          reduce using rule 200 (always_ff -> ALWAYS_FF senslist always_statement .)
    ASSIGN          reduce using rule 200 (always_ff -> ALWAYS_FF senslist always_statement .)
    ALWAYS          reduce using rule 200 (always_ff -> ALWAYS_FF senslist always_statement .)
    ALWAYS_FF       reduce using rule 200 (always_ff -> ALWAYS_FF senslist always_statement .)
    ALWAYS_COMB     reduce using rule 200 (always_ff -> ALWAYS_FF senslist always_statement .)
    INITIAL         reduce using rule 200 (always_ff -> ALWAYS_FF senslist always_statement .)
    ID              reduce using rule 200 (always_ff -> ALWAYS_FF senslist always_statement .)
    SENS_OR         reduce using rule 200 (always_ff -> ALWAYS_FF senslist always_statement .)
    FUNCTION        reduce using rule 200 (always_ff -> ALWAYS_FF senslist always_statement .)
    TASK            reduce using rule 200 (always_ff -> ALWAYS_FF senslist always_statement .)
    LPAREN          reduce using rule 200 (always_ff -> ALWAYS_FF senslist always_statement .)
    INPUT           reduce using rule 200 (always_ff -> ALWAYS_FF senslist always_statement .)
    OUTPUT          reduce using rule 200 (always_ff -> ALWAYS_FF senslist always_statement .)
    INOUT           reduce using rule 200 (always_ff -> ALWAYS_FF senslist always_statement .)
    TRI             reduce using rule 200 (always_ff -> ALWAYS_FF senslist always_statement .)
    REG             reduce using rule 200 (always_ff -> ALWAYS_FF senslist always_statement .)
    LOGIC           reduce using rule 200 (always_ff -> ALWAYS_FF senslist always_statement .)
    WIRE            reduce using rule 200 (always_ff -> ALWAYS_FF senslist always_statement .)
    SIGNED          reduce using rule 200 (always_ff -> ALWAYS_FF senslist always_statement .)
    SUPPLY0         reduce using rule 200 (always_ff -> ALWAYS_FF senslist always_statement .)
    SUPPLY1         reduce using rule 200 (always_ff -> ALWAYS_FF senslist always_statement .)
    ENDGENERATE     reduce using rule 200 (always_ff -> ALWAYS_FF senslist always_statement .)
    IF              reduce using rule 200 (always_ff -> ALWAYS_FF senslist always_statement .)
    FOR             reduce using rule 200 (always_ff -> ALWAYS_FF senslist always_statement .)
    ELSE            reduce using rule 200 (always_ff -> ALWAYS_FF senslist always_statement .)
    END             reduce using rule 200 (always_ff -> ALWAYS_FF senslist always_statement .)


state 339

    (201) always_comb -> ALWAYS_COMB senslist always_statement .

    ENDMODULE       reduce using rule 201 (always_comb -> ALWAYS_COMB senslist always_statement .)
    GENERATE        reduce using rule 201 (always_comb -> ALWAYS_COMB senslist always_statement .)
    INTEGER         reduce using rule 201 (always_comb -> ALWAYS_COMB senslist always_statement .)
    REAL            reduce using rule 201 (always_comb -> ALWAYS_COMB senslist always_statement .)
    PARAMETER       reduce using rule 201 (always_comb -> ALWAYS_COMB senslist always_statement .)
    LOCALPARAM      reduce using rule 201 (always_comb -> ALWAYS_COMB senslist always_statement .)
    GENVAR          reduce using rule 201 (always_comb -> ALWAYS_COMB senslist always_statement .)
    ASSIGN          reduce using rule 201 (always_comb -> ALWAYS_COMB senslist always_statement .)
    ALWAYS          reduce using rule 201 (always_comb -> ALWAYS_COMB senslist always_statement .)
    ALWAYS_FF       reduce using rule 201 (always_comb -> ALWAYS_COMB senslist always_statement .)
    ALWAYS_COMB     reduce using rule 201 (always_comb -> ALWAYS_COMB senslist always_statement .)
    INITIAL         reduce using rule 201 (always_comb -> ALWAYS_COMB senslist always_statement .)
    ID              reduce using rule 201 (always_comb -> ALWAYS_COMB senslist always_statement .)
    SENS_OR         reduce using rule 201 (always_comb -> ALWAYS_COMB senslist always_statement .)
    FUNCTION        reduce using rule 201 (always_comb -> ALWAYS_COMB senslist always_statement .)
    TASK            reduce using rule 201 (always_comb -> ALWAYS_COMB senslist always_statement .)
    LPAREN          reduce using rule 201 (always_comb -> ALWAYS_COMB senslist always_statement .)
    INPUT           reduce using rule 201 (always_comb -> ALWAYS_COMB senslist always_statement .)
    OUTPUT          reduce using rule 201 (always_comb -> ALWAYS_COMB senslist always_statement .)
    INOUT           reduce using rule 201 (always_comb -> ALWAYS_COMB senslist always_statement .)
    TRI             reduce using rule 201 (always_comb -> ALWAYS_COMB senslist always_statement .)
    REG             reduce using rule 201 (always_comb -> ALWAYS_COMB senslist always_statement .)
    LOGIC           reduce using rule 201 (always_comb -> ALWAYS_COMB senslist always_statement .)
    WIRE            reduce using rule 201 (always_comb -> ALWAYS_COMB senslist always_statement .)
    SIGNED          reduce using rule 201 (always_comb -> ALWAYS_COMB senslist always_statement .)
    SUPPLY0         reduce using rule 201 (always_comb -> ALWAYS_COMB senslist always_statement .)
    SUPPLY1         reduce using rule 201 (always_comb -> ALWAYS_COMB senslist always_statement .)
    ENDGENERATE     reduce using rule 201 (always_comb -> ALWAYS_COMB senslist always_statement .)
    IF              reduce using rule 201 (always_comb -> ALWAYS_COMB senslist always_statement .)
    FOR             reduce using rule 201 (always_comb -> ALWAYS_COMB senslist always_statement .)
    ELSE            reduce using rule 201 (always_comb -> ALWAYS_COMB senslist always_statement .)
    END             reduce using rule 201 (always_comb -> ALWAYS_COMB senslist always_statement .)


state 340

    (262) if_statement -> IF LPAREN . cond RPAREN true_statement ELSE else_statement
    (263) if_statement -> IF LPAREN . cond RPAREN true_statement
    (266) cond -> . expression
    (130) expression -> . MINUS expression
    (131) expression -> . PLUS expression
    (132) expression -> . LNOT expression
    (133) expression -> . NOT expression
    (134) expression -> . AND expression
    (135) expression -> . NAND expression
    (136) expression -> . NOR expression
    (137) expression -> . OR expression
    (138) expression -> . XOR expression
    (139) expression -> . XNOR expression
    (140) expression -> . expression POWER expression
    (141) expression -> . expression TIMES expression
    (142) expression -> . expression DIVIDE expression
    (143) expression -> . expression MOD expression
    (144) expression -> . expression PLUS expression
    (145) expression -> . expression MINUS expression
    (146) expression -> . expression LSHIFT expression
    (147) expression -> . expression RSHIFT expression
    (148) expression -> . expression LSHIFTA expression
    (149) expression -> . expression RSHIFTA expression
    (150) expression -> . expression LT expression
    (151) expression -> . expression GT expression
    (152) expression -> . expression LE expression
    (153) expression -> . expression GE expression
    (154) expression -> . expression EQ expression
    (155) expression -> . expression NE expression
    (156) expression -> . expression EQL expression
    (157) expression -> . expression NEL expression
    (158) expression -> . expression AND expression
    (159) expression -> . expression XOR expression
    (160) expression -> . expression XNOR expression
    (161) expression -> . expression OR expression
    (162) expression -> . expression LAND expression
    (163) expression -> . expression LOR expression
    (164) expression -> . expression COND expression COLON expression
    (165) expression -> . LPAREN expression RPAREN
    (166) expression -> . concat
    (167) expression -> . repeat
    (168) expression -> . partselect
    (169) expression -> . pointer
    (170) expression -> . functioncall
    (171) expression -> . systemcall
    (172) expression -> . identifier
    (173) expression -> . const_expression
    (174) concat -> . LBRACE concatlist RBRACE
    (177) repeat -> . LBRACE expression concat RBRACE
    (178) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (179) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (180) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (181) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (182) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (183) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (184) pointer -> . identifier LBRACKET expression RBRACKET
    (185) pointer -> . pointer LBRACKET expression RBRACKET
    (373) functioncall -> . identifier LPAREN func_args RPAREN
    (351) systemcall -> . DOLLER ID
    (352) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (353) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (392) identifier -> . ID
    (393) identifier -> . scope ID
    (186) const_expression -> . intnumber
    (187) const_expression -> . floatnumber
    (188) const_expression -> . stringliteral
    (394) scope -> . identifier DOT
    (395) scope -> . pointer DOT
    (190) intnumber -> . INTNUMBER_DEC
    (191) intnumber -> . SIGNED_INTNUMBER_DEC
    (192) intnumber -> . INTNUMBER_BIN
    (193) intnumber -> . SIGNED_INTNUMBER_BIN
    (194) intnumber -> . INTNUMBER_OCT
    (195) intnumber -> . SIGNED_INTNUMBER_OCT
    (196) intnumber -> . INTNUMBER_HEX
    (197) intnumber -> . SIGNED_INTNUMBER_HEX
    (189) floatnumber -> . FLOATNUMBER
    (198) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 88
    PLUS            shift and go to state 89
    LNOT            shift and go to state 90
    NOT             shift and go to state 91
    AND             shift and go to state 92
    NAND            shift and go to state 93
    NOR             shift and go to state 94
    OR              shift and go to state 95
    XOR             shift and go to state 96
    XNOR            shift and go to state 97
    LPAREN          shift and go to state 85
    LBRACE          shift and go to state 106
    DOLLER          shift and go to state 107
    ID              shift and go to state 86
    INTNUMBER_DEC   shift and go to state 112
    SIGNED_INTNUMBER_DEC shift and go to state 113
    INTNUMBER_BIN   shift and go to state 114
    SIGNED_INTNUMBER_BIN shift and go to state 115
    INTNUMBER_OCT   shift and go to state 116
    SIGNED_INTNUMBER_OCT shift and go to state 117
    INTNUMBER_HEX   shift and go to state 118
    SIGNED_INTNUMBER_HEX shift and go to state 119
    FLOATNUMBER     shift and go to state 120
    STRING_LITERAL  shift and go to state 121

    cond                           shift and go to state 483
    expression                     shift and go to state 437
    concat                         shift and go to state 98
    repeat                         shift and go to state 99
    partselect                     shift and go to state 100
    pointer                        shift and go to state 101
    functioncall                   shift and go to state 102
    systemcall                     shift and go to state 103
    identifier                     shift and go to state 104
    const_expression               shift and go to state 105
    scope                          shift and go to state 108
    intnumber                      shift and go to state 109
    floatnumber                    shift and go to state 110
    stringliteral                  shift and go to state 111

state 341

    (264) if_statement -> delays IF . LPAREN cond RPAREN true_statement ELSE else_statement
    (265) if_statement -> delays IF . LPAREN cond RPAREN true_statement

    LPAREN          shift and go to state 484


state 342

    (237) blocking_substitution -> delays lvalue . EQUALS delays rvalue SEMICOLON
    (239) nonblocking_substitution -> delays lvalue . LE delays rvalue SEMICOLON

    EQUALS          shift and go to state 485
    LE              shift and go to state 486


state 343

    (280) case_statement -> CASE LPAREN . case_comp RPAREN casecontent_statements ENDCASE
    (283) case_comp -> . expression
    (130) expression -> . MINUS expression
    (131) expression -> . PLUS expression
    (132) expression -> . LNOT expression
    (133) expression -> . NOT expression
    (134) expression -> . AND expression
    (135) expression -> . NAND expression
    (136) expression -> . NOR expression
    (137) expression -> . OR expression
    (138) expression -> . XOR expression
    (139) expression -> . XNOR expression
    (140) expression -> . expression POWER expression
    (141) expression -> . expression TIMES expression
    (142) expression -> . expression DIVIDE expression
    (143) expression -> . expression MOD expression
    (144) expression -> . expression PLUS expression
    (145) expression -> . expression MINUS expression
    (146) expression -> . expression LSHIFT expression
    (147) expression -> . expression RSHIFT expression
    (148) expression -> . expression LSHIFTA expression
    (149) expression -> . expression RSHIFTA expression
    (150) expression -> . expression LT expression
    (151) expression -> . expression GT expression
    (152) expression -> . expression LE expression
    (153) expression -> . expression GE expression
    (154) expression -> . expression EQ expression
    (155) expression -> . expression NE expression
    (156) expression -> . expression EQL expression
    (157) expression -> . expression NEL expression
    (158) expression -> . expression AND expression
    (159) expression -> . expression XOR expression
    (160) expression -> . expression XNOR expression
    (161) expression -> . expression OR expression
    (162) expression -> . expression LAND expression
    (163) expression -> . expression LOR expression
    (164) expression -> . expression COND expression COLON expression
    (165) expression -> . LPAREN expression RPAREN
    (166) expression -> . concat
    (167) expression -> . repeat
    (168) expression -> . partselect
    (169) expression -> . pointer
    (170) expression -> . functioncall
    (171) expression -> . systemcall
    (172) expression -> . identifier
    (173) expression -> . const_expression
    (174) concat -> . LBRACE concatlist RBRACE
    (177) repeat -> . LBRACE expression concat RBRACE
    (178) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (179) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (180) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (181) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (182) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (183) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (184) pointer -> . identifier LBRACKET expression RBRACKET
    (185) pointer -> . pointer LBRACKET expression RBRACKET
    (373) functioncall -> . identifier LPAREN func_args RPAREN
    (351) systemcall -> . DOLLER ID
    (352) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (353) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (392) identifier -> . ID
    (393) identifier -> . scope ID
    (186) const_expression -> . intnumber
    (187) const_expression -> . floatnumber
    (188) const_expression -> . stringliteral
    (394) scope -> . identifier DOT
    (395) scope -> . pointer DOT
    (190) intnumber -> . INTNUMBER_DEC
    (191) intnumber -> . SIGNED_INTNUMBER_DEC
    (192) intnumber -> . INTNUMBER_BIN
    (193) intnumber -> . SIGNED_INTNUMBER_BIN
    (194) intnumber -> . INTNUMBER_OCT
    (195) intnumber -> . SIGNED_INTNUMBER_OCT
    (196) intnumber -> . INTNUMBER_HEX
    (197) intnumber -> . SIGNED_INTNUMBER_HEX
    (189) floatnumber -> . FLOATNUMBER
    (198) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 88
    PLUS            shift and go to state 89
    LNOT            shift and go to state 90
    NOT             shift and go to state 91
    AND             shift and go to state 92
    NAND            shift and go to state 93
    NOR             shift and go to state 94
    OR              shift and go to state 95
    XOR             shift and go to state 96
    XNOR            shift and go to state 97
    LPAREN          shift and go to state 85
    LBRACE          shift and go to state 106
    DOLLER          shift and go to state 107
    ID              shift and go to state 86
    INTNUMBER_DEC   shift and go to state 112
    SIGNED_INTNUMBER_DEC shift and go to state 113
    INTNUMBER_BIN   shift and go to state 114
    SIGNED_INTNUMBER_BIN shift and go to state 115
    INTNUMBER_OCT   shift and go to state 116
    SIGNED_INTNUMBER_OCT shift and go to state 117
    INTNUMBER_HEX   shift and go to state 118
    SIGNED_INTNUMBER_HEX shift and go to state 119
    FLOATNUMBER     shift and go to state 120
    STRING_LITERAL  shift and go to state 121

    case_comp                      shift and go to state 487
    expression                     shift and go to state 488
    concat                         shift and go to state 98
    repeat                         shift and go to state 99
    partselect                     shift and go to state 100
    pointer                        shift and go to state 101
    functioncall                   shift and go to state 102
    systemcall                     shift and go to state 103
    identifier                     shift and go to state 104
    const_expression               shift and go to state 105
    scope                          shift and go to state 108
    intnumber                      shift and go to state 109
    floatnumber                    shift and go to state 110
    stringliteral                  shift and go to state 111

state 344

    (281) casex_statement -> CASEX LPAREN . case_comp RPAREN casecontent_statements ENDCASE
    (283) case_comp -> . expression
    (130) expression -> . MINUS expression
    (131) expression -> . PLUS expression
    (132) expression -> . LNOT expression
    (133) expression -> . NOT expression
    (134) expression -> . AND expression
    (135) expression -> . NAND expression
    (136) expression -> . NOR expression
    (137) expression -> . OR expression
    (138) expression -> . XOR expression
    (139) expression -> . XNOR expression
    (140) expression -> . expression POWER expression
    (141) expression -> . expression TIMES expression
    (142) expression -> . expression DIVIDE expression
    (143) expression -> . expression MOD expression
    (144) expression -> . expression PLUS expression
    (145) expression -> . expression MINUS expression
    (146) expression -> . expression LSHIFT expression
    (147) expression -> . expression RSHIFT expression
    (148) expression -> . expression LSHIFTA expression
    (149) expression -> . expression RSHIFTA expression
    (150) expression -> . expression LT expression
    (151) expression -> . expression GT expression
    (152) expression -> . expression LE expression
    (153) expression -> . expression GE expression
    (154) expression -> . expression EQ expression
    (155) expression -> . expression NE expression
    (156) expression -> . expression EQL expression
    (157) expression -> . expression NEL expression
    (158) expression -> . expression AND expression
    (159) expression -> . expression XOR expression
    (160) expression -> . expression XNOR expression
    (161) expression -> . expression OR expression
    (162) expression -> . expression LAND expression
    (163) expression -> . expression LOR expression
    (164) expression -> . expression COND expression COLON expression
    (165) expression -> . LPAREN expression RPAREN
    (166) expression -> . concat
    (167) expression -> . repeat
    (168) expression -> . partselect
    (169) expression -> . pointer
    (170) expression -> . functioncall
    (171) expression -> . systemcall
    (172) expression -> . identifier
    (173) expression -> . const_expression
    (174) concat -> . LBRACE concatlist RBRACE
    (177) repeat -> . LBRACE expression concat RBRACE
    (178) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (179) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (180) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (181) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (182) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (183) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (184) pointer -> . identifier LBRACKET expression RBRACKET
    (185) pointer -> . pointer LBRACKET expression RBRACKET
    (373) functioncall -> . identifier LPAREN func_args RPAREN
    (351) systemcall -> . DOLLER ID
    (352) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (353) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (392) identifier -> . ID
    (393) identifier -> . scope ID
    (186) const_expression -> . intnumber
    (187) const_expression -> . floatnumber
    (188) const_expression -> . stringliteral
    (394) scope -> . identifier DOT
    (395) scope -> . pointer DOT
    (190) intnumber -> . INTNUMBER_DEC
    (191) intnumber -> . SIGNED_INTNUMBER_DEC
    (192) intnumber -> . INTNUMBER_BIN
    (193) intnumber -> . SIGNED_INTNUMBER_BIN
    (194) intnumber -> . INTNUMBER_OCT
    (195) intnumber -> . SIGNED_INTNUMBER_OCT
    (196) intnumber -> . INTNUMBER_HEX
    (197) intnumber -> . SIGNED_INTNUMBER_HEX
    (189) floatnumber -> . FLOATNUMBER
    (198) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 88
    PLUS            shift and go to state 89
    LNOT            shift and go to state 90
    NOT             shift and go to state 91
    AND             shift and go to state 92
    NAND            shift and go to state 93
    NOR             shift and go to state 94
    OR              shift and go to state 95
    XOR             shift and go to state 96
    XNOR            shift and go to state 97
    LPAREN          shift and go to state 85
    LBRACE          shift and go to state 106
    DOLLER          shift and go to state 107
    ID              shift and go to state 86
    INTNUMBER_DEC   shift and go to state 112
    SIGNED_INTNUMBER_DEC shift and go to state 113
    INTNUMBER_BIN   shift and go to state 114
    SIGNED_INTNUMBER_BIN shift and go to state 115
    INTNUMBER_OCT   shift and go to state 116
    SIGNED_INTNUMBER_OCT shift and go to state 117
    INTNUMBER_HEX   shift and go to state 118
    SIGNED_INTNUMBER_HEX shift and go to state 119
    FLOATNUMBER     shift and go to state 120
    STRING_LITERAL  shift and go to state 121

    case_comp                      shift and go to state 489
    expression                     shift and go to state 488
    concat                         shift and go to state 98
    repeat                         shift and go to state 99
    partselect                     shift and go to state 100
    pointer                        shift and go to state 101
    functioncall                   shift and go to state 102
    systemcall                     shift and go to state 103
    identifier                     shift and go to state 104
    const_expression               shift and go to state 105
    scope                          shift and go to state 108
    intnumber                      shift and go to state 109
    floatnumber                    shift and go to state 110
    stringliteral                  shift and go to state 111

state 345

    (282) unique_case_statement -> UNIQUE CASE . LPAREN case_comp RPAREN casecontent_statements ENDCASE

    LPAREN          shift and go to state 490


state 346

    (270) for_statement -> FOR LPAREN . forpre forcond forpost RPAREN forcontent_statement
    (271) forpre -> . blocking_substitution
    (272) forpre -> . SEMICOLON
    (237) blocking_substitution -> . delays lvalue EQUALS delays rvalue SEMICOLON
    (240) delays -> . DELAY LPAREN expression RPAREN
    (241) delays -> . DELAY identifier
    (242) delays -> . DELAY intnumber
    (243) delays -> . DELAY floatnumber
    (244) delays -> . empty
    (400) empty -> .

    SEMICOLON       shift and go to state 440
    DELAY           shift and go to state 140
    LBRACE          reduce using rule 400 (empty -> .)
    ID              reduce using rule 400 (empty -> .)

    forpre                         shift and go to state 491
    blocking_substitution          shift and go to state 439
    delays                         shift and go to state 441
    empty                          shift and go to state 141

state 347

    (278) while_statement -> WHILE LPAREN . cond RPAREN whilecontent_statement
    (266) cond -> . expression
    (130) expression -> . MINUS expression
    (131) expression -> . PLUS expression
    (132) expression -> . LNOT expression
    (133) expression -> . NOT expression
    (134) expression -> . AND expression
    (135) expression -> . NAND expression
    (136) expression -> . NOR expression
    (137) expression -> . OR expression
    (138) expression -> . XOR expression
    (139) expression -> . XNOR expression
    (140) expression -> . expression POWER expression
    (141) expression -> . expression TIMES expression
    (142) expression -> . expression DIVIDE expression
    (143) expression -> . expression MOD expression
    (144) expression -> . expression PLUS expression
    (145) expression -> . expression MINUS expression
    (146) expression -> . expression LSHIFT expression
    (147) expression -> . expression RSHIFT expression
    (148) expression -> . expression LSHIFTA expression
    (149) expression -> . expression RSHIFTA expression
    (150) expression -> . expression LT expression
    (151) expression -> . expression GT expression
    (152) expression -> . expression LE expression
    (153) expression -> . expression GE expression
    (154) expression -> . expression EQ expression
    (155) expression -> . expression NE expression
    (156) expression -> . expression EQL expression
    (157) expression -> . expression NEL expression
    (158) expression -> . expression AND expression
    (159) expression -> . expression XOR expression
    (160) expression -> . expression XNOR expression
    (161) expression -> . expression OR expression
    (162) expression -> . expression LAND expression
    (163) expression -> . expression LOR expression
    (164) expression -> . expression COND expression COLON expression
    (165) expression -> . LPAREN expression RPAREN
    (166) expression -> . concat
    (167) expression -> . repeat
    (168) expression -> . partselect
    (169) expression -> . pointer
    (170) expression -> . functioncall
    (171) expression -> . systemcall
    (172) expression -> . identifier
    (173) expression -> . const_expression
    (174) concat -> . LBRACE concatlist RBRACE
    (177) repeat -> . LBRACE expression concat RBRACE
    (178) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (179) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (180) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (181) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (182) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (183) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (184) pointer -> . identifier LBRACKET expression RBRACKET
    (185) pointer -> . pointer LBRACKET expression RBRACKET
    (373) functioncall -> . identifier LPAREN func_args RPAREN
    (351) systemcall -> . DOLLER ID
    (352) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (353) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (392) identifier -> . ID
    (393) identifier -> . scope ID
    (186) const_expression -> . intnumber
    (187) const_expression -> . floatnumber
    (188) const_expression -> . stringliteral
    (394) scope -> . identifier DOT
    (395) scope -> . pointer DOT
    (190) intnumber -> . INTNUMBER_DEC
    (191) intnumber -> . SIGNED_INTNUMBER_DEC
    (192) intnumber -> . INTNUMBER_BIN
    (193) intnumber -> . SIGNED_INTNUMBER_BIN
    (194) intnumber -> . INTNUMBER_OCT
    (195) intnumber -> . SIGNED_INTNUMBER_OCT
    (196) intnumber -> . INTNUMBER_HEX
    (197) intnumber -> . SIGNED_INTNUMBER_HEX
    (189) floatnumber -> . FLOATNUMBER
    (198) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 88
    PLUS            shift and go to state 89
    LNOT            shift and go to state 90
    NOT             shift and go to state 91
    AND             shift and go to state 92
    NAND            shift and go to state 93
    NOR             shift and go to state 94
    OR              shift and go to state 95
    XOR             shift and go to state 96
    XNOR            shift and go to state 97
    LPAREN          shift and go to state 85
    LBRACE          shift and go to state 106
    DOLLER          shift and go to state 107
    ID              shift and go to state 86
    INTNUMBER_DEC   shift and go to state 112
    SIGNED_INTNUMBER_DEC shift and go to state 113
    INTNUMBER_BIN   shift and go to state 114
    SIGNED_INTNUMBER_BIN shift and go to state 115
    INTNUMBER_OCT   shift and go to state 116
    SIGNED_INTNUMBER_OCT shift and go to state 117
    INTNUMBER_HEX   shift and go to state 118
    SIGNED_INTNUMBER_HEX shift and go to state 119
    FLOATNUMBER     shift and go to state 120
    STRING_LITERAL  shift and go to state 121

    cond                           shift and go to state 492
    expression                     shift and go to state 437
    concat                         shift and go to state 98
    repeat                         shift and go to state 99
    partselect                     shift and go to state 100
    pointer                        shift and go to state 101
    functioncall                   shift and go to state 102
    systemcall                     shift and go to state 103
    identifier                     shift and go to state 104
    const_expression               shift and go to state 105
    scope                          shift and go to state 108
    intnumber                      shift and go to state 109
    floatnumber                    shift and go to state 110
    stringliteral                  shift and go to state 111

state 348

    (292) event_statement -> senslist SEMICOLON .

    ENDMODULE       reduce using rule 292 (event_statement -> senslist SEMICOLON .)
    GENERATE        reduce using rule 292 (event_statement -> senslist SEMICOLON .)
    INTEGER         reduce using rule 292 (event_statement -> senslist SEMICOLON .)
    REAL            reduce using rule 292 (event_statement -> senslist SEMICOLON .)
    PARAMETER       reduce using rule 292 (event_statement -> senslist SEMICOLON .)
    LOCALPARAM      reduce using rule 292 (event_statement -> senslist SEMICOLON .)
    GENVAR          reduce using rule 292 (event_statement -> senslist SEMICOLON .)
    ASSIGN          reduce using rule 292 (event_statement -> senslist SEMICOLON .)
    ALWAYS          reduce using rule 292 (event_statement -> senslist SEMICOLON .)
    ALWAYS_FF       reduce using rule 292 (event_statement -> senslist SEMICOLON .)
    ALWAYS_COMB     reduce using rule 292 (event_statement -> senslist SEMICOLON .)
    INITIAL         reduce using rule 292 (event_statement -> senslist SEMICOLON .)
    ID              reduce using rule 292 (event_statement -> senslist SEMICOLON .)
    SENS_OR         reduce using rule 292 (event_statement -> senslist SEMICOLON .)
    FUNCTION        reduce using rule 292 (event_statement -> senslist SEMICOLON .)
    TASK            reduce using rule 292 (event_statement -> senslist SEMICOLON .)
    LPAREN          reduce using rule 292 (event_statement -> senslist SEMICOLON .)
    INPUT           reduce using rule 292 (event_statement -> senslist SEMICOLON .)
    OUTPUT          reduce using rule 292 (event_statement -> senslist SEMICOLON .)
    INOUT           reduce using rule 292 (event_statement -> senslist SEMICOLON .)
    TRI             reduce using rule 292 (event_statement -> senslist SEMICOLON .)
    REG             reduce using rule 292 (event_statement -> senslist SEMICOLON .)
    LOGIC           reduce using rule 292 (event_statement -> senslist SEMICOLON .)
    WIRE            reduce using rule 292 (event_statement -> senslist SEMICOLON .)
    SIGNED          reduce using rule 292 (event_statement -> senslist SEMICOLON .)
    SUPPLY0         reduce using rule 292 (event_statement -> senslist SEMICOLON .)
    SUPPLY1         reduce using rule 292 (event_statement -> senslist SEMICOLON .)
    ENDGENERATE     reduce using rule 292 (event_statement -> senslist SEMICOLON .)
    IF              reduce using rule 292 (event_statement -> senslist SEMICOLON .)
    FOR             reduce using rule 292 (event_statement -> senslist SEMICOLON .)
    ELSE            reduce using rule 292 (event_statement -> senslist SEMICOLON .)
    END             reduce using rule 292 (event_statement -> senslist SEMICOLON .)
    CASE            reduce using rule 292 (event_statement -> senslist SEMICOLON .)
    CASEX           reduce using rule 292 (event_statement -> senslist SEMICOLON .)
    UNIQUE          reduce using rule 292 (event_statement -> senslist SEMICOLON .)
    WHILE           reduce using rule 292 (event_statement -> senslist SEMICOLON .)
    WAIT            reduce using rule 292 (event_statement -> senslist SEMICOLON .)
    FOREVER         reduce using rule 292 (event_statement -> senslist SEMICOLON .)
    BEGIN           reduce using rule 292 (event_statement -> senslist SEMICOLON .)
    FORK            reduce using rule 292 (event_statement -> senslist SEMICOLON .)
    DELAY           reduce using rule 292 (event_statement -> senslist SEMICOLON .)
    AT              reduce using rule 292 (event_statement -> senslist SEMICOLON .)
    DOLLER          reduce using rule 292 (event_statement -> senslist SEMICOLON .)
    DISABLE         reduce using rule 292 (event_statement -> senslist SEMICOLON .)
    LBRACE          reduce using rule 292 (event_statement -> senslist SEMICOLON .)
    SEMICOLON       reduce using rule 292 (event_statement -> senslist SEMICOLON .)
    JOIN            reduce using rule 292 (event_statement -> senslist SEMICOLON .)
    ENDFUNCTION     reduce using rule 292 (event_statement -> senslist SEMICOLON .)
    ENDTASK         reduce using rule 292 (event_statement -> senslist SEMICOLON .)
    ENDCASE         reduce using rule 292 (event_statement -> senslist SEMICOLON .)
    DEFAULT         reduce using rule 292 (event_statement -> senslist SEMICOLON .)
    MINUS           reduce using rule 292 (event_statement -> senslist SEMICOLON .)
    PLUS            reduce using rule 292 (event_statement -> senslist SEMICOLON .)
    LNOT            reduce using rule 292 (event_statement -> senslist SEMICOLON .)
    NOT             reduce using rule 292 (event_statement -> senslist SEMICOLON .)
    AND             reduce using rule 292 (event_statement -> senslist SEMICOLON .)
    NAND            reduce using rule 292 (event_statement -> senslist SEMICOLON .)
    NOR             reduce using rule 292 (event_statement -> senslist SEMICOLON .)
    OR              reduce using rule 292 (event_statement -> senslist SEMICOLON .)
    XOR             reduce using rule 292 (event_statement -> senslist SEMICOLON .)
    XNOR            reduce using rule 292 (event_statement -> senslist SEMICOLON .)
    INTNUMBER_DEC   reduce using rule 292 (event_statement -> senslist SEMICOLON .)
    SIGNED_INTNUMBER_DEC reduce using rule 292 (event_statement -> senslist SEMICOLON .)
    INTNUMBER_BIN   reduce using rule 292 (event_statement -> senslist SEMICOLON .)
    SIGNED_INTNUMBER_BIN reduce using rule 292 (event_statement -> senslist SEMICOLON .)
    INTNUMBER_OCT   reduce using rule 292 (event_statement -> senslist SEMICOLON .)
    SIGNED_INTNUMBER_OCT reduce using rule 292 (event_statement -> senslist SEMICOLON .)
    INTNUMBER_HEX   reduce using rule 292 (event_statement -> senslist SEMICOLON .)
    SIGNED_INTNUMBER_HEX reduce using rule 292 (event_statement -> senslist SEMICOLON .)
    FLOATNUMBER     reduce using rule 292 (event_statement -> senslist SEMICOLON .)
    STRING_LITERAL  reduce using rule 292 (event_statement -> senslist SEMICOLON .)


state 349

    (293) wait_statement -> WAIT LPAREN . cond RPAREN waitcontent_statement
    (266) cond -> . expression
    (130) expression -> . MINUS expression
    (131) expression -> . PLUS expression
    (132) expression -> . LNOT expression
    (133) expression -> . NOT expression
    (134) expression -> . AND expression
    (135) expression -> . NAND expression
    (136) expression -> . NOR expression
    (137) expression -> . OR expression
    (138) expression -> . XOR expression
    (139) expression -> . XNOR expression
    (140) expression -> . expression POWER expression
    (141) expression -> . expression TIMES expression
    (142) expression -> . expression DIVIDE expression
    (143) expression -> . expression MOD expression
    (144) expression -> . expression PLUS expression
    (145) expression -> . expression MINUS expression
    (146) expression -> . expression LSHIFT expression
    (147) expression -> . expression RSHIFT expression
    (148) expression -> . expression LSHIFTA expression
    (149) expression -> . expression RSHIFTA expression
    (150) expression -> . expression LT expression
    (151) expression -> . expression GT expression
    (152) expression -> . expression LE expression
    (153) expression -> . expression GE expression
    (154) expression -> . expression EQ expression
    (155) expression -> . expression NE expression
    (156) expression -> . expression EQL expression
    (157) expression -> . expression NEL expression
    (158) expression -> . expression AND expression
    (159) expression -> . expression XOR expression
    (160) expression -> . expression XNOR expression
    (161) expression -> . expression OR expression
    (162) expression -> . expression LAND expression
    (163) expression -> . expression LOR expression
    (164) expression -> . expression COND expression COLON expression
    (165) expression -> . LPAREN expression RPAREN
    (166) expression -> . concat
    (167) expression -> . repeat
    (168) expression -> . partselect
    (169) expression -> . pointer
    (170) expression -> . functioncall
    (171) expression -> . systemcall
    (172) expression -> . identifier
    (173) expression -> . const_expression
    (174) concat -> . LBRACE concatlist RBRACE
    (177) repeat -> . LBRACE expression concat RBRACE
    (178) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (179) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (180) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (181) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (182) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (183) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (184) pointer -> . identifier LBRACKET expression RBRACKET
    (185) pointer -> . pointer LBRACKET expression RBRACKET
    (373) functioncall -> . identifier LPAREN func_args RPAREN
    (351) systemcall -> . DOLLER ID
    (352) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (353) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (392) identifier -> . ID
    (393) identifier -> . scope ID
    (186) const_expression -> . intnumber
    (187) const_expression -> . floatnumber
    (188) const_expression -> . stringliteral
    (394) scope -> . identifier DOT
    (395) scope -> . pointer DOT
    (190) intnumber -> . INTNUMBER_DEC
    (191) intnumber -> . SIGNED_INTNUMBER_DEC
    (192) intnumber -> . INTNUMBER_BIN
    (193) intnumber -> . SIGNED_INTNUMBER_BIN
    (194) intnumber -> . INTNUMBER_OCT
    (195) intnumber -> . SIGNED_INTNUMBER_OCT
    (196) intnumber -> . INTNUMBER_HEX
    (197) intnumber -> . SIGNED_INTNUMBER_HEX
    (189) floatnumber -> . FLOATNUMBER
    (198) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 88
    PLUS            shift and go to state 89
    LNOT            shift and go to state 90
    NOT             shift and go to state 91
    AND             shift and go to state 92
    NAND            shift and go to state 93
    NOR             shift and go to state 94
    OR              shift and go to state 95
    XOR             shift and go to state 96
    XNOR            shift and go to state 97
    LPAREN          shift and go to state 85
    LBRACE          shift and go to state 106
    DOLLER          shift and go to state 107
    ID              shift and go to state 86
    INTNUMBER_DEC   shift and go to state 112
    SIGNED_INTNUMBER_DEC shift and go to state 113
    INTNUMBER_BIN   shift and go to state 114
    SIGNED_INTNUMBER_BIN shift and go to state 115
    INTNUMBER_OCT   shift and go to state 116
    SIGNED_INTNUMBER_OCT shift and go to state 117
    INTNUMBER_HEX   shift and go to state 118
    SIGNED_INTNUMBER_HEX shift and go to state 119
    FLOATNUMBER     shift and go to state 120
    STRING_LITERAL  shift and go to state 121

    cond                           shift and go to state 493
    expression                     shift and go to state 437
    concat                         shift and go to state 98
    repeat                         shift and go to state 99
    partselect                     shift and go to state 100
    pointer                        shift and go to state 101
    functioncall                   shift and go to state 102
    systemcall                     shift and go to state 103
    identifier                     shift and go to state 104
    const_expression               shift and go to state 105
    scope                          shift and go to state 108
    intnumber                      shift and go to state 109
    floatnumber                    shift and go to state 110
    stringliteral                  shift and go to state 111

state 350

    (296) forever_statement -> FOREVER basic_statement .

    ENDMODULE       reduce using rule 296 (forever_statement -> FOREVER basic_statement .)
    GENERATE        reduce using rule 296 (forever_statement -> FOREVER basic_statement .)
    INTEGER         reduce using rule 296 (forever_statement -> FOREVER basic_statement .)
    REAL            reduce using rule 296 (forever_statement -> FOREVER basic_statement .)
    PARAMETER       reduce using rule 296 (forever_statement -> FOREVER basic_statement .)
    LOCALPARAM      reduce using rule 296 (forever_statement -> FOREVER basic_statement .)
    GENVAR          reduce using rule 296 (forever_statement -> FOREVER basic_statement .)
    ASSIGN          reduce using rule 296 (forever_statement -> FOREVER basic_statement .)
    ALWAYS          reduce using rule 296 (forever_statement -> FOREVER basic_statement .)
    ALWAYS_FF       reduce using rule 296 (forever_statement -> FOREVER basic_statement .)
    ALWAYS_COMB     reduce using rule 296 (forever_statement -> FOREVER basic_statement .)
    INITIAL         reduce using rule 296 (forever_statement -> FOREVER basic_statement .)
    ID              reduce using rule 296 (forever_statement -> FOREVER basic_statement .)
    SENS_OR         reduce using rule 296 (forever_statement -> FOREVER basic_statement .)
    FUNCTION        reduce using rule 296 (forever_statement -> FOREVER basic_statement .)
    TASK            reduce using rule 296 (forever_statement -> FOREVER basic_statement .)
    LPAREN          reduce using rule 296 (forever_statement -> FOREVER basic_statement .)
    INPUT           reduce using rule 296 (forever_statement -> FOREVER basic_statement .)
    OUTPUT          reduce using rule 296 (forever_statement -> FOREVER basic_statement .)
    INOUT           reduce using rule 296 (forever_statement -> FOREVER basic_statement .)
    TRI             reduce using rule 296 (forever_statement -> FOREVER basic_statement .)
    REG             reduce using rule 296 (forever_statement -> FOREVER basic_statement .)
    LOGIC           reduce using rule 296 (forever_statement -> FOREVER basic_statement .)
    WIRE            reduce using rule 296 (forever_statement -> FOREVER basic_statement .)
    SIGNED          reduce using rule 296 (forever_statement -> FOREVER basic_statement .)
    SUPPLY0         reduce using rule 296 (forever_statement -> FOREVER basic_statement .)
    SUPPLY1         reduce using rule 296 (forever_statement -> FOREVER basic_statement .)
    ENDGENERATE     reduce using rule 296 (forever_statement -> FOREVER basic_statement .)
    IF              reduce using rule 296 (forever_statement -> FOREVER basic_statement .)
    FOR             reduce using rule 296 (forever_statement -> FOREVER basic_statement .)
    ELSE            reduce using rule 296 (forever_statement -> FOREVER basic_statement .)
    END             reduce using rule 296 (forever_statement -> FOREVER basic_statement .)
    CASE            reduce using rule 296 (forever_statement -> FOREVER basic_statement .)
    CASEX           reduce using rule 296 (forever_statement -> FOREVER basic_statement .)
    UNIQUE          reduce using rule 296 (forever_statement -> FOREVER basic_statement .)
    WHILE           reduce using rule 296 (forever_statement -> FOREVER basic_statement .)
    WAIT            reduce using rule 296 (forever_statement -> FOREVER basic_statement .)
    FOREVER         reduce using rule 296 (forever_statement -> FOREVER basic_statement .)
    BEGIN           reduce using rule 296 (forever_statement -> FOREVER basic_statement .)
    FORK            reduce using rule 296 (forever_statement -> FOREVER basic_statement .)
    DELAY           reduce using rule 296 (forever_statement -> FOREVER basic_statement .)
    AT              reduce using rule 296 (forever_statement -> FOREVER basic_statement .)
    DOLLER          reduce using rule 296 (forever_statement -> FOREVER basic_statement .)
    DISABLE         reduce using rule 296 (forever_statement -> FOREVER basic_statement .)
    LBRACE          reduce using rule 296 (forever_statement -> FOREVER basic_statement .)
    SEMICOLON       reduce using rule 296 (forever_statement -> FOREVER basic_statement .)
    JOIN            reduce using rule 296 (forever_statement -> FOREVER basic_statement .)
    ENDFUNCTION     reduce using rule 296 (forever_statement -> FOREVER basic_statement .)
    ENDTASK         reduce using rule 296 (forever_statement -> FOREVER basic_statement .)
    ENDCASE         reduce using rule 296 (forever_statement -> FOREVER basic_statement .)
    DEFAULT         reduce using rule 296 (forever_statement -> FOREVER basic_statement .)
    MINUS           reduce using rule 296 (forever_statement -> FOREVER basic_statement .)
    PLUS            reduce using rule 296 (forever_statement -> FOREVER basic_statement .)
    LNOT            reduce using rule 296 (forever_statement -> FOREVER basic_statement .)
    NOT             reduce using rule 296 (forever_statement -> FOREVER basic_statement .)
    AND             reduce using rule 296 (forever_statement -> FOREVER basic_statement .)
    NAND            reduce using rule 296 (forever_statement -> FOREVER basic_statement .)
    NOR             reduce using rule 296 (forever_statement -> FOREVER basic_statement .)
    OR              reduce using rule 296 (forever_statement -> FOREVER basic_statement .)
    XOR             reduce using rule 296 (forever_statement -> FOREVER basic_statement .)
    XNOR            reduce using rule 296 (forever_statement -> FOREVER basic_statement .)
    INTNUMBER_DEC   reduce using rule 296 (forever_statement -> FOREVER basic_statement .)
    SIGNED_INTNUMBER_DEC reduce using rule 296 (forever_statement -> FOREVER basic_statement .)
    INTNUMBER_BIN   reduce using rule 296 (forever_statement -> FOREVER basic_statement .)
    SIGNED_INTNUMBER_BIN reduce using rule 296 (forever_statement -> FOREVER basic_statement .)
    INTNUMBER_OCT   reduce using rule 296 (forever_statement -> FOREVER basic_statement .)
    SIGNED_INTNUMBER_OCT reduce using rule 296 (forever_statement -> FOREVER basic_statement .)
    INTNUMBER_HEX   reduce using rule 296 (forever_statement -> FOREVER basic_statement .)
    SIGNED_INTNUMBER_HEX reduce using rule 296 (forever_statement -> FOREVER basic_statement .)
    FLOATNUMBER     reduce using rule 296 (forever_statement -> FOREVER basic_statement .)
    STRING_LITERAL  reduce using rule 296 (forever_statement -> FOREVER basic_statement .)


state 351

    (245) block -> BEGIN block_statements . END
    (247) block_statements -> block_statements . block_statement
    (249) block_statement -> . basic_statement
    (221) basic_statement -> . if_statement
    (222) basic_statement -> . case_statement
    (223) basic_statement -> . casex_statement
    (224) basic_statement -> . unique_case_statement
    (225) basic_statement -> . for_statement
    (226) basic_statement -> . while_statement
    (227) basic_statement -> . event_statement
    (228) basic_statement -> . wait_statement
    (229) basic_statement -> . forever_statement
    (230) basic_statement -> . block
    (231) basic_statement -> . namedblock
    (232) basic_statement -> . parallelblock
    (233) basic_statement -> . blocking_substitution
    (234) basic_statement -> . nonblocking_substitution
    (235) basic_statement -> . single_statement
    (262) if_statement -> . IF LPAREN cond RPAREN true_statement ELSE else_statement
    (263) if_statement -> . IF LPAREN cond RPAREN true_statement
    (264) if_statement -> . delays IF LPAREN cond RPAREN true_statement ELSE else_statement
    (265) if_statement -> . delays IF LPAREN cond RPAREN true_statement
    (280) case_statement -> . CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE
    (281) casex_statement -> . CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE
    (282) unique_case_statement -> . UNIQUE CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE
    (270) for_statement -> . FOR LPAREN forpre forcond forpost RPAREN forcontent_statement
    (278) while_statement -> . WHILE LPAREN cond RPAREN whilecontent_statement
    (292) event_statement -> . senslist SEMICOLON
    (293) wait_statement -> . WAIT LPAREN cond RPAREN waitcontent_statement
    (296) forever_statement -> . FOREVER basic_statement
    (245) block -> . BEGIN block_statements END
    (246) block -> . BEGIN END
    (250) namedblock -> . BEGIN COLON ID namedblock_statements END
    (251) namedblock -> . BEGIN COLON ID END
    (260) parallelblock -> . FORK block_statements JOIN
    (261) parallelblock -> . FORK JOIN
    (237) blocking_substitution -> . delays lvalue EQUALS delays rvalue SEMICOLON
    (239) nonblocking_substitution -> . delays lvalue LE delays rvalue SEMICOLON
    (397) single_statement -> . DELAY expression SEMICOLON
    (398) single_statement -> . systemcall SEMICOLON
    (399) single_statement -> . disable SEMICOLON
    (240) delays -> . DELAY LPAREN expression RPAREN
    (241) delays -> . DELAY identifier
    (242) delays -> . DELAY intnumber
    (243) delays -> . DELAY floatnumber
    (244) delays -> . empty
    (202) senslist -> . AT LPAREN edgesigs RPAREN
    (209) senslist -> . empty
    (210) senslist -> . AT levelsig
    (211) senslist -> . AT LPAREN levelsigs RPAREN
    (219) senslist -> . AT TIMES
    (220) senslist -> . AT LPAREN TIMES RPAREN
    (351) systemcall -> . DOLLER ID
    (352) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (353) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (396) disable -> . DISABLE ID
    (400) empty -> .

  ! shift/reduce conflict for IF resolved as shift
    END             shift and go to state 494
    IF              shift and go to state 192
    CASE            shift and go to state 194
    CASEX           shift and go to state 195
    UNIQUE          shift and go to state 196
    FOR             shift and go to state 197
    WHILE           shift and go to state 198
    WAIT            shift and go to state 200
    FOREVER         shift and go to state 201
    BEGIN           shift and go to state 202
    FORK            shift and go to state 203
    DELAY           shift and go to state 204
    AT              shift and go to state 171
    DOLLER          shift and go to state 107
    DISABLE         shift and go to state 208
    LBRACE          reduce using rule 400 (empty -> .)
    ID              reduce using rule 400 (empty -> .)
    SEMICOLON       reduce using rule 400 (empty -> .)

  ! IF              [ reduce using rule 400 (empty -> .) ]

    block_statement                shift and go to state 495
    basic_statement                shift and go to state 355
    if_statement                   shift and go to state 177
    case_statement                 shift and go to state 178
    casex_statement                shift and go to state 179
    unique_case_statement          shift and go to state 180
    for_statement                  shift and go to state 181
    while_statement                shift and go to state 182
    event_statement                shift and go to state 183
    wait_statement                 shift and go to state 184
    forever_statement              shift and go to state 185
    block                          shift and go to state 186
    namedblock                     shift and go to state 187
    parallelblock                  shift and go to state 188
    blocking_substitution          shift and go to state 189
    nonblocking_substitution       shift and go to state 190
    single_statement               shift and go to state 191
    delays                         shift and go to state 193
    senslist                       shift and go to state 199
    systemcall                     shift and go to state 205
    disable                        shift and go to state 206
    empty                          shift and go to state 207

state 352

    (246) block -> BEGIN END .

    ENDMODULE       reduce using rule 246 (block -> BEGIN END .)
    GENERATE        reduce using rule 246 (block -> BEGIN END .)
    INTEGER         reduce using rule 246 (block -> BEGIN END .)
    REAL            reduce using rule 246 (block -> BEGIN END .)
    PARAMETER       reduce using rule 246 (block -> BEGIN END .)
    LOCALPARAM      reduce using rule 246 (block -> BEGIN END .)
    GENVAR          reduce using rule 246 (block -> BEGIN END .)
    ASSIGN          reduce using rule 246 (block -> BEGIN END .)
    ALWAYS          reduce using rule 246 (block -> BEGIN END .)
    ALWAYS_FF       reduce using rule 246 (block -> BEGIN END .)
    ALWAYS_COMB     reduce using rule 246 (block -> BEGIN END .)
    INITIAL         reduce using rule 246 (block -> BEGIN END .)
    ID              reduce using rule 246 (block -> BEGIN END .)
    SENS_OR         reduce using rule 246 (block -> BEGIN END .)
    FUNCTION        reduce using rule 246 (block -> BEGIN END .)
    TASK            reduce using rule 246 (block -> BEGIN END .)
    LPAREN          reduce using rule 246 (block -> BEGIN END .)
    INPUT           reduce using rule 246 (block -> BEGIN END .)
    OUTPUT          reduce using rule 246 (block -> BEGIN END .)
    INOUT           reduce using rule 246 (block -> BEGIN END .)
    TRI             reduce using rule 246 (block -> BEGIN END .)
    REG             reduce using rule 246 (block -> BEGIN END .)
    LOGIC           reduce using rule 246 (block -> BEGIN END .)
    WIRE            reduce using rule 246 (block -> BEGIN END .)
    SIGNED          reduce using rule 246 (block -> BEGIN END .)
    SUPPLY0         reduce using rule 246 (block -> BEGIN END .)
    SUPPLY1         reduce using rule 246 (block -> BEGIN END .)
    ENDGENERATE     reduce using rule 246 (block -> BEGIN END .)
    IF              reduce using rule 246 (block -> BEGIN END .)
    FOR             reduce using rule 246 (block -> BEGIN END .)
    ELSE            reduce using rule 246 (block -> BEGIN END .)
    END             reduce using rule 246 (block -> BEGIN END .)
    CASE            reduce using rule 246 (block -> BEGIN END .)
    CASEX           reduce using rule 246 (block -> BEGIN END .)
    UNIQUE          reduce using rule 246 (block -> BEGIN END .)
    WHILE           reduce using rule 246 (block -> BEGIN END .)
    WAIT            reduce using rule 246 (block -> BEGIN END .)
    FOREVER         reduce using rule 246 (block -> BEGIN END .)
    BEGIN           reduce using rule 246 (block -> BEGIN END .)
    FORK            reduce using rule 246 (block -> BEGIN END .)
    DELAY           reduce using rule 246 (block -> BEGIN END .)
    AT              reduce using rule 246 (block -> BEGIN END .)
    DOLLER          reduce using rule 246 (block -> BEGIN END .)
    DISABLE         reduce using rule 246 (block -> BEGIN END .)
    LBRACE          reduce using rule 246 (block -> BEGIN END .)
    SEMICOLON       reduce using rule 246 (block -> BEGIN END .)
    JOIN            reduce using rule 246 (block -> BEGIN END .)
    ENDFUNCTION     reduce using rule 246 (block -> BEGIN END .)
    ENDTASK         reduce using rule 246 (block -> BEGIN END .)
    ENDCASE         reduce using rule 246 (block -> BEGIN END .)
    DEFAULT         reduce using rule 246 (block -> BEGIN END .)
    MINUS           reduce using rule 246 (block -> BEGIN END .)
    PLUS            reduce using rule 246 (block -> BEGIN END .)
    LNOT            reduce using rule 246 (block -> BEGIN END .)
    NOT             reduce using rule 246 (block -> BEGIN END .)
    AND             reduce using rule 246 (block -> BEGIN END .)
    NAND            reduce using rule 246 (block -> BEGIN END .)
    NOR             reduce using rule 246 (block -> BEGIN END .)
    OR              reduce using rule 246 (block -> BEGIN END .)
    XOR             reduce using rule 246 (block -> BEGIN END .)
    XNOR            reduce using rule 246 (block -> BEGIN END .)
    INTNUMBER_DEC   reduce using rule 246 (block -> BEGIN END .)
    SIGNED_INTNUMBER_DEC reduce using rule 246 (block -> BEGIN END .)
    INTNUMBER_BIN   reduce using rule 246 (block -> BEGIN END .)
    SIGNED_INTNUMBER_BIN reduce using rule 246 (block -> BEGIN END .)
    INTNUMBER_OCT   reduce using rule 246 (block -> BEGIN END .)
    SIGNED_INTNUMBER_OCT reduce using rule 246 (block -> BEGIN END .)
    INTNUMBER_HEX   reduce using rule 246 (block -> BEGIN END .)
    SIGNED_INTNUMBER_HEX reduce using rule 246 (block -> BEGIN END .)
    FLOATNUMBER     reduce using rule 246 (block -> BEGIN END .)
    STRING_LITERAL  reduce using rule 246 (block -> BEGIN END .)


state 353

    (250) namedblock -> BEGIN COLON . ID namedblock_statements END
    (251) namedblock -> BEGIN COLON . ID END

    ID              shift and go to state 496


state 354

    (248) block_statements -> block_statement .

    END             reduce using rule 248 (block_statements -> block_statement .)
    IF              reduce using rule 248 (block_statements -> block_statement .)
    CASE            reduce using rule 248 (block_statements -> block_statement .)
    CASEX           reduce using rule 248 (block_statements -> block_statement .)
    UNIQUE          reduce using rule 248 (block_statements -> block_statement .)
    FOR             reduce using rule 248 (block_statements -> block_statement .)
    WHILE           reduce using rule 248 (block_statements -> block_statement .)
    WAIT            reduce using rule 248 (block_statements -> block_statement .)
    FOREVER         reduce using rule 248 (block_statements -> block_statement .)
    BEGIN           reduce using rule 248 (block_statements -> block_statement .)
    FORK            reduce using rule 248 (block_statements -> block_statement .)
    DELAY           reduce using rule 248 (block_statements -> block_statement .)
    AT              reduce using rule 248 (block_statements -> block_statement .)
    DOLLER          reduce using rule 248 (block_statements -> block_statement .)
    DISABLE         reduce using rule 248 (block_statements -> block_statement .)
    LBRACE          reduce using rule 248 (block_statements -> block_statement .)
    ID              reduce using rule 248 (block_statements -> block_statement .)
    SEMICOLON       reduce using rule 248 (block_statements -> block_statement .)
    JOIN            reduce using rule 248 (block_statements -> block_statement .)


state 355

    (249) block_statement -> basic_statement .

    END             reduce using rule 249 (block_statement -> basic_statement .)
    IF              reduce using rule 249 (block_statement -> basic_statement .)
    CASE            reduce using rule 249 (block_statement -> basic_statement .)
    CASEX           reduce using rule 249 (block_statement -> basic_statement .)
    UNIQUE          reduce using rule 249 (block_statement -> basic_statement .)
    FOR             reduce using rule 249 (block_statement -> basic_statement .)
    WHILE           reduce using rule 249 (block_statement -> basic_statement .)
    WAIT            reduce using rule 249 (block_statement -> basic_statement .)
    FOREVER         reduce using rule 249 (block_statement -> basic_statement .)
    BEGIN           reduce using rule 249 (block_statement -> basic_statement .)
    FORK            reduce using rule 249 (block_statement -> basic_statement .)
    DELAY           reduce using rule 249 (block_statement -> basic_statement .)
    AT              reduce using rule 249 (block_statement -> basic_statement .)
    DOLLER          reduce using rule 249 (block_statement -> basic_statement .)
    DISABLE         reduce using rule 249 (block_statement -> basic_statement .)
    LBRACE          reduce using rule 249 (block_statement -> basic_statement .)
    ID              reduce using rule 249 (block_statement -> basic_statement .)
    SEMICOLON       reduce using rule 249 (block_statement -> basic_statement .)
    JOIN            reduce using rule 249 (block_statement -> basic_statement .)


state 356

    (260) parallelblock -> FORK block_statements . JOIN
    (247) block_statements -> block_statements . block_statement
    (249) block_statement -> . basic_statement
    (221) basic_statement -> . if_statement
    (222) basic_statement -> . case_statement
    (223) basic_statement -> . casex_statement
    (224) basic_statement -> . unique_case_statement
    (225) basic_statement -> . for_statement
    (226) basic_statement -> . while_statement
    (227) basic_statement -> . event_statement
    (228) basic_statement -> . wait_statement
    (229) basic_statement -> . forever_statement
    (230) basic_statement -> . block
    (231) basic_statement -> . namedblock
    (232) basic_statement -> . parallelblock
    (233) basic_statement -> . blocking_substitution
    (234) basic_statement -> . nonblocking_substitution
    (235) basic_statement -> . single_statement
    (262) if_statement -> . IF LPAREN cond RPAREN true_statement ELSE else_statement
    (263) if_statement -> . IF LPAREN cond RPAREN true_statement
    (264) if_statement -> . delays IF LPAREN cond RPAREN true_statement ELSE else_statement
    (265) if_statement -> . delays IF LPAREN cond RPAREN true_statement
    (280) case_statement -> . CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE
    (281) casex_statement -> . CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE
    (282) unique_case_statement -> . UNIQUE CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE
    (270) for_statement -> . FOR LPAREN forpre forcond forpost RPAREN forcontent_statement
    (278) while_statement -> . WHILE LPAREN cond RPAREN whilecontent_statement
    (292) event_statement -> . senslist SEMICOLON
    (293) wait_statement -> . WAIT LPAREN cond RPAREN waitcontent_statement
    (296) forever_statement -> . FOREVER basic_statement
    (245) block -> . BEGIN block_statements END
    (246) block -> . BEGIN END
    (250) namedblock -> . BEGIN COLON ID namedblock_statements END
    (251) namedblock -> . BEGIN COLON ID END
    (260) parallelblock -> . FORK block_statements JOIN
    (261) parallelblock -> . FORK JOIN
    (237) blocking_substitution -> . delays lvalue EQUALS delays rvalue SEMICOLON
    (239) nonblocking_substitution -> . delays lvalue LE delays rvalue SEMICOLON
    (397) single_statement -> . DELAY expression SEMICOLON
    (398) single_statement -> . systemcall SEMICOLON
    (399) single_statement -> . disable SEMICOLON
    (240) delays -> . DELAY LPAREN expression RPAREN
    (241) delays -> . DELAY identifier
    (242) delays -> . DELAY intnumber
    (243) delays -> . DELAY floatnumber
    (244) delays -> . empty
    (202) senslist -> . AT LPAREN edgesigs RPAREN
    (209) senslist -> . empty
    (210) senslist -> . AT levelsig
    (211) senslist -> . AT LPAREN levelsigs RPAREN
    (219) senslist -> . AT TIMES
    (220) senslist -> . AT LPAREN TIMES RPAREN
    (351) systemcall -> . DOLLER ID
    (352) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (353) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (396) disable -> . DISABLE ID
    (400) empty -> .

  ! shift/reduce conflict for IF resolved as shift
    JOIN            shift and go to state 497
    IF              shift and go to state 192
    CASE            shift and go to state 194
    CASEX           shift and go to state 195
    UNIQUE          shift and go to state 196
    FOR             shift and go to state 197
    WHILE           shift and go to state 198
    WAIT            shift and go to state 200
    FOREVER         shift and go to state 201
    BEGIN           shift and go to state 202
    FORK            shift and go to state 203
    DELAY           shift and go to state 204
    AT              shift and go to state 171
    DOLLER          shift and go to state 107
    DISABLE         shift and go to state 208
    LBRACE          reduce using rule 400 (empty -> .)
    ID              reduce using rule 400 (empty -> .)
    SEMICOLON       reduce using rule 400 (empty -> .)

  ! IF              [ reduce using rule 400 (empty -> .) ]

    block_statement                shift and go to state 495
    basic_statement                shift and go to state 355
    if_statement                   shift and go to state 177
    case_statement                 shift and go to state 178
    casex_statement                shift and go to state 179
    unique_case_statement          shift and go to state 180
    for_statement                  shift and go to state 181
    while_statement                shift and go to state 182
    event_statement                shift and go to state 183
    wait_statement                 shift and go to state 184
    forever_statement              shift and go to state 185
    block                          shift and go to state 186
    namedblock                     shift and go to state 187
    parallelblock                  shift and go to state 188
    blocking_substitution          shift and go to state 189
    nonblocking_substitution       shift and go to state 190
    single_statement               shift and go to state 191
    delays                         shift and go to state 193
    senslist                       shift and go to state 199
    systemcall                     shift and go to state 205
    disable                        shift and go to state 206
    empty                          shift and go to state 207

state 357

    (261) parallelblock -> FORK JOIN .

    ENDMODULE       reduce using rule 261 (parallelblock -> FORK JOIN .)
    GENERATE        reduce using rule 261 (parallelblock -> FORK JOIN .)
    INTEGER         reduce using rule 261 (parallelblock -> FORK JOIN .)
    REAL            reduce using rule 261 (parallelblock -> FORK JOIN .)
    PARAMETER       reduce using rule 261 (parallelblock -> FORK JOIN .)
    LOCALPARAM      reduce using rule 261 (parallelblock -> FORK JOIN .)
    GENVAR          reduce using rule 261 (parallelblock -> FORK JOIN .)
    ASSIGN          reduce using rule 261 (parallelblock -> FORK JOIN .)
    ALWAYS          reduce using rule 261 (parallelblock -> FORK JOIN .)
    ALWAYS_FF       reduce using rule 261 (parallelblock -> FORK JOIN .)
    ALWAYS_COMB     reduce using rule 261 (parallelblock -> FORK JOIN .)
    INITIAL         reduce using rule 261 (parallelblock -> FORK JOIN .)
    ID              reduce using rule 261 (parallelblock -> FORK JOIN .)
    SENS_OR         reduce using rule 261 (parallelblock -> FORK JOIN .)
    FUNCTION        reduce using rule 261 (parallelblock -> FORK JOIN .)
    TASK            reduce using rule 261 (parallelblock -> FORK JOIN .)
    LPAREN          reduce using rule 261 (parallelblock -> FORK JOIN .)
    INPUT           reduce using rule 261 (parallelblock -> FORK JOIN .)
    OUTPUT          reduce using rule 261 (parallelblock -> FORK JOIN .)
    INOUT           reduce using rule 261 (parallelblock -> FORK JOIN .)
    TRI             reduce using rule 261 (parallelblock -> FORK JOIN .)
    REG             reduce using rule 261 (parallelblock -> FORK JOIN .)
    LOGIC           reduce using rule 261 (parallelblock -> FORK JOIN .)
    WIRE            reduce using rule 261 (parallelblock -> FORK JOIN .)
    SIGNED          reduce using rule 261 (parallelblock -> FORK JOIN .)
    SUPPLY0         reduce using rule 261 (parallelblock -> FORK JOIN .)
    SUPPLY1         reduce using rule 261 (parallelblock -> FORK JOIN .)
    ENDGENERATE     reduce using rule 261 (parallelblock -> FORK JOIN .)
    IF              reduce using rule 261 (parallelblock -> FORK JOIN .)
    FOR             reduce using rule 261 (parallelblock -> FORK JOIN .)
    ELSE            reduce using rule 261 (parallelblock -> FORK JOIN .)
    END             reduce using rule 261 (parallelblock -> FORK JOIN .)
    CASE            reduce using rule 261 (parallelblock -> FORK JOIN .)
    CASEX           reduce using rule 261 (parallelblock -> FORK JOIN .)
    UNIQUE          reduce using rule 261 (parallelblock -> FORK JOIN .)
    WHILE           reduce using rule 261 (parallelblock -> FORK JOIN .)
    WAIT            reduce using rule 261 (parallelblock -> FORK JOIN .)
    FOREVER         reduce using rule 261 (parallelblock -> FORK JOIN .)
    BEGIN           reduce using rule 261 (parallelblock -> FORK JOIN .)
    FORK            reduce using rule 261 (parallelblock -> FORK JOIN .)
    DELAY           reduce using rule 261 (parallelblock -> FORK JOIN .)
    AT              reduce using rule 261 (parallelblock -> FORK JOIN .)
    DOLLER          reduce using rule 261 (parallelblock -> FORK JOIN .)
    DISABLE         reduce using rule 261 (parallelblock -> FORK JOIN .)
    LBRACE          reduce using rule 261 (parallelblock -> FORK JOIN .)
    SEMICOLON       reduce using rule 261 (parallelblock -> FORK JOIN .)
    JOIN            reduce using rule 261 (parallelblock -> FORK JOIN .)
    ENDFUNCTION     reduce using rule 261 (parallelblock -> FORK JOIN .)
    ENDTASK         reduce using rule 261 (parallelblock -> FORK JOIN .)
    ENDCASE         reduce using rule 261 (parallelblock -> FORK JOIN .)
    DEFAULT         reduce using rule 261 (parallelblock -> FORK JOIN .)
    MINUS           reduce using rule 261 (parallelblock -> FORK JOIN .)
    PLUS            reduce using rule 261 (parallelblock -> FORK JOIN .)
    LNOT            reduce using rule 261 (parallelblock -> FORK JOIN .)
    NOT             reduce using rule 261 (parallelblock -> FORK JOIN .)
    AND             reduce using rule 261 (parallelblock -> FORK JOIN .)
    NAND            reduce using rule 261 (parallelblock -> FORK JOIN .)
    NOR             reduce using rule 261 (parallelblock -> FORK JOIN .)
    OR              reduce using rule 261 (parallelblock -> FORK JOIN .)
    XOR             reduce using rule 261 (parallelblock -> FORK JOIN .)
    XNOR            reduce using rule 261 (parallelblock -> FORK JOIN .)
    INTNUMBER_DEC   reduce using rule 261 (parallelblock -> FORK JOIN .)
    SIGNED_INTNUMBER_DEC reduce using rule 261 (parallelblock -> FORK JOIN .)
    INTNUMBER_BIN   reduce using rule 261 (parallelblock -> FORK JOIN .)
    SIGNED_INTNUMBER_BIN reduce using rule 261 (parallelblock -> FORK JOIN .)
    INTNUMBER_OCT   reduce using rule 261 (parallelblock -> FORK JOIN .)
    SIGNED_INTNUMBER_OCT reduce using rule 261 (parallelblock -> FORK JOIN .)
    INTNUMBER_HEX   reduce using rule 261 (parallelblock -> FORK JOIN .)
    SIGNED_INTNUMBER_HEX reduce using rule 261 (parallelblock -> FORK JOIN .)
    FLOATNUMBER     reduce using rule 261 (parallelblock -> FORK JOIN .)
    STRING_LITERAL  reduce using rule 261 (parallelblock -> FORK JOIN .)


state 358

    (397) single_statement -> DELAY expression . SEMICOLON
    (140) expression -> expression . POWER expression
    (141) expression -> expression . TIMES expression
    (142) expression -> expression . DIVIDE expression
    (143) expression -> expression . MOD expression
    (144) expression -> expression . PLUS expression
    (145) expression -> expression . MINUS expression
    (146) expression -> expression . LSHIFT expression
    (147) expression -> expression . RSHIFT expression
    (148) expression -> expression . LSHIFTA expression
    (149) expression -> expression . RSHIFTA expression
    (150) expression -> expression . LT expression
    (151) expression -> expression . GT expression
    (152) expression -> expression . LE expression
    (153) expression -> expression . GE expression
    (154) expression -> expression . EQ expression
    (155) expression -> expression . NE expression
    (156) expression -> expression . EQL expression
    (157) expression -> expression . NEL expression
    (158) expression -> expression . AND expression
    (159) expression -> expression . XOR expression
    (160) expression -> expression . XNOR expression
    (161) expression -> expression . OR expression
    (162) expression -> expression . LAND expression
    (163) expression -> expression . LOR expression
    (164) expression -> expression . COND expression COLON expression

    SEMICOLON       shift and go to state 498
    POWER           shift and go to state 236
    TIMES           shift and go to state 398
    DIVIDE          shift and go to state 237
    MOD             shift and go to state 238
    PLUS            shift and go to state 239
    MINUS           shift and go to state 240
    LSHIFT          shift and go to state 241
    RSHIFT          shift and go to state 242
    LSHIFTA         shift and go to state 243
    RSHIFTA         shift and go to state 244
    LT              shift and go to state 245
    GT              shift and go to state 246
    LE              shift and go to state 247
    GE              shift and go to state 248
    EQ              shift and go to state 249
    NE              shift and go to state 250
    EQL             shift and go to state 251
    NEL             shift and go to state 252
    AND             shift and go to state 253
    XOR             shift and go to state 254
    XNOR            shift and go to state 255
    OR              shift and go to state 256
    LAND            shift and go to state 257
    LOR             shift and go to state 258
    COND            shift and go to state 259


state 359

    (240) delays -> DELAY LPAREN . expression RPAREN
    (165) expression -> LPAREN . expression RPAREN
    (130) expression -> . MINUS expression
    (131) expression -> . PLUS expression
    (132) expression -> . LNOT expression
    (133) expression -> . NOT expression
    (134) expression -> . AND expression
    (135) expression -> . NAND expression
    (136) expression -> . NOR expression
    (137) expression -> . OR expression
    (138) expression -> . XOR expression
    (139) expression -> . XNOR expression
    (140) expression -> . expression POWER expression
    (141) expression -> . expression TIMES expression
    (142) expression -> . expression DIVIDE expression
    (143) expression -> . expression MOD expression
    (144) expression -> . expression PLUS expression
    (145) expression -> . expression MINUS expression
    (146) expression -> . expression LSHIFT expression
    (147) expression -> . expression RSHIFT expression
    (148) expression -> . expression LSHIFTA expression
    (149) expression -> . expression RSHIFTA expression
    (150) expression -> . expression LT expression
    (151) expression -> . expression GT expression
    (152) expression -> . expression LE expression
    (153) expression -> . expression GE expression
    (154) expression -> . expression EQ expression
    (155) expression -> . expression NE expression
    (156) expression -> . expression EQL expression
    (157) expression -> . expression NEL expression
    (158) expression -> . expression AND expression
    (159) expression -> . expression XOR expression
    (160) expression -> . expression XNOR expression
    (161) expression -> . expression OR expression
    (162) expression -> . expression LAND expression
    (163) expression -> . expression LOR expression
    (164) expression -> . expression COND expression COLON expression
    (165) expression -> . LPAREN expression RPAREN
    (166) expression -> . concat
    (167) expression -> . repeat
    (168) expression -> . partselect
    (169) expression -> . pointer
    (170) expression -> . functioncall
    (171) expression -> . systemcall
    (172) expression -> . identifier
    (173) expression -> . const_expression
    (174) concat -> . LBRACE concatlist RBRACE
    (177) repeat -> . LBRACE expression concat RBRACE
    (178) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (179) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (180) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (181) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (182) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (183) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (184) pointer -> . identifier LBRACKET expression RBRACKET
    (185) pointer -> . pointer LBRACKET expression RBRACKET
    (373) functioncall -> . identifier LPAREN func_args RPAREN
    (351) systemcall -> . DOLLER ID
    (352) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (353) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (392) identifier -> . ID
    (393) identifier -> . scope ID
    (186) const_expression -> . intnumber
    (187) const_expression -> . floatnumber
    (188) const_expression -> . stringliteral
    (394) scope -> . identifier DOT
    (395) scope -> . pointer DOT
    (190) intnumber -> . INTNUMBER_DEC
    (191) intnumber -> . SIGNED_INTNUMBER_DEC
    (192) intnumber -> . INTNUMBER_BIN
    (193) intnumber -> . SIGNED_INTNUMBER_BIN
    (194) intnumber -> . INTNUMBER_OCT
    (195) intnumber -> . SIGNED_INTNUMBER_OCT
    (196) intnumber -> . INTNUMBER_HEX
    (197) intnumber -> . SIGNED_INTNUMBER_HEX
    (189) floatnumber -> . FLOATNUMBER
    (198) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 88
    PLUS            shift and go to state 89
    LNOT            shift and go to state 90
    NOT             shift and go to state 91
    AND             shift and go to state 92
    NAND            shift and go to state 93
    NOR             shift and go to state 94
    OR              shift and go to state 95
    XOR             shift and go to state 96
    XNOR            shift and go to state 97
    LPAREN          shift and go to state 85
    LBRACE          shift and go to state 106
    DOLLER          shift and go to state 107
    ID              shift and go to state 86
    INTNUMBER_DEC   shift and go to state 112
    SIGNED_INTNUMBER_DEC shift and go to state 113
    INTNUMBER_BIN   shift and go to state 114
    SIGNED_INTNUMBER_BIN shift and go to state 115
    INTNUMBER_OCT   shift and go to state 116
    SIGNED_INTNUMBER_OCT shift and go to state 117
    INTNUMBER_HEX   shift and go to state 118
    SIGNED_INTNUMBER_HEX shift and go to state 119
    FLOATNUMBER     shift and go to state 120
    STRING_LITERAL  shift and go to state 121

    expression                     shift and go to state 499
    concat                         shift and go to state 98
    repeat                         shift and go to state 99
    partselect                     shift and go to state 100
    pointer                        shift and go to state 101
    functioncall                   shift and go to state 102
    systemcall                     shift and go to state 103
    identifier                     shift and go to state 104
    const_expression               shift and go to state 105
    scope                          shift and go to state 108
    intnumber                      shift and go to state 109
    floatnumber                    shift and go to state 110
    stringliteral                  shift and go to state 111

state 360

    (241) delays -> DELAY identifier .
    (172) expression -> identifier .
    (178) partselect -> identifier . LBRACKET expression COLON expression RBRACKET
    (179) partselect -> identifier . LBRACKET expression PLUSCOLON expression RBRACKET
    (180) partselect -> identifier . LBRACKET expression MINUSCOLON expression RBRACKET
    (184) pointer -> identifier . LBRACKET expression RBRACKET
    (373) functioncall -> identifier . LPAREN func_args RPAREN
    (394) scope -> identifier . DOT

    IF              reduce using rule 241 (delays -> DELAY identifier .)
    LBRACE          reduce using rule 241 (delays -> DELAY identifier .)
    ID              reduce using rule 241 (delays -> DELAY identifier .)
    SEMICOLON       reduce using rule 172 (expression -> identifier .)
    POWER           reduce using rule 172 (expression -> identifier .)
    TIMES           reduce using rule 172 (expression -> identifier .)
    DIVIDE          reduce using rule 172 (expression -> identifier .)
    MOD             reduce using rule 172 (expression -> identifier .)
    PLUS            reduce using rule 172 (expression -> identifier .)
    MINUS           reduce using rule 172 (expression -> identifier .)
    LSHIFT          reduce using rule 172 (expression -> identifier .)
    RSHIFT          reduce using rule 172 (expression -> identifier .)
    LSHIFTA         reduce using rule 172 (expression -> identifier .)
    RSHIFTA         reduce using rule 172 (expression -> identifier .)
    LT              reduce using rule 172 (expression -> identifier .)
    GT              reduce using rule 172 (expression -> identifier .)
    LE              reduce using rule 172 (expression -> identifier .)
    GE              reduce using rule 172 (expression -> identifier .)
    EQ              reduce using rule 172 (expression -> identifier .)
    NE              reduce using rule 172 (expression -> identifier .)
    EQL             reduce using rule 172 (expression -> identifier .)
    NEL             reduce using rule 172 (expression -> identifier .)
    AND             reduce using rule 172 (expression -> identifier .)
    XOR             reduce using rule 172 (expression -> identifier .)
    XNOR            reduce using rule 172 (expression -> identifier .)
    OR              reduce using rule 172 (expression -> identifier .)
    LAND            reduce using rule 172 (expression -> identifier .)
    LOR             reduce using rule 172 (expression -> identifier .)
    COND            reduce using rule 172 (expression -> identifier .)
    LBRACKET        shift and go to state 272
    LPAREN          shift and go to state 273
    DOT             shift and go to state 274


state 361

    (242) delays -> DELAY intnumber .
    (186) const_expression -> intnumber .

    IF              reduce using rule 242 (delays -> DELAY intnumber .)
    LBRACE          reduce using rule 242 (delays -> DELAY intnumber .)
    ID              reduce using rule 242 (delays -> DELAY intnumber .)
    SEMICOLON       reduce using rule 186 (const_expression -> intnumber .)
    POWER           reduce using rule 186 (const_expression -> intnumber .)
    TIMES           reduce using rule 186 (const_expression -> intnumber .)
    DIVIDE          reduce using rule 186 (const_expression -> intnumber .)
    MOD             reduce using rule 186 (const_expression -> intnumber .)
    PLUS            reduce using rule 186 (const_expression -> intnumber .)
    MINUS           reduce using rule 186 (const_expression -> intnumber .)
    LSHIFT          reduce using rule 186 (const_expression -> intnumber .)
    RSHIFT          reduce using rule 186 (const_expression -> intnumber .)
    LSHIFTA         reduce using rule 186 (const_expression -> intnumber .)
    RSHIFTA         reduce using rule 186 (const_expression -> intnumber .)
    LT              reduce using rule 186 (const_expression -> intnumber .)
    GT              reduce using rule 186 (const_expression -> intnumber .)
    LE              reduce using rule 186 (const_expression -> intnumber .)
    GE              reduce using rule 186 (const_expression -> intnumber .)
    EQ              reduce using rule 186 (const_expression -> intnumber .)
    NE              reduce using rule 186 (const_expression -> intnumber .)
    EQL             reduce using rule 186 (const_expression -> intnumber .)
    NEL             reduce using rule 186 (const_expression -> intnumber .)
    AND             reduce using rule 186 (const_expression -> intnumber .)
    XOR             reduce using rule 186 (const_expression -> intnumber .)
    XNOR            reduce using rule 186 (const_expression -> intnumber .)
    OR              reduce using rule 186 (const_expression -> intnumber .)
    LAND            reduce using rule 186 (const_expression -> intnumber .)
    LOR             reduce using rule 186 (const_expression -> intnumber .)
    COND            reduce using rule 186 (const_expression -> intnumber .)


state 362

    (243) delays -> DELAY floatnumber .
    (187) const_expression -> floatnumber .

    IF              reduce using rule 243 (delays -> DELAY floatnumber .)
    LBRACE          reduce using rule 243 (delays -> DELAY floatnumber .)
    ID              reduce using rule 243 (delays -> DELAY floatnumber .)
    SEMICOLON       reduce using rule 187 (const_expression -> floatnumber .)
    POWER           reduce using rule 187 (const_expression -> floatnumber .)
    TIMES           reduce using rule 187 (const_expression -> floatnumber .)
    DIVIDE          reduce using rule 187 (const_expression -> floatnumber .)
    MOD             reduce using rule 187 (const_expression -> floatnumber .)
    PLUS            reduce using rule 187 (const_expression -> floatnumber .)
    MINUS           reduce using rule 187 (const_expression -> floatnumber .)
    LSHIFT          reduce using rule 187 (const_expression -> floatnumber .)
    RSHIFT          reduce using rule 187 (const_expression -> floatnumber .)
    LSHIFTA         reduce using rule 187 (const_expression -> floatnumber .)
    RSHIFTA         reduce using rule 187 (const_expression -> floatnumber .)
    LT              reduce using rule 187 (const_expression -> floatnumber .)
    GT              reduce using rule 187 (const_expression -> floatnumber .)
    LE              reduce using rule 187 (const_expression -> floatnumber .)
    GE              reduce using rule 187 (const_expression -> floatnumber .)
    EQ              reduce using rule 187 (const_expression -> floatnumber .)
    NE              reduce using rule 187 (const_expression -> floatnumber .)
    EQL             reduce using rule 187 (const_expression -> floatnumber .)
    NEL             reduce using rule 187 (const_expression -> floatnumber .)
    AND             reduce using rule 187 (const_expression -> floatnumber .)
    XOR             reduce using rule 187 (const_expression -> floatnumber .)
    XNOR            reduce using rule 187 (const_expression -> floatnumber .)
    OR              reduce using rule 187 (const_expression -> floatnumber .)
    LAND            reduce using rule 187 (const_expression -> floatnumber .)
    LOR             reduce using rule 187 (const_expression -> floatnumber .)
    COND            reduce using rule 187 (const_expression -> floatnumber .)


state 363

    (398) single_statement -> systemcall SEMICOLON .

    ENDMODULE       reduce using rule 398 (single_statement -> systemcall SEMICOLON .)
    GENERATE        reduce using rule 398 (single_statement -> systemcall SEMICOLON .)
    INTEGER         reduce using rule 398 (single_statement -> systemcall SEMICOLON .)
    REAL            reduce using rule 398 (single_statement -> systemcall SEMICOLON .)
    PARAMETER       reduce using rule 398 (single_statement -> systemcall SEMICOLON .)
    LOCALPARAM      reduce using rule 398 (single_statement -> systemcall SEMICOLON .)
    GENVAR          reduce using rule 398 (single_statement -> systemcall SEMICOLON .)
    ASSIGN          reduce using rule 398 (single_statement -> systemcall SEMICOLON .)
    ALWAYS          reduce using rule 398 (single_statement -> systemcall SEMICOLON .)
    ALWAYS_FF       reduce using rule 398 (single_statement -> systemcall SEMICOLON .)
    ALWAYS_COMB     reduce using rule 398 (single_statement -> systemcall SEMICOLON .)
    INITIAL         reduce using rule 398 (single_statement -> systemcall SEMICOLON .)
    ID              reduce using rule 398 (single_statement -> systemcall SEMICOLON .)
    SENS_OR         reduce using rule 398 (single_statement -> systemcall SEMICOLON .)
    FUNCTION        reduce using rule 398 (single_statement -> systemcall SEMICOLON .)
    TASK            reduce using rule 398 (single_statement -> systemcall SEMICOLON .)
    LPAREN          reduce using rule 398 (single_statement -> systemcall SEMICOLON .)
    INPUT           reduce using rule 398 (single_statement -> systemcall SEMICOLON .)
    OUTPUT          reduce using rule 398 (single_statement -> systemcall SEMICOLON .)
    INOUT           reduce using rule 398 (single_statement -> systemcall SEMICOLON .)
    TRI             reduce using rule 398 (single_statement -> systemcall SEMICOLON .)
    REG             reduce using rule 398 (single_statement -> systemcall SEMICOLON .)
    LOGIC           reduce using rule 398 (single_statement -> systemcall SEMICOLON .)
    WIRE            reduce using rule 398 (single_statement -> systemcall SEMICOLON .)
    SIGNED          reduce using rule 398 (single_statement -> systemcall SEMICOLON .)
    SUPPLY0         reduce using rule 398 (single_statement -> systemcall SEMICOLON .)
    SUPPLY1         reduce using rule 398 (single_statement -> systemcall SEMICOLON .)
    ENDGENERATE     reduce using rule 398 (single_statement -> systemcall SEMICOLON .)
    IF              reduce using rule 398 (single_statement -> systemcall SEMICOLON .)
    FOR             reduce using rule 398 (single_statement -> systemcall SEMICOLON .)
    ELSE            reduce using rule 398 (single_statement -> systemcall SEMICOLON .)
    END             reduce using rule 398 (single_statement -> systemcall SEMICOLON .)
    CASE            reduce using rule 398 (single_statement -> systemcall SEMICOLON .)
    CASEX           reduce using rule 398 (single_statement -> systemcall SEMICOLON .)
    UNIQUE          reduce using rule 398 (single_statement -> systemcall SEMICOLON .)
    WHILE           reduce using rule 398 (single_statement -> systemcall SEMICOLON .)
    WAIT            reduce using rule 398 (single_statement -> systemcall SEMICOLON .)
    FOREVER         reduce using rule 398 (single_statement -> systemcall SEMICOLON .)
    BEGIN           reduce using rule 398 (single_statement -> systemcall SEMICOLON .)
    FORK            reduce using rule 398 (single_statement -> systemcall SEMICOLON .)
    DELAY           reduce using rule 398 (single_statement -> systemcall SEMICOLON .)
    AT              reduce using rule 398 (single_statement -> systemcall SEMICOLON .)
    DOLLER          reduce using rule 398 (single_statement -> systemcall SEMICOLON .)
    DISABLE         reduce using rule 398 (single_statement -> systemcall SEMICOLON .)
    LBRACE          reduce using rule 398 (single_statement -> systemcall SEMICOLON .)
    SEMICOLON       reduce using rule 398 (single_statement -> systemcall SEMICOLON .)
    JOIN            reduce using rule 398 (single_statement -> systemcall SEMICOLON .)
    ENDFUNCTION     reduce using rule 398 (single_statement -> systemcall SEMICOLON .)
    ENDTASK         reduce using rule 398 (single_statement -> systemcall SEMICOLON .)
    ENDCASE         reduce using rule 398 (single_statement -> systemcall SEMICOLON .)
    DEFAULT         reduce using rule 398 (single_statement -> systemcall SEMICOLON .)
    MINUS           reduce using rule 398 (single_statement -> systemcall SEMICOLON .)
    PLUS            reduce using rule 398 (single_statement -> systemcall SEMICOLON .)
    LNOT            reduce using rule 398 (single_statement -> systemcall SEMICOLON .)
    NOT             reduce using rule 398 (single_statement -> systemcall SEMICOLON .)
    AND             reduce using rule 398 (single_statement -> systemcall SEMICOLON .)
    NAND            reduce using rule 398 (single_statement -> systemcall SEMICOLON .)
    NOR             reduce using rule 398 (single_statement -> systemcall SEMICOLON .)
    OR              reduce using rule 398 (single_statement -> systemcall SEMICOLON .)
    XOR             reduce using rule 398 (single_statement -> systemcall SEMICOLON .)
    XNOR            reduce using rule 398 (single_statement -> systemcall SEMICOLON .)
    INTNUMBER_DEC   reduce using rule 398 (single_statement -> systemcall SEMICOLON .)
    SIGNED_INTNUMBER_DEC reduce using rule 398 (single_statement -> systemcall SEMICOLON .)
    INTNUMBER_BIN   reduce using rule 398 (single_statement -> systemcall SEMICOLON .)
    SIGNED_INTNUMBER_BIN reduce using rule 398 (single_statement -> systemcall SEMICOLON .)
    INTNUMBER_OCT   reduce using rule 398 (single_statement -> systemcall SEMICOLON .)
    SIGNED_INTNUMBER_OCT reduce using rule 398 (single_statement -> systemcall SEMICOLON .)
    INTNUMBER_HEX   reduce using rule 398 (single_statement -> systemcall SEMICOLON .)
    SIGNED_INTNUMBER_HEX reduce using rule 398 (single_statement -> systemcall SEMICOLON .)
    FLOATNUMBER     reduce using rule 398 (single_statement -> systemcall SEMICOLON .)
    STRING_LITERAL  reduce using rule 398 (single_statement -> systemcall SEMICOLON .)


state 364

    (399) single_statement -> disable SEMICOLON .

    ENDMODULE       reduce using rule 399 (single_statement -> disable SEMICOLON .)
    GENERATE        reduce using rule 399 (single_statement -> disable SEMICOLON .)
    INTEGER         reduce using rule 399 (single_statement -> disable SEMICOLON .)
    REAL            reduce using rule 399 (single_statement -> disable SEMICOLON .)
    PARAMETER       reduce using rule 399 (single_statement -> disable SEMICOLON .)
    LOCALPARAM      reduce using rule 399 (single_statement -> disable SEMICOLON .)
    GENVAR          reduce using rule 399 (single_statement -> disable SEMICOLON .)
    ASSIGN          reduce using rule 399 (single_statement -> disable SEMICOLON .)
    ALWAYS          reduce using rule 399 (single_statement -> disable SEMICOLON .)
    ALWAYS_FF       reduce using rule 399 (single_statement -> disable SEMICOLON .)
    ALWAYS_COMB     reduce using rule 399 (single_statement -> disable SEMICOLON .)
    INITIAL         reduce using rule 399 (single_statement -> disable SEMICOLON .)
    ID              reduce using rule 399 (single_statement -> disable SEMICOLON .)
    SENS_OR         reduce using rule 399 (single_statement -> disable SEMICOLON .)
    FUNCTION        reduce using rule 399 (single_statement -> disable SEMICOLON .)
    TASK            reduce using rule 399 (single_statement -> disable SEMICOLON .)
    LPAREN          reduce using rule 399 (single_statement -> disable SEMICOLON .)
    INPUT           reduce using rule 399 (single_statement -> disable SEMICOLON .)
    OUTPUT          reduce using rule 399 (single_statement -> disable SEMICOLON .)
    INOUT           reduce using rule 399 (single_statement -> disable SEMICOLON .)
    TRI             reduce using rule 399 (single_statement -> disable SEMICOLON .)
    REG             reduce using rule 399 (single_statement -> disable SEMICOLON .)
    LOGIC           reduce using rule 399 (single_statement -> disable SEMICOLON .)
    WIRE            reduce using rule 399 (single_statement -> disable SEMICOLON .)
    SIGNED          reduce using rule 399 (single_statement -> disable SEMICOLON .)
    SUPPLY0         reduce using rule 399 (single_statement -> disable SEMICOLON .)
    SUPPLY1         reduce using rule 399 (single_statement -> disable SEMICOLON .)
    ENDGENERATE     reduce using rule 399 (single_statement -> disable SEMICOLON .)
    IF              reduce using rule 399 (single_statement -> disable SEMICOLON .)
    FOR             reduce using rule 399 (single_statement -> disable SEMICOLON .)
    ELSE            reduce using rule 399 (single_statement -> disable SEMICOLON .)
    END             reduce using rule 399 (single_statement -> disable SEMICOLON .)
    CASE            reduce using rule 399 (single_statement -> disable SEMICOLON .)
    CASEX           reduce using rule 399 (single_statement -> disable SEMICOLON .)
    UNIQUE          reduce using rule 399 (single_statement -> disable SEMICOLON .)
    WHILE           reduce using rule 399 (single_statement -> disable SEMICOLON .)
    WAIT            reduce using rule 399 (single_statement -> disable SEMICOLON .)
    FOREVER         reduce using rule 399 (single_statement -> disable SEMICOLON .)
    BEGIN           reduce using rule 399 (single_statement -> disable SEMICOLON .)
    FORK            reduce using rule 399 (single_statement -> disable SEMICOLON .)
    DELAY           reduce using rule 399 (single_statement -> disable SEMICOLON .)
    AT              reduce using rule 399 (single_statement -> disable SEMICOLON .)
    DOLLER          reduce using rule 399 (single_statement -> disable SEMICOLON .)
    DISABLE         reduce using rule 399 (single_statement -> disable SEMICOLON .)
    LBRACE          reduce using rule 399 (single_statement -> disable SEMICOLON .)
    SEMICOLON       reduce using rule 399 (single_statement -> disable SEMICOLON .)
    JOIN            reduce using rule 399 (single_statement -> disable SEMICOLON .)
    ENDFUNCTION     reduce using rule 399 (single_statement -> disable SEMICOLON .)
    ENDTASK         reduce using rule 399 (single_statement -> disable SEMICOLON .)
    ENDCASE         reduce using rule 399 (single_statement -> disable SEMICOLON .)
    DEFAULT         reduce using rule 399 (single_statement -> disable SEMICOLON .)
    MINUS           reduce using rule 399 (single_statement -> disable SEMICOLON .)
    PLUS            reduce using rule 399 (single_statement -> disable SEMICOLON .)
    LNOT            reduce using rule 399 (single_statement -> disable SEMICOLON .)
    NOT             reduce using rule 399 (single_statement -> disable SEMICOLON .)
    AND             reduce using rule 399 (single_statement -> disable SEMICOLON .)
    NAND            reduce using rule 399 (single_statement -> disable SEMICOLON .)
    NOR             reduce using rule 399 (single_statement -> disable SEMICOLON .)
    OR              reduce using rule 399 (single_statement -> disable SEMICOLON .)
    XOR             reduce using rule 399 (single_statement -> disable SEMICOLON .)
    XNOR            reduce using rule 399 (single_statement -> disable SEMICOLON .)
    INTNUMBER_DEC   reduce using rule 399 (single_statement -> disable SEMICOLON .)
    SIGNED_INTNUMBER_DEC reduce using rule 399 (single_statement -> disable SEMICOLON .)
    INTNUMBER_BIN   reduce using rule 399 (single_statement -> disable SEMICOLON .)
    SIGNED_INTNUMBER_BIN reduce using rule 399 (single_statement -> disable SEMICOLON .)
    INTNUMBER_OCT   reduce using rule 399 (single_statement -> disable SEMICOLON .)
    SIGNED_INTNUMBER_OCT reduce using rule 399 (single_statement -> disable SEMICOLON .)
    INTNUMBER_HEX   reduce using rule 399 (single_statement -> disable SEMICOLON .)
    SIGNED_INTNUMBER_HEX reduce using rule 399 (single_statement -> disable SEMICOLON .)
    FLOATNUMBER     reduce using rule 399 (single_statement -> disable SEMICOLON .)
    STRING_LITERAL  reduce using rule 399 (single_statement -> disable SEMICOLON .)


state 365

    (396) disable -> DISABLE ID .

    SEMICOLON       reduce using rule 396 (disable -> DISABLE ID .)


state 366

    (301) instance_body -> ID . LPAREN instance_ports RPAREN
    (302) instance_body -> ID . width LPAREN instance_ports RPAREN
    (54) width -> . LBRACKET expression COLON expression RBRACKET

    LPAREN          shift and go to state 500
    LBRACKET        shift and go to state 137

    width                          shift and go to state 501

state 367

    (297) instance -> ID parameterlist instance_bodylist . SEMICOLON
    (299) instance_bodylist -> instance_bodylist . COMMA instance_body

    SEMICOLON       shift and go to state 502
    COMMA           shift and go to state 503


state 368

    (300) instance_bodylist -> instance_body .

    SEMICOLON       reduce using rule 300 (instance_bodylist -> instance_body .)
    COMMA           reduce using rule 300 (instance_bodylist -> instance_body .)


state 369

    (303) instance -> ID instance_bodylist_noname SEMICOLON .

    ENDMODULE       reduce using rule 303 (instance -> ID instance_bodylist_noname SEMICOLON .)
    GENERATE        reduce using rule 303 (instance -> ID instance_bodylist_noname SEMICOLON .)
    INTEGER         reduce using rule 303 (instance -> ID instance_bodylist_noname SEMICOLON .)
    REAL            reduce using rule 303 (instance -> ID instance_bodylist_noname SEMICOLON .)
    PARAMETER       reduce using rule 303 (instance -> ID instance_bodylist_noname SEMICOLON .)
    LOCALPARAM      reduce using rule 303 (instance -> ID instance_bodylist_noname SEMICOLON .)
    GENVAR          reduce using rule 303 (instance -> ID instance_bodylist_noname SEMICOLON .)
    ASSIGN          reduce using rule 303 (instance -> ID instance_bodylist_noname SEMICOLON .)
    ALWAYS          reduce using rule 303 (instance -> ID instance_bodylist_noname SEMICOLON .)
    ALWAYS_FF       reduce using rule 303 (instance -> ID instance_bodylist_noname SEMICOLON .)
    ALWAYS_COMB     reduce using rule 303 (instance -> ID instance_bodylist_noname SEMICOLON .)
    INITIAL         reduce using rule 303 (instance -> ID instance_bodylist_noname SEMICOLON .)
    ID              reduce using rule 303 (instance -> ID instance_bodylist_noname SEMICOLON .)
    SENS_OR         reduce using rule 303 (instance -> ID instance_bodylist_noname SEMICOLON .)
    FUNCTION        reduce using rule 303 (instance -> ID instance_bodylist_noname SEMICOLON .)
    TASK            reduce using rule 303 (instance -> ID instance_bodylist_noname SEMICOLON .)
    LPAREN          reduce using rule 303 (instance -> ID instance_bodylist_noname SEMICOLON .)
    INPUT           reduce using rule 303 (instance -> ID instance_bodylist_noname SEMICOLON .)
    OUTPUT          reduce using rule 303 (instance -> ID instance_bodylist_noname SEMICOLON .)
    INOUT           reduce using rule 303 (instance -> ID instance_bodylist_noname SEMICOLON .)
    TRI             reduce using rule 303 (instance -> ID instance_bodylist_noname SEMICOLON .)
    REG             reduce using rule 303 (instance -> ID instance_bodylist_noname SEMICOLON .)
    LOGIC           reduce using rule 303 (instance -> ID instance_bodylist_noname SEMICOLON .)
    WIRE            reduce using rule 303 (instance -> ID instance_bodylist_noname SEMICOLON .)
    SIGNED          reduce using rule 303 (instance -> ID instance_bodylist_noname SEMICOLON .)
    SUPPLY0         reduce using rule 303 (instance -> ID instance_bodylist_noname SEMICOLON .)
    SUPPLY1         reduce using rule 303 (instance -> ID instance_bodylist_noname SEMICOLON .)
    ENDGENERATE     reduce using rule 303 (instance -> ID instance_bodylist_noname SEMICOLON .)
    IF              reduce using rule 303 (instance -> ID instance_bodylist_noname SEMICOLON .)
    FOR             reduce using rule 303 (instance -> ID instance_bodylist_noname SEMICOLON .)
    ELSE            reduce using rule 303 (instance -> ID instance_bodylist_noname SEMICOLON .)
    END             reduce using rule 303 (instance -> ID instance_bodylist_noname SEMICOLON .)


state 370

    (305) instance_bodylist_noname -> instance_bodylist_noname COMMA . instance_body_noname
    (307) instance_body_noname -> . LPAREN instance_ports RPAREN

    LPAREN          shift and go to state 212

    instance_body_noname           shift and go to state 504

state 371

    (308) parameterlist -> DELAY LPAREN . param_args RPAREN
    (309) parameterlist -> DELAY LPAREN . param_args_noname RPAREN
    (313) param_args -> . param_args COMMA param_arg
    (314) param_args -> . param_arg
    (315) param_args -> . empty
    (311) param_args_noname -> . param_args_noname COMMA param_arg_noname
    (312) param_args_noname -> . param_arg_noname
    (317) param_arg -> . DOT ID LPAREN expression RPAREN
    (400) empty -> .
    (316) param_arg_noname -> . expression
    (130) expression -> . MINUS expression
    (131) expression -> . PLUS expression
    (132) expression -> . LNOT expression
    (133) expression -> . NOT expression
    (134) expression -> . AND expression
    (135) expression -> . NAND expression
    (136) expression -> . NOR expression
    (137) expression -> . OR expression
    (138) expression -> . XOR expression
    (139) expression -> . XNOR expression
    (140) expression -> . expression POWER expression
    (141) expression -> . expression TIMES expression
    (142) expression -> . expression DIVIDE expression
    (143) expression -> . expression MOD expression
    (144) expression -> . expression PLUS expression
    (145) expression -> . expression MINUS expression
    (146) expression -> . expression LSHIFT expression
    (147) expression -> . expression RSHIFT expression
    (148) expression -> . expression LSHIFTA expression
    (149) expression -> . expression RSHIFTA expression
    (150) expression -> . expression LT expression
    (151) expression -> . expression GT expression
    (152) expression -> . expression LE expression
    (153) expression -> . expression GE expression
    (154) expression -> . expression EQ expression
    (155) expression -> . expression NE expression
    (156) expression -> . expression EQL expression
    (157) expression -> . expression NEL expression
    (158) expression -> . expression AND expression
    (159) expression -> . expression XOR expression
    (160) expression -> . expression XNOR expression
    (161) expression -> . expression OR expression
    (162) expression -> . expression LAND expression
    (163) expression -> . expression LOR expression
    (164) expression -> . expression COND expression COLON expression
    (165) expression -> . LPAREN expression RPAREN
    (166) expression -> . concat
    (167) expression -> . repeat
    (168) expression -> . partselect
    (169) expression -> . pointer
    (170) expression -> . functioncall
    (171) expression -> . systemcall
    (172) expression -> . identifier
    (173) expression -> . const_expression
    (174) concat -> . LBRACE concatlist RBRACE
    (177) repeat -> . LBRACE expression concat RBRACE
    (178) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (179) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (180) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (181) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (182) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (183) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (184) pointer -> . identifier LBRACKET expression RBRACKET
    (185) pointer -> . pointer LBRACKET expression RBRACKET
    (373) functioncall -> . identifier LPAREN func_args RPAREN
    (351) systemcall -> . DOLLER ID
    (352) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (353) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (392) identifier -> . ID
    (393) identifier -> . scope ID
    (186) const_expression -> . intnumber
    (187) const_expression -> . floatnumber
    (188) const_expression -> . stringliteral
    (394) scope -> . identifier DOT
    (395) scope -> . pointer DOT
    (190) intnumber -> . INTNUMBER_DEC
    (191) intnumber -> . SIGNED_INTNUMBER_DEC
    (192) intnumber -> . INTNUMBER_BIN
    (193) intnumber -> . SIGNED_INTNUMBER_BIN
    (194) intnumber -> . INTNUMBER_OCT
    (195) intnumber -> . SIGNED_INTNUMBER_OCT
    (196) intnumber -> . INTNUMBER_HEX
    (197) intnumber -> . SIGNED_INTNUMBER_HEX
    (189) floatnumber -> . FLOATNUMBER
    (198) stringliteral -> . STRING_LITERAL

    DOT             shift and go to state 510
    RPAREN          reduce using rule 400 (empty -> .)
    COMMA           reduce using rule 400 (empty -> .)
    MINUS           shift and go to state 88
    PLUS            shift and go to state 89
    LNOT            shift and go to state 90
    NOT             shift and go to state 91
    AND             shift and go to state 92
    NAND            shift and go to state 93
    NOR             shift and go to state 94
    OR              shift and go to state 95
    XOR             shift and go to state 96
    XNOR            shift and go to state 97
    LPAREN          shift and go to state 85
    LBRACE          shift and go to state 106
    DOLLER          shift and go to state 107
    ID              shift and go to state 86
    INTNUMBER_DEC   shift and go to state 112
    SIGNED_INTNUMBER_DEC shift and go to state 113
    INTNUMBER_BIN   shift and go to state 114
    SIGNED_INTNUMBER_BIN shift and go to state 115
    INTNUMBER_OCT   shift and go to state 116
    SIGNED_INTNUMBER_OCT shift and go to state 117
    INTNUMBER_HEX   shift and go to state 118
    SIGNED_INTNUMBER_HEX shift and go to state 119
    FLOATNUMBER     shift and go to state 120
    STRING_LITERAL  shift and go to state 121

    param_args                     shift and go to state 505
    param_args_noname              shift and go to state 506
    param_arg                      shift and go to state 507
    empty                          shift and go to state 508
    param_arg_noname               shift and go to state 509
    expression                     shift and go to state 511
    concat                         shift and go to state 98
    repeat                         shift and go to state 99
    partselect                     shift and go to state 100
    pointer                        shift and go to state 101
    functioncall                   shift and go to state 102
    systemcall                     shift and go to state 103
    identifier                     shift and go to state 104
    const_expression               shift and go to state 105
    scope                          shift and go to state 108
    intnumber                      shift and go to state 109
    floatnumber                    shift and go to state 110
    stringliteral                  shift and go to state 111

state 372

    (307) instance_body_noname -> LPAREN instance_ports . RPAREN

    RPAREN          shift and go to state 512


state 373

    (318) instance_ports -> instance_ports_list .
    (320) instance_ports_list -> instance_ports_list . COMMA instance_port_list

    RPAREN          reduce using rule 318 (instance_ports -> instance_ports_list .)
    COMMA           shift and go to state 513


state 374

    (319) instance_ports -> instance_ports_arg .
    (324) instance_ports_arg -> instance_ports_arg . COMMA instance_port_arg

    RPAREN          reduce using rule 319 (instance_ports -> instance_ports_arg .)
    COMMA           shift and go to state 514


state 375

    (321) instance_ports_list -> instance_port_list .

    COMMA           reduce using rule 321 (instance_ports_list -> instance_port_list .)
    RPAREN          reduce using rule 321 (instance_ports_list -> instance_port_list .)


state 376

    (322) instance_ports_list -> empty .

    COMMA           reduce using rule 322 (instance_ports_list -> empty .)
    RPAREN          reduce using rule 322 (instance_ports_list -> empty .)


state 377

    (325) instance_ports_arg -> instance_port_arg .

    COMMA           reduce using rule 325 (instance_ports_arg -> instance_port_arg .)
    RPAREN          reduce using rule 325 (instance_ports_arg -> instance_port_arg .)


state 378

    (323) instance_port_list -> expression .
    (140) expression -> expression . POWER expression
    (141) expression -> expression . TIMES expression
    (142) expression -> expression . DIVIDE expression
    (143) expression -> expression . MOD expression
    (144) expression -> expression . PLUS expression
    (145) expression -> expression . MINUS expression
    (146) expression -> expression . LSHIFT expression
    (147) expression -> expression . RSHIFT expression
    (148) expression -> expression . LSHIFTA expression
    (149) expression -> expression . RSHIFTA expression
    (150) expression -> expression . LT expression
    (151) expression -> expression . GT expression
    (152) expression -> expression . LE expression
    (153) expression -> expression . GE expression
    (154) expression -> expression . EQ expression
    (155) expression -> expression . NE expression
    (156) expression -> expression . EQL expression
    (157) expression -> expression . NEL expression
    (158) expression -> expression . AND expression
    (159) expression -> expression . XOR expression
    (160) expression -> expression . XNOR expression
    (161) expression -> expression . OR expression
    (162) expression -> expression . LAND expression
    (163) expression -> expression . LOR expression
    (164) expression -> expression . COND expression COLON expression

    COMMA           reduce using rule 323 (instance_port_list -> expression .)
    RPAREN          reduce using rule 323 (instance_port_list -> expression .)
    POWER           shift and go to state 236
    TIMES           shift and go to state 398
    DIVIDE          shift and go to state 237
    MOD             shift and go to state 238
    PLUS            shift and go to state 239
    MINUS           shift and go to state 240
    LSHIFT          shift and go to state 241
    RSHIFT          shift and go to state 242
    LSHIFTA         shift and go to state 243
    RSHIFTA         shift and go to state 244
    LT              shift and go to state 245
    GT              shift and go to state 246
    LE              shift and go to state 247
    GE              shift and go to state 248
    EQ              shift and go to state 249
    NE              shift and go to state 250
    EQL             shift and go to state 251
    NEL             shift and go to state 252
    AND             shift and go to state 253
    XOR             shift and go to state 254
    XNOR            shift and go to state 255
    OR              shift and go to state 256
    LAND            shift and go to state 257
    LOR             shift and go to state 258
    COND            shift and go to state 259


state 379

    (326) instance_port_arg -> DOT . ID LPAREN identifier RPAREN
    (327) instance_port_arg -> DOT . ID LPAREN expression RPAREN
    (328) instance_port_arg -> DOT . ID LPAREN RPAREN

    ID              shift and go to state 515


state 380

    (298) instance -> SENS_OR parameterlist instance_bodylist . SEMICOLON
    (299) instance_bodylist -> instance_bodylist . COMMA instance_body

    SEMICOLON       shift and go to state 516
    COMMA           shift and go to state 503


state 381

    (304) instance -> SENS_OR instance_bodylist_noname SEMICOLON .

    ENDMODULE       reduce using rule 304 (instance -> SENS_OR instance_bodylist_noname SEMICOLON .)
    GENERATE        reduce using rule 304 (instance -> SENS_OR instance_bodylist_noname SEMICOLON .)
    INTEGER         reduce using rule 304 (instance -> SENS_OR instance_bodylist_noname SEMICOLON .)
    REAL            reduce using rule 304 (instance -> SENS_OR instance_bodylist_noname SEMICOLON .)
    PARAMETER       reduce using rule 304 (instance -> SENS_OR instance_bodylist_noname SEMICOLON .)
    LOCALPARAM      reduce using rule 304 (instance -> SENS_OR instance_bodylist_noname SEMICOLON .)
    GENVAR          reduce using rule 304 (instance -> SENS_OR instance_bodylist_noname SEMICOLON .)
    ASSIGN          reduce using rule 304 (instance -> SENS_OR instance_bodylist_noname SEMICOLON .)
    ALWAYS          reduce using rule 304 (instance -> SENS_OR instance_bodylist_noname SEMICOLON .)
    ALWAYS_FF       reduce using rule 304 (instance -> SENS_OR instance_bodylist_noname SEMICOLON .)
    ALWAYS_COMB     reduce using rule 304 (instance -> SENS_OR instance_bodylist_noname SEMICOLON .)
    INITIAL         reduce using rule 304 (instance -> SENS_OR instance_bodylist_noname SEMICOLON .)
    ID              reduce using rule 304 (instance -> SENS_OR instance_bodylist_noname SEMICOLON .)
    SENS_OR         reduce using rule 304 (instance -> SENS_OR instance_bodylist_noname SEMICOLON .)
    FUNCTION        reduce using rule 304 (instance -> SENS_OR instance_bodylist_noname SEMICOLON .)
    TASK            reduce using rule 304 (instance -> SENS_OR instance_bodylist_noname SEMICOLON .)
    LPAREN          reduce using rule 304 (instance -> SENS_OR instance_bodylist_noname SEMICOLON .)
    INPUT           reduce using rule 304 (instance -> SENS_OR instance_bodylist_noname SEMICOLON .)
    OUTPUT          reduce using rule 304 (instance -> SENS_OR instance_bodylist_noname SEMICOLON .)
    INOUT           reduce using rule 304 (instance -> SENS_OR instance_bodylist_noname SEMICOLON .)
    TRI             reduce using rule 304 (instance -> SENS_OR instance_bodylist_noname SEMICOLON .)
    REG             reduce using rule 304 (instance -> SENS_OR instance_bodylist_noname SEMICOLON .)
    LOGIC           reduce using rule 304 (instance -> SENS_OR instance_bodylist_noname SEMICOLON .)
    WIRE            reduce using rule 304 (instance -> SENS_OR instance_bodylist_noname SEMICOLON .)
    SIGNED          reduce using rule 304 (instance -> SENS_OR instance_bodylist_noname SEMICOLON .)
    SUPPLY0         reduce using rule 304 (instance -> SENS_OR instance_bodylist_noname SEMICOLON .)
    SUPPLY1         reduce using rule 304 (instance -> SENS_OR instance_bodylist_noname SEMICOLON .)
    ENDGENERATE     reduce using rule 304 (instance -> SENS_OR instance_bodylist_noname SEMICOLON .)
    IF              reduce using rule 304 (instance -> SENS_OR instance_bodylist_noname SEMICOLON .)
    FOR             reduce using rule 304 (instance -> SENS_OR instance_bodylist_noname SEMICOLON .)
    ELSE            reduce using rule 304 (instance -> SENS_OR instance_bodylist_noname SEMICOLON .)
    END             reduce using rule 304 (instance -> SENS_OR instance_bodylist_noname SEMICOLON .)


state 382

    (358) function -> FUNCTION width ID . SEMICOLON function_statement ENDFUNCTION

    SEMICOLON       shift and go to state 517


state 383

    (359) function -> FUNCTION ID SEMICOLON . function_statement ENDFUNCTION
    (360) function_statement -> . funcvardecls function_calc
    (361) funcvardecls -> . funcvardecls funcvardecl
    (362) funcvardecls -> . funcvardecl
    (363) funcvardecl -> . decl
    (364) funcvardecl -> . integerdecl
    (77) decl -> . sigtypes declnamelist SEMICOLON
    (78) decl -> . sigtypes width declnamelist SEMICOLON
    (87) integerdecl -> . INTEGER integernamelist SEMICOLON
    (88) integerdecl -> . INTEGER SIGNED integernamelist SEMICOLON
    (35) sigtypes -> . sigtypes sigtype
    (36) sigtypes -> . sigtype
    (37) sigtype -> . INPUT
    (38) sigtype -> . OUTPUT
    (39) sigtype -> . INOUT
    (40) sigtype -> . TRI
    (41) sigtype -> . REG
    (42) sigtype -> . LOGIC
    (43) sigtype -> . WIRE
    (44) sigtype -> . SIGNED
    (45) sigtype -> . SUPPLY0
    (46) sigtype -> . SUPPLY1

    INTEGER         shift and go to state 47
    INPUT           shift and go to state 63
    OUTPUT          shift and go to state 64
    INOUT           shift and go to state 65
    TRI             shift and go to state 66
    REG             shift and go to state 67
    LOGIC           shift and go to state 68
    WIRE            shift and go to state 69
    SIGNED          shift and go to state 48
    SUPPLY0         shift and go to state 70
    SUPPLY1         shift and go to state 71

    function_statement             shift and go to state 518
    funcvardecls                   shift and go to state 519
    funcvardecl                    shift and go to state 520
    decl                           shift and go to state 521
    integerdecl                    shift and go to state 522
    sigtypes                       shift and go to state 523
    sigtype                        shift and go to state 62

state 384

    (377) task -> TASK ID SEMICOLON . task_statement ENDTASK
    (378) task_statement -> . taskvardecls task_calc
    (379) taskvardecls -> . taskvardecls taskvardecl
    (380) taskvardecls -> . taskvardecl
    (381) taskvardecls -> . empty
    (382) taskvardecl -> . decl
    (383) taskvardecl -> . integerdecl
    (400) empty -> .
    (77) decl -> . sigtypes declnamelist SEMICOLON
    (78) decl -> . sigtypes width declnamelist SEMICOLON
    (87) integerdecl -> . INTEGER integernamelist SEMICOLON
    (88) integerdecl -> . INTEGER SIGNED integernamelist SEMICOLON
    (35) sigtypes -> . sigtypes sigtype
    (36) sigtypes -> . sigtype
    (37) sigtype -> . INPUT
    (38) sigtype -> . OUTPUT
    (39) sigtype -> . INOUT
    (40) sigtype -> . TRI
    (41) sigtype -> . REG
    (42) sigtype -> . LOGIC
    (43) sigtype -> . WIRE
    (44) sigtype -> . SIGNED
    (45) sigtype -> . SUPPLY0
    (46) sigtype -> . SUPPLY1

  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for INPUT resolved as shift
  ! shift/reduce conflict for OUTPUT resolved as shift
  ! shift/reduce conflict for INOUT resolved as shift
  ! shift/reduce conflict for TRI resolved as shift
  ! shift/reduce conflict for REG resolved as shift
  ! shift/reduce conflict for LOGIC resolved as shift
  ! shift/reduce conflict for WIRE resolved as shift
  ! shift/reduce conflict for SIGNED resolved as shift
  ! shift/reduce conflict for SUPPLY0 resolved as shift
  ! shift/reduce conflict for SUPPLY1 resolved as shift
    IF              reduce using rule 400 (empty -> .)
    FOR             reduce using rule 400 (empty -> .)
    WHILE           reduce using rule 400 (empty -> .)
    CASE            reduce using rule 400 (empty -> .)
    CASEX           reduce using rule 400 (empty -> .)
    BEGIN           reduce using rule 400 (empty -> .)
    DELAY           reduce using rule 400 (empty -> .)
    LBRACE          reduce using rule 400 (empty -> .)
    ID              reduce using rule 400 (empty -> .)
    INTEGER         shift and go to state 47
    INPUT           shift and go to state 63
    OUTPUT          shift and go to state 64
    INOUT           shift and go to state 65
    TRI             shift and go to state 66
    REG             shift and go to state 67
    LOGIC           shift and go to state 68
    WIRE            shift and go to state 69
    SIGNED          shift and go to state 48
    SUPPLY0         shift and go to state 70
    SUPPLY1         shift and go to state 71

  ! INTEGER         [ reduce using rule 400 (empty -> .) ]
  ! INPUT           [ reduce using rule 400 (empty -> .) ]
  ! OUTPUT          [ reduce using rule 400 (empty -> .) ]
  ! INOUT           [ reduce using rule 400 (empty -> .) ]
  ! TRI             [ reduce using rule 400 (empty -> .) ]
  ! REG             [ reduce using rule 400 (empty -> .) ]
  ! LOGIC           [ reduce using rule 400 (empty -> .) ]
  ! WIRE            [ reduce using rule 400 (empty -> .) ]
  ! SIGNED          [ reduce using rule 400 (empty -> .) ]
  ! SUPPLY0         [ reduce using rule 400 (empty -> .) ]
  ! SUPPLY1         [ reduce using rule 400 (empty -> .) ]

    task_statement                 shift and go to state 524
    taskvardecls                   shift and go to state 525
    taskvardecl                    shift and go to state 526
    empty                          shift and go to state 527
    decl                           shift and go to state 528
    integerdecl                    shift and go to state 529
    sigtypes                       shift and go to state 523
    sigtype                        shift and go to state 62

state 385

    (28) portlist -> LPAREN ports RPAREN SEMICOLON .

    GENERATE        reduce using rule 28 (portlist -> LPAREN ports RPAREN SEMICOLON .)
    INTEGER         reduce using rule 28 (portlist -> LPAREN ports RPAREN SEMICOLON .)
    REAL            reduce using rule 28 (portlist -> LPAREN ports RPAREN SEMICOLON .)
    PARAMETER       reduce using rule 28 (portlist -> LPAREN ports RPAREN SEMICOLON .)
    LOCALPARAM      reduce using rule 28 (portlist -> LPAREN ports RPAREN SEMICOLON .)
    GENVAR          reduce using rule 28 (portlist -> LPAREN ports RPAREN SEMICOLON .)
    ASSIGN          reduce using rule 28 (portlist -> LPAREN ports RPAREN SEMICOLON .)
    ALWAYS          reduce using rule 28 (portlist -> LPAREN ports RPAREN SEMICOLON .)
    ALWAYS_FF       reduce using rule 28 (portlist -> LPAREN ports RPAREN SEMICOLON .)
    ALWAYS_COMB     reduce using rule 28 (portlist -> LPAREN ports RPAREN SEMICOLON .)
    INITIAL         reduce using rule 28 (portlist -> LPAREN ports RPAREN SEMICOLON .)
    ID              reduce using rule 28 (portlist -> LPAREN ports RPAREN SEMICOLON .)
    SENS_OR         reduce using rule 28 (portlist -> LPAREN ports RPAREN SEMICOLON .)
    FUNCTION        reduce using rule 28 (portlist -> LPAREN ports RPAREN SEMICOLON .)
    TASK            reduce using rule 28 (portlist -> LPAREN ports RPAREN SEMICOLON .)
    LPAREN          reduce using rule 28 (portlist -> LPAREN ports RPAREN SEMICOLON .)
    INPUT           reduce using rule 28 (portlist -> LPAREN ports RPAREN SEMICOLON .)
    OUTPUT          reduce using rule 28 (portlist -> LPAREN ports RPAREN SEMICOLON .)
    INOUT           reduce using rule 28 (portlist -> LPAREN ports RPAREN SEMICOLON .)
    TRI             reduce using rule 28 (portlist -> LPAREN ports RPAREN SEMICOLON .)
    REG             reduce using rule 28 (portlist -> LPAREN ports RPAREN SEMICOLON .)
    LOGIC           reduce using rule 28 (portlist -> LPAREN ports RPAREN SEMICOLON .)
    WIRE            reduce using rule 28 (portlist -> LPAREN ports RPAREN SEMICOLON .)
    SIGNED          reduce using rule 28 (portlist -> LPAREN ports RPAREN SEMICOLON .)
    SUPPLY0         reduce using rule 28 (portlist -> LPAREN ports RPAREN SEMICOLON .)
    SUPPLY1         reduce using rule 28 (portlist -> LPAREN ports RPAREN SEMICOLON .)
    ENDMODULE       reduce using rule 28 (portlist -> LPAREN ports RPAREN SEMICOLON .)


state 386

    (32) ports -> ports COMMA portname .

    RPAREN          reduce using rule 32 (ports -> ports COMMA portname .)
    COMMA           reduce using rule 32 (ports -> ports COMMA portname .)


state 387

    (29) portlist -> LPAREN ioports RPAREN SEMICOLON .

    GENERATE        reduce using rule 29 (portlist -> LPAREN ioports RPAREN SEMICOLON .)
    INTEGER         reduce using rule 29 (portlist -> LPAREN ioports RPAREN SEMICOLON .)
    REAL            reduce using rule 29 (portlist -> LPAREN ioports RPAREN SEMICOLON .)
    PARAMETER       reduce using rule 29 (portlist -> LPAREN ioports RPAREN SEMICOLON .)
    LOCALPARAM      reduce using rule 29 (portlist -> LPAREN ioports RPAREN SEMICOLON .)
    GENVAR          reduce using rule 29 (portlist -> LPAREN ioports RPAREN SEMICOLON .)
    ASSIGN          reduce using rule 29 (portlist -> LPAREN ioports RPAREN SEMICOLON .)
    ALWAYS          reduce using rule 29 (portlist -> LPAREN ioports RPAREN SEMICOLON .)
    ALWAYS_FF       reduce using rule 29 (portlist -> LPAREN ioports RPAREN SEMICOLON .)
    ALWAYS_COMB     reduce using rule 29 (portlist -> LPAREN ioports RPAREN SEMICOLON .)
    INITIAL         reduce using rule 29 (portlist -> LPAREN ioports RPAREN SEMICOLON .)
    ID              reduce using rule 29 (portlist -> LPAREN ioports RPAREN SEMICOLON .)
    SENS_OR         reduce using rule 29 (portlist -> LPAREN ioports RPAREN SEMICOLON .)
    FUNCTION        reduce using rule 29 (portlist -> LPAREN ioports RPAREN SEMICOLON .)
    TASK            reduce using rule 29 (portlist -> LPAREN ioports RPAREN SEMICOLON .)
    LPAREN          reduce using rule 29 (portlist -> LPAREN ioports RPAREN SEMICOLON .)
    INPUT           reduce using rule 29 (portlist -> LPAREN ioports RPAREN SEMICOLON .)
    OUTPUT          reduce using rule 29 (portlist -> LPAREN ioports RPAREN SEMICOLON .)
    INOUT           reduce using rule 29 (portlist -> LPAREN ioports RPAREN SEMICOLON .)
    TRI             reduce using rule 29 (portlist -> LPAREN ioports RPAREN SEMICOLON .)
    REG             reduce using rule 29 (portlist -> LPAREN ioports RPAREN SEMICOLON .)
    LOGIC           reduce using rule 29 (portlist -> LPAREN ioports RPAREN SEMICOLON .)
    WIRE            reduce using rule 29 (portlist -> LPAREN ioports RPAREN SEMICOLON .)
    SIGNED          reduce using rule 29 (portlist -> LPAREN ioports RPAREN SEMICOLON .)
    SUPPLY0         reduce using rule 29 (portlist -> LPAREN ioports RPAREN SEMICOLON .)
    SUPPLY1         reduce using rule 29 (portlist -> LPAREN ioports RPAREN SEMICOLON .)
    ENDMODULE       reduce using rule 29 (portlist -> LPAREN ioports RPAREN SEMICOLON .)


state 388

    (47) ioports -> ioports COMMA ioport .

    RPAREN          reduce using rule 47 (ioports -> ioports COMMA ioport .)
    COMMA           reduce using rule 47 (ioports -> ioports COMMA ioport .)


state 389

    (49) ioport -> sigtypes . portname
    (50) ioport -> sigtypes . width portname
    (35) sigtypes -> sigtypes . sigtype
    (34) portname -> . ID
    (54) width -> . LBRACKET expression COLON expression RBRACKET
    (37) sigtype -> . INPUT
    (38) sigtype -> . OUTPUT
    (39) sigtype -> . INOUT
    (40) sigtype -> . TRI
    (41) sigtype -> . REG
    (42) sigtype -> . LOGIC
    (43) sigtype -> . WIRE
    (44) sigtype -> . SIGNED
    (45) sigtype -> . SUPPLY0
    (46) sigtype -> . SUPPLY1

    ID              shift and go to state 77
    LBRACKET        shift and go to state 137
    INPUT           shift and go to state 63
    OUTPUT          shift and go to state 64
    INOUT           shift and go to state 65
    TRI             shift and go to state 66
    REG             shift and go to state 67
    LOGIC           shift and go to state 68
    WIRE            shift and go to state 69
    SIGNED          shift and go to state 48
    SUPPLY0         shift and go to state 70
    SUPPLY1         shift and go to state 71

    portname                       shift and go to state 530
    width                          shift and go to state 531
    sigtype                        shift and go to state 135

state 390

    (53) ioport -> portname .

    RPAREN          reduce using rule 53 (ioport -> portname .)
    COMMA           reduce using rule 53 (ioport -> portname .)


state 391

    (52) ioport_head -> sigtypes width portname .

    RPAREN          reduce using rule 52 (ioport_head -> sigtypes width portname .)
    COMMA           reduce using rule 52 (ioport_head -> sigtypes width portname .)


state 392

    (18) param -> PARAMETER param_substitution_list COMMA .
    (106) param_substitution_list -> param_substitution_list COMMA . param_substitution
    (108) param_substitution -> . ID EQUALS rvalue

    PARAMETER       reduce using rule 18 (param -> PARAMETER param_substitution_list COMMA .)
    ID              shift and go to state 154

    param_substitution             shift and go to state 457

state 393

    (24) param_end -> PARAMETER SIGNED param_substitution_list .
    (19) param -> PARAMETER SIGNED param_substitution_list . COMMA
    (106) param_substitution_list -> param_substitution_list . COMMA param_substitution

    RPAREN          reduce using rule 24 (param_end -> PARAMETER SIGNED param_substitution_list .)
    COMMA           shift and go to state 532


state 394

    (26) param_end -> PARAMETER SIGNED width . param_substitution_list
    (21) param -> PARAMETER SIGNED width . param_substitution_list COMMA
    (106) param_substitution_list -> . param_substitution_list COMMA param_substitution
    (107) param_substitution_list -> . param_substitution
    (108) param_substitution -> . ID EQUALS rvalue

    ID              shift and go to state 154

    param_substitution_list        shift and go to state 533
    param_substitution             shift and go to state 153

state 395

    (25) param_end -> PARAMETER width param_substitution_list .
    (20) param -> PARAMETER width param_substitution_list . COMMA
    (106) param_substitution_list -> param_substitution_list . COMMA param_substitution

    RPAREN          reduce using rule 25 (param_end -> PARAMETER width param_substitution_list .)
    COMMA           shift and go to state 534


state 396

    (27) param_end -> PARAMETER INTEGER param_substitution_list .
    (22) param -> PARAMETER INTEGER param_substitution_list . COMMA
    (106) param_substitution_list -> param_substitution_list . COMMA param_substitution

    RPAREN          reduce using rule 27 (param_end -> PARAMETER INTEGER param_substitution_list .)
    COMMA           shift and go to state 535


state 397

    (165) expression -> LPAREN expression RPAREN .

    TIMES           reduce using rule 165 (expression -> LPAREN expression RPAREN .)
    POWER           reduce using rule 165 (expression -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 165 (expression -> LPAREN expression RPAREN .)
    MOD             reduce using rule 165 (expression -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 165 (expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 165 (expression -> LPAREN expression RPAREN .)
    LSHIFT          reduce using rule 165 (expression -> LPAREN expression RPAREN .)
    RSHIFT          reduce using rule 165 (expression -> LPAREN expression RPAREN .)
    LSHIFTA         reduce using rule 165 (expression -> LPAREN expression RPAREN .)
    RSHIFTA         reduce using rule 165 (expression -> LPAREN expression RPAREN .)
    LT              reduce using rule 165 (expression -> LPAREN expression RPAREN .)
    GT              reduce using rule 165 (expression -> LPAREN expression RPAREN .)
    LE              reduce using rule 165 (expression -> LPAREN expression RPAREN .)
    GE              reduce using rule 165 (expression -> LPAREN expression RPAREN .)
    EQ              reduce using rule 165 (expression -> LPAREN expression RPAREN .)
    NE              reduce using rule 165 (expression -> LPAREN expression RPAREN .)
    EQL             reduce using rule 165 (expression -> LPAREN expression RPAREN .)
    NEL             reduce using rule 165 (expression -> LPAREN expression RPAREN .)
    AND             reduce using rule 165 (expression -> LPAREN expression RPAREN .)
    XOR             reduce using rule 165 (expression -> LPAREN expression RPAREN .)
    XNOR            reduce using rule 165 (expression -> LPAREN expression RPAREN .)
    OR              reduce using rule 165 (expression -> LPAREN expression RPAREN .)
    LAND            reduce using rule 165 (expression -> LPAREN expression RPAREN .)
    LOR             reduce using rule 165 (expression -> LPAREN expression RPAREN .)
    COND            reduce using rule 165 (expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 165 (expression -> LPAREN expression RPAREN .)
    LBRACE          reduce using rule 165 (expression -> LPAREN expression RPAREN .)
    RBRACE          reduce using rule 165 (expression -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 165 (expression -> LPAREN expression RPAREN .)
    COLON           reduce using rule 165 (expression -> LPAREN expression RPAREN .)
    SEMICOLON       reduce using rule 165 (expression -> LPAREN expression RPAREN .)
    PLUSCOLON       reduce using rule 165 (expression -> LPAREN expression RPAREN .)
    MINUSCOLON      reduce using rule 165 (expression -> LPAREN expression RPAREN .)
    RBRACKET        reduce using rule 165 (expression -> LPAREN expression RPAREN .)


state 398

    (141) expression -> expression TIMES . expression
    (130) expression -> . MINUS expression
    (131) expression -> . PLUS expression
    (132) expression -> . LNOT expression
    (133) expression -> . NOT expression
    (134) expression -> . AND expression
    (135) expression -> . NAND expression
    (136) expression -> . NOR expression
    (137) expression -> . OR expression
    (138) expression -> . XOR expression
    (139) expression -> . XNOR expression
    (140) expression -> . expression POWER expression
    (141) expression -> . expression TIMES expression
    (142) expression -> . expression DIVIDE expression
    (143) expression -> . expression MOD expression
    (144) expression -> . expression PLUS expression
    (145) expression -> . expression MINUS expression
    (146) expression -> . expression LSHIFT expression
    (147) expression -> . expression RSHIFT expression
    (148) expression -> . expression LSHIFTA expression
    (149) expression -> . expression RSHIFTA expression
    (150) expression -> . expression LT expression
    (151) expression -> . expression GT expression
    (152) expression -> . expression LE expression
    (153) expression -> . expression GE expression
    (154) expression -> . expression EQ expression
    (155) expression -> . expression NE expression
    (156) expression -> . expression EQL expression
    (157) expression -> . expression NEL expression
    (158) expression -> . expression AND expression
    (159) expression -> . expression XOR expression
    (160) expression -> . expression XNOR expression
    (161) expression -> . expression OR expression
    (162) expression -> . expression LAND expression
    (163) expression -> . expression LOR expression
    (164) expression -> . expression COND expression COLON expression
    (165) expression -> . LPAREN expression RPAREN
    (166) expression -> . concat
    (167) expression -> . repeat
    (168) expression -> . partselect
    (169) expression -> . pointer
    (170) expression -> . functioncall
    (171) expression -> . systemcall
    (172) expression -> . identifier
    (173) expression -> . const_expression
    (174) concat -> . LBRACE concatlist RBRACE
    (177) repeat -> . LBRACE expression concat RBRACE
    (178) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (179) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (180) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (181) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (182) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (183) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (184) pointer -> . identifier LBRACKET expression RBRACKET
    (185) pointer -> . pointer LBRACKET expression RBRACKET
    (373) functioncall -> . identifier LPAREN func_args RPAREN
    (351) systemcall -> . DOLLER ID
    (352) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (353) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (392) identifier -> . ID
    (393) identifier -> . scope ID
    (186) const_expression -> . intnumber
    (187) const_expression -> . floatnumber
    (188) const_expression -> . stringliteral
    (394) scope -> . identifier DOT
    (395) scope -> . pointer DOT
    (190) intnumber -> . INTNUMBER_DEC
    (191) intnumber -> . SIGNED_INTNUMBER_DEC
    (192) intnumber -> . INTNUMBER_BIN
    (193) intnumber -> . SIGNED_INTNUMBER_BIN
    (194) intnumber -> . INTNUMBER_OCT
    (195) intnumber -> . SIGNED_INTNUMBER_OCT
    (196) intnumber -> . INTNUMBER_HEX
    (197) intnumber -> . SIGNED_INTNUMBER_HEX
    (189) floatnumber -> . FLOATNUMBER
    (198) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 88
    PLUS            shift and go to state 89
    LNOT            shift and go to state 90
    NOT             shift and go to state 91
    AND             shift and go to state 92
    NAND            shift and go to state 93
    NOR             shift and go to state 94
    OR              shift and go to state 95
    XOR             shift and go to state 96
    XNOR            shift and go to state 97
    LPAREN          shift and go to state 85
    LBRACE          shift and go to state 106
    DOLLER          shift and go to state 107
    ID              shift and go to state 86
    INTNUMBER_DEC   shift and go to state 112
    SIGNED_INTNUMBER_DEC shift and go to state 113
    INTNUMBER_BIN   shift and go to state 114
    SIGNED_INTNUMBER_BIN shift and go to state 115
    INTNUMBER_OCT   shift and go to state 116
    SIGNED_INTNUMBER_OCT shift and go to state 117
    INTNUMBER_HEX   shift and go to state 118
    SIGNED_INTNUMBER_HEX shift and go to state 119
    FLOATNUMBER     shift and go to state 120
    STRING_LITERAL  shift and go to state 121

    expression                     shift and go to state 399
    concat                         shift and go to state 98
    repeat                         shift and go to state 99
    partselect                     shift and go to state 100
    pointer                        shift and go to state 101
    functioncall                   shift and go to state 102
    systemcall                     shift and go to state 103
    identifier                     shift and go to state 104
    const_expression               shift and go to state 105
    scope                          shift and go to state 108
    intnumber                      shift and go to state 109
    floatnumber                    shift and go to state 110
    stringliteral                  shift and go to state 111

state 399

    (141) expression -> expression TIMES expression .
    (140) expression -> expression . POWER expression
    (141) expression -> expression . TIMES expression
    (142) expression -> expression . DIVIDE expression
    (143) expression -> expression . MOD expression
    (144) expression -> expression . PLUS expression
    (145) expression -> expression . MINUS expression
    (146) expression -> expression . LSHIFT expression
    (147) expression -> expression . RSHIFT expression
    (148) expression -> expression . LSHIFTA expression
    (149) expression -> expression . RSHIFTA expression
    (150) expression -> expression . LT expression
    (151) expression -> expression . GT expression
    (152) expression -> expression . LE expression
    (153) expression -> expression . GE expression
    (154) expression -> expression . EQ expression
    (155) expression -> expression . NE expression
    (156) expression -> expression . EQL expression
    (157) expression -> expression . NEL expression
    (158) expression -> expression . AND expression
    (159) expression -> expression . XOR expression
    (160) expression -> expression . XNOR expression
    (161) expression -> expression . OR expression
    (162) expression -> expression . LAND expression
    (163) expression -> expression . LOR expression
    (164) expression -> expression . COND expression COLON expression

    TIMES           reduce using rule 141 (expression -> expression TIMES expression .)
    DIVIDE          reduce using rule 141 (expression -> expression TIMES expression .)
    MOD             reduce using rule 141 (expression -> expression TIMES expression .)
    PLUS            reduce using rule 141 (expression -> expression TIMES expression .)
    MINUS           reduce using rule 141 (expression -> expression TIMES expression .)
    LSHIFT          reduce using rule 141 (expression -> expression TIMES expression .)
    RSHIFT          reduce using rule 141 (expression -> expression TIMES expression .)
    LSHIFTA         reduce using rule 141 (expression -> expression TIMES expression .)
    RSHIFTA         reduce using rule 141 (expression -> expression TIMES expression .)
    LT              reduce using rule 141 (expression -> expression TIMES expression .)
    GT              reduce using rule 141 (expression -> expression TIMES expression .)
    LE              reduce using rule 141 (expression -> expression TIMES expression .)
    GE              reduce using rule 141 (expression -> expression TIMES expression .)
    EQ              reduce using rule 141 (expression -> expression TIMES expression .)
    NE              reduce using rule 141 (expression -> expression TIMES expression .)
    EQL             reduce using rule 141 (expression -> expression TIMES expression .)
    NEL             reduce using rule 141 (expression -> expression TIMES expression .)
    AND             reduce using rule 141 (expression -> expression TIMES expression .)
    XOR             reduce using rule 141 (expression -> expression TIMES expression .)
    XNOR            reduce using rule 141 (expression -> expression TIMES expression .)
    OR              reduce using rule 141 (expression -> expression TIMES expression .)
    LAND            reduce using rule 141 (expression -> expression TIMES expression .)
    LOR             reduce using rule 141 (expression -> expression TIMES expression .)
    COND            reduce using rule 141 (expression -> expression TIMES expression .)
    RPAREN          reduce using rule 141 (expression -> expression TIMES expression .)
    LBRACE          reduce using rule 141 (expression -> expression TIMES expression .)
    RBRACE          reduce using rule 141 (expression -> expression TIMES expression .)
    COMMA           reduce using rule 141 (expression -> expression TIMES expression .)
    COLON           reduce using rule 141 (expression -> expression TIMES expression .)
    SEMICOLON       reduce using rule 141 (expression -> expression TIMES expression .)
    PLUSCOLON       reduce using rule 141 (expression -> expression TIMES expression .)
    MINUSCOLON      reduce using rule 141 (expression -> expression TIMES expression .)
    RBRACKET        reduce using rule 141 (expression -> expression TIMES expression .)
    POWER           shift and go to state 236

  ! POWER           [ reduce using rule 141 (expression -> expression TIMES expression .) ]
  ! TIMES           [ shift and go to state 398 ]
  ! DIVIDE          [ shift and go to state 237 ]
  ! MOD             [ shift and go to state 238 ]
  ! PLUS            [ shift and go to state 239 ]
  ! MINUS           [ shift and go to state 240 ]
  ! LSHIFT          [ shift and go to state 241 ]
  ! RSHIFT          [ shift and go to state 242 ]
  ! LSHIFTA         [ shift and go to state 243 ]
  ! RSHIFTA         [ shift and go to state 244 ]
  ! LT              [ shift and go to state 245 ]
  ! GT              [ shift and go to state 246 ]
  ! LE              [ shift and go to state 247 ]
  ! GE              [ shift and go to state 248 ]
  ! EQ              [ shift and go to state 249 ]
  ! NE              [ shift and go to state 250 ]
  ! EQL             [ shift and go to state 251 ]
  ! NEL             [ shift and go to state 252 ]
  ! AND             [ shift and go to state 253 ]
  ! XOR             [ shift and go to state 254 ]
  ! XNOR            [ shift and go to state 255 ]
  ! OR              [ shift and go to state 256 ]
  ! LAND            [ shift and go to state 257 ]
  ! LOR             [ shift and go to state 258 ]
  ! COND            [ shift and go to state 259 ]


state 400

    (7) pragma -> LPAREN TIMES ID EQUALS expression TIMES RPAREN .

    MODULE          reduce using rule 7 (pragma -> LPAREN TIMES ID EQUALS expression TIMES RPAREN .)
    LPAREN          reduce using rule 7 (pragma -> LPAREN TIMES ID EQUALS expression TIMES RPAREN .)
    $end            reduce using rule 7 (pragma -> LPAREN TIMES ID EQUALS expression TIMES RPAREN .)
    ENDMODULE       reduce using rule 7 (pragma -> LPAREN TIMES ID EQUALS expression TIMES RPAREN .)
    GENERATE        reduce using rule 7 (pragma -> LPAREN TIMES ID EQUALS expression TIMES RPAREN .)
    INTEGER         reduce using rule 7 (pragma -> LPAREN TIMES ID EQUALS expression TIMES RPAREN .)
    REAL            reduce using rule 7 (pragma -> LPAREN TIMES ID EQUALS expression TIMES RPAREN .)
    PARAMETER       reduce using rule 7 (pragma -> LPAREN TIMES ID EQUALS expression TIMES RPAREN .)
    LOCALPARAM      reduce using rule 7 (pragma -> LPAREN TIMES ID EQUALS expression TIMES RPAREN .)
    GENVAR          reduce using rule 7 (pragma -> LPAREN TIMES ID EQUALS expression TIMES RPAREN .)
    ASSIGN          reduce using rule 7 (pragma -> LPAREN TIMES ID EQUALS expression TIMES RPAREN .)
    ALWAYS          reduce using rule 7 (pragma -> LPAREN TIMES ID EQUALS expression TIMES RPAREN .)
    ALWAYS_FF       reduce using rule 7 (pragma -> LPAREN TIMES ID EQUALS expression TIMES RPAREN .)
    ALWAYS_COMB     reduce using rule 7 (pragma -> LPAREN TIMES ID EQUALS expression TIMES RPAREN .)
    INITIAL         reduce using rule 7 (pragma -> LPAREN TIMES ID EQUALS expression TIMES RPAREN .)
    ID              reduce using rule 7 (pragma -> LPAREN TIMES ID EQUALS expression TIMES RPAREN .)
    SENS_OR         reduce using rule 7 (pragma -> LPAREN TIMES ID EQUALS expression TIMES RPAREN .)
    FUNCTION        reduce using rule 7 (pragma -> LPAREN TIMES ID EQUALS expression TIMES RPAREN .)
    TASK            reduce using rule 7 (pragma -> LPAREN TIMES ID EQUALS expression TIMES RPAREN .)
    INPUT           reduce using rule 7 (pragma -> LPAREN TIMES ID EQUALS expression TIMES RPAREN .)
    OUTPUT          reduce using rule 7 (pragma -> LPAREN TIMES ID EQUALS expression TIMES RPAREN .)
    INOUT           reduce using rule 7 (pragma -> LPAREN TIMES ID EQUALS expression TIMES RPAREN .)
    TRI             reduce using rule 7 (pragma -> LPAREN TIMES ID EQUALS expression TIMES RPAREN .)
    REG             reduce using rule 7 (pragma -> LPAREN TIMES ID EQUALS expression TIMES RPAREN .)
    LOGIC           reduce using rule 7 (pragma -> LPAREN TIMES ID EQUALS expression TIMES RPAREN .)
    WIRE            reduce using rule 7 (pragma -> LPAREN TIMES ID EQUALS expression TIMES RPAREN .)
    SIGNED          reduce using rule 7 (pragma -> LPAREN TIMES ID EQUALS expression TIMES RPAREN .)
    SUPPLY0         reduce using rule 7 (pragma -> LPAREN TIMES ID EQUALS expression TIMES RPAREN .)
    SUPPLY1         reduce using rule 7 (pragma -> LPAREN TIMES ID EQUALS expression TIMES RPAREN .)
    ENDGENERATE     reduce using rule 7 (pragma -> LPAREN TIMES ID EQUALS expression TIMES RPAREN .)
    IF              reduce using rule 7 (pragma -> LPAREN TIMES ID EQUALS expression TIMES RPAREN .)
    FOR             reduce using rule 7 (pragma -> LPAREN TIMES ID EQUALS expression TIMES RPAREN .)
    ELSE            reduce using rule 7 (pragma -> LPAREN TIMES ID EQUALS expression TIMES RPAREN .)
    END             reduce using rule 7 (pragma -> LPAREN TIMES ID EQUALS expression TIMES RPAREN .)


state 401

    (140) expression -> expression POWER expression .
    (140) expression -> expression . POWER expression
    (141) expression -> expression . TIMES expression
    (142) expression -> expression . DIVIDE expression
    (143) expression -> expression . MOD expression
    (144) expression -> expression . PLUS expression
    (145) expression -> expression . MINUS expression
    (146) expression -> expression . LSHIFT expression
    (147) expression -> expression . RSHIFT expression
    (148) expression -> expression . LSHIFTA expression
    (149) expression -> expression . RSHIFTA expression
    (150) expression -> expression . LT expression
    (151) expression -> expression . GT expression
    (152) expression -> expression . LE expression
    (153) expression -> expression . GE expression
    (154) expression -> expression . EQ expression
    (155) expression -> expression . NE expression
    (156) expression -> expression . EQL expression
    (157) expression -> expression . NEL expression
    (158) expression -> expression . AND expression
    (159) expression -> expression . XOR expression
    (160) expression -> expression . XNOR expression
    (161) expression -> expression . OR expression
    (162) expression -> expression . LAND expression
    (163) expression -> expression . LOR expression
    (164) expression -> expression . COND expression COLON expression

    TIMES           reduce using rule 140 (expression -> expression POWER expression .)
    POWER           reduce using rule 140 (expression -> expression POWER expression .)
    DIVIDE          reduce using rule 140 (expression -> expression POWER expression .)
    MOD             reduce using rule 140 (expression -> expression POWER expression .)
    PLUS            reduce using rule 140 (expression -> expression POWER expression .)
    MINUS           reduce using rule 140 (expression -> expression POWER expression .)
    LSHIFT          reduce using rule 140 (expression -> expression POWER expression .)
    RSHIFT          reduce using rule 140 (expression -> expression POWER expression .)
    LSHIFTA         reduce using rule 140 (expression -> expression POWER expression .)
    RSHIFTA         reduce using rule 140 (expression -> expression POWER expression .)
    LT              reduce using rule 140 (expression -> expression POWER expression .)
    GT              reduce using rule 140 (expression -> expression POWER expression .)
    LE              reduce using rule 140 (expression -> expression POWER expression .)
    GE              reduce using rule 140 (expression -> expression POWER expression .)
    EQ              reduce using rule 140 (expression -> expression POWER expression .)
    NE              reduce using rule 140 (expression -> expression POWER expression .)
    EQL             reduce using rule 140 (expression -> expression POWER expression .)
    NEL             reduce using rule 140 (expression -> expression POWER expression .)
    AND             reduce using rule 140 (expression -> expression POWER expression .)
    XOR             reduce using rule 140 (expression -> expression POWER expression .)
    XNOR            reduce using rule 140 (expression -> expression POWER expression .)
    OR              reduce using rule 140 (expression -> expression POWER expression .)
    LAND            reduce using rule 140 (expression -> expression POWER expression .)
    LOR             reduce using rule 140 (expression -> expression POWER expression .)
    COND            reduce using rule 140 (expression -> expression POWER expression .)
    RPAREN          reduce using rule 140 (expression -> expression POWER expression .)
    LBRACE          reduce using rule 140 (expression -> expression POWER expression .)
    RBRACE          reduce using rule 140 (expression -> expression POWER expression .)
    COMMA           reduce using rule 140 (expression -> expression POWER expression .)
    COLON           reduce using rule 140 (expression -> expression POWER expression .)
    SEMICOLON       reduce using rule 140 (expression -> expression POWER expression .)
    PLUSCOLON       reduce using rule 140 (expression -> expression POWER expression .)
    MINUSCOLON      reduce using rule 140 (expression -> expression POWER expression .)
    RBRACKET        reduce using rule 140 (expression -> expression POWER expression .)

  ! POWER           [ shift and go to state 236 ]
  ! TIMES           [ shift and go to state 398 ]
  ! DIVIDE          [ shift and go to state 237 ]
  ! MOD             [ shift and go to state 238 ]
  ! PLUS            [ shift and go to state 239 ]
  ! MINUS           [ shift and go to state 240 ]
  ! LSHIFT          [ shift and go to state 241 ]
  ! RSHIFT          [ shift and go to state 242 ]
  ! LSHIFTA         [ shift and go to state 243 ]
  ! RSHIFTA         [ shift and go to state 244 ]
  ! LT              [ shift and go to state 245 ]
  ! GT              [ shift and go to state 246 ]
  ! LE              [ shift and go to state 247 ]
  ! GE              [ shift and go to state 248 ]
  ! EQ              [ shift and go to state 249 ]
  ! NE              [ shift and go to state 250 ]
  ! EQL             [ shift and go to state 251 ]
  ! NEL             [ shift and go to state 252 ]
  ! AND             [ shift and go to state 253 ]
  ! XOR             [ shift and go to state 254 ]
  ! XNOR            [ shift and go to state 255 ]
  ! OR              [ shift and go to state 256 ]
  ! LAND            [ shift and go to state 257 ]
  ! LOR             [ shift and go to state 258 ]
  ! COND            [ shift and go to state 259 ]


state 402

    (142) expression -> expression DIVIDE expression .
    (140) expression -> expression . POWER expression
    (141) expression -> expression . TIMES expression
    (142) expression -> expression . DIVIDE expression
    (143) expression -> expression . MOD expression
    (144) expression -> expression . PLUS expression
    (145) expression -> expression . MINUS expression
    (146) expression -> expression . LSHIFT expression
    (147) expression -> expression . RSHIFT expression
    (148) expression -> expression . LSHIFTA expression
    (149) expression -> expression . RSHIFTA expression
    (150) expression -> expression . LT expression
    (151) expression -> expression . GT expression
    (152) expression -> expression . LE expression
    (153) expression -> expression . GE expression
    (154) expression -> expression . EQ expression
    (155) expression -> expression . NE expression
    (156) expression -> expression . EQL expression
    (157) expression -> expression . NEL expression
    (158) expression -> expression . AND expression
    (159) expression -> expression . XOR expression
    (160) expression -> expression . XNOR expression
    (161) expression -> expression . OR expression
    (162) expression -> expression . LAND expression
    (163) expression -> expression . LOR expression
    (164) expression -> expression . COND expression COLON expression

    TIMES           reduce using rule 142 (expression -> expression DIVIDE expression .)
    DIVIDE          reduce using rule 142 (expression -> expression DIVIDE expression .)
    MOD             reduce using rule 142 (expression -> expression DIVIDE expression .)
    PLUS            reduce using rule 142 (expression -> expression DIVIDE expression .)
    MINUS           reduce using rule 142 (expression -> expression DIVIDE expression .)
    LSHIFT          reduce using rule 142 (expression -> expression DIVIDE expression .)
    RSHIFT          reduce using rule 142 (expression -> expression DIVIDE expression .)
    LSHIFTA         reduce using rule 142 (expression -> expression DIVIDE expression .)
    RSHIFTA         reduce using rule 142 (expression -> expression DIVIDE expression .)
    LT              reduce using rule 142 (expression -> expression DIVIDE expression .)
    GT              reduce using rule 142 (expression -> expression DIVIDE expression .)
    LE              reduce using rule 142 (expression -> expression DIVIDE expression .)
    GE              reduce using rule 142 (expression -> expression DIVIDE expression .)
    EQ              reduce using rule 142 (expression -> expression DIVIDE expression .)
    NE              reduce using rule 142 (expression -> expression DIVIDE expression .)
    EQL             reduce using rule 142 (expression -> expression DIVIDE expression .)
    NEL             reduce using rule 142 (expression -> expression DIVIDE expression .)
    AND             reduce using rule 142 (expression -> expression DIVIDE expression .)
    XOR             reduce using rule 142 (expression -> expression DIVIDE expression .)
    XNOR            reduce using rule 142 (expression -> expression DIVIDE expression .)
    OR              reduce using rule 142 (expression -> expression DIVIDE expression .)
    LAND            reduce using rule 142 (expression -> expression DIVIDE expression .)
    LOR             reduce using rule 142 (expression -> expression DIVIDE expression .)
    COND            reduce using rule 142 (expression -> expression DIVIDE expression .)
    RPAREN          reduce using rule 142 (expression -> expression DIVIDE expression .)
    LBRACE          reduce using rule 142 (expression -> expression DIVIDE expression .)
    RBRACE          reduce using rule 142 (expression -> expression DIVIDE expression .)
    COMMA           reduce using rule 142 (expression -> expression DIVIDE expression .)
    COLON           reduce using rule 142 (expression -> expression DIVIDE expression .)
    SEMICOLON       reduce using rule 142 (expression -> expression DIVIDE expression .)
    PLUSCOLON       reduce using rule 142 (expression -> expression DIVIDE expression .)
    MINUSCOLON      reduce using rule 142 (expression -> expression DIVIDE expression .)
    RBRACKET        reduce using rule 142 (expression -> expression DIVIDE expression .)
    POWER           shift and go to state 236

  ! POWER           [ reduce using rule 142 (expression -> expression DIVIDE expression .) ]
  ! TIMES           [ shift and go to state 398 ]
  ! DIVIDE          [ shift and go to state 237 ]
  ! MOD             [ shift and go to state 238 ]
  ! PLUS            [ shift and go to state 239 ]
  ! MINUS           [ shift and go to state 240 ]
  ! LSHIFT          [ shift and go to state 241 ]
  ! RSHIFT          [ shift and go to state 242 ]
  ! LSHIFTA         [ shift and go to state 243 ]
  ! RSHIFTA         [ shift and go to state 244 ]
  ! LT              [ shift and go to state 245 ]
  ! GT              [ shift and go to state 246 ]
  ! LE              [ shift and go to state 247 ]
  ! GE              [ shift and go to state 248 ]
  ! EQ              [ shift and go to state 249 ]
  ! NE              [ shift and go to state 250 ]
  ! EQL             [ shift and go to state 251 ]
  ! NEL             [ shift and go to state 252 ]
  ! AND             [ shift and go to state 253 ]
  ! XOR             [ shift and go to state 254 ]
  ! XNOR            [ shift and go to state 255 ]
  ! OR              [ shift and go to state 256 ]
  ! LAND            [ shift and go to state 257 ]
  ! LOR             [ shift and go to state 258 ]
  ! COND            [ shift and go to state 259 ]


state 403

    (143) expression -> expression MOD expression .
    (140) expression -> expression . POWER expression
    (141) expression -> expression . TIMES expression
    (142) expression -> expression . DIVIDE expression
    (143) expression -> expression . MOD expression
    (144) expression -> expression . PLUS expression
    (145) expression -> expression . MINUS expression
    (146) expression -> expression . LSHIFT expression
    (147) expression -> expression . RSHIFT expression
    (148) expression -> expression . LSHIFTA expression
    (149) expression -> expression . RSHIFTA expression
    (150) expression -> expression . LT expression
    (151) expression -> expression . GT expression
    (152) expression -> expression . LE expression
    (153) expression -> expression . GE expression
    (154) expression -> expression . EQ expression
    (155) expression -> expression . NE expression
    (156) expression -> expression . EQL expression
    (157) expression -> expression . NEL expression
    (158) expression -> expression . AND expression
    (159) expression -> expression . XOR expression
    (160) expression -> expression . XNOR expression
    (161) expression -> expression . OR expression
    (162) expression -> expression . LAND expression
    (163) expression -> expression . LOR expression
    (164) expression -> expression . COND expression COLON expression

    TIMES           reduce using rule 143 (expression -> expression MOD expression .)
    DIVIDE          reduce using rule 143 (expression -> expression MOD expression .)
    MOD             reduce using rule 143 (expression -> expression MOD expression .)
    PLUS            reduce using rule 143 (expression -> expression MOD expression .)
    MINUS           reduce using rule 143 (expression -> expression MOD expression .)
    LSHIFT          reduce using rule 143 (expression -> expression MOD expression .)
    RSHIFT          reduce using rule 143 (expression -> expression MOD expression .)
    LSHIFTA         reduce using rule 143 (expression -> expression MOD expression .)
    RSHIFTA         reduce using rule 143 (expression -> expression MOD expression .)
    LT              reduce using rule 143 (expression -> expression MOD expression .)
    GT              reduce using rule 143 (expression -> expression MOD expression .)
    LE              reduce using rule 143 (expression -> expression MOD expression .)
    GE              reduce using rule 143 (expression -> expression MOD expression .)
    EQ              reduce using rule 143 (expression -> expression MOD expression .)
    NE              reduce using rule 143 (expression -> expression MOD expression .)
    EQL             reduce using rule 143 (expression -> expression MOD expression .)
    NEL             reduce using rule 143 (expression -> expression MOD expression .)
    AND             reduce using rule 143 (expression -> expression MOD expression .)
    XOR             reduce using rule 143 (expression -> expression MOD expression .)
    XNOR            reduce using rule 143 (expression -> expression MOD expression .)
    OR              reduce using rule 143 (expression -> expression MOD expression .)
    LAND            reduce using rule 143 (expression -> expression MOD expression .)
    LOR             reduce using rule 143 (expression -> expression MOD expression .)
    COND            reduce using rule 143 (expression -> expression MOD expression .)
    RPAREN          reduce using rule 143 (expression -> expression MOD expression .)
    LBRACE          reduce using rule 143 (expression -> expression MOD expression .)
    RBRACE          reduce using rule 143 (expression -> expression MOD expression .)
    COMMA           reduce using rule 143 (expression -> expression MOD expression .)
    COLON           reduce using rule 143 (expression -> expression MOD expression .)
    SEMICOLON       reduce using rule 143 (expression -> expression MOD expression .)
    PLUSCOLON       reduce using rule 143 (expression -> expression MOD expression .)
    MINUSCOLON      reduce using rule 143 (expression -> expression MOD expression .)
    RBRACKET        reduce using rule 143 (expression -> expression MOD expression .)
    POWER           shift and go to state 236

  ! POWER           [ reduce using rule 143 (expression -> expression MOD expression .) ]
  ! TIMES           [ shift and go to state 398 ]
  ! DIVIDE          [ shift and go to state 237 ]
  ! MOD             [ shift and go to state 238 ]
  ! PLUS            [ shift and go to state 239 ]
  ! MINUS           [ shift and go to state 240 ]
  ! LSHIFT          [ shift and go to state 241 ]
  ! RSHIFT          [ shift and go to state 242 ]
  ! LSHIFTA         [ shift and go to state 243 ]
  ! RSHIFTA         [ shift and go to state 244 ]
  ! LT              [ shift and go to state 245 ]
  ! GT              [ shift and go to state 246 ]
  ! LE              [ shift and go to state 247 ]
  ! GE              [ shift and go to state 248 ]
  ! EQ              [ shift and go to state 249 ]
  ! NE              [ shift and go to state 250 ]
  ! EQL             [ shift and go to state 251 ]
  ! NEL             [ shift and go to state 252 ]
  ! AND             [ shift and go to state 253 ]
  ! XOR             [ shift and go to state 254 ]
  ! XNOR            [ shift and go to state 255 ]
  ! OR              [ shift and go to state 256 ]
  ! LAND            [ shift and go to state 257 ]
  ! LOR             [ shift and go to state 258 ]
  ! COND            [ shift and go to state 259 ]


state 404

    (144) expression -> expression PLUS expression .
    (140) expression -> expression . POWER expression
    (141) expression -> expression . TIMES expression
    (142) expression -> expression . DIVIDE expression
    (143) expression -> expression . MOD expression
    (144) expression -> expression . PLUS expression
    (145) expression -> expression . MINUS expression
    (146) expression -> expression . LSHIFT expression
    (147) expression -> expression . RSHIFT expression
    (148) expression -> expression . LSHIFTA expression
    (149) expression -> expression . RSHIFTA expression
    (150) expression -> expression . LT expression
    (151) expression -> expression . GT expression
    (152) expression -> expression . LE expression
    (153) expression -> expression . GE expression
    (154) expression -> expression . EQ expression
    (155) expression -> expression . NE expression
    (156) expression -> expression . EQL expression
    (157) expression -> expression . NEL expression
    (158) expression -> expression . AND expression
    (159) expression -> expression . XOR expression
    (160) expression -> expression . XNOR expression
    (161) expression -> expression . OR expression
    (162) expression -> expression . LAND expression
    (163) expression -> expression . LOR expression
    (164) expression -> expression . COND expression COLON expression

    PLUS            reduce using rule 144 (expression -> expression PLUS expression .)
    MINUS           reduce using rule 144 (expression -> expression PLUS expression .)
    LSHIFT          reduce using rule 144 (expression -> expression PLUS expression .)
    RSHIFT          reduce using rule 144 (expression -> expression PLUS expression .)
    LSHIFTA         reduce using rule 144 (expression -> expression PLUS expression .)
    RSHIFTA         reduce using rule 144 (expression -> expression PLUS expression .)
    LT              reduce using rule 144 (expression -> expression PLUS expression .)
    GT              reduce using rule 144 (expression -> expression PLUS expression .)
    LE              reduce using rule 144 (expression -> expression PLUS expression .)
    GE              reduce using rule 144 (expression -> expression PLUS expression .)
    EQ              reduce using rule 144 (expression -> expression PLUS expression .)
    NE              reduce using rule 144 (expression -> expression PLUS expression .)
    EQL             reduce using rule 144 (expression -> expression PLUS expression .)
    NEL             reduce using rule 144 (expression -> expression PLUS expression .)
    AND             reduce using rule 144 (expression -> expression PLUS expression .)
    XOR             reduce using rule 144 (expression -> expression PLUS expression .)
    XNOR            reduce using rule 144 (expression -> expression PLUS expression .)
    OR              reduce using rule 144 (expression -> expression PLUS expression .)
    LAND            reduce using rule 144 (expression -> expression PLUS expression .)
    LOR             reduce using rule 144 (expression -> expression PLUS expression .)
    COND            reduce using rule 144 (expression -> expression PLUS expression .)
    RPAREN          reduce using rule 144 (expression -> expression PLUS expression .)
    LBRACE          reduce using rule 144 (expression -> expression PLUS expression .)
    RBRACE          reduce using rule 144 (expression -> expression PLUS expression .)
    COMMA           reduce using rule 144 (expression -> expression PLUS expression .)
    COLON           reduce using rule 144 (expression -> expression PLUS expression .)
    SEMICOLON       reduce using rule 144 (expression -> expression PLUS expression .)
    PLUSCOLON       reduce using rule 144 (expression -> expression PLUS expression .)
    MINUSCOLON      reduce using rule 144 (expression -> expression PLUS expression .)
    RBRACKET        reduce using rule 144 (expression -> expression PLUS expression .)
    POWER           shift and go to state 236
    TIMES           shift and go to state 398
    DIVIDE          shift and go to state 237
    MOD             shift and go to state 238

  ! TIMES           [ reduce using rule 144 (expression -> expression PLUS expression .) ]
  ! POWER           [ reduce using rule 144 (expression -> expression PLUS expression .) ]
  ! DIVIDE          [ reduce using rule 144 (expression -> expression PLUS expression .) ]
  ! MOD             [ reduce using rule 144 (expression -> expression PLUS expression .) ]
  ! PLUS            [ shift and go to state 239 ]
  ! MINUS           [ shift and go to state 240 ]
  ! LSHIFT          [ shift and go to state 241 ]
  ! RSHIFT          [ shift and go to state 242 ]
  ! LSHIFTA         [ shift and go to state 243 ]
  ! RSHIFTA         [ shift and go to state 244 ]
  ! LT              [ shift and go to state 245 ]
  ! GT              [ shift and go to state 246 ]
  ! LE              [ shift and go to state 247 ]
  ! GE              [ shift and go to state 248 ]
  ! EQ              [ shift and go to state 249 ]
  ! NE              [ shift and go to state 250 ]
  ! EQL             [ shift and go to state 251 ]
  ! NEL             [ shift and go to state 252 ]
  ! AND             [ shift and go to state 253 ]
  ! XOR             [ shift and go to state 254 ]
  ! XNOR            [ shift and go to state 255 ]
  ! OR              [ shift and go to state 256 ]
  ! LAND            [ shift and go to state 257 ]
  ! LOR             [ shift and go to state 258 ]
  ! COND            [ shift and go to state 259 ]


state 405

    (145) expression -> expression MINUS expression .
    (140) expression -> expression . POWER expression
    (141) expression -> expression . TIMES expression
    (142) expression -> expression . DIVIDE expression
    (143) expression -> expression . MOD expression
    (144) expression -> expression . PLUS expression
    (145) expression -> expression . MINUS expression
    (146) expression -> expression . LSHIFT expression
    (147) expression -> expression . RSHIFT expression
    (148) expression -> expression . LSHIFTA expression
    (149) expression -> expression . RSHIFTA expression
    (150) expression -> expression . LT expression
    (151) expression -> expression . GT expression
    (152) expression -> expression . LE expression
    (153) expression -> expression . GE expression
    (154) expression -> expression . EQ expression
    (155) expression -> expression . NE expression
    (156) expression -> expression . EQL expression
    (157) expression -> expression . NEL expression
    (158) expression -> expression . AND expression
    (159) expression -> expression . XOR expression
    (160) expression -> expression . XNOR expression
    (161) expression -> expression . OR expression
    (162) expression -> expression . LAND expression
    (163) expression -> expression . LOR expression
    (164) expression -> expression . COND expression COLON expression

    PLUS            reduce using rule 145 (expression -> expression MINUS expression .)
    MINUS           reduce using rule 145 (expression -> expression MINUS expression .)
    LSHIFT          reduce using rule 145 (expression -> expression MINUS expression .)
    RSHIFT          reduce using rule 145 (expression -> expression MINUS expression .)
    LSHIFTA         reduce using rule 145 (expression -> expression MINUS expression .)
    RSHIFTA         reduce using rule 145 (expression -> expression MINUS expression .)
    LT              reduce using rule 145 (expression -> expression MINUS expression .)
    GT              reduce using rule 145 (expression -> expression MINUS expression .)
    LE              reduce using rule 145 (expression -> expression MINUS expression .)
    GE              reduce using rule 145 (expression -> expression MINUS expression .)
    EQ              reduce using rule 145 (expression -> expression MINUS expression .)
    NE              reduce using rule 145 (expression -> expression MINUS expression .)
    EQL             reduce using rule 145 (expression -> expression MINUS expression .)
    NEL             reduce using rule 145 (expression -> expression MINUS expression .)
    AND             reduce using rule 145 (expression -> expression MINUS expression .)
    XOR             reduce using rule 145 (expression -> expression MINUS expression .)
    XNOR            reduce using rule 145 (expression -> expression MINUS expression .)
    OR              reduce using rule 145 (expression -> expression MINUS expression .)
    LAND            reduce using rule 145 (expression -> expression MINUS expression .)
    LOR             reduce using rule 145 (expression -> expression MINUS expression .)
    COND            reduce using rule 145 (expression -> expression MINUS expression .)
    RPAREN          reduce using rule 145 (expression -> expression MINUS expression .)
    LBRACE          reduce using rule 145 (expression -> expression MINUS expression .)
    RBRACE          reduce using rule 145 (expression -> expression MINUS expression .)
    COMMA           reduce using rule 145 (expression -> expression MINUS expression .)
    COLON           reduce using rule 145 (expression -> expression MINUS expression .)
    SEMICOLON       reduce using rule 145 (expression -> expression MINUS expression .)
    PLUSCOLON       reduce using rule 145 (expression -> expression MINUS expression .)
    MINUSCOLON      reduce using rule 145 (expression -> expression MINUS expression .)
    RBRACKET        reduce using rule 145 (expression -> expression MINUS expression .)
    POWER           shift and go to state 236
    TIMES           shift and go to state 398
    DIVIDE          shift and go to state 237
    MOD             shift and go to state 238

  ! TIMES           [ reduce using rule 145 (expression -> expression MINUS expression .) ]
  ! POWER           [ reduce using rule 145 (expression -> expression MINUS expression .) ]
  ! DIVIDE          [ reduce using rule 145 (expression -> expression MINUS expression .) ]
  ! MOD             [ reduce using rule 145 (expression -> expression MINUS expression .) ]
  ! PLUS            [ shift and go to state 239 ]
  ! MINUS           [ shift and go to state 240 ]
  ! LSHIFT          [ shift and go to state 241 ]
  ! RSHIFT          [ shift and go to state 242 ]
  ! LSHIFTA         [ shift and go to state 243 ]
  ! RSHIFTA         [ shift and go to state 244 ]
  ! LT              [ shift and go to state 245 ]
  ! GT              [ shift and go to state 246 ]
  ! LE              [ shift and go to state 247 ]
  ! GE              [ shift and go to state 248 ]
  ! EQ              [ shift and go to state 249 ]
  ! NE              [ shift and go to state 250 ]
  ! EQL             [ shift and go to state 251 ]
  ! NEL             [ shift and go to state 252 ]
  ! AND             [ shift and go to state 253 ]
  ! XOR             [ shift and go to state 254 ]
  ! XNOR            [ shift and go to state 255 ]
  ! OR              [ shift and go to state 256 ]
  ! LAND            [ shift and go to state 257 ]
  ! LOR             [ shift and go to state 258 ]
  ! COND            [ shift and go to state 259 ]


state 406

    (146) expression -> expression LSHIFT expression .
    (140) expression -> expression . POWER expression
    (141) expression -> expression . TIMES expression
    (142) expression -> expression . DIVIDE expression
    (143) expression -> expression . MOD expression
    (144) expression -> expression . PLUS expression
    (145) expression -> expression . MINUS expression
    (146) expression -> expression . LSHIFT expression
    (147) expression -> expression . RSHIFT expression
    (148) expression -> expression . LSHIFTA expression
    (149) expression -> expression . RSHIFTA expression
    (150) expression -> expression . LT expression
    (151) expression -> expression . GT expression
    (152) expression -> expression . LE expression
    (153) expression -> expression . GE expression
    (154) expression -> expression . EQ expression
    (155) expression -> expression . NE expression
    (156) expression -> expression . EQL expression
    (157) expression -> expression . NEL expression
    (158) expression -> expression . AND expression
    (159) expression -> expression . XOR expression
    (160) expression -> expression . XNOR expression
    (161) expression -> expression . OR expression
    (162) expression -> expression . LAND expression
    (163) expression -> expression . LOR expression
    (164) expression -> expression . COND expression COLON expression

    LSHIFT          reduce using rule 146 (expression -> expression LSHIFT expression .)
    RSHIFT          reduce using rule 146 (expression -> expression LSHIFT expression .)
    LSHIFTA         reduce using rule 146 (expression -> expression LSHIFT expression .)
    RSHIFTA         reduce using rule 146 (expression -> expression LSHIFT expression .)
    LT              reduce using rule 146 (expression -> expression LSHIFT expression .)
    GT              reduce using rule 146 (expression -> expression LSHIFT expression .)
    LE              reduce using rule 146 (expression -> expression LSHIFT expression .)
    GE              reduce using rule 146 (expression -> expression LSHIFT expression .)
    EQ              reduce using rule 146 (expression -> expression LSHIFT expression .)
    NE              reduce using rule 146 (expression -> expression LSHIFT expression .)
    EQL             reduce using rule 146 (expression -> expression LSHIFT expression .)
    NEL             reduce using rule 146 (expression -> expression LSHIFT expression .)
    AND             reduce using rule 146 (expression -> expression LSHIFT expression .)
    XOR             reduce using rule 146 (expression -> expression LSHIFT expression .)
    XNOR            reduce using rule 146 (expression -> expression LSHIFT expression .)
    OR              reduce using rule 146 (expression -> expression LSHIFT expression .)
    LAND            reduce using rule 146 (expression -> expression LSHIFT expression .)
    LOR             reduce using rule 146 (expression -> expression LSHIFT expression .)
    COND            reduce using rule 146 (expression -> expression LSHIFT expression .)
    RPAREN          reduce using rule 146 (expression -> expression LSHIFT expression .)
    LBRACE          reduce using rule 146 (expression -> expression LSHIFT expression .)
    RBRACE          reduce using rule 146 (expression -> expression LSHIFT expression .)
    COMMA           reduce using rule 146 (expression -> expression LSHIFT expression .)
    COLON           reduce using rule 146 (expression -> expression LSHIFT expression .)
    SEMICOLON       reduce using rule 146 (expression -> expression LSHIFT expression .)
    PLUSCOLON       reduce using rule 146 (expression -> expression LSHIFT expression .)
    MINUSCOLON      reduce using rule 146 (expression -> expression LSHIFT expression .)
    RBRACKET        reduce using rule 146 (expression -> expression LSHIFT expression .)
    POWER           shift and go to state 236
    TIMES           shift and go to state 398
    DIVIDE          shift and go to state 237
    MOD             shift and go to state 238
    PLUS            shift and go to state 239
    MINUS           shift and go to state 240

  ! TIMES           [ reduce using rule 146 (expression -> expression LSHIFT expression .) ]
  ! POWER           [ reduce using rule 146 (expression -> expression LSHIFT expression .) ]
  ! DIVIDE          [ reduce using rule 146 (expression -> expression LSHIFT expression .) ]
  ! MOD             [ reduce using rule 146 (expression -> expression LSHIFT expression .) ]
  ! PLUS            [ reduce using rule 146 (expression -> expression LSHIFT expression .) ]
  ! MINUS           [ reduce using rule 146 (expression -> expression LSHIFT expression .) ]
  ! LSHIFT          [ shift and go to state 241 ]
  ! RSHIFT          [ shift and go to state 242 ]
  ! LSHIFTA         [ shift and go to state 243 ]
  ! RSHIFTA         [ shift and go to state 244 ]
  ! LT              [ shift and go to state 245 ]
  ! GT              [ shift and go to state 246 ]
  ! LE              [ shift and go to state 247 ]
  ! GE              [ shift and go to state 248 ]
  ! EQ              [ shift and go to state 249 ]
  ! NE              [ shift and go to state 250 ]
  ! EQL             [ shift and go to state 251 ]
  ! NEL             [ shift and go to state 252 ]
  ! AND             [ shift and go to state 253 ]
  ! XOR             [ shift and go to state 254 ]
  ! XNOR            [ shift and go to state 255 ]
  ! OR              [ shift and go to state 256 ]
  ! LAND            [ shift and go to state 257 ]
  ! LOR             [ shift and go to state 258 ]
  ! COND            [ shift and go to state 259 ]


state 407

    (147) expression -> expression RSHIFT expression .
    (140) expression -> expression . POWER expression
    (141) expression -> expression . TIMES expression
    (142) expression -> expression . DIVIDE expression
    (143) expression -> expression . MOD expression
    (144) expression -> expression . PLUS expression
    (145) expression -> expression . MINUS expression
    (146) expression -> expression . LSHIFT expression
    (147) expression -> expression . RSHIFT expression
    (148) expression -> expression . LSHIFTA expression
    (149) expression -> expression . RSHIFTA expression
    (150) expression -> expression . LT expression
    (151) expression -> expression . GT expression
    (152) expression -> expression . LE expression
    (153) expression -> expression . GE expression
    (154) expression -> expression . EQ expression
    (155) expression -> expression . NE expression
    (156) expression -> expression . EQL expression
    (157) expression -> expression . NEL expression
    (158) expression -> expression . AND expression
    (159) expression -> expression . XOR expression
    (160) expression -> expression . XNOR expression
    (161) expression -> expression . OR expression
    (162) expression -> expression . LAND expression
    (163) expression -> expression . LOR expression
    (164) expression -> expression . COND expression COLON expression

    LSHIFT          reduce using rule 147 (expression -> expression RSHIFT expression .)
    RSHIFT          reduce using rule 147 (expression -> expression RSHIFT expression .)
    LSHIFTA         reduce using rule 147 (expression -> expression RSHIFT expression .)
    RSHIFTA         reduce using rule 147 (expression -> expression RSHIFT expression .)
    LT              reduce using rule 147 (expression -> expression RSHIFT expression .)
    GT              reduce using rule 147 (expression -> expression RSHIFT expression .)
    LE              reduce using rule 147 (expression -> expression RSHIFT expression .)
    GE              reduce using rule 147 (expression -> expression RSHIFT expression .)
    EQ              reduce using rule 147 (expression -> expression RSHIFT expression .)
    NE              reduce using rule 147 (expression -> expression RSHIFT expression .)
    EQL             reduce using rule 147 (expression -> expression RSHIFT expression .)
    NEL             reduce using rule 147 (expression -> expression RSHIFT expression .)
    AND             reduce using rule 147 (expression -> expression RSHIFT expression .)
    XOR             reduce using rule 147 (expression -> expression RSHIFT expression .)
    XNOR            reduce using rule 147 (expression -> expression RSHIFT expression .)
    OR              reduce using rule 147 (expression -> expression RSHIFT expression .)
    LAND            reduce using rule 147 (expression -> expression RSHIFT expression .)
    LOR             reduce using rule 147 (expression -> expression RSHIFT expression .)
    COND            reduce using rule 147 (expression -> expression RSHIFT expression .)
    RPAREN          reduce using rule 147 (expression -> expression RSHIFT expression .)
    LBRACE          reduce using rule 147 (expression -> expression RSHIFT expression .)
    RBRACE          reduce using rule 147 (expression -> expression RSHIFT expression .)
    COMMA           reduce using rule 147 (expression -> expression RSHIFT expression .)
    COLON           reduce using rule 147 (expression -> expression RSHIFT expression .)
    SEMICOLON       reduce using rule 147 (expression -> expression RSHIFT expression .)
    PLUSCOLON       reduce using rule 147 (expression -> expression RSHIFT expression .)
    MINUSCOLON      reduce using rule 147 (expression -> expression RSHIFT expression .)
    RBRACKET        reduce using rule 147 (expression -> expression RSHIFT expression .)
    POWER           shift and go to state 236
    TIMES           shift and go to state 398
    DIVIDE          shift and go to state 237
    MOD             shift and go to state 238
    PLUS            shift and go to state 239
    MINUS           shift and go to state 240

  ! TIMES           [ reduce using rule 147 (expression -> expression RSHIFT expression .) ]
  ! POWER           [ reduce using rule 147 (expression -> expression RSHIFT expression .) ]
  ! DIVIDE          [ reduce using rule 147 (expression -> expression RSHIFT expression .) ]
  ! MOD             [ reduce using rule 147 (expression -> expression RSHIFT expression .) ]
  ! PLUS            [ reduce using rule 147 (expression -> expression RSHIFT expression .) ]
  ! MINUS           [ reduce using rule 147 (expression -> expression RSHIFT expression .) ]
  ! LSHIFT          [ shift and go to state 241 ]
  ! RSHIFT          [ shift and go to state 242 ]
  ! LSHIFTA         [ shift and go to state 243 ]
  ! RSHIFTA         [ shift and go to state 244 ]
  ! LT              [ shift and go to state 245 ]
  ! GT              [ shift and go to state 246 ]
  ! LE              [ shift and go to state 247 ]
  ! GE              [ shift and go to state 248 ]
  ! EQ              [ shift and go to state 249 ]
  ! NE              [ shift and go to state 250 ]
  ! EQL             [ shift and go to state 251 ]
  ! NEL             [ shift and go to state 252 ]
  ! AND             [ shift and go to state 253 ]
  ! XOR             [ shift and go to state 254 ]
  ! XNOR            [ shift and go to state 255 ]
  ! OR              [ shift and go to state 256 ]
  ! LAND            [ shift and go to state 257 ]
  ! LOR             [ shift and go to state 258 ]
  ! COND            [ shift and go to state 259 ]


state 408

    (148) expression -> expression LSHIFTA expression .
    (140) expression -> expression . POWER expression
    (141) expression -> expression . TIMES expression
    (142) expression -> expression . DIVIDE expression
    (143) expression -> expression . MOD expression
    (144) expression -> expression . PLUS expression
    (145) expression -> expression . MINUS expression
    (146) expression -> expression . LSHIFT expression
    (147) expression -> expression . RSHIFT expression
    (148) expression -> expression . LSHIFTA expression
    (149) expression -> expression . RSHIFTA expression
    (150) expression -> expression . LT expression
    (151) expression -> expression . GT expression
    (152) expression -> expression . LE expression
    (153) expression -> expression . GE expression
    (154) expression -> expression . EQ expression
    (155) expression -> expression . NE expression
    (156) expression -> expression . EQL expression
    (157) expression -> expression . NEL expression
    (158) expression -> expression . AND expression
    (159) expression -> expression . XOR expression
    (160) expression -> expression . XNOR expression
    (161) expression -> expression . OR expression
    (162) expression -> expression . LAND expression
    (163) expression -> expression . LOR expression
    (164) expression -> expression . COND expression COLON expression

    LSHIFT          reduce using rule 148 (expression -> expression LSHIFTA expression .)
    RSHIFT          reduce using rule 148 (expression -> expression LSHIFTA expression .)
    LSHIFTA         reduce using rule 148 (expression -> expression LSHIFTA expression .)
    RSHIFTA         reduce using rule 148 (expression -> expression LSHIFTA expression .)
    LT              reduce using rule 148 (expression -> expression LSHIFTA expression .)
    GT              reduce using rule 148 (expression -> expression LSHIFTA expression .)
    LE              reduce using rule 148 (expression -> expression LSHIFTA expression .)
    GE              reduce using rule 148 (expression -> expression LSHIFTA expression .)
    EQ              reduce using rule 148 (expression -> expression LSHIFTA expression .)
    NE              reduce using rule 148 (expression -> expression LSHIFTA expression .)
    EQL             reduce using rule 148 (expression -> expression LSHIFTA expression .)
    NEL             reduce using rule 148 (expression -> expression LSHIFTA expression .)
    AND             reduce using rule 148 (expression -> expression LSHIFTA expression .)
    XOR             reduce using rule 148 (expression -> expression LSHIFTA expression .)
    XNOR            reduce using rule 148 (expression -> expression LSHIFTA expression .)
    OR              reduce using rule 148 (expression -> expression LSHIFTA expression .)
    LAND            reduce using rule 148 (expression -> expression LSHIFTA expression .)
    LOR             reduce using rule 148 (expression -> expression LSHIFTA expression .)
    COND            reduce using rule 148 (expression -> expression LSHIFTA expression .)
    RPAREN          reduce using rule 148 (expression -> expression LSHIFTA expression .)
    LBRACE          reduce using rule 148 (expression -> expression LSHIFTA expression .)
    RBRACE          reduce using rule 148 (expression -> expression LSHIFTA expression .)
    COMMA           reduce using rule 148 (expression -> expression LSHIFTA expression .)
    COLON           reduce using rule 148 (expression -> expression LSHIFTA expression .)
    SEMICOLON       reduce using rule 148 (expression -> expression LSHIFTA expression .)
    PLUSCOLON       reduce using rule 148 (expression -> expression LSHIFTA expression .)
    MINUSCOLON      reduce using rule 148 (expression -> expression LSHIFTA expression .)
    RBRACKET        reduce using rule 148 (expression -> expression LSHIFTA expression .)
    POWER           shift and go to state 236
    TIMES           shift and go to state 398
    DIVIDE          shift and go to state 237
    MOD             shift and go to state 238
    PLUS            shift and go to state 239
    MINUS           shift and go to state 240

  ! TIMES           [ reduce using rule 148 (expression -> expression LSHIFTA expression .) ]
  ! POWER           [ reduce using rule 148 (expression -> expression LSHIFTA expression .) ]
  ! DIVIDE          [ reduce using rule 148 (expression -> expression LSHIFTA expression .) ]
  ! MOD             [ reduce using rule 148 (expression -> expression LSHIFTA expression .) ]
  ! PLUS            [ reduce using rule 148 (expression -> expression LSHIFTA expression .) ]
  ! MINUS           [ reduce using rule 148 (expression -> expression LSHIFTA expression .) ]
  ! LSHIFT          [ shift and go to state 241 ]
  ! RSHIFT          [ shift and go to state 242 ]
  ! LSHIFTA         [ shift and go to state 243 ]
  ! RSHIFTA         [ shift and go to state 244 ]
  ! LT              [ shift and go to state 245 ]
  ! GT              [ shift and go to state 246 ]
  ! LE              [ shift and go to state 247 ]
  ! GE              [ shift and go to state 248 ]
  ! EQ              [ shift and go to state 249 ]
  ! NE              [ shift and go to state 250 ]
  ! EQL             [ shift and go to state 251 ]
  ! NEL             [ shift and go to state 252 ]
  ! AND             [ shift and go to state 253 ]
  ! XOR             [ shift and go to state 254 ]
  ! XNOR            [ shift and go to state 255 ]
  ! OR              [ shift and go to state 256 ]
  ! LAND            [ shift and go to state 257 ]
  ! LOR             [ shift and go to state 258 ]
  ! COND            [ shift and go to state 259 ]


state 409

    (149) expression -> expression RSHIFTA expression .
    (140) expression -> expression . POWER expression
    (141) expression -> expression . TIMES expression
    (142) expression -> expression . DIVIDE expression
    (143) expression -> expression . MOD expression
    (144) expression -> expression . PLUS expression
    (145) expression -> expression . MINUS expression
    (146) expression -> expression . LSHIFT expression
    (147) expression -> expression . RSHIFT expression
    (148) expression -> expression . LSHIFTA expression
    (149) expression -> expression . RSHIFTA expression
    (150) expression -> expression . LT expression
    (151) expression -> expression . GT expression
    (152) expression -> expression . LE expression
    (153) expression -> expression . GE expression
    (154) expression -> expression . EQ expression
    (155) expression -> expression . NE expression
    (156) expression -> expression . EQL expression
    (157) expression -> expression . NEL expression
    (158) expression -> expression . AND expression
    (159) expression -> expression . XOR expression
    (160) expression -> expression . XNOR expression
    (161) expression -> expression . OR expression
    (162) expression -> expression . LAND expression
    (163) expression -> expression . LOR expression
    (164) expression -> expression . COND expression COLON expression

    LSHIFT          reduce using rule 149 (expression -> expression RSHIFTA expression .)
    RSHIFT          reduce using rule 149 (expression -> expression RSHIFTA expression .)
    LSHIFTA         reduce using rule 149 (expression -> expression RSHIFTA expression .)
    RSHIFTA         reduce using rule 149 (expression -> expression RSHIFTA expression .)
    LT              reduce using rule 149 (expression -> expression RSHIFTA expression .)
    GT              reduce using rule 149 (expression -> expression RSHIFTA expression .)
    LE              reduce using rule 149 (expression -> expression RSHIFTA expression .)
    GE              reduce using rule 149 (expression -> expression RSHIFTA expression .)
    EQ              reduce using rule 149 (expression -> expression RSHIFTA expression .)
    NE              reduce using rule 149 (expression -> expression RSHIFTA expression .)
    EQL             reduce using rule 149 (expression -> expression RSHIFTA expression .)
    NEL             reduce using rule 149 (expression -> expression RSHIFTA expression .)
    AND             reduce using rule 149 (expression -> expression RSHIFTA expression .)
    XOR             reduce using rule 149 (expression -> expression RSHIFTA expression .)
    XNOR            reduce using rule 149 (expression -> expression RSHIFTA expression .)
    OR              reduce using rule 149 (expression -> expression RSHIFTA expression .)
    LAND            reduce using rule 149 (expression -> expression RSHIFTA expression .)
    LOR             reduce using rule 149 (expression -> expression RSHIFTA expression .)
    COND            reduce using rule 149 (expression -> expression RSHIFTA expression .)
    RPAREN          reduce using rule 149 (expression -> expression RSHIFTA expression .)
    LBRACE          reduce using rule 149 (expression -> expression RSHIFTA expression .)
    RBRACE          reduce using rule 149 (expression -> expression RSHIFTA expression .)
    COMMA           reduce using rule 149 (expression -> expression RSHIFTA expression .)
    COLON           reduce using rule 149 (expression -> expression RSHIFTA expression .)
    SEMICOLON       reduce using rule 149 (expression -> expression RSHIFTA expression .)
    PLUSCOLON       reduce using rule 149 (expression -> expression RSHIFTA expression .)
    MINUSCOLON      reduce using rule 149 (expression -> expression RSHIFTA expression .)
    RBRACKET        reduce using rule 149 (expression -> expression RSHIFTA expression .)
    POWER           shift and go to state 236
    TIMES           shift and go to state 398
    DIVIDE          shift and go to state 237
    MOD             shift and go to state 238
    PLUS            shift and go to state 239
    MINUS           shift and go to state 240

  ! TIMES           [ reduce using rule 149 (expression -> expression RSHIFTA expression .) ]
  ! POWER           [ reduce using rule 149 (expression -> expression RSHIFTA expression .) ]
  ! DIVIDE          [ reduce using rule 149 (expression -> expression RSHIFTA expression .) ]
  ! MOD             [ reduce using rule 149 (expression -> expression RSHIFTA expression .) ]
  ! PLUS            [ reduce using rule 149 (expression -> expression RSHIFTA expression .) ]
  ! MINUS           [ reduce using rule 149 (expression -> expression RSHIFTA expression .) ]
  ! LSHIFT          [ shift and go to state 241 ]
  ! RSHIFT          [ shift and go to state 242 ]
  ! LSHIFTA         [ shift and go to state 243 ]
  ! RSHIFTA         [ shift and go to state 244 ]
  ! LT              [ shift and go to state 245 ]
  ! GT              [ shift and go to state 246 ]
  ! LE              [ shift and go to state 247 ]
  ! GE              [ shift and go to state 248 ]
  ! EQ              [ shift and go to state 249 ]
  ! NE              [ shift and go to state 250 ]
  ! EQL             [ shift and go to state 251 ]
  ! NEL             [ shift and go to state 252 ]
  ! AND             [ shift and go to state 253 ]
  ! XOR             [ shift and go to state 254 ]
  ! XNOR            [ shift and go to state 255 ]
  ! OR              [ shift and go to state 256 ]
  ! LAND            [ shift and go to state 257 ]
  ! LOR             [ shift and go to state 258 ]
  ! COND            [ shift and go to state 259 ]


state 410

    (150) expression -> expression LT expression .
    (140) expression -> expression . POWER expression
    (141) expression -> expression . TIMES expression
    (142) expression -> expression . DIVIDE expression
    (143) expression -> expression . MOD expression
    (144) expression -> expression . PLUS expression
    (145) expression -> expression . MINUS expression
    (146) expression -> expression . LSHIFT expression
    (147) expression -> expression . RSHIFT expression
    (148) expression -> expression . LSHIFTA expression
    (149) expression -> expression . RSHIFTA expression
    (150) expression -> expression . LT expression
    (151) expression -> expression . GT expression
    (152) expression -> expression . LE expression
    (153) expression -> expression . GE expression
    (154) expression -> expression . EQ expression
    (155) expression -> expression . NE expression
    (156) expression -> expression . EQL expression
    (157) expression -> expression . NEL expression
    (158) expression -> expression . AND expression
    (159) expression -> expression . XOR expression
    (160) expression -> expression . XNOR expression
    (161) expression -> expression . OR expression
    (162) expression -> expression . LAND expression
    (163) expression -> expression . LOR expression
    (164) expression -> expression . COND expression COLON expression

    LT              reduce using rule 150 (expression -> expression LT expression .)
    GT              reduce using rule 150 (expression -> expression LT expression .)
    LE              reduce using rule 150 (expression -> expression LT expression .)
    GE              reduce using rule 150 (expression -> expression LT expression .)
    EQ              reduce using rule 150 (expression -> expression LT expression .)
    NE              reduce using rule 150 (expression -> expression LT expression .)
    EQL             reduce using rule 150 (expression -> expression LT expression .)
    NEL             reduce using rule 150 (expression -> expression LT expression .)
    AND             reduce using rule 150 (expression -> expression LT expression .)
    XOR             reduce using rule 150 (expression -> expression LT expression .)
    XNOR            reduce using rule 150 (expression -> expression LT expression .)
    OR              reduce using rule 150 (expression -> expression LT expression .)
    LAND            reduce using rule 150 (expression -> expression LT expression .)
    LOR             reduce using rule 150 (expression -> expression LT expression .)
    COND            reduce using rule 150 (expression -> expression LT expression .)
    RPAREN          reduce using rule 150 (expression -> expression LT expression .)
    LBRACE          reduce using rule 150 (expression -> expression LT expression .)
    RBRACE          reduce using rule 150 (expression -> expression LT expression .)
    COMMA           reduce using rule 150 (expression -> expression LT expression .)
    COLON           reduce using rule 150 (expression -> expression LT expression .)
    SEMICOLON       reduce using rule 150 (expression -> expression LT expression .)
    PLUSCOLON       reduce using rule 150 (expression -> expression LT expression .)
    MINUSCOLON      reduce using rule 150 (expression -> expression LT expression .)
    RBRACKET        reduce using rule 150 (expression -> expression LT expression .)
    POWER           shift and go to state 236
    TIMES           shift and go to state 398
    DIVIDE          shift and go to state 237
    MOD             shift and go to state 238
    PLUS            shift and go to state 239
    MINUS           shift and go to state 240
    LSHIFT          shift and go to state 241
    RSHIFT          shift and go to state 242
    LSHIFTA         shift and go to state 243
    RSHIFTA         shift and go to state 244

  ! TIMES           [ reduce using rule 150 (expression -> expression LT expression .) ]
  ! POWER           [ reduce using rule 150 (expression -> expression LT expression .) ]
  ! DIVIDE          [ reduce using rule 150 (expression -> expression LT expression .) ]
  ! MOD             [ reduce using rule 150 (expression -> expression LT expression .) ]
  ! PLUS            [ reduce using rule 150 (expression -> expression LT expression .) ]
  ! MINUS           [ reduce using rule 150 (expression -> expression LT expression .) ]
  ! LSHIFT          [ reduce using rule 150 (expression -> expression LT expression .) ]
  ! RSHIFT          [ reduce using rule 150 (expression -> expression LT expression .) ]
  ! LSHIFTA         [ reduce using rule 150 (expression -> expression LT expression .) ]
  ! RSHIFTA         [ reduce using rule 150 (expression -> expression LT expression .) ]
  ! LT              [ shift and go to state 245 ]
  ! GT              [ shift and go to state 246 ]
  ! LE              [ shift and go to state 247 ]
  ! GE              [ shift and go to state 248 ]
  ! EQ              [ shift and go to state 249 ]
  ! NE              [ shift and go to state 250 ]
  ! EQL             [ shift and go to state 251 ]
  ! NEL             [ shift and go to state 252 ]
  ! AND             [ shift and go to state 253 ]
  ! XOR             [ shift and go to state 254 ]
  ! XNOR            [ shift and go to state 255 ]
  ! OR              [ shift and go to state 256 ]
  ! LAND            [ shift and go to state 257 ]
  ! LOR             [ shift and go to state 258 ]
  ! COND            [ shift and go to state 259 ]


state 411

    (151) expression -> expression GT expression .
    (140) expression -> expression . POWER expression
    (141) expression -> expression . TIMES expression
    (142) expression -> expression . DIVIDE expression
    (143) expression -> expression . MOD expression
    (144) expression -> expression . PLUS expression
    (145) expression -> expression . MINUS expression
    (146) expression -> expression . LSHIFT expression
    (147) expression -> expression . RSHIFT expression
    (148) expression -> expression . LSHIFTA expression
    (149) expression -> expression . RSHIFTA expression
    (150) expression -> expression . LT expression
    (151) expression -> expression . GT expression
    (152) expression -> expression . LE expression
    (153) expression -> expression . GE expression
    (154) expression -> expression . EQ expression
    (155) expression -> expression . NE expression
    (156) expression -> expression . EQL expression
    (157) expression -> expression . NEL expression
    (158) expression -> expression . AND expression
    (159) expression -> expression . XOR expression
    (160) expression -> expression . XNOR expression
    (161) expression -> expression . OR expression
    (162) expression -> expression . LAND expression
    (163) expression -> expression . LOR expression
    (164) expression -> expression . COND expression COLON expression

    LT              reduce using rule 151 (expression -> expression GT expression .)
    GT              reduce using rule 151 (expression -> expression GT expression .)
    LE              reduce using rule 151 (expression -> expression GT expression .)
    GE              reduce using rule 151 (expression -> expression GT expression .)
    EQ              reduce using rule 151 (expression -> expression GT expression .)
    NE              reduce using rule 151 (expression -> expression GT expression .)
    EQL             reduce using rule 151 (expression -> expression GT expression .)
    NEL             reduce using rule 151 (expression -> expression GT expression .)
    AND             reduce using rule 151 (expression -> expression GT expression .)
    XOR             reduce using rule 151 (expression -> expression GT expression .)
    XNOR            reduce using rule 151 (expression -> expression GT expression .)
    OR              reduce using rule 151 (expression -> expression GT expression .)
    LAND            reduce using rule 151 (expression -> expression GT expression .)
    LOR             reduce using rule 151 (expression -> expression GT expression .)
    COND            reduce using rule 151 (expression -> expression GT expression .)
    RPAREN          reduce using rule 151 (expression -> expression GT expression .)
    LBRACE          reduce using rule 151 (expression -> expression GT expression .)
    RBRACE          reduce using rule 151 (expression -> expression GT expression .)
    COMMA           reduce using rule 151 (expression -> expression GT expression .)
    COLON           reduce using rule 151 (expression -> expression GT expression .)
    SEMICOLON       reduce using rule 151 (expression -> expression GT expression .)
    PLUSCOLON       reduce using rule 151 (expression -> expression GT expression .)
    MINUSCOLON      reduce using rule 151 (expression -> expression GT expression .)
    RBRACKET        reduce using rule 151 (expression -> expression GT expression .)
    POWER           shift and go to state 236
    TIMES           shift and go to state 398
    DIVIDE          shift and go to state 237
    MOD             shift and go to state 238
    PLUS            shift and go to state 239
    MINUS           shift and go to state 240
    LSHIFT          shift and go to state 241
    RSHIFT          shift and go to state 242
    LSHIFTA         shift and go to state 243
    RSHIFTA         shift and go to state 244

  ! TIMES           [ reduce using rule 151 (expression -> expression GT expression .) ]
  ! POWER           [ reduce using rule 151 (expression -> expression GT expression .) ]
  ! DIVIDE          [ reduce using rule 151 (expression -> expression GT expression .) ]
  ! MOD             [ reduce using rule 151 (expression -> expression GT expression .) ]
  ! PLUS            [ reduce using rule 151 (expression -> expression GT expression .) ]
  ! MINUS           [ reduce using rule 151 (expression -> expression GT expression .) ]
  ! LSHIFT          [ reduce using rule 151 (expression -> expression GT expression .) ]
  ! RSHIFT          [ reduce using rule 151 (expression -> expression GT expression .) ]
  ! LSHIFTA         [ reduce using rule 151 (expression -> expression GT expression .) ]
  ! RSHIFTA         [ reduce using rule 151 (expression -> expression GT expression .) ]
  ! LT              [ shift and go to state 245 ]
  ! GT              [ shift and go to state 246 ]
  ! LE              [ shift and go to state 247 ]
  ! GE              [ shift and go to state 248 ]
  ! EQ              [ shift and go to state 249 ]
  ! NE              [ shift and go to state 250 ]
  ! EQL             [ shift and go to state 251 ]
  ! NEL             [ shift and go to state 252 ]
  ! AND             [ shift and go to state 253 ]
  ! XOR             [ shift and go to state 254 ]
  ! XNOR            [ shift and go to state 255 ]
  ! OR              [ shift and go to state 256 ]
  ! LAND            [ shift and go to state 257 ]
  ! LOR             [ shift and go to state 258 ]
  ! COND            [ shift and go to state 259 ]


state 412

    (152) expression -> expression LE expression .
    (140) expression -> expression . POWER expression
    (141) expression -> expression . TIMES expression
    (142) expression -> expression . DIVIDE expression
    (143) expression -> expression . MOD expression
    (144) expression -> expression . PLUS expression
    (145) expression -> expression . MINUS expression
    (146) expression -> expression . LSHIFT expression
    (147) expression -> expression . RSHIFT expression
    (148) expression -> expression . LSHIFTA expression
    (149) expression -> expression . RSHIFTA expression
    (150) expression -> expression . LT expression
    (151) expression -> expression . GT expression
    (152) expression -> expression . LE expression
    (153) expression -> expression . GE expression
    (154) expression -> expression . EQ expression
    (155) expression -> expression . NE expression
    (156) expression -> expression . EQL expression
    (157) expression -> expression . NEL expression
    (158) expression -> expression . AND expression
    (159) expression -> expression . XOR expression
    (160) expression -> expression . XNOR expression
    (161) expression -> expression . OR expression
    (162) expression -> expression . LAND expression
    (163) expression -> expression . LOR expression
    (164) expression -> expression . COND expression COLON expression

    LT              reduce using rule 152 (expression -> expression LE expression .)
    GT              reduce using rule 152 (expression -> expression LE expression .)
    LE              reduce using rule 152 (expression -> expression LE expression .)
    GE              reduce using rule 152 (expression -> expression LE expression .)
    EQ              reduce using rule 152 (expression -> expression LE expression .)
    NE              reduce using rule 152 (expression -> expression LE expression .)
    EQL             reduce using rule 152 (expression -> expression LE expression .)
    NEL             reduce using rule 152 (expression -> expression LE expression .)
    AND             reduce using rule 152 (expression -> expression LE expression .)
    XOR             reduce using rule 152 (expression -> expression LE expression .)
    XNOR            reduce using rule 152 (expression -> expression LE expression .)
    OR              reduce using rule 152 (expression -> expression LE expression .)
    LAND            reduce using rule 152 (expression -> expression LE expression .)
    LOR             reduce using rule 152 (expression -> expression LE expression .)
    COND            reduce using rule 152 (expression -> expression LE expression .)
    RPAREN          reduce using rule 152 (expression -> expression LE expression .)
    LBRACE          reduce using rule 152 (expression -> expression LE expression .)
    RBRACE          reduce using rule 152 (expression -> expression LE expression .)
    COMMA           reduce using rule 152 (expression -> expression LE expression .)
    COLON           reduce using rule 152 (expression -> expression LE expression .)
    SEMICOLON       reduce using rule 152 (expression -> expression LE expression .)
    PLUSCOLON       reduce using rule 152 (expression -> expression LE expression .)
    MINUSCOLON      reduce using rule 152 (expression -> expression LE expression .)
    RBRACKET        reduce using rule 152 (expression -> expression LE expression .)
    POWER           shift and go to state 236
    TIMES           shift and go to state 398
    DIVIDE          shift and go to state 237
    MOD             shift and go to state 238
    PLUS            shift and go to state 239
    MINUS           shift and go to state 240
    LSHIFT          shift and go to state 241
    RSHIFT          shift and go to state 242
    LSHIFTA         shift and go to state 243
    RSHIFTA         shift and go to state 244

  ! TIMES           [ reduce using rule 152 (expression -> expression LE expression .) ]
  ! POWER           [ reduce using rule 152 (expression -> expression LE expression .) ]
  ! DIVIDE          [ reduce using rule 152 (expression -> expression LE expression .) ]
  ! MOD             [ reduce using rule 152 (expression -> expression LE expression .) ]
  ! PLUS            [ reduce using rule 152 (expression -> expression LE expression .) ]
  ! MINUS           [ reduce using rule 152 (expression -> expression LE expression .) ]
  ! LSHIFT          [ reduce using rule 152 (expression -> expression LE expression .) ]
  ! RSHIFT          [ reduce using rule 152 (expression -> expression LE expression .) ]
  ! LSHIFTA         [ reduce using rule 152 (expression -> expression LE expression .) ]
  ! RSHIFTA         [ reduce using rule 152 (expression -> expression LE expression .) ]
  ! LT              [ shift and go to state 245 ]
  ! GT              [ shift and go to state 246 ]
  ! LE              [ shift and go to state 247 ]
  ! GE              [ shift and go to state 248 ]
  ! EQ              [ shift and go to state 249 ]
  ! NE              [ shift and go to state 250 ]
  ! EQL             [ shift and go to state 251 ]
  ! NEL             [ shift and go to state 252 ]
  ! AND             [ shift and go to state 253 ]
  ! XOR             [ shift and go to state 254 ]
  ! XNOR            [ shift and go to state 255 ]
  ! OR              [ shift and go to state 256 ]
  ! LAND            [ shift and go to state 257 ]
  ! LOR             [ shift and go to state 258 ]
  ! COND            [ shift and go to state 259 ]


state 413

    (153) expression -> expression GE expression .
    (140) expression -> expression . POWER expression
    (141) expression -> expression . TIMES expression
    (142) expression -> expression . DIVIDE expression
    (143) expression -> expression . MOD expression
    (144) expression -> expression . PLUS expression
    (145) expression -> expression . MINUS expression
    (146) expression -> expression . LSHIFT expression
    (147) expression -> expression . RSHIFT expression
    (148) expression -> expression . LSHIFTA expression
    (149) expression -> expression . RSHIFTA expression
    (150) expression -> expression . LT expression
    (151) expression -> expression . GT expression
    (152) expression -> expression . LE expression
    (153) expression -> expression . GE expression
    (154) expression -> expression . EQ expression
    (155) expression -> expression . NE expression
    (156) expression -> expression . EQL expression
    (157) expression -> expression . NEL expression
    (158) expression -> expression . AND expression
    (159) expression -> expression . XOR expression
    (160) expression -> expression . XNOR expression
    (161) expression -> expression . OR expression
    (162) expression -> expression . LAND expression
    (163) expression -> expression . LOR expression
    (164) expression -> expression . COND expression COLON expression

    LT              reduce using rule 153 (expression -> expression GE expression .)
    GT              reduce using rule 153 (expression -> expression GE expression .)
    LE              reduce using rule 153 (expression -> expression GE expression .)
    GE              reduce using rule 153 (expression -> expression GE expression .)
    EQ              reduce using rule 153 (expression -> expression GE expression .)
    NE              reduce using rule 153 (expression -> expression GE expression .)
    EQL             reduce using rule 153 (expression -> expression GE expression .)
    NEL             reduce using rule 153 (expression -> expression GE expression .)
    AND             reduce using rule 153 (expression -> expression GE expression .)
    XOR             reduce using rule 153 (expression -> expression GE expression .)
    XNOR            reduce using rule 153 (expression -> expression GE expression .)
    OR              reduce using rule 153 (expression -> expression GE expression .)
    LAND            reduce using rule 153 (expression -> expression GE expression .)
    LOR             reduce using rule 153 (expression -> expression GE expression .)
    COND            reduce using rule 153 (expression -> expression GE expression .)
    RPAREN          reduce using rule 153 (expression -> expression GE expression .)
    LBRACE          reduce using rule 153 (expression -> expression GE expression .)
    RBRACE          reduce using rule 153 (expression -> expression GE expression .)
    COMMA           reduce using rule 153 (expression -> expression GE expression .)
    COLON           reduce using rule 153 (expression -> expression GE expression .)
    SEMICOLON       reduce using rule 153 (expression -> expression GE expression .)
    PLUSCOLON       reduce using rule 153 (expression -> expression GE expression .)
    MINUSCOLON      reduce using rule 153 (expression -> expression GE expression .)
    RBRACKET        reduce using rule 153 (expression -> expression GE expression .)
    POWER           shift and go to state 236
    TIMES           shift and go to state 398
    DIVIDE          shift and go to state 237
    MOD             shift and go to state 238
    PLUS            shift and go to state 239
    MINUS           shift and go to state 240
    LSHIFT          shift and go to state 241
    RSHIFT          shift and go to state 242
    LSHIFTA         shift and go to state 243
    RSHIFTA         shift and go to state 244

  ! TIMES           [ reduce using rule 153 (expression -> expression GE expression .) ]
  ! POWER           [ reduce using rule 153 (expression -> expression GE expression .) ]
  ! DIVIDE          [ reduce using rule 153 (expression -> expression GE expression .) ]
  ! MOD             [ reduce using rule 153 (expression -> expression GE expression .) ]
  ! PLUS            [ reduce using rule 153 (expression -> expression GE expression .) ]
  ! MINUS           [ reduce using rule 153 (expression -> expression GE expression .) ]
  ! LSHIFT          [ reduce using rule 153 (expression -> expression GE expression .) ]
  ! RSHIFT          [ reduce using rule 153 (expression -> expression GE expression .) ]
  ! LSHIFTA         [ reduce using rule 153 (expression -> expression GE expression .) ]
  ! RSHIFTA         [ reduce using rule 153 (expression -> expression GE expression .) ]
  ! LT              [ shift and go to state 245 ]
  ! GT              [ shift and go to state 246 ]
  ! LE              [ shift and go to state 247 ]
  ! GE              [ shift and go to state 248 ]
  ! EQ              [ shift and go to state 249 ]
  ! NE              [ shift and go to state 250 ]
  ! EQL             [ shift and go to state 251 ]
  ! NEL             [ shift and go to state 252 ]
  ! AND             [ shift and go to state 253 ]
  ! XOR             [ shift and go to state 254 ]
  ! XNOR            [ shift and go to state 255 ]
  ! OR              [ shift and go to state 256 ]
  ! LAND            [ shift and go to state 257 ]
  ! LOR             [ shift and go to state 258 ]
  ! COND            [ shift and go to state 259 ]


state 414

    (154) expression -> expression EQ expression .
    (140) expression -> expression . POWER expression
    (141) expression -> expression . TIMES expression
    (142) expression -> expression . DIVIDE expression
    (143) expression -> expression . MOD expression
    (144) expression -> expression . PLUS expression
    (145) expression -> expression . MINUS expression
    (146) expression -> expression . LSHIFT expression
    (147) expression -> expression . RSHIFT expression
    (148) expression -> expression . LSHIFTA expression
    (149) expression -> expression . RSHIFTA expression
    (150) expression -> expression . LT expression
    (151) expression -> expression . GT expression
    (152) expression -> expression . LE expression
    (153) expression -> expression . GE expression
    (154) expression -> expression . EQ expression
    (155) expression -> expression . NE expression
    (156) expression -> expression . EQL expression
    (157) expression -> expression . NEL expression
    (158) expression -> expression . AND expression
    (159) expression -> expression . XOR expression
    (160) expression -> expression . XNOR expression
    (161) expression -> expression . OR expression
    (162) expression -> expression . LAND expression
    (163) expression -> expression . LOR expression
    (164) expression -> expression . COND expression COLON expression

    EQ              reduce using rule 154 (expression -> expression EQ expression .)
    NE              reduce using rule 154 (expression -> expression EQ expression .)
    EQL             reduce using rule 154 (expression -> expression EQ expression .)
    NEL             reduce using rule 154 (expression -> expression EQ expression .)
    AND             reduce using rule 154 (expression -> expression EQ expression .)
    XOR             reduce using rule 154 (expression -> expression EQ expression .)
    XNOR            reduce using rule 154 (expression -> expression EQ expression .)
    OR              reduce using rule 154 (expression -> expression EQ expression .)
    LAND            reduce using rule 154 (expression -> expression EQ expression .)
    LOR             reduce using rule 154 (expression -> expression EQ expression .)
    COND            reduce using rule 154 (expression -> expression EQ expression .)
    RPAREN          reduce using rule 154 (expression -> expression EQ expression .)
    LBRACE          reduce using rule 154 (expression -> expression EQ expression .)
    RBRACE          reduce using rule 154 (expression -> expression EQ expression .)
    COMMA           reduce using rule 154 (expression -> expression EQ expression .)
    COLON           reduce using rule 154 (expression -> expression EQ expression .)
    SEMICOLON       reduce using rule 154 (expression -> expression EQ expression .)
    PLUSCOLON       reduce using rule 154 (expression -> expression EQ expression .)
    MINUSCOLON      reduce using rule 154 (expression -> expression EQ expression .)
    RBRACKET        reduce using rule 154 (expression -> expression EQ expression .)
    POWER           shift and go to state 236
    TIMES           shift and go to state 398
    DIVIDE          shift and go to state 237
    MOD             shift and go to state 238
    PLUS            shift and go to state 239
    MINUS           shift and go to state 240
    LSHIFT          shift and go to state 241
    RSHIFT          shift and go to state 242
    LSHIFTA         shift and go to state 243
    RSHIFTA         shift and go to state 244
    LT              shift and go to state 245
    GT              shift and go to state 246
    LE              shift and go to state 247
    GE              shift and go to state 248

  ! TIMES           [ reduce using rule 154 (expression -> expression EQ expression .) ]
  ! POWER           [ reduce using rule 154 (expression -> expression EQ expression .) ]
  ! DIVIDE          [ reduce using rule 154 (expression -> expression EQ expression .) ]
  ! MOD             [ reduce using rule 154 (expression -> expression EQ expression .) ]
  ! PLUS            [ reduce using rule 154 (expression -> expression EQ expression .) ]
  ! MINUS           [ reduce using rule 154 (expression -> expression EQ expression .) ]
  ! LSHIFT          [ reduce using rule 154 (expression -> expression EQ expression .) ]
  ! RSHIFT          [ reduce using rule 154 (expression -> expression EQ expression .) ]
  ! LSHIFTA         [ reduce using rule 154 (expression -> expression EQ expression .) ]
  ! RSHIFTA         [ reduce using rule 154 (expression -> expression EQ expression .) ]
  ! LT              [ reduce using rule 154 (expression -> expression EQ expression .) ]
  ! GT              [ reduce using rule 154 (expression -> expression EQ expression .) ]
  ! LE              [ reduce using rule 154 (expression -> expression EQ expression .) ]
  ! GE              [ reduce using rule 154 (expression -> expression EQ expression .) ]
  ! EQ              [ shift and go to state 249 ]
  ! NE              [ shift and go to state 250 ]
  ! EQL             [ shift and go to state 251 ]
  ! NEL             [ shift and go to state 252 ]
  ! AND             [ shift and go to state 253 ]
  ! XOR             [ shift and go to state 254 ]
  ! XNOR            [ shift and go to state 255 ]
  ! OR              [ shift and go to state 256 ]
  ! LAND            [ shift and go to state 257 ]
  ! LOR             [ shift and go to state 258 ]
  ! COND            [ shift and go to state 259 ]


state 415

    (155) expression -> expression NE expression .
    (140) expression -> expression . POWER expression
    (141) expression -> expression . TIMES expression
    (142) expression -> expression . DIVIDE expression
    (143) expression -> expression . MOD expression
    (144) expression -> expression . PLUS expression
    (145) expression -> expression . MINUS expression
    (146) expression -> expression . LSHIFT expression
    (147) expression -> expression . RSHIFT expression
    (148) expression -> expression . LSHIFTA expression
    (149) expression -> expression . RSHIFTA expression
    (150) expression -> expression . LT expression
    (151) expression -> expression . GT expression
    (152) expression -> expression . LE expression
    (153) expression -> expression . GE expression
    (154) expression -> expression . EQ expression
    (155) expression -> expression . NE expression
    (156) expression -> expression . EQL expression
    (157) expression -> expression . NEL expression
    (158) expression -> expression . AND expression
    (159) expression -> expression . XOR expression
    (160) expression -> expression . XNOR expression
    (161) expression -> expression . OR expression
    (162) expression -> expression . LAND expression
    (163) expression -> expression . LOR expression
    (164) expression -> expression . COND expression COLON expression

    EQ              reduce using rule 155 (expression -> expression NE expression .)
    NE              reduce using rule 155 (expression -> expression NE expression .)
    EQL             reduce using rule 155 (expression -> expression NE expression .)
    NEL             reduce using rule 155 (expression -> expression NE expression .)
    AND             reduce using rule 155 (expression -> expression NE expression .)
    XOR             reduce using rule 155 (expression -> expression NE expression .)
    XNOR            reduce using rule 155 (expression -> expression NE expression .)
    OR              reduce using rule 155 (expression -> expression NE expression .)
    LAND            reduce using rule 155 (expression -> expression NE expression .)
    LOR             reduce using rule 155 (expression -> expression NE expression .)
    COND            reduce using rule 155 (expression -> expression NE expression .)
    RPAREN          reduce using rule 155 (expression -> expression NE expression .)
    LBRACE          reduce using rule 155 (expression -> expression NE expression .)
    RBRACE          reduce using rule 155 (expression -> expression NE expression .)
    COMMA           reduce using rule 155 (expression -> expression NE expression .)
    COLON           reduce using rule 155 (expression -> expression NE expression .)
    SEMICOLON       reduce using rule 155 (expression -> expression NE expression .)
    PLUSCOLON       reduce using rule 155 (expression -> expression NE expression .)
    MINUSCOLON      reduce using rule 155 (expression -> expression NE expression .)
    RBRACKET        reduce using rule 155 (expression -> expression NE expression .)
    POWER           shift and go to state 236
    TIMES           shift and go to state 398
    DIVIDE          shift and go to state 237
    MOD             shift and go to state 238
    PLUS            shift and go to state 239
    MINUS           shift and go to state 240
    LSHIFT          shift and go to state 241
    RSHIFT          shift and go to state 242
    LSHIFTA         shift and go to state 243
    RSHIFTA         shift and go to state 244
    LT              shift and go to state 245
    GT              shift and go to state 246
    LE              shift and go to state 247
    GE              shift and go to state 248

  ! TIMES           [ reduce using rule 155 (expression -> expression NE expression .) ]
  ! POWER           [ reduce using rule 155 (expression -> expression NE expression .) ]
  ! DIVIDE          [ reduce using rule 155 (expression -> expression NE expression .) ]
  ! MOD             [ reduce using rule 155 (expression -> expression NE expression .) ]
  ! PLUS            [ reduce using rule 155 (expression -> expression NE expression .) ]
  ! MINUS           [ reduce using rule 155 (expression -> expression NE expression .) ]
  ! LSHIFT          [ reduce using rule 155 (expression -> expression NE expression .) ]
  ! RSHIFT          [ reduce using rule 155 (expression -> expression NE expression .) ]
  ! LSHIFTA         [ reduce using rule 155 (expression -> expression NE expression .) ]
  ! RSHIFTA         [ reduce using rule 155 (expression -> expression NE expression .) ]
  ! LT              [ reduce using rule 155 (expression -> expression NE expression .) ]
  ! GT              [ reduce using rule 155 (expression -> expression NE expression .) ]
  ! LE              [ reduce using rule 155 (expression -> expression NE expression .) ]
  ! GE              [ reduce using rule 155 (expression -> expression NE expression .) ]
  ! EQ              [ shift and go to state 249 ]
  ! NE              [ shift and go to state 250 ]
  ! EQL             [ shift and go to state 251 ]
  ! NEL             [ shift and go to state 252 ]
  ! AND             [ shift and go to state 253 ]
  ! XOR             [ shift and go to state 254 ]
  ! XNOR            [ shift and go to state 255 ]
  ! OR              [ shift and go to state 256 ]
  ! LAND            [ shift and go to state 257 ]
  ! LOR             [ shift and go to state 258 ]
  ! COND            [ shift and go to state 259 ]


state 416

    (156) expression -> expression EQL expression .
    (140) expression -> expression . POWER expression
    (141) expression -> expression . TIMES expression
    (142) expression -> expression . DIVIDE expression
    (143) expression -> expression . MOD expression
    (144) expression -> expression . PLUS expression
    (145) expression -> expression . MINUS expression
    (146) expression -> expression . LSHIFT expression
    (147) expression -> expression . RSHIFT expression
    (148) expression -> expression . LSHIFTA expression
    (149) expression -> expression . RSHIFTA expression
    (150) expression -> expression . LT expression
    (151) expression -> expression . GT expression
    (152) expression -> expression . LE expression
    (153) expression -> expression . GE expression
    (154) expression -> expression . EQ expression
    (155) expression -> expression . NE expression
    (156) expression -> expression . EQL expression
    (157) expression -> expression . NEL expression
    (158) expression -> expression . AND expression
    (159) expression -> expression . XOR expression
    (160) expression -> expression . XNOR expression
    (161) expression -> expression . OR expression
    (162) expression -> expression . LAND expression
    (163) expression -> expression . LOR expression
    (164) expression -> expression . COND expression COLON expression

    EQ              reduce using rule 156 (expression -> expression EQL expression .)
    NE              reduce using rule 156 (expression -> expression EQL expression .)
    EQL             reduce using rule 156 (expression -> expression EQL expression .)
    NEL             reduce using rule 156 (expression -> expression EQL expression .)
    AND             reduce using rule 156 (expression -> expression EQL expression .)
    XOR             reduce using rule 156 (expression -> expression EQL expression .)
    XNOR            reduce using rule 156 (expression -> expression EQL expression .)
    OR              reduce using rule 156 (expression -> expression EQL expression .)
    LAND            reduce using rule 156 (expression -> expression EQL expression .)
    LOR             reduce using rule 156 (expression -> expression EQL expression .)
    COND            reduce using rule 156 (expression -> expression EQL expression .)
    RPAREN          reduce using rule 156 (expression -> expression EQL expression .)
    LBRACE          reduce using rule 156 (expression -> expression EQL expression .)
    RBRACE          reduce using rule 156 (expression -> expression EQL expression .)
    COMMA           reduce using rule 156 (expression -> expression EQL expression .)
    COLON           reduce using rule 156 (expression -> expression EQL expression .)
    SEMICOLON       reduce using rule 156 (expression -> expression EQL expression .)
    PLUSCOLON       reduce using rule 156 (expression -> expression EQL expression .)
    MINUSCOLON      reduce using rule 156 (expression -> expression EQL expression .)
    RBRACKET        reduce using rule 156 (expression -> expression EQL expression .)
    POWER           shift and go to state 236
    TIMES           shift and go to state 398
    DIVIDE          shift and go to state 237
    MOD             shift and go to state 238
    PLUS            shift and go to state 239
    MINUS           shift and go to state 240
    LSHIFT          shift and go to state 241
    RSHIFT          shift and go to state 242
    LSHIFTA         shift and go to state 243
    RSHIFTA         shift and go to state 244
    LT              shift and go to state 245
    GT              shift and go to state 246
    LE              shift and go to state 247
    GE              shift and go to state 248

  ! TIMES           [ reduce using rule 156 (expression -> expression EQL expression .) ]
  ! POWER           [ reduce using rule 156 (expression -> expression EQL expression .) ]
  ! DIVIDE          [ reduce using rule 156 (expression -> expression EQL expression .) ]
  ! MOD             [ reduce using rule 156 (expression -> expression EQL expression .) ]
  ! PLUS            [ reduce using rule 156 (expression -> expression EQL expression .) ]
  ! MINUS           [ reduce using rule 156 (expression -> expression EQL expression .) ]
  ! LSHIFT          [ reduce using rule 156 (expression -> expression EQL expression .) ]
  ! RSHIFT          [ reduce using rule 156 (expression -> expression EQL expression .) ]
  ! LSHIFTA         [ reduce using rule 156 (expression -> expression EQL expression .) ]
  ! RSHIFTA         [ reduce using rule 156 (expression -> expression EQL expression .) ]
  ! LT              [ reduce using rule 156 (expression -> expression EQL expression .) ]
  ! GT              [ reduce using rule 156 (expression -> expression EQL expression .) ]
  ! LE              [ reduce using rule 156 (expression -> expression EQL expression .) ]
  ! GE              [ reduce using rule 156 (expression -> expression EQL expression .) ]
  ! EQ              [ shift and go to state 249 ]
  ! NE              [ shift and go to state 250 ]
  ! EQL             [ shift and go to state 251 ]
  ! NEL             [ shift and go to state 252 ]
  ! AND             [ shift and go to state 253 ]
  ! XOR             [ shift and go to state 254 ]
  ! XNOR            [ shift and go to state 255 ]
  ! OR              [ shift and go to state 256 ]
  ! LAND            [ shift and go to state 257 ]
  ! LOR             [ shift and go to state 258 ]
  ! COND            [ shift and go to state 259 ]


state 417

    (157) expression -> expression NEL expression .
    (140) expression -> expression . POWER expression
    (141) expression -> expression . TIMES expression
    (142) expression -> expression . DIVIDE expression
    (143) expression -> expression . MOD expression
    (144) expression -> expression . PLUS expression
    (145) expression -> expression . MINUS expression
    (146) expression -> expression . LSHIFT expression
    (147) expression -> expression . RSHIFT expression
    (148) expression -> expression . LSHIFTA expression
    (149) expression -> expression . RSHIFTA expression
    (150) expression -> expression . LT expression
    (151) expression -> expression . GT expression
    (152) expression -> expression . LE expression
    (153) expression -> expression . GE expression
    (154) expression -> expression . EQ expression
    (155) expression -> expression . NE expression
    (156) expression -> expression . EQL expression
    (157) expression -> expression . NEL expression
    (158) expression -> expression . AND expression
    (159) expression -> expression . XOR expression
    (160) expression -> expression . XNOR expression
    (161) expression -> expression . OR expression
    (162) expression -> expression . LAND expression
    (163) expression -> expression . LOR expression
    (164) expression -> expression . COND expression COLON expression

    EQ              reduce using rule 157 (expression -> expression NEL expression .)
    NE              reduce using rule 157 (expression -> expression NEL expression .)
    EQL             reduce using rule 157 (expression -> expression NEL expression .)
    NEL             reduce using rule 157 (expression -> expression NEL expression .)
    AND             reduce using rule 157 (expression -> expression NEL expression .)
    XOR             reduce using rule 157 (expression -> expression NEL expression .)
    XNOR            reduce using rule 157 (expression -> expression NEL expression .)
    OR              reduce using rule 157 (expression -> expression NEL expression .)
    LAND            reduce using rule 157 (expression -> expression NEL expression .)
    LOR             reduce using rule 157 (expression -> expression NEL expression .)
    COND            reduce using rule 157 (expression -> expression NEL expression .)
    RPAREN          reduce using rule 157 (expression -> expression NEL expression .)
    LBRACE          reduce using rule 157 (expression -> expression NEL expression .)
    RBRACE          reduce using rule 157 (expression -> expression NEL expression .)
    COMMA           reduce using rule 157 (expression -> expression NEL expression .)
    COLON           reduce using rule 157 (expression -> expression NEL expression .)
    SEMICOLON       reduce using rule 157 (expression -> expression NEL expression .)
    PLUSCOLON       reduce using rule 157 (expression -> expression NEL expression .)
    MINUSCOLON      reduce using rule 157 (expression -> expression NEL expression .)
    RBRACKET        reduce using rule 157 (expression -> expression NEL expression .)
    POWER           shift and go to state 236
    TIMES           shift and go to state 398
    DIVIDE          shift and go to state 237
    MOD             shift and go to state 238
    PLUS            shift and go to state 239
    MINUS           shift and go to state 240
    LSHIFT          shift and go to state 241
    RSHIFT          shift and go to state 242
    LSHIFTA         shift and go to state 243
    RSHIFTA         shift and go to state 244
    LT              shift and go to state 245
    GT              shift and go to state 246
    LE              shift and go to state 247
    GE              shift and go to state 248

  ! TIMES           [ reduce using rule 157 (expression -> expression NEL expression .) ]
  ! POWER           [ reduce using rule 157 (expression -> expression NEL expression .) ]
  ! DIVIDE          [ reduce using rule 157 (expression -> expression NEL expression .) ]
  ! MOD             [ reduce using rule 157 (expression -> expression NEL expression .) ]
  ! PLUS            [ reduce using rule 157 (expression -> expression NEL expression .) ]
  ! MINUS           [ reduce using rule 157 (expression -> expression NEL expression .) ]
  ! LSHIFT          [ reduce using rule 157 (expression -> expression NEL expression .) ]
  ! RSHIFT          [ reduce using rule 157 (expression -> expression NEL expression .) ]
  ! LSHIFTA         [ reduce using rule 157 (expression -> expression NEL expression .) ]
  ! RSHIFTA         [ reduce using rule 157 (expression -> expression NEL expression .) ]
  ! LT              [ reduce using rule 157 (expression -> expression NEL expression .) ]
  ! GT              [ reduce using rule 157 (expression -> expression NEL expression .) ]
  ! LE              [ reduce using rule 157 (expression -> expression NEL expression .) ]
  ! GE              [ reduce using rule 157 (expression -> expression NEL expression .) ]
  ! EQ              [ shift and go to state 249 ]
  ! NE              [ shift and go to state 250 ]
  ! EQL             [ shift and go to state 251 ]
  ! NEL             [ shift and go to state 252 ]
  ! AND             [ shift and go to state 253 ]
  ! XOR             [ shift and go to state 254 ]
  ! XNOR            [ shift and go to state 255 ]
  ! OR              [ shift and go to state 256 ]
  ! LAND            [ shift and go to state 257 ]
  ! LOR             [ shift and go to state 258 ]
  ! COND            [ shift and go to state 259 ]


state 418

    (158) expression -> expression AND expression .
    (140) expression -> expression . POWER expression
    (141) expression -> expression . TIMES expression
    (142) expression -> expression . DIVIDE expression
    (143) expression -> expression . MOD expression
    (144) expression -> expression . PLUS expression
    (145) expression -> expression . MINUS expression
    (146) expression -> expression . LSHIFT expression
    (147) expression -> expression . RSHIFT expression
    (148) expression -> expression . LSHIFTA expression
    (149) expression -> expression . RSHIFTA expression
    (150) expression -> expression . LT expression
    (151) expression -> expression . GT expression
    (152) expression -> expression . LE expression
    (153) expression -> expression . GE expression
    (154) expression -> expression . EQ expression
    (155) expression -> expression . NE expression
    (156) expression -> expression . EQL expression
    (157) expression -> expression . NEL expression
    (158) expression -> expression . AND expression
    (159) expression -> expression . XOR expression
    (160) expression -> expression . XNOR expression
    (161) expression -> expression . OR expression
    (162) expression -> expression . LAND expression
    (163) expression -> expression . LOR expression
    (164) expression -> expression . COND expression COLON expression

    AND             reduce using rule 158 (expression -> expression AND expression .)
    XOR             reduce using rule 158 (expression -> expression AND expression .)
    XNOR            reduce using rule 158 (expression -> expression AND expression .)
    OR              reduce using rule 158 (expression -> expression AND expression .)
    LAND            reduce using rule 158 (expression -> expression AND expression .)
    LOR             reduce using rule 158 (expression -> expression AND expression .)
    COND            reduce using rule 158 (expression -> expression AND expression .)
    RPAREN          reduce using rule 158 (expression -> expression AND expression .)
    LBRACE          reduce using rule 158 (expression -> expression AND expression .)
    RBRACE          reduce using rule 158 (expression -> expression AND expression .)
    COMMA           reduce using rule 158 (expression -> expression AND expression .)
    COLON           reduce using rule 158 (expression -> expression AND expression .)
    SEMICOLON       reduce using rule 158 (expression -> expression AND expression .)
    PLUSCOLON       reduce using rule 158 (expression -> expression AND expression .)
    MINUSCOLON      reduce using rule 158 (expression -> expression AND expression .)
    RBRACKET        reduce using rule 158 (expression -> expression AND expression .)
    POWER           shift and go to state 236
    TIMES           shift and go to state 398
    DIVIDE          shift and go to state 237
    MOD             shift and go to state 238
    PLUS            shift and go to state 239
    MINUS           shift and go to state 240
    LSHIFT          shift and go to state 241
    RSHIFT          shift and go to state 242
    LSHIFTA         shift and go to state 243
    RSHIFTA         shift and go to state 244
    LT              shift and go to state 245
    GT              shift and go to state 246
    LE              shift and go to state 247
    GE              shift and go to state 248
    EQ              shift and go to state 249
    NE              shift and go to state 250
    EQL             shift and go to state 251
    NEL             shift and go to state 252

  ! TIMES           [ reduce using rule 158 (expression -> expression AND expression .) ]
  ! POWER           [ reduce using rule 158 (expression -> expression AND expression .) ]
  ! DIVIDE          [ reduce using rule 158 (expression -> expression AND expression .) ]
  ! MOD             [ reduce using rule 158 (expression -> expression AND expression .) ]
  ! PLUS            [ reduce using rule 158 (expression -> expression AND expression .) ]
  ! MINUS           [ reduce using rule 158 (expression -> expression AND expression .) ]
  ! LSHIFT          [ reduce using rule 158 (expression -> expression AND expression .) ]
  ! RSHIFT          [ reduce using rule 158 (expression -> expression AND expression .) ]
  ! LSHIFTA         [ reduce using rule 158 (expression -> expression AND expression .) ]
  ! RSHIFTA         [ reduce using rule 158 (expression -> expression AND expression .) ]
  ! LT              [ reduce using rule 158 (expression -> expression AND expression .) ]
  ! GT              [ reduce using rule 158 (expression -> expression AND expression .) ]
  ! LE              [ reduce using rule 158 (expression -> expression AND expression .) ]
  ! GE              [ reduce using rule 158 (expression -> expression AND expression .) ]
  ! EQ              [ reduce using rule 158 (expression -> expression AND expression .) ]
  ! NE              [ reduce using rule 158 (expression -> expression AND expression .) ]
  ! EQL             [ reduce using rule 158 (expression -> expression AND expression .) ]
  ! NEL             [ reduce using rule 158 (expression -> expression AND expression .) ]
  ! AND             [ shift and go to state 253 ]
  ! XOR             [ shift and go to state 254 ]
  ! XNOR            [ shift and go to state 255 ]
  ! OR              [ shift and go to state 256 ]
  ! LAND            [ shift and go to state 257 ]
  ! LOR             [ shift and go to state 258 ]
  ! COND            [ shift and go to state 259 ]


state 419

    (159) expression -> expression XOR expression .
    (140) expression -> expression . POWER expression
    (141) expression -> expression . TIMES expression
    (142) expression -> expression . DIVIDE expression
    (143) expression -> expression . MOD expression
    (144) expression -> expression . PLUS expression
    (145) expression -> expression . MINUS expression
    (146) expression -> expression . LSHIFT expression
    (147) expression -> expression . RSHIFT expression
    (148) expression -> expression . LSHIFTA expression
    (149) expression -> expression . RSHIFTA expression
    (150) expression -> expression . LT expression
    (151) expression -> expression . GT expression
    (152) expression -> expression . LE expression
    (153) expression -> expression . GE expression
    (154) expression -> expression . EQ expression
    (155) expression -> expression . NE expression
    (156) expression -> expression . EQL expression
    (157) expression -> expression . NEL expression
    (158) expression -> expression . AND expression
    (159) expression -> expression . XOR expression
    (160) expression -> expression . XNOR expression
    (161) expression -> expression . OR expression
    (162) expression -> expression . LAND expression
    (163) expression -> expression . LOR expression
    (164) expression -> expression . COND expression COLON expression

    AND             reduce using rule 159 (expression -> expression XOR expression .)
    XOR             reduce using rule 159 (expression -> expression XOR expression .)
    XNOR            reduce using rule 159 (expression -> expression XOR expression .)
    OR              reduce using rule 159 (expression -> expression XOR expression .)
    LAND            reduce using rule 159 (expression -> expression XOR expression .)
    LOR             reduce using rule 159 (expression -> expression XOR expression .)
    COND            reduce using rule 159 (expression -> expression XOR expression .)
    RPAREN          reduce using rule 159 (expression -> expression XOR expression .)
    LBRACE          reduce using rule 159 (expression -> expression XOR expression .)
    RBRACE          reduce using rule 159 (expression -> expression XOR expression .)
    COMMA           reduce using rule 159 (expression -> expression XOR expression .)
    COLON           reduce using rule 159 (expression -> expression XOR expression .)
    SEMICOLON       reduce using rule 159 (expression -> expression XOR expression .)
    PLUSCOLON       reduce using rule 159 (expression -> expression XOR expression .)
    MINUSCOLON      reduce using rule 159 (expression -> expression XOR expression .)
    RBRACKET        reduce using rule 159 (expression -> expression XOR expression .)
    POWER           shift and go to state 236
    TIMES           shift and go to state 398
    DIVIDE          shift and go to state 237
    MOD             shift and go to state 238
    PLUS            shift and go to state 239
    MINUS           shift and go to state 240
    LSHIFT          shift and go to state 241
    RSHIFT          shift and go to state 242
    LSHIFTA         shift and go to state 243
    RSHIFTA         shift and go to state 244
    LT              shift and go to state 245
    GT              shift and go to state 246
    LE              shift and go to state 247
    GE              shift and go to state 248
    EQ              shift and go to state 249
    NE              shift and go to state 250
    EQL             shift and go to state 251
    NEL             shift and go to state 252

  ! TIMES           [ reduce using rule 159 (expression -> expression XOR expression .) ]
  ! POWER           [ reduce using rule 159 (expression -> expression XOR expression .) ]
  ! DIVIDE          [ reduce using rule 159 (expression -> expression XOR expression .) ]
  ! MOD             [ reduce using rule 159 (expression -> expression XOR expression .) ]
  ! PLUS            [ reduce using rule 159 (expression -> expression XOR expression .) ]
  ! MINUS           [ reduce using rule 159 (expression -> expression XOR expression .) ]
  ! LSHIFT          [ reduce using rule 159 (expression -> expression XOR expression .) ]
  ! RSHIFT          [ reduce using rule 159 (expression -> expression XOR expression .) ]
  ! LSHIFTA         [ reduce using rule 159 (expression -> expression XOR expression .) ]
  ! RSHIFTA         [ reduce using rule 159 (expression -> expression XOR expression .) ]
  ! LT              [ reduce using rule 159 (expression -> expression XOR expression .) ]
  ! GT              [ reduce using rule 159 (expression -> expression XOR expression .) ]
  ! LE              [ reduce using rule 159 (expression -> expression XOR expression .) ]
  ! GE              [ reduce using rule 159 (expression -> expression XOR expression .) ]
  ! EQ              [ reduce using rule 159 (expression -> expression XOR expression .) ]
  ! NE              [ reduce using rule 159 (expression -> expression XOR expression .) ]
  ! EQL             [ reduce using rule 159 (expression -> expression XOR expression .) ]
  ! NEL             [ reduce using rule 159 (expression -> expression XOR expression .) ]
  ! AND             [ shift and go to state 253 ]
  ! XOR             [ shift and go to state 254 ]
  ! XNOR            [ shift and go to state 255 ]
  ! OR              [ shift and go to state 256 ]
  ! LAND            [ shift and go to state 257 ]
  ! LOR             [ shift and go to state 258 ]
  ! COND            [ shift and go to state 259 ]


state 420

    (160) expression -> expression XNOR expression .
    (140) expression -> expression . POWER expression
    (141) expression -> expression . TIMES expression
    (142) expression -> expression . DIVIDE expression
    (143) expression -> expression . MOD expression
    (144) expression -> expression . PLUS expression
    (145) expression -> expression . MINUS expression
    (146) expression -> expression . LSHIFT expression
    (147) expression -> expression . RSHIFT expression
    (148) expression -> expression . LSHIFTA expression
    (149) expression -> expression . RSHIFTA expression
    (150) expression -> expression . LT expression
    (151) expression -> expression . GT expression
    (152) expression -> expression . LE expression
    (153) expression -> expression . GE expression
    (154) expression -> expression . EQ expression
    (155) expression -> expression . NE expression
    (156) expression -> expression . EQL expression
    (157) expression -> expression . NEL expression
    (158) expression -> expression . AND expression
    (159) expression -> expression . XOR expression
    (160) expression -> expression . XNOR expression
    (161) expression -> expression . OR expression
    (162) expression -> expression . LAND expression
    (163) expression -> expression . LOR expression
    (164) expression -> expression . COND expression COLON expression

    AND             reduce using rule 160 (expression -> expression XNOR expression .)
    XOR             reduce using rule 160 (expression -> expression XNOR expression .)
    XNOR            reduce using rule 160 (expression -> expression XNOR expression .)
    OR              reduce using rule 160 (expression -> expression XNOR expression .)
    LAND            reduce using rule 160 (expression -> expression XNOR expression .)
    LOR             reduce using rule 160 (expression -> expression XNOR expression .)
    COND            reduce using rule 160 (expression -> expression XNOR expression .)
    RPAREN          reduce using rule 160 (expression -> expression XNOR expression .)
    LBRACE          reduce using rule 160 (expression -> expression XNOR expression .)
    RBRACE          reduce using rule 160 (expression -> expression XNOR expression .)
    COMMA           reduce using rule 160 (expression -> expression XNOR expression .)
    COLON           reduce using rule 160 (expression -> expression XNOR expression .)
    SEMICOLON       reduce using rule 160 (expression -> expression XNOR expression .)
    PLUSCOLON       reduce using rule 160 (expression -> expression XNOR expression .)
    MINUSCOLON      reduce using rule 160 (expression -> expression XNOR expression .)
    RBRACKET        reduce using rule 160 (expression -> expression XNOR expression .)
    POWER           shift and go to state 236
    TIMES           shift and go to state 398
    DIVIDE          shift and go to state 237
    MOD             shift and go to state 238
    PLUS            shift and go to state 239
    MINUS           shift and go to state 240
    LSHIFT          shift and go to state 241
    RSHIFT          shift and go to state 242
    LSHIFTA         shift and go to state 243
    RSHIFTA         shift and go to state 244
    LT              shift and go to state 245
    GT              shift and go to state 246
    LE              shift and go to state 247
    GE              shift and go to state 248
    EQ              shift and go to state 249
    NE              shift and go to state 250
    EQL             shift and go to state 251
    NEL             shift and go to state 252

  ! TIMES           [ reduce using rule 160 (expression -> expression XNOR expression .) ]
  ! POWER           [ reduce using rule 160 (expression -> expression XNOR expression .) ]
  ! DIVIDE          [ reduce using rule 160 (expression -> expression XNOR expression .) ]
  ! MOD             [ reduce using rule 160 (expression -> expression XNOR expression .) ]
  ! PLUS            [ reduce using rule 160 (expression -> expression XNOR expression .) ]
  ! MINUS           [ reduce using rule 160 (expression -> expression XNOR expression .) ]
  ! LSHIFT          [ reduce using rule 160 (expression -> expression XNOR expression .) ]
  ! RSHIFT          [ reduce using rule 160 (expression -> expression XNOR expression .) ]
  ! LSHIFTA         [ reduce using rule 160 (expression -> expression XNOR expression .) ]
  ! RSHIFTA         [ reduce using rule 160 (expression -> expression XNOR expression .) ]
  ! LT              [ reduce using rule 160 (expression -> expression XNOR expression .) ]
  ! GT              [ reduce using rule 160 (expression -> expression XNOR expression .) ]
  ! LE              [ reduce using rule 160 (expression -> expression XNOR expression .) ]
  ! GE              [ reduce using rule 160 (expression -> expression XNOR expression .) ]
  ! EQ              [ reduce using rule 160 (expression -> expression XNOR expression .) ]
  ! NE              [ reduce using rule 160 (expression -> expression XNOR expression .) ]
  ! EQL             [ reduce using rule 160 (expression -> expression XNOR expression .) ]
  ! NEL             [ reduce using rule 160 (expression -> expression XNOR expression .) ]
  ! AND             [ shift and go to state 253 ]
  ! XOR             [ shift and go to state 254 ]
  ! XNOR            [ shift and go to state 255 ]
  ! OR              [ shift and go to state 256 ]
  ! LAND            [ shift and go to state 257 ]
  ! LOR             [ shift and go to state 258 ]
  ! COND            [ shift and go to state 259 ]


state 421

    (161) expression -> expression OR expression .
    (140) expression -> expression . POWER expression
    (141) expression -> expression . TIMES expression
    (142) expression -> expression . DIVIDE expression
    (143) expression -> expression . MOD expression
    (144) expression -> expression . PLUS expression
    (145) expression -> expression . MINUS expression
    (146) expression -> expression . LSHIFT expression
    (147) expression -> expression . RSHIFT expression
    (148) expression -> expression . LSHIFTA expression
    (149) expression -> expression . RSHIFTA expression
    (150) expression -> expression . LT expression
    (151) expression -> expression . GT expression
    (152) expression -> expression . LE expression
    (153) expression -> expression . GE expression
    (154) expression -> expression . EQ expression
    (155) expression -> expression . NE expression
    (156) expression -> expression . EQL expression
    (157) expression -> expression . NEL expression
    (158) expression -> expression . AND expression
    (159) expression -> expression . XOR expression
    (160) expression -> expression . XNOR expression
    (161) expression -> expression . OR expression
    (162) expression -> expression . LAND expression
    (163) expression -> expression . LOR expression
    (164) expression -> expression . COND expression COLON expression

    OR              reduce using rule 161 (expression -> expression OR expression .)
    LAND            reduce using rule 161 (expression -> expression OR expression .)
    LOR             reduce using rule 161 (expression -> expression OR expression .)
    COND            reduce using rule 161 (expression -> expression OR expression .)
    RPAREN          reduce using rule 161 (expression -> expression OR expression .)
    LBRACE          reduce using rule 161 (expression -> expression OR expression .)
    RBRACE          reduce using rule 161 (expression -> expression OR expression .)
    COMMA           reduce using rule 161 (expression -> expression OR expression .)
    COLON           reduce using rule 161 (expression -> expression OR expression .)
    SEMICOLON       reduce using rule 161 (expression -> expression OR expression .)
    PLUSCOLON       reduce using rule 161 (expression -> expression OR expression .)
    MINUSCOLON      reduce using rule 161 (expression -> expression OR expression .)
    RBRACKET        reduce using rule 161 (expression -> expression OR expression .)
    POWER           shift and go to state 236
    TIMES           shift and go to state 398
    DIVIDE          shift and go to state 237
    MOD             shift and go to state 238
    PLUS            shift and go to state 239
    MINUS           shift and go to state 240
    LSHIFT          shift and go to state 241
    RSHIFT          shift and go to state 242
    LSHIFTA         shift and go to state 243
    RSHIFTA         shift and go to state 244
    LT              shift and go to state 245
    GT              shift and go to state 246
    LE              shift and go to state 247
    GE              shift and go to state 248
    EQ              shift and go to state 249
    NE              shift and go to state 250
    EQL             shift and go to state 251
    NEL             shift and go to state 252
    AND             shift and go to state 253
    XOR             shift and go to state 254
    XNOR            shift and go to state 255

  ! TIMES           [ reduce using rule 161 (expression -> expression OR expression .) ]
  ! POWER           [ reduce using rule 161 (expression -> expression OR expression .) ]
  ! DIVIDE          [ reduce using rule 161 (expression -> expression OR expression .) ]
  ! MOD             [ reduce using rule 161 (expression -> expression OR expression .) ]
  ! PLUS            [ reduce using rule 161 (expression -> expression OR expression .) ]
  ! MINUS           [ reduce using rule 161 (expression -> expression OR expression .) ]
  ! LSHIFT          [ reduce using rule 161 (expression -> expression OR expression .) ]
  ! RSHIFT          [ reduce using rule 161 (expression -> expression OR expression .) ]
  ! LSHIFTA         [ reduce using rule 161 (expression -> expression OR expression .) ]
  ! RSHIFTA         [ reduce using rule 161 (expression -> expression OR expression .) ]
  ! LT              [ reduce using rule 161 (expression -> expression OR expression .) ]
  ! GT              [ reduce using rule 161 (expression -> expression OR expression .) ]
  ! LE              [ reduce using rule 161 (expression -> expression OR expression .) ]
  ! GE              [ reduce using rule 161 (expression -> expression OR expression .) ]
  ! EQ              [ reduce using rule 161 (expression -> expression OR expression .) ]
  ! NE              [ reduce using rule 161 (expression -> expression OR expression .) ]
  ! EQL             [ reduce using rule 161 (expression -> expression OR expression .) ]
  ! NEL             [ reduce using rule 161 (expression -> expression OR expression .) ]
  ! AND             [ reduce using rule 161 (expression -> expression OR expression .) ]
  ! XOR             [ reduce using rule 161 (expression -> expression OR expression .) ]
  ! XNOR            [ reduce using rule 161 (expression -> expression OR expression .) ]
  ! OR              [ shift and go to state 256 ]
  ! LAND            [ shift and go to state 257 ]
  ! LOR             [ shift and go to state 258 ]
  ! COND            [ shift and go to state 259 ]


state 422

    (162) expression -> expression LAND expression .
    (140) expression -> expression . POWER expression
    (141) expression -> expression . TIMES expression
    (142) expression -> expression . DIVIDE expression
    (143) expression -> expression . MOD expression
    (144) expression -> expression . PLUS expression
    (145) expression -> expression . MINUS expression
    (146) expression -> expression . LSHIFT expression
    (147) expression -> expression . RSHIFT expression
    (148) expression -> expression . LSHIFTA expression
    (149) expression -> expression . RSHIFTA expression
    (150) expression -> expression . LT expression
    (151) expression -> expression . GT expression
    (152) expression -> expression . LE expression
    (153) expression -> expression . GE expression
    (154) expression -> expression . EQ expression
    (155) expression -> expression . NE expression
    (156) expression -> expression . EQL expression
    (157) expression -> expression . NEL expression
    (158) expression -> expression . AND expression
    (159) expression -> expression . XOR expression
    (160) expression -> expression . XNOR expression
    (161) expression -> expression . OR expression
    (162) expression -> expression . LAND expression
    (163) expression -> expression . LOR expression
    (164) expression -> expression . COND expression COLON expression

    LAND            reduce using rule 162 (expression -> expression LAND expression .)
    LOR             reduce using rule 162 (expression -> expression LAND expression .)
    COND            reduce using rule 162 (expression -> expression LAND expression .)
    RPAREN          reduce using rule 162 (expression -> expression LAND expression .)
    LBRACE          reduce using rule 162 (expression -> expression LAND expression .)
    RBRACE          reduce using rule 162 (expression -> expression LAND expression .)
    COMMA           reduce using rule 162 (expression -> expression LAND expression .)
    COLON           reduce using rule 162 (expression -> expression LAND expression .)
    SEMICOLON       reduce using rule 162 (expression -> expression LAND expression .)
    PLUSCOLON       reduce using rule 162 (expression -> expression LAND expression .)
    MINUSCOLON      reduce using rule 162 (expression -> expression LAND expression .)
    RBRACKET        reduce using rule 162 (expression -> expression LAND expression .)
    POWER           shift and go to state 236
    TIMES           shift and go to state 398
    DIVIDE          shift and go to state 237
    MOD             shift and go to state 238
    PLUS            shift and go to state 239
    MINUS           shift and go to state 240
    LSHIFT          shift and go to state 241
    RSHIFT          shift and go to state 242
    LSHIFTA         shift and go to state 243
    RSHIFTA         shift and go to state 244
    LT              shift and go to state 245
    GT              shift and go to state 246
    LE              shift and go to state 247
    GE              shift and go to state 248
    EQ              shift and go to state 249
    NE              shift and go to state 250
    EQL             shift and go to state 251
    NEL             shift and go to state 252
    AND             shift and go to state 253
    XOR             shift and go to state 254
    XNOR            shift and go to state 255
    OR              shift and go to state 256

  ! TIMES           [ reduce using rule 162 (expression -> expression LAND expression .) ]
  ! POWER           [ reduce using rule 162 (expression -> expression LAND expression .) ]
  ! DIVIDE          [ reduce using rule 162 (expression -> expression LAND expression .) ]
  ! MOD             [ reduce using rule 162 (expression -> expression LAND expression .) ]
  ! PLUS            [ reduce using rule 162 (expression -> expression LAND expression .) ]
  ! MINUS           [ reduce using rule 162 (expression -> expression LAND expression .) ]
  ! LSHIFT          [ reduce using rule 162 (expression -> expression LAND expression .) ]
  ! RSHIFT          [ reduce using rule 162 (expression -> expression LAND expression .) ]
  ! LSHIFTA         [ reduce using rule 162 (expression -> expression LAND expression .) ]
  ! RSHIFTA         [ reduce using rule 162 (expression -> expression LAND expression .) ]
  ! LT              [ reduce using rule 162 (expression -> expression LAND expression .) ]
  ! GT              [ reduce using rule 162 (expression -> expression LAND expression .) ]
  ! LE              [ reduce using rule 162 (expression -> expression LAND expression .) ]
  ! GE              [ reduce using rule 162 (expression -> expression LAND expression .) ]
  ! EQ              [ reduce using rule 162 (expression -> expression LAND expression .) ]
  ! NE              [ reduce using rule 162 (expression -> expression LAND expression .) ]
  ! EQL             [ reduce using rule 162 (expression -> expression LAND expression .) ]
  ! NEL             [ reduce using rule 162 (expression -> expression LAND expression .) ]
  ! AND             [ reduce using rule 162 (expression -> expression LAND expression .) ]
  ! XOR             [ reduce using rule 162 (expression -> expression LAND expression .) ]
  ! XNOR            [ reduce using rule 162 (expression -> expression LAND expression .) ]
  ! OR              [ reduce using rule 162 (expression -> expression LAND expression .) ]
  ! LAND            [ shift and go to state 257 ]
  ! LOR             [ shift and go to state 258 ]
  ! COND            [ shift and go to state 259 ]


state 423

    (163) expression -> expression LOR expression .
    (140) expression -> expression . POWER expression
    (141) expression -> expression . TIMES expression
    (142) expression -> expression . DIVIDE expression
    (143) expression -> expression . MOD expression
    (144) expression -> expression . PLUS expression
    (145) expression -> expression . MINUS expression
    (146) expression -> expression . LSHIFT expression
    (147) expression -> expression . RSHIFT expression
    (148) expression -> expression . LSHIFTA expression
    (149) expression -> expression . RSHIFTA expression
    (150) expression -> expression . LT expression
    (151) expression -> expression . GT expression
    (152) expression -> expression . LE expression
    (153) expression -> expression . GE expression
    (154) expression -> expression . EQ expression
    (155) expression -> expression . NE expression
    (156) expression -> expression . EQL expression
    (157) expression -> expression . NEL expression
    (158) expression -> expression . AND expression
    (159) expression -> expression . XOR expression
    (160) expression -> expression . XNOR expression
    (161) expression -> expression . OR expression
    (162) expression -> expression . LAND expression
    (163) expression -> expression . LOR expression
    (164) expression -> expression . COND expression COLON expression

    LOR             reduce using rule 163 (expression -> expression LOR expression .)
    COND            reduce using rule 163 (expression -> expression LOR expression .)
    RPAREN          reduce using rule 163 (expression -> expression LOR expression .)
    LBRACE          reduce using rule 163 (expression -> expression LOR expression .)
    RBRACE          reduce using rule 163 (expression -> expression LOR expression .)
    COMMA           reduce using rule 163 (expression -> expression LOR expression .)
    COLON           reduce using rule 163 (expression -> expression LOR expression .)
    SEMICOLON       reduce using rule 163 (expression -> expression LOR expression .)
    PLUSCOLON       reduce using rule 163 (expression -> expression LOR expression .)
    MINUSCOLON      reduce using rule 163 (expression -> expression LOR expression .)
    RBRACKET        reduce using rule 163 (expression -> expression LOR expression .)
    POWER           shift and go to state 236
    TIMES           shift and go to state 398
    DIVIDE          shift and go to state 237
    MOD             shift and go to state 238
    PLUS            shift and go to state 239
    MINUS           shift and go to state 240
    LSHIFT          shift and go to state 241
    RSHIFT          shift and go to state 242
    LSHIFTA         shift and go to state 243
    RSHIFTA         shift and go to state 244
    LT              shift and go to state 245
    GT              shift and go to state 246
    LE              shift and go to state 247
    GE              shift and go to state 248
    EQ              shift and go to state 249
    NE              shift and go to state 250
    EQL             shift and go to state 251
    NEL             shift and go to state 252
    AND             shift and go to state 253
    XOR             shift and go to state 254
    XNOR            shift and go to state 255
    OR              shift and go to state 256
    LAND            shift and go to state 257

  ! TIMES           [ reduce using rule 163 (expression -> expression LOR expression .) ]
  ! POWER           [ reduce using rule 163 (expression -> expression LOR expression .) ]
  ! DIVIDE          [ reduce using rule 163 (expression -> expression LOR expression .) ]
  ! MOD             [ reduce using rule 163 (expression -> expression LOR expression .) ]
  ! PLUS            [ reduce using rule 163 (expression -> expression LOR expression .) ]
  ! MINUS           [ reduce using rule 163 (expression -> expression LOR expression .) ]
  ! LSHIFT          [ reduce using rule 163 (expression -> expression LOR expression .) ]
  ! RSHIFT          [ reduce using rule 163 (expression -> expression LOR expression .) ]
  ! LSHIFTA         [ reduce using rule 163 (expression -> expression LOR expression .) ]
  ! RSHIFTA         [ reduce using rule 163 (expression -> expression LOR expression .) ]
  ! LT              [ reduce using rule 163 (expression -> expression LOR expression .) ]
  ! GT              [ reduce using rule 163 (expression -> expression LOR expression .) ]
  ! LE              [ reduce using rule 163 (expression -> expression LOR expression .) ]
  ! GE              [ reduce using rule 163 (expression -> expression LOR expression .) ]
  ! EQ              [ reduce using rule 163 (expression -> expression LOR expression .) ]
  ! NE              [ reduce using rule 163 (expression -> expression LOR expression .) ]
  ! EQL             [ reduce using rule 163 (expression -> expression LOR expression .) ]
  ! NEL             [ reduce using rule 163 (expression -> expression LOR expression .) ]
  ! AND             [ reduce using rule 163 (expression -> expression LOR expression .) ]
  ! XOR             [ reduce using rule 163 (expression -> expression LOR expression .) ]
  ! XNOR            [ reduce using rule 163 (expression -> expression LOR expression .) ]
  ! OR              [ reduce using rule 163 (expression -> expression LOR expression .) ]
  ! LAND            [ reduce using rule 163 (expression -> expression LOR expression .) ]
  ! LOR             [ shift and go to state 258 ]
  ! COND            [ shift and go to state 259 ]


state 424

    (164) expression -> expression COND expression . COLON expression
    (140) expression -> expression . POWER expression
    (141) expression -> expression . TIMES expression
    (142) expression -> expression . DIVIDE expression
    (143) expression -> expression . MOD expression
    (144) expression -> expression . PLUS expression
    (145) expression -> expression . MINUS expression
    (146) expression -> expression . LSHIFT expression
    (147) expression -> expression . RSHIFT expression
    (148) expression -> expression . LSHIFTA expression
    (149) expression -> expression . RSHIFTA expression
    (150) expression -> expression . LT expression
    (151) expression -> expression . GT expression
    (152) expression -> expression . LE expression
    (153) expression -> expression . GE expression
    (154) expression -> expression . EQ expression
    (155) expression -> expression . NE expression
    (156) expression -> expression . EQL expression
    (157) expression -> expression . NEL expression
    (158) expression -> expression . AND expression
    (159) expression -> expression . XOR expression
    (160) expression -> expression . XNOR expression
    (161) expression -> expression . OR expression
    (162) expression -> expression . LAND expression
    (163) expression -> expression . LOR expression
    (164) expression -> expression . COND expression COLON expression

    COLON           shift and go to state 536
    POWER           shift and go to state 236
    TIMES           shift and go to state 398
    DIVIDE          shift and go to state 237
    MOD             shift and go to state 238
    PLUS            shift and go to state 239
    MINUS           shift and go to state 240
    LSHIFT          shift and go to state 241
    RSHIFT          shift and go to state 242
    LSHIFTA         shift and go to state 243
    RSHIFTA         shift and go to state 244
    LT              shift and go to state 245
    GT              shift and go to state 246
    LE              shift and go to state 247
    GE              shift and go to state 248
    EQ              shift and go to state 249
    NE              shift and go to state 250
    EQL             shift and go to state 251
    NEL             shift and go to state 252
    AND             shift and go to state 253
    XOR             shift and go to state 254
    XNOR            shift and go to state 255
    OR              shift and go to state 256
    LAND            shift and go to state 257
    LOR             shift and go to state 258
    COND            shift and go to state 259


state 425

    (181) partselect -> pointer LBRACKET expression . COLON expression RBRACKET
    (182) partselect -> pointer LBRACKET expression . PLUSCOLON expression RBRACKET
    (183) partselect -> pointer LBRACKET expression . MINUSCOLON expression RBRACKET
    (185) pointer -> pointer LBRACKET expression . RBRACKET
    (140) expression -> expression . POWER expression
    (141) expression -> expression . TIMES expression
    (142) expression -> expression . DIVIDE expression
    (143) expression -> expression . MOD expression
    (144) expression -> expression . PLUS expression
    (145) expression -> expression . MINUS expression
    (146) expression -> expression . LSHIFT expression
    (147) expression -> expression . RSHIFT expression
    (148) expression -> expression . LSHIFTA expression
    (149) expression -> expression . RSHIFTA expression
    (150) expression -> expression . LT expression
    (151) expression -> expression . GT expression
    (152) expression -> expression . LE expression
    (153) expression -> expression . GE expression
    (154) expression -> expression . EQ expression
    (155) expression -> expression . NE expression
    (156) expression -> expression . EQL expression
    (157) expression -> expression . NEL expression
    (158) expression -> expression . AND expression
    (159) expression -> expression . XOR expression
    (160) expression -> expression . XNOR expression
    (161) expression -> expression . OR expression
    (162) expression -> expression . LAND expression
    (163) expression -> expression . LOR expression
    (164) expression -> expression . COND expression COLON expression

    COLON           shift and go to state 537
    PLUSCOLON       shift and go to state 539
    MINUSCOLON      shift and go to state 540
    RBRACKET        shift and go to state 538
    POWER           shift and go to state 236
    TIMES           shift and go to state 398
    DIVIDE          shift and go to state 237
    MOD             shift and go to state 238
    PLUS            shift and go to state 239
    MINUS           shift and go to state 240
    LSHIFT          shift and go to state 241
    RSHIFT          shift and go to state 242
    LSHIFTA         shift and go to state 243
    RSHIFTA         shift and go to state 244
    LT              shift and go to state 245
    GT              shift and go to state 246
    LE              shift and go to state 247
    GE              shift and go to state 248
    EQ              shift and go to state 249
    NE              shift and go to state 250
    EQL             shift and go to state 251
    NEL             shift and go to state 252
    AND             shift and go to state 253
    XOR             shift and go to state 254
    XNOR            shift and go to state 255
    OR              shift and go to state 256
    LAND            shift and go to state 257
    LOR             shift and go to state 258
    COND            shift and go to state 259


state 426

    (178) partselect -> identifier LBRACKET expression . COLON expression RBRACKET
    (179) partselect -> identifier LBRACKET expression . PLUSCOLON expression RBRACKET
    (180) partselect -> identifier LBRACKET expression . MINUSCOLON expression RBRACKET
    (184) pointer -> identifier LBRACKET expression . RBRACKET
    (140) expression -> expression . POWER expression
    (141) expression -> expression . TIMES expression
    (142) expression -> expression . DIVIDE expression
    (143) expression -> expression . MOD expression
    (144) expression -> expression . PLUS expression
    (145) expression -> expression . MINUS expression
    (146) expression -> expression . LSHIFT expression
    (147) expression -> expression . RSHIFT expression
    (148) expression -> expression . LSHIFTA expression
    (149) expression -> expression . RSHIFTA expression
    (150) expression -> expression . LT expression
    (151) expression -> expression . GT expression
    (152) expression -> expression . LE expression
    (153) expression -> expression . GE expression
    (154) expression -> expression . EQ expression
    (155) expression -> expression . NE expression
    (156) expression -> expression . EQL expression
    (157) expression -> expression . NEL expression
    (158) expression -> expression . AND expression
    (159) expression -> expression . XOR expression
    (160) expression -> expression . XNOR expression
    (161) expression -> expression . OR expression
    (162) expression -> expression . LAND expression
    (163) expression -> expression . LOR expression
    (164) expression -> expression . COND expression COLON expression

    COLON           shift and go to state 541
    PLUSCOLON       shift and go to state 543
    MINUSCOLON      shift and go to state 544
    RBRACKET        shift and go to state 542
    POWER           shift and go to state 236
    TIMES           shift and go to state 398
    DIVIDE          shift and go to state 237
    MOD             shift and go to state 238
    PLUS            shift and go to state 239
    MINUS           shift and go to state 240
    LSHIFT          shift and go to state 241
    RSHIFT          shift and go to state 242
    LSHIFTA         shift and go to state 243
    RSHIFTA         shift and go to state 244
    LT              shift and go to state 245
    GT              shift and go to state 246
    LE              shift and go to state 247
    GE              shift and go to state 248
    EQ              shift and go to state 249
    NE              shift and go to state 250
    EQL             shift and go to state 251
    NEL             shift and go to state 252
    AND             shift and go to state 253
    XOR             shift and go to state 254
    XNOR            shift and go to state 255
    OR              shift and go to state 256
    LAND            shift and go to state 257
    LOR             shift and go to state 258
    COND            shift and go to state 259


state 427

    (373) functioncall -> identifier LPAREN func_args . RPAREN
    (374) func_args -> func_args . COMMA expression

    RPAREN          shift and go to state 545
    COMMA           shift and go to state 546


state 428

    (375) func_args -> expression .
    (140) expression -> expression . POWER expression
    (141) expression -> expression . TIMES expression
    (142) expression -> expression . DIVIDE expression
    (143) expression -> expression . MOD expression
    (144) expression -> expression . PLUS expression
    (145) expression -> expression . MINUS expression
    (146) expression -> expression . LSHIFT expression
    (147) expression -> expression . RSHIFT expression
    (148) expression -> expression . LSHIFTA expression
    (149) expression -> expression . RSHIFTA expression
    (150) expression -> expression . LT expression
    (151) expression -> expression . GT expression
    (152) expression -> expression . LE expression
    (153) expression -> expression . GE expression
    (154) expression -> expression . EQ expression
    (155) expression -> expression . NE expression
    (156) expression -> expression . EQL expression
    (157) expression -> expression . NEL expression
    (158) expression -> expression . AND expression
    (159) expression -> expression . XOR expression
    (160) expression -> expression . XNOR expression
    (161) expression -> expression . OR expression
    (162) expression -> expression . LAND expression
    (163) expression -> expression . LOR expression
    (164) expression -> expression . COND expression COLON expression

    RPAREN          reduce using rule 375 (func_args -> expression .)
    COMMA           reduce using rule 375 (func_args -> expression .)
    POWER           shift and go to state 236
    TIMES           shift and go to state 398
    DIVIDE          shift and go to state 237
    MOD             shift and go to state 238
    PLUS            shift and go to state 239
    MINUS           shift and go to state 240
    LSHIFT          shift and go to state 241
    RSHIFT          shift and go to state 242
    LSHIFTA         shift and go to state 243
    RSHIFTA         shift and go to state 244
    LT              shift and go to state 245
    GT              shift and go to state 246
    LE              shift and go to state 247
    GE              shift and go to state 248
    EQ              shift and go to state 249
    NE              shift and go to state 250
    EQL             shift and go to state 251
    NEL             shift and go to state 252
    AND             shift and go to state 253
    XOR             shift and go to state 254
    XNOR            shift and go to state 255
    OR              shift and go to state 256
    LAND            shift and go to state 257
    LOR             shift and go to state 258
    COND            shift and go to state 259


state 429

    (376) func_args -> empty .

    RPAREN          reduce using rule 376 (func_args -> empty .)
    COMMA           reduce using rule 376 (func_args -> empty .)


state 430

    (174) concat -> LBRACE concatlist RBRACE .

    TIMES           reduce using rule 174 (concat -> LBRACE concatlist RBRACE .)
    POWER           reduce using rule 174 (concat -> LBRACE concatlist RBRACE .)
    DIVIDE          reduce using rule 174 (concat -> LBRACE concatlist RBRACE .)
    MOD             reduce using rule 174 (concat -> LBRACE concatlist RBRACE .)
    PLUS            reduce using rule 174 (concat -> LBRACE concatlist RBRACE .)
    MINUS           reduce using rule 174 (concat -> LBRACE concatlist RBRACE .)
    LSHIFT          reduce using rule 174 (concat -> LBRACE concatlist RBRACE .)
    RSHIFT          reduce using rule 174 (concat -> LBRACE concatlist RBRACE .)
    LSHIFTA         reduce using rule 174 (concat -> LBRACE concatlist RBRACE .)
    RSHIFTA         reduce using rule 174 (concat -> LBRACE concatlist RBRACE .)
    LT              reduce using rule 174 (concat -> LBRACE concatlist RBRACE .)
    GT              reduce using rule 174 (concat -> LBRACE concatlist RBRACE .)
    LE              reduce using rule 174 (concat -> LBRACE concatlist RBRACE .)
    GE              reduce using rule 174 (concat -> LBRACE concatlist RBRACE .)
    EQ              reduce using rule 174 (concat -> LBRACE concatlist RBRACE .)
    NE              reduce using rule 174 (concat -> LBRACE concatlist RBRACE .)
    EQL             reduce using rule 174 (concat -> LBRACE concatlist RBRACE .)
    NEL             reduce using rule 174 (concat -> LBRACE concatlist RBRACE .)
    AND             reduce using rule 174 (concat -> LBRACE concatlist RBRACE .)
    XOR             reduce using rule 174 (concat -> LBRACE concatlist RBRACE .)
    XNOR            reduce using rule 174 (concat -> LBRACE concatlist RBRACE .)
    OR              reduce using rule 174 (concat -> LBRACE concatlist RBRACE .)
    LAND            reduce using rule 174 (concat -> LBRACE concatlist RBRACE .)
    LOR             reduce using rule 174 (concat -> LBRACE concatlist RBRACE .)
    COND            reduce using rule 174 (concat -> LBRACE concatlist RBRACE .)
    RPAREN          reduce using rule 174 (concat -> LBRACE concatlist RBRACE .)
    LBRACE          reduce using rule 174 (concat -> LBRACE concatlist RBRACE .)
    RBRACE          reduce using rule 174 (concat -> LBRACE concatlist RBRACE .)
    COMMA           reduce using rule 174 (concat -> LBRACE concatlist RBRACE .)
    COLON           reduce using rule 174 (concat -> LBRACE concatlist RBRACE .)
    SEMICOLON       reduce using rule 174 (concat -> LBRACE concatlist RBRACE .)
    PLUSCOLON       reduce using rule 174 (concat -> LBRACE concatlist RBRACE .)
    MINUSCOLON      reduce using rule 174 (concat -> LBRACE concatlist RBRACE .)
    RBRACKET        reduce using rule 174 (concat -> LBRACE concatlist RBRACE .)


state 431

    (175) concatlist -> concatlist COMMA . expression
    (130) expression -> . MINUS expression
    (131) expression -> . PLUS expression
    (132) expression -> . LNOT expression
    (133) expression -> . NOT expression
    (134) expression -> . AND expression
    (135) expression -> . NAND expression
    (136) expression -> . NOR expression
    (137) expression -> . OR expression
    (138) expression -> . XOR expression
    (139) expression -> . XNOR expression
    (140) expression -> . expression POWER expression
    (141) expression -> . expression TIMES expression
    (142) expression -> . expression DIVIDE expression
    (143) expression -> . expression MOD expression
    (144) expression -> . expression PLUS expression
    (145) expression -> . expression MINUS expression
    (146) expression -> . expression LSHIFT expression
    (147) expression -> . expression RSHIFT expression
    (148) expression -> . expression LSHIFTA expression
    (149) expression -> . expression RSHIFTA expression
    (150) expression -> . expression LT expression
    (151) expression -> . expression GT expression
    (152) expression -> . expression LE expression
    (153) expression -> . expression GE expression
    (154) expression -> . expression EQ expression
    (155) expression -> . expression NE expression
    (156) expression -> . expression EQL expression
    (157) expression -> . expression NEL expression
    (158) expression -> . expression AND expression
    (159) expression -> . expression XOR expression
    (160) expression -> . expression XNOR expression
    (161) expression -> . expression OR expression
    (162) expression -> . expression LAND expression
    (163) expression -> . expression LOR expression
    (164) expression -> . expression COND expression COLON expression
    (165) expression -> . LPAREN expression RPAREN
    (166) expression -> . concat
    (167) expression -> . repeat
    (168) expression -> . partselect
    (169) expression -> . pointer
    (170) expression -> . functioncall
    (171) expression -> . systemcall
    (172) expression -> . identifier
    (173) expression -> . const_expression
    (174) concat -> . LBRACE concatlist RBRACE
    (177) repeat -> . LBRACE expression concat RBRACE
    (178) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (179) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (180) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (181) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (182) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (183) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (184) pointer -> . identifier LBRACKET expression RBRACKET
    (185) pointer -> . pointer LBRACKET expression RBRACKET
    (373) functioncall -> . identifier LPAREN func_args RPAREN
    (351) systemcall -> . DOLLER ID
    (352) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (353) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (392) identifier -> . ID
    (393) identifier -> . scope ID
    (186) const_expression -> . intnumber
    (187) const_expression -> . floatnumber
    (188) const_expression -> . stringliteral
    (394) scope -> . identifier DOT
    (395) scope -> . pointer DOT
    (190) intnumber -> . INTNUMBER_DEC
    (191) intnumber -> . SIGNED_INTNUMBER_DEC
    (192) intnumber -> . INTNUMBER_BIN
    (193) intnumber -> . SIGNED_INTNUMBER_BIN
    (194) intnumber -> . INTNUMBER_OCT
    (195) intnumber -> . SIGNED_INTNUMBER_OCT
    (196) intnumber -> . INTNUMBER_HEX
    (197) intnumber -> . SIGNED_INTNUMBER_HEX
    (189) floatnumber -> . FLOATNUMBER
    (198) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 88
    PLUS            shift and go to state 89
    LNOT            shift and go to state 90
    NOT             shift and go to state 91
    AND             shift and go to state 92
    NAND            shift and go to state 93
    NOR             shift and go to state 94
    OR              shift and go to state 95
    XOR             shift and go to state 96
    XNOR            shift and go to state 97
    LPAREN          shift and go to state 85
    LBRACE          shift and go to state 106
    DOLLER          shift and go to state 107
    ID              shift and go to state 86
    INTNUMBER_DEC   shift and go to state 112
    SIGNED_INTNUMBER_DEC shift and go to state 113
    INTNUMBER_BIN   shift and go to state 114
    SIGNED_INTNUMBER_BIN shift and go to state 115
    INTNUMBER_OCT   shift and go to state 116
    SIGNED_INTNUMBER_OCT shift and go to state 117
    INTNUMBER_HEX   shift and go to state 118
    SIGNED_INTNUMBER_HEX shift and go to state 119
    FLOATNUMBER     shift and go to state 120
    STRING_LITERAL  shift and go to state 121

    expression                     shift and go to state 547
    concat                         shift and go to state 98
    repeat                         shift and go to state 99
    partselect                     shift and go to state 100
    pointer                        shift and go to state 101
    functioncall                   shift and go to state 102
    systemcall                     shift and go to state 103
    identifier                     shift and go to state 104
    const_expression               shift and go to state 105
    scope                          shift and go to state 108
    intnumber                      shift and go to state 109
    floatnumber                    shift and go to state 110
    stringliteral                  shift and go to state 111

state 432

    (174) concat -> LBRACE . concatlist RBRACE
    (175) concatlist -> . concatlist COMMA expression
    (176) concatlist -> . expression
    (130) expression -> . MINUS expression
    (131) expression -> . PLUS expression
    (132) expression -> . LNOT expression
    (133) expression -> . NOT expression
    (134) expression -> . AND expression
    (135) expression -> . NAND expression
    (136) expression -> . NOR expression
    (137) expression -> . OR expression
    (138) expression -> . XOR expression
    (139) expression -> . XNOR expression
    (140) expression -> . expression POWER expression
    (141) expression -> . expression TIMES expression
    (142) expression -> . expression DIVIDE expression
    (143) expression -> . expression MOD expression
    (144) expression -> . expression PLUS expression
    (145) expression -> . expression MINUS expression
    (146) expression -> . expression LSHIFT expression
    (147) expression -> . expression RSHIFT expression
    (148) expression -> . expression LSHIFTA expression
    (149) expression -> . expression RSHIFTA expression
    (150) expression -> . expression LT expression
    (151) expression -> . expression GT expression
    (152) expression -> . expression LE expression
    (153) expression -> . expression GE expression
    (154) expression -> . expression EQ expression
    (155) expression -> . expression NE expression
    (156) expression -> . expression EQL expression
    (157) expression -> . expression NEL expression
    (158) expression -> . expression AND expression
    (159) expression -> . expression XOR expression
    (160) expression -> . expression XNOR expression
    (161) expression -> . expression OR expression
    (162) expression -> . expression LAND expression
    (163) expression -> . expression LOR expression
    (164) expression -> . expression COND expression COLON expression
    (165) expression -> . LPAREN expression RPAREN
    (166) expression -> . concat
    (167) expression -> . repeat
    (168) expression -> . partselect
    (169) expression -> . pointer
    (170) expression -> . functioncall
    (171) expression -> . systemcall
    (172) expression -> . identifier
    (173) expression -> . const_expression
    (174) concat -> . LBRACE concatlist RBRACE
    (177) repeat -> . LBRACE expression concat RBRACE
    (178) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (179) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (180) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (181) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (182) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (183) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (184) pointer -> . identifier LBRACKET expression RBRACKET
    (185) pointer -> . pointer LBRACKET expression RBRACKET
    (373) functioncall -> . identifier LPAREN func_args RPAREN
    (351) systemcall -> . DOLLER ID
    (352) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (353) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (392) identifier -> . ID
    (393) identifier -> . scope ID
    (186) const_expression -> . intnumber
    (187) const_expression -> . floatnumber
    (188) const_expression -> . stringliteral
    (394) scope -> . identifier DOT
    (395) scope -> . pointer DOT
    (190) intnumber -> . INTNUMBER_DEC
    (191) intnumber -> . SIGNED_INTNUMBER_DEC
    (192) intnumber -> . INTNUMBER_BIN
    (193) intnumber -> . SIGNED_INTNUMBER_BIN
    (194) intnumber -> . INTNUMBER_OCT
    (195) intnumber -> . SIGNED_INTNUMBER_OCT
    (196) intnumber -> . INTNUMBER_HEX
    (197) intnumber -> . SIGNED_INTNUMBER_HEX
    (189) floatnumber -> . FLOATNUMBER
    (198) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 88
    PLUS            shift and go to state 89
    LNOT            shift and go to state 90
    NOT             shift and go to state 91
    AND             shift and go to state 92
    NAND            shift and go to state 93
    NOR             shift and go to state 94
    OR              shift and go to state 95
    XOR             shift and go to state 96
    XNOR            shift and go to state 97
    LPAREN          shift and go to state 85
    LBRACE          shift and go to state 106
    DOLLER          shift and go to state 107
    ID              shift and go to state 86
    INTNUMBER_DEC   shift and go to state 112
    SIGNED_INTNUMBER_DEC shift and go to state 113
    INTNUMBER_BIN   shift and go to state 114
    SIGNED_INTNUMBER_BIN shift and go to state 115
    INTNUMBER_OCT   shift and go to state 116
    SIGNED_INTNUMBER_OCT shift and go to state 117
    INTNUMBER_HEX   shift and go to state 118
    SIGNED_INTNUMBER_HEX shift and go to state 119
    FLOATNUMBER     shift and go to state 120
    STRING_LITERAL  shift and go to state 121

    concatlist                     shift and go to state 275
    expression                     shift and go to state 548
    concat                         shift and go to state 98
    repeat                         shift and go to state 99
    partselect                     shift and go to state 100
    pointer                        shift and go to state 101
    functioncall                   shift and go to state 102
    systemcall                     shift and go to state 103
    identifier                     shift and go to state 104
    const_expression               shift and go to state 105
    scope                          shift and go to state 108
    intnumber                      shift and go to state 109
    floatnumber                    shift and go to state 110
    stringliteral                  shift and go to state 111

state 433

    (177) repeat -> LBRACE expression concat . RBRACE

    RBRACE          shift and go to state 549


state 434

    (352) systemcall -> DOLLER ID LPAREN . sysargs RPAREN
    (354) sysargs -> . sysargs COMMA sysarg
    (355) sysargs -> . sysarg
    (356) sysargs -> . empty
    (357) sysarg -> . expression
    (400) empty -> .
    (130) expression -> . MINUS expression
    (131) expression -> . PLUS expression
    (132) expression -> . LNOT expression
    (133) expression -> . NOT expression
    (134) expression -> . AND expression
    (135) expression -> . NAND expression
    (136) expression -> . NOR expression
    (137) expression -> . OR expression
    (138) expression -> . XOR expression
    (139) expression -> . XNOR expression
    (140) expression -> . expression POWER expression
    (141) expression -> . expression TIMES expression
    (142) expression -> . expression DIVIDE expression
    (143) expression -> . expression MOD expression
    (144) expression -> . expression PLUS expression
    (145) expression -> . expression MINUS expression
    (146) expression -> . expression LSHIFT expression
    (147) expression -> . expression RSHIFT expression
    (148) expression -> . expression LSHIFTA expression
    (149) expression -> . expression RSHIFTA expression
    (150) expression -> . expression LT expression
    (151) expression -> . expression GT expression
    (152) expression -> . expression LE expression
    (153) expression -> . expression GE expression
    (154) expression -> . expression EQ expression
    (155) expression -> . expression NE expression
    (156) expression -> . expression EQL expression
    (157) expression -> . expression NEL expression
    (158) expression -> . expression AND expression
    (159) expression -> . expression XOR expression
    (160) expression -> . expression XNOR expression
    (161) expression -> . expression OR expression
    (162) expression -> . expression LAND expression
    (163) expression -> . expression LOR expression
    (164) expression -> . expression COND expression COLON expression
    (165) expression -> . LPAREN expression RPAREN
    (166) expression -> . concat
    (167) expression -> . repeat
    (168) expression -> . partselect
    (169) expression -> . pointer
    (170) expression -> . functioncall
    (171) expression -> . systemcall
    (172) expression -> . identifier
    (173) expression -> . const_expression
    (174) concat -> . LBRACE concatlist RBRACE
    (177) repeat -> . LBRACE expression concat RBRACE
    (178) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (179) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (180) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (181) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (182) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (183) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (184) pointer -> . identifier LBRACKET expression RBRACKET
    (185) pointer -> . pointer LBRACKET expression RBRACKET
    (373) functioncall -> . identifier LPAREN func_args RPAREN
    (351) systemcall -> . DOLLER ID
    (352) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (353) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (392) identifier -> . ID
    (393) identifier -> . scope ID
    (186) const_expression -> . intnumber
    (187) const_expression -> . floatnumber
    (188) const_expression -> . stringliteral
    (394) scope -> . identifier DOT
    (395) scope -> . pointer DOT
    (190) intnumber -> . INTNUMBER_DEC
    (191) intnumber -> . SIGNED_INTNUMBER_DEC
    (192) intnumber -> . INTNUMBER_BIN
    (193) intnumber -> . SIGNED_INTNUMBER_BIN
    (194) intnumber -> . INTNUMBER_OCT
    (195) intnumber -> . SIGNED_INTNUMBER_OCT
    (196) intnumber -> . INTNUMBER_HEX
    (197) intnumber -> . SIGNED_INTNUMBER_HEX
    (189) floatnumber -> . FLOATNUMBER
    (198) stringliteral -> . STRING_LITERAL

    RPAREN          reduce using rule 400 (empty -> .)
    COMMA           reduce using rule 400 (empty -> .)
    MINUS           shift and go to state 88
    PLUS            shift and go to state 89
    LNOT            shift and go to state 90
    NOT             shift and go to state 91
    AND             shift and go to state 92
    NAND            shift and go to state 93
    NOR             shift and go to state 94
    OR              shift and go to state 95
    XOR             shift and go to state 96
    XNOR            shift and go to state 97
    LPAREN          shift and go to state 85
    LBRACE          shift and go to state 106
    DOLLER          shift and go to state 107
    ID              shift and go to state 86
    INTNUMBER_DEC   shift and go to state 112
    SIGNED_INTNUMBER_DEC shift and go to state 113
    INTNUMBER_BIN   shift and go to state 114
    SIGNED_INTNUMBER_BIN shift and go to state 115
    INTNUMBER_OCT   shift and go to state 116
    SIGNED_INTNUMBER_OCT shift and go to state 117
    INTNUMBER_HEX   shift and go to state 118
    SIGNED_INTNUMBER_HEX shift and go to state 119
    FLOATNUMBER     shift and go to state 120
    STRING_LITERAL  shift and go to state 121

    sysargs                        shift and go to state 550
    sysarg                         shift and go to state 551
    empty                          shift and go to state 552
    expression                     shift and go to state 553
    concat                         shift and go to state 98
    repeat                         shift and go to state 99
    partselect                     shift and go to state 100
    pointer                        shift and go to state 101
    functioncall                   shift and go to state 102
    systemcall                     shift and go to state 103
    identifier                     shift and go to state 104
    const_expression               shift and go to state 105
    scope                          shift and go to state 108
    intnumber                      shift and go to state 109
    floatnumber                    shift and go to state 110
    stringliteral                  shift and go to state 111

state 435

    (353) systemcall -> DOLLER SIGNED LPAREN . sysargs RPAREN
    (354) sysargs -> . sysargs COMMA sysarg
    (355) sysargs -> . sysarg
    (356) sysargs -> . empty
    (357) sysarg -> . expression
    (400) empty -> .
    (130) expression -> . MINUS expression
    (131) expression -> . PLUS expression
    (132) expression -> . LNOT expression
    (133) expression -> . NOT expression
    (134) expression -> . AND expression
    (135) expression -> . NAND expression
    (136) expression -> . NOR expression
    (137) expression -> . OR expression
    (138) expression -> . XOR expression
    (139) expression -> . XNOR expression
    (140) expression -> . expression POWER expression
    (141) expression -> . expression TIMES expression
    (142) expression -> . expression DIVIDE expression
    (143) expression -> . expression MOD expression
    (144) expression -> . expression PLUS expression
    (145) expression -> . expression MINUS expression
    (146) expression -> . expression LSHIFT expression
    (147) expression -> . expression RSHIFT expression
    (148) expression -> . expression LSHIFTA expression
    (149) expression -> . expression RSHIFTA expression
    (150) expression -> . expression LT expression
    (151) expression -> . expression GT expression
    (152) expression -> . expression LE expression
    (153) expression -> . expression GE expression
    (154) expression -> . expression EQ expression
    (155) expression -> . expression NE expression
    (156) expression -> . expression EQL expression
    (157) expression -> . expression NEL expression
    (158) expression -> . expression AND expression
    (159) expression -> . expression XOR expression
    (160) expression -> . expression XNOR expression
    (161) expression -> . expression OR expression
    (162) expression -> . expression LAND expression
    (163) expression -> . expression LOR expression
    (164) expression -> . expression COND expression COLON expression
    (165) expression -> . LPAREN expression RPAREN
    (166) expression -> . concat
    (167) expression -> . repeat
    (168) expression -> . partselect
    (169) expression -> . pointer
    (170) expression -> . functioncall
    (171) expression -> . systemcall
    (172) expression -> . identifier
    (173) expression -> . const_expression
    (174) concat -> . LBRACE concatlist RBRACE
    (177) repeat -> . LBRACE expression concat RBRACE
    (178) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (179) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (180) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (181) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (182) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (183) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (184) pointer -> . identifier LBRACKET expression RBRACKET
    (185) pointer -> . pointer LBRACKET expression RBRACKET
    (373) functioncall -> . identifier LPAREN func_args RPAREN
    (351) systemcall -> . DOLLER ID
    (352) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (353) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (392) identifier -> . ID
    (393) identifier -> . scope ID
    (186) const_expression -> . intnumber
    (187) const_expression -> . floatnumber
    (188) const_expression -> . stringliteral
    (394) scope -> . identifier DOT
    (395) scope -> . pointer DOT
    (190) intnumber -> . INTNUMBER_DEC
    (191) intnumber -> . SIGNED_INTNUMBER_DEC
    (192) intnumber -> . INTNUMBER_BIN
    (193) intnumber -> . SIGNED_INTNUMBER_BIN
    (194) intnumber -> . INTNUMBER_OCT
    (195) intnumber -> . SIGNED_INTNUMBER_OCT
    (196) intnumber -> . INTNUMBER_HEX
    (197) intnumber -> . SIGNED_INTNUMBER_HEX
    (189) floatnumber -> . FLOATNUMBER
    (198) stringliteral -> . STRING_LITERAL

    RPAREN          reduce using rule 400 (empty -> .)
    COMMA           reduce using rule 400 (empty -> .)
    MINUS           shift and go to state 88
    PLUS            shift and go to state 89
    LNOT            shift and go to state 90
    NOT             shift and go to state 91
    AND             shift and go to state 92
    NAND            shift and go to state 93
    NOR             shift and go to state 94
    OR              shift and go to state 95
    XOR             shift and go to state 96
    XNOR            shift and go to state 97
    LPAREN          shift and go to state 85
    LBRACE          shift and go to state 106
    DOLLER          shift and go to state 107
    ID              shift and go to state 86
    INTNUMBER_DEC   shift and go to state 112
    SIGNED_INTNUMBER_DEC shift and go to state 113
    INTNUMBER_BIN   shift and go to state 114
    SIGNED_INTNUMBER_BIN shift and go to state 115
    INTNUMBER_OCT   shift and go to state 116
    SIGNED_INTNUMBER_OCT shift and go to state 117
    INTNUMBER_HEX   shift and go to state 118
    SIGNED_INTNUMBER_HEX shift and go to state 119
    FLOATNUMBER     shift and go to state 120
    STRING_LITERAL  shift and go to state 121

    sysargs                        shift and go to state 554
    sysarg                         shift and go to state 551
    empty                          shift and go to state 552
    expression                     shift and go to state 553
    concat                         shift and go to state 98
    repeat                         shift and go to state 99
    partselect                     shift and go to state 100
    pointer                        shift and go to state 101
    functioncall                   shift and go to state 102
    systemcall                     shift and go to state 103
    identifier                     shift and go to state 104
    const_expression               shift and go to state 105
    scope                          shift and go to state 108
    intnumber                      shift and go to state 109
    floatnumber                    shift and go to state 110
    stringliteral                  shift and go to state 111

state 436

    (342) generate_if -> IF LPAREN cond . RPAREN gif_true_item ELSE gif_false_item
    (343) generate_if -> IF LPAREN cond . RPAREN gif_true_item

    RPAREN          shift and go to state 555


state 437

    (266) cond -> expression .
    (140) expression -> expression . POWER expression
    (141) expression -> expression . TIMES expression
    (142) expression -> expression . DIVIDE expression
    (143) expression -> expression . MOD expression
    (144) expression -> expression . PLUS expression
    (145) expression -> expression . MINUS expression
    (146) expression -> expression . LSHIFT expression
    (147) expression -> expression . RSHIFT expression
    (148) expression -> expression . LSHIFTA expression
    (149) expression -> expression . RSHIFTA expression
    (150) expression -> expression . LT expression
    (151) expression -> expression . GT expression
    (152) expression -> expression . LE expression
    (153) expression -> expression . GE expression
    (154) expression -> expression . EQ expression
    (155) expression -> expression . NE expression
    (156) expression -> expression . EQL expression
    (157) expression -> expression . NEL expression
    (158) expression -> expression . AND expression
    (159) expression -> expression . XOR expression
    (160) expression -> expression . XNOR expression
    (161) expression -> expression . OR expression
    (162) expression -> expression . LAND expression
    (163) expression -> expression . LOR expression
    (164) expression -> expression . COND expression COLON expression

    RPAREN          reduce using rule 266 (cond -> expression .)
    SEMICOLON       reduce using rule 266 (cond -> expression .)
    POWER           shift and go to state 236
    TIMES           shift and go to state 398
    DIVIDE          shift and go to state 237
    MOD             shift and go to state 238
    PLUS            shift and go to state 239
    MINUS           shift and go to state 240
    LSHIFT          shift and go to state 241
    RSHIFT          shift and go to state 242
    LSHIFTA         shift and go to state 243
    RSHIFTA         shift and go to state 244
    LT              shift and go to state 245
    GT              shift and go to state 246
    LE              shift and go to state 247
    GE              shift and go to state 248
    EQ              shift and go to state 249
    NE              shift and go to state 250
    EQL             shift and go to state 251
    NEL             shift and go to state 252
    AND             shift and go to state 253
    XOR             shift and go to state 254
    XNOR            shift and go to state 255
    OR              shift and go to state 256
    LAND            shift and go to state 257
    LOR             shift and go to state 258
    COND            shift and go to state 259


state 438

    (348) generate_for -> FOR LPAREN forpre . forcond forpost RPAREN generate_forcontent
    (273) forcond -> . cond SEMICOLON
    (274) forcond -> . SEMICOLON
    (266) cond -> . expression
    (130) expression -> . MINUS expression
    (131) expression -> . PLUS expression
    (132) expression -> . LNOT expression
    (133) expression -> . NOT expression
    (134) expression -> . AND expression
    (135) expression -> . NAND expression
    (136) expression -> . NOR expression
    (137) expression -> . OR expression
    (138) expression -> . XOR expression
    (139) expression -> . XNOR expression
    (140) expression -> . expression POWER expression
    (141) expression -> . expression TIMES expression
    (142) expression -> . expression DIVIDE expression
    (143) expression -> . expression MOD expression
    (144) expression -> . expression PLUS expression
    (145) expression -> . expression MINUS expression
    (146) expression -> . expression LSHIFT expression
    (147) expression -> . expression RSHIFT expression
    (148) expression -> . expression LSHIFTA expression
    (149) expression -> . expression RSHIFTA expression
    (150) expression -> . expression LT expression
    (151) expression -> . expression GT expression
    (152) expression -> . expression LE expression
    (153) expression -> . expression GE expression
    (154) expression -> . expression EQ expression
    (155) expression -> . expression NE expression
    (156) expression -> . expression EQL expression
    (157) expression -> . expression NEL expression
    (158) expression -> . expression AND expression
    (159) expression -> . expression XOR expression
    (160) expression -> . expression XNOR expression
    (161) expression -> . expression OR expression
    (162) expression -> . expression LAND expression
    (163) expression -> . expression LOR expression
    (164) expression -> . expression COND expression COLON expression
    (165) expression -> . LPAREN expression RPAREN
    (166) expression -> . concat
    (167) expression -> . repeat
    (168) expression -> . partselect
    (169) expression -> . pointer
    (170) expression -> . functioncall
    (171) expression -> . systemcall
    (172) expression -> . identifier
    (173) expression -> . const_expression
    (174) concat -> . LBRACE concatlist RBRACE
    (177) repeat -> . LBRACE expression concat RBRACE
    (178) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (179) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (180) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (181) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (182) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (183) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (184) pointer -> . identifier LBRACKET expression RBRACKET
    (185) pointer -> . pointer LBRACKET expression RBRACKET
    (373) functioncall -> . identifier LPAREN func_args RPAREN
    (351) systemcall -> . DOLLER ID
    (352) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (353) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (392) identifier -> . ID
    (393) identifier -> . scope ID
    (186) const_expression -> . intnumber
    (187) const_expression -> . floatnumber
    (188) const_expression -> . stringliteral
    (394) scope -> . identifier DOT
    (395) scope -> . pointer DOT
    (190) intnumber -> . INTNUMBER_DEC
    (191) intnumber -> . SIGNED_INTNUMBER_DEC
    (192) intnumber -> . INTNUMBER_BIN
    (193) intnumber -> . SIGNED_INTNUMBER_BIN
    (194) intnumber -> . INTNUMBER_OCT
    (195) intnumber -> . SIGNED_INTNUMBER_OCT
    (196) intnumber -> . INTNUMBER_HEX
    (197) intnumber -> . SIGNED_INTNUMBER_HEX
    (189) floatnumber -> . FLOATNUMBER
    (198) stringliteral -> . STRING_LITERAL

    SEMICOLON       shift and go to state 558
    MINUS           shift and go to state 88
    PLUS            shift and go to state 89
    LNOT            shift and go to state 90
    NOT             shift and go to state 91
    AND             shift and go to state 92
    NAND            shift and go to state 93
    NOR             shift and go to state 94
    OR              shift and go to state 95
    XOR             shift and go to state 96
    XNOR            shift and go to state 97
    LPAREN          shift and go to state 85
    LBRACE          shift and go to state 106
    DOLLER          shift and go to state 107
    ID              shift and go to state 86
    INTNUMBER_DEC   shift and go to state 112
    SIGNED_INTNUMBER_DEC shift and go to state 113
    INTNUMBER_BIN   shift and go to state 114
    SIGNED_INTNUMBER_BIN shift and go to state 115
    INTNUMBER_OCT   shift and go to state 116
    SIGNED_INTNUMBER_OCT shift and go to state 117
    INTNUMBER_HEX   shift and go to state 118
    SIGNED_INTNUMBER_HEX shift and go to state 119
    FLOATNUMBER     shift and go to state 120
    STRING_LITERAL  shift and go to state 121

    forcond                        shift and go to state 556
    cond                           shift and go to state 557
    expression                     shift and go to state 437
    concat                         shift and go to state 98
    repeat                         shift and go to state 99
    partselect                     shift and go to state 100
    pointer                        shift and go to state 101
    functioncall                   shift and go to state 102
    systemcall                     shift and go to state 103
    identifier                     shift and go to state 104
    const_expression               shift and go to state 105
    scope                          shift and go to state 108
    intnumber                      shift and go to state 109
    floatnumber                    shift and go to state 110
    stringliteral                  shift and go to state 111

state 439

    (271) forpre -> blocking_substitution .

    SEMICOLON       reduce using rule 271 (forpre -> blocking_substitution .)
    MINUS           reduce using rule 271 (forpre -> blocking_substitution .)
    PLUS            reduce using rule 271 (forpre -> blocking_substitution .)
    LNOT            reduce using rule 271 (forpre -> blocking_substitution .)
    NOT             reduce using rule 271 (forpre -> blocking_substitution .)
    AND             reduce using rule 271 (forpre -> blocking_substitution .)
    NAND            reduce using rule 271 (forpre -> blocking_substitution .)
    NOR             reduce using rule 271 (forpre -> blocking_substitution .)
    OR              reduce using rule 271 (forpre -> blocking_substitution .)
    XOR             reduce using rule 271 (forpre -> blocking_substitution .)
    XNOR            reduce using rule 271 (forpre -> blocking_substitution .)
    LPAREN          reduce using rule 271 (forpre -> blocking_substitution .)
    LBRACE          reduce using rule 271 (forpre -> blocking_substitution .)
    DOLLER          reduce using rule 271 (forpre -> blocking_substitution .)
    ID              reduce using rule 271 (forpre -> blocking_substitution .)
    INTNUMBER_DEC   reduce using rule 271 (forpre -> blocking_substitution .)
    SIGNED_INTNUMBER_DEC reduce using rule 271 (forpre -> blocking_substitution .)
    INTNUMBER_BIN   reduce using rule 271 (forpre -> blocking_substitution .)
    SIGNED_INTNUMBER_BIN reduce using rule 271 (forpre -> blocking_substitution .)
    INTNUMBER_OCT   reduce using rule 271 (forpre -> blocking_substitution .)
    SIGNED_INTNUMBER_OCT reduce using rule 271 (forpre -> blocking_substitution .)
    INTNUMBER_HEX   reduce using rule 271 (forpre -> blocking_substitution .)
    SIGNED_INTNUMBER_HEX reduce using rule 271 (forpre -> blocking_substitution .)
    FLOATNUMBER     reduce using rule 271 (forpre -> blocking_substitution .)
    STRING_LITERAL  reduce using rule 271 (forpre -> blocking_substitution .)


state 440

    (272) forpre -> SEMICOLON .

    SEMICOLON       reduce using rule 272 (forpre -> SEMICOLON .)
    MINUS           reduce using rule 272 (forpre -> SEMICOLON .)
    PLUS            reduce using rule 272 (forpre -> SEMICOLON .)
    LNOT            reduce using rule 272 (forpre -> SEMICOLON .)
    NOT             reduce using rule 272 (forpre -> SEMICOLON .)
    AND             reduce using rule 272 (forpre -> SEMICOLON .)
    NAND            reduce using rule 272 (forpre -> SEMICOLON .)
    NOR             reduce using rule 272 (forpre -> SEMICOLON .)
    OR              reduce using rule 272 (forpre -> SEMICOLON .)
    XOR             reduce using rule 272 (forpre -> SEMICOLON .)
    XNOR            reduce using rule 272 (forpre -> SEMICOLON .)
    LPAREN          reduce using rule 272 (forpre -> SEMICOLON .)
    LBRACE          reduce using rule 272 (forpre -> SEMICOLON .)
    DOLLER          reduce using rule 272 (forpre -> SEMICOLON .)
    ID              reduce using rule 272 (forpre -> SEMICOLON .)
    INTNUMBER_DEC   reduce using rule 272 (forpre -> SEMICOLON .)
    SIGNED_INTNUMBER_DEC reduce using rule 272 (forpre -> SEMICOLON .)
    INTNUMBER_BIN   reduce using rule 272 (forpre -> SEMICOLON .)
    SIGNED_INTNUMBER_BIN reduce using rule 272 (forpre -> SEMICOLON .)
    INTNUMBER_OCT   reduce using rule 272 (forpre -> SEMICOLON .)
    SIGNED_INTNUMBER_OCT reduce using rule 272 (forpre -> SEMICOLON .)
    INTNUMBER_HEX   reduce using rule 272 (forpre -> SEMICOLON .)
    SIGNED_INTNUMBER_HEX reduce using rule 272 (forpre -> SEMICOLON .)
    FLOATNUMBER     reduce using rule 272 (forpre -> SEMICOLON .)
    STRING_LITERAL  reduce using rule 272 (forpre -> SEMICOLON .)


state 441

    (237) blocking_substitution -> delays . lvalue EQUALS delays rvalue SEMICOLON
    (125) lvalue -> . lpartselect
    (126) lvalue -> . lpointer
    (127) lvalue -> . lconcat
    (128) lvalue -> . identifier
    (111) lpartselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (112) lpartselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (113) lpartselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (114) lpartselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (115) lpartselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (116) lpartselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (117) lpointer -> . pointer
    (118) lconcat -> . LBRACE lconcatlist RBRACE
    (392) identifier -> . ID
    (393) identifier -> . scope ID
    (184) pointer -> . identifier LBRACKET expression RBRACKET
    (185) pointer -> . pointer LBRACKET expression RBRACKET
    (394) scope -> . identifier DOT
    (395) scope -> . pointer DOT

    LBRACE          shift and go to state 169
    ID              shift and go to state 86

    lvalue                         shift and go to state 559
    lpartselect                    shift and go to state 164
    lpointer                       shift and go to state 165
    lconcat                        shift and go to state 166
    identifier                     shift and go to state 167
    pointer                        shift and go to state 168
    scope                          shift and go to state 108

state 442

    (79) declnamelist -> declnamelist COMMA declname .

    SEMICOLON       reduce using rule 79 (declnamelist -> declnamelist COMMA declname .)
    COMMA           reduce using rule 79 (declnamelist -> declnamelist COMMA declname .)


state 443

    (81) declname -> ID .
    (82) declname -> ID . length
    (55) length -> . LBRACKET expression COLON expression RBRACKET

    SEMICOLON       reduce using rule 81 (declname -> ID .)
    COMMA           reduce using rule 81 (declname -> ID .)
    LBRACKET        shift and go to state 292

    length                         shift and go to state 291

state 444

    (78) decl -> sigtypes width declnamelist SEMICOLON .

    ENDMODULE       reduce using rule 78 (decl -> sigtypes width declnamelist SEMICOLON .)
    GENERATE        reduce using rule 78 (decl -> sigtypes width declnamelist SEMICOLON .)
    INTEGER         reduce using rule 78 (decl -> sigtypes width declnamelist SEMICOLON .)
    REAL            reduce using rule 78 (decl -> sigtypes width declnamelist SEMICOLON .)
    PARAMETER       reduce using rule 78 (decl -> sigtypes width declnamelist SEMICOLON .)
    LOCALPARAM      reduce using rule 78 (decl -> sigtypes width declnamelist SEMICOLON .)
    GENVAR          reduce using rule 78 (decl -> sigtypes width declnamelist SEMICOLON .)
    ASSIGN          reduce using rule 78 (decl -> sigtypes width declnamelist SEMICOLON .)
    ALWAYS          reduce using rule 78 (decl -> sigtypes width declnamelist SEMICOLON .)
    ALWAYS_FF       reduce using rule 78 (decl -> sigtypes width declnamelist SEMICOLON .)
    ALWAYS_COMB     reduce using rule 78 (decl -> sigtypes width declnamelist SEMICOLON .)
    INITIAL         reduce using rule 78 (decl -> sigtypes width declnamelist SEMICOLON .)
    ID              reduce using rule 78 (decl -> sigtypes width declnamelist SEMICOLON .)
    SENS_OR         reduce using rule 78 (decl -> sigtypes width declnamelist SEMICOLON .)
    FUNCTION        reduce using rule 78 (decl -> sigtypes width declnamelist SEMICOLON .)
    TASK            reduce using rule 78 (decl -> sigtypes width declnamelist SEMICOLON .)
    LPAREN          reduce using rule 78 (decl -> sigtypes width declnamelist SEMICOLON .)
    INPUT           reduce using rule 78 (decl -> sigtypes width declnamelist SEMICOLON .)
    OUTPUT          reduce using rule 78 (decl -> sigtypes width declnamelist SEMICOLON .)
    INOUT           reduce using rule 78 (decl -> sigtypes width declnamelist SEMICOLON .)
    TRI             reduce using rule 78 (decl -> sigtypes width declnamelist SEMICOLON .)
    REG             reduce using rule 78 (decl -> sigtypes width declnamelist SEMICOLON .)
    LOGIC           reduce using rule 78 (decl -> sigtypes width declnamelist SEMICOLON .)
    WIRE            reduce using rule 78 (decl -> sigtypes width declnamelist SEMICOLON .)
    SIGNED          reduce using rule 78 (decl -> sigtypes width declnamelist SEMICOLON .)
    SUPPLY0         reduce using rule 78 (decl -> sigtypes width declnamelist SEMICOLON .)
    SUPPLY1         reduce using rule 78 (decl -> sigtypes width declnamelist SEMICOLON .)
    ENDGENERATE     reduce using rule 78 (decl -> sigtypes width declnamelist SEMICOLON .)
    IF              reduce using rule 78 (decl -> sigtypes width declnamelist SEMICOLON .)
    FOR             reduce using rule 78 (decl -> sigtypes width declnamelist SEMICOLON .)
    WHILE           reduce using rule 78 (decl -> sigtypes width declnamelist SEMICOLON .)
    CASE            reduce using rule 78 (decl -> sigtypes width declnamelist SEMICOLON .)
    CASEX           reduce using rule 78 (decl -> sigtypes width declnamelist SEMICOLON .)
    BEGIN           reduce using rule 78 (decl -> sigtypes width declnamelist SEMICOLON .)
    DELAY           reduce using rule 78 (decl -> sigtypes width declnamelist SEMICOLON .)
    LBRACE          reduce using rule 78 (decl -> sigtypes width declnamelist SEMICOLON .)
    END             reduce using rule 78 (decl -> sigtypes width declnamelist SEMICOLON .)
    UNIQUE          reduce using rule 78 (decl -> sigtypes width declnamelist SEMICOLON .)
    WAIT            reduce using rule 78 (decl -> sigtypes width declnamelist SEMICOLON .)
    FOREVER         reduce using rule 78 (decl -> sigtypes width declnamelist SEMICOLON .)
    FORK            reduce using rule 78 (decl -> sigtypes width declnamelist SEMICOLON .)
    AT              reduce using rule 78 (decl -> sigtypes width declnamelist SEMICOLON .)
    DOLLER          reduce using rule 78 (decl -> sigtypes width declnamelist SEMICOLON .)
    DISABLE         reduce using rule 78 (decl -> sigtypes width declnamelist SEMICOLON .)
    SEMICOLON       reduce using rule 78 (decl -> sigtypes width declnamelist SEMICOLON .)
    ELSE            reduce using rule 78 (decl -> sigtypes width declnamelist SEMICOLON .)


state 445

    (84) declassign -> sigtypes width declassign_element SEMICOLON .

    ENDMODULE       reduce using rule 84 (declassign -> sigtypes width declassign_element SEMICOLON .)
    GENERATE        reduce using rule 84 (declassign -> sigtypes width declassign_element SEMICOLON .)
    INTEGER         reduce using rule 84 (declassign -> sigtypes width declassign_element SEMICOLON .)
    REAL            reduce using rule 84 (declassign -> sigtypes width declassign_element SEMICOLON .)
    PARAMETER       reduce using rule 84 (declassign -> sigtypes width declassign_element SEMICOLON .)
    LOCALPARAM      reduce using rule 84 (declassign -> sigtypes width declassign_element SEMICOLON .)
    GENVAR          reduce using rule 84 (declassign -> sigtypes width declassign_element SEMICOLON .)
    ASSIGN          reduce using rule 84 (declassign -> sigtypes width declassign_element SEMICOLON .)
    ALWAYS          reduce using rule 84 (declassign -> sigtypes width declassign_element SEMICOLON .)
    ALWAYS_FF       reduce using rule 84 (declassign -> sigtypes width declassign_element SEMICOLON .)
    ALWAYS_COMB     reduce using rule 84 (declassign -> sigtypes width declassign_element SEMICOLON .)
    INITIAL         reduce using rule 84 (declassign -> sigtypes width declassign_element SEMICOLON .)
    ID              reduce using rule 84 (declassign -> sigtypes width declassign_element SEMICOLON .)
    SENS_OR         reduce using rule 84 (declassign -> sigtypes width declassign_element SEMICOLON .)
    FUNCTION        reduce using rule 84 (declassign -> sigtypes width declassign_element SEMICOLON .)
    TASK            reduce using rule 84 (declassign -> sigtypes width declassign_element SEMICOLON .)
    LPAREN          reduce using rule 84 (declassign -> sigtypes width declassign_element SEMICOLON .)
    INPUT           reduce using rule 84 (declassign -> sigtypes width declassign_element SEMICOLON .)
    OUTPUT          reduce using rule 84 (declassign -> sigtypes width declassign_element SEMICOLON .)
    INOUT           reduce using rule 84 (declassign -> sigtypes width declassign_element SEMICOLON .)
    TRI             reduce using rule 84 (declassign -> sigtypes width declassign_element SEMICOLON .)
    REG             reduce using rule 84 (declassign -> sigtypes width declassign_element SEMICOLON .)
    LOGIC           reduce using rule 84 (declassign -> sigtypes width declassign_element SEMICOLON .)
    WIRE            reduce using rule 84 (declassign -> sigtypes width declassign_element SEMICOLON .)
    SIGNED          reduce using rule 84 (declassign -> sigtypes width declassign_element SEMICOLON .)
    SUPPLY0         reduce using rule 84 (declassign -> sigtypes width declassign_element SEMICOLON .)
    SUPPLY1         reduce using rule 84 (declassign -> sigtypes width declassign_element SEMICOLON .)
    ENDGENERATE     reduce using rule 84 (declassign -> sigtypes width declassign_element SEMICOLON .)
    IF              reduce using rule 84 (declassign -> sigtypes width declassign_element SEMICOLON .)
    FOR             reduce using rule 84 (declassign -> sigtypes width declassign_element SEMICOLON .)
    ELSE            reduce using rule 84 (declassign -> sigtypes width declassign_element SEMICOLON .)
    END             reduce using rule 84 (declassign -> sigtypes width declassign_element SEMICOLON .)


state 446

    (54) width -> LBRACKET expression COLON . expression RBRACKET
    (130) expression -> . MINUS expression
    (131) expression -> . PLUS expression
    (132) expression -> . LNOT expression
    (133) expression -> . NOT expression
    (134) expression -> . AND expression
    (135) expression -> . NAND expression
    (136) expression -> . NOR expression
    (137) expression -> . OR expression
    (138) expression -> . XOR expression
    (139) expression -> . XNOR expression
    (140) expression -> . expression POWER expression
    (141) expression -> . expression TIMES expression
    (142) expression -> . expression DIVIDE expression
    (143) expression -> . expression MOD expression
    (144) expression -> . expression PLUS expression
    (145) expression -> . expression MINUS expression
    (146) expression -> . expression LSHIFT expression
    (147) expression -> . expression RSHIFT expression
    (148) expression -> . expression LSHIFTA expression
    (149) expression -> . expression RSHIFTA expression
    (150) expression -> . expression LT expression
    (151) expression -> . expression GT expression
    (152) expression -> . expression LE expression
    (153) expression -> . expression GE expression
    (154) expression -> . expression EQ expression
    (155) expression -> . expression NE expression
    (156) expression -> . expression EQL expression
    (157) expression -> . expression NEL expression
    (158) expression -> . expression AND expression
    (159) expression -> . expression XOR expression
    (160) expression -> . expression XNOR expression
    (161) expression -> . expression OR expression
    (162) expression -> . expression LAND expression
    (163) expression -> . expression LOR expression
    (164) expression -> . expression COND expression COLON expression
    (165) expression -> . LPAREN expression RPAREN
    (166) expression -> . concat
    (167) expression -> . repeat
    (168) expression -> . partselect
    (169) expression -> . pointer
    (170) expression -> . functioncall
    (171) expression -> . systemcall
    (172) expression -> . identifier
    (173) expression -> . const_expression
    (174) concat -> . LBRACE concatlist RBRACE
    (177) repeat -> . LBRACE expression concat RBRACE
    (178) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (179) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (180) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (181) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (182) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (183) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (184) pointer -> . identifier LBRACKET expression RBRACKET
    (185) pointer -> . pointer LBRACKET expression RBRACKET
    (373) functioncall -> . identifier LPAREN func_args RPAREN
    (351) systemcall -> . DOLLER ID
    (352) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (353) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (392) identifier -> . ID
    (393) identifier -> . scope ID
    (186) const_expression -> . intnumber
    (187) const_expression -> . floatnumber
    (188) const_expression -> . stringliteral
    (394) scope -> . identifier DOT
    (395) scope -> . pointer DOT
    (190) intnumber -> . INTNUMBER_DEC
    (191) intnumber -> . SIGNED_INTNUMBER_DEC
    (192) intnumber -> . INTNUMBER_BIN
    (193) intnumber -> . SIGNED_INTNUMBER_BIN
    (194) intnumber -> . INTNUMBER_OCT
    (195) intnumber -> . SIGNED_INTNUMBER_OCT
    (196) intnumber -> . INTNUMBER_HEX
    (197) intnumber -> . SIGNED_INTNUMBER_HEX
    (189) floatnumber -> . FLOATNUMBER
    (198) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 88
    PLUS            shift and go to state 89
    LNOT            shift and go to state 90
    NOT             shift and go to state 91
    AND             shift and go to state 92
    NAND            shift and go to state 93
    NOR             shift and go to state 94
    OR              shift and go to state 95
    XOR             shift and go to state 96
    XNOR            shift and go to state 97
    LPAREN          shift and go to state 85
    LBRACE          shift and go to state 106
    DOLLER          shift and go to state 107
    ID              shift and go to state 86
    INTNUMBER_DEC   shift and go to state 112
    SIGNED_INTNUMBER_DEC shift and go to state 113
    INTNUMBER_BIN   shift and go to state 114
    SIGNED_INTNUMBER_BIN shift and go to state 115
    INTNUMBER_OCT   shift and go to state 116
    SIGNED_INTNUMBER_OCT shift and go to state 117
    INTNUMBER_HEX   shift and go to state 118
    SIGNED_INTNUMBER_HEX shift and go to state 119
    FLOATNUMBER     shift and go to state 120
    STRING_LITERAL  shift and go to state 121

    expression                     shift and go to state 560
    concat                         shift and go to state 98
    repeat                         shift and go to state 99
    partselect                     shift and go to state 100
    pointer                        shift and go to state 101
    functioncall                   shift and go to state 102
    systemcall                     shift and go to state 103
    identifier                     shift and go to state 104
    const_expression               shift and go to state 105
    scope                          shift and go to state 108
    intnumber                      shift and go to state 109
    floatnumber                    shift and go to state 110
    stringliteral                  shift and go to state 111

state 447

    (85) declassign_element -> ID EQUALS rvalue .

    SEMICOLON       reduce using rule 85 (declassign_element -> ID EQUALS rvalue .)


state 448

    (129) rvalue -> expression .
    (140) expression -> expression . POWER expression
    (141) expression -> expression . TIMES expression
    (142) expression -> expression . DIVIDE expression
    (143) expression -> expression . MOD expression
    (144) expression -> expression . PLUS expression
    (145) expression -> expression . MINUS expression
    (146) expression -> expression . LSHIFT expression
    (147) expression -> expression . RSHIFT expression
    (148) expression -> expression . LSHIFTA expression
    (149) expression -> expression . RSHIFTA expression
    (150) expression -> expression . LT expression
    (151) expression -> expression . GT expression
    (152) expression -> expression . LE expression
    (153) expression -> expression . GE expression
    (154) expression -> expression . EQ expression
    (155) expression -> expression . NE expression
    (156) expression -> expression . EQL expression
    (157) expression -> expression . NEL expression
    (158) expression -> expression . AND expression
    (159) expression -> expression . XOR expression
    (160) expression -> expression . XNOR expression
    (161) expression -> expression . OR expression
    (162) expression -> expression . LAND expression
    (163) expression -> expression . LOR expression
    (164) expression -> expression . COND expression COLON expression

    SEMICOLON       reduce using rule 129 (rvalue -> expression .)
    COMMA           reduce using rule 129 (rvalue -> expression .)
    RPAREN          reduce using rule 129 (rvalue -> expression .)
    POWER           shift and go to state 236
    TIMES           shift and go to state 398
    DIVIDE          shift and go to state 237
    MOD             shift and go to state 238
    PLUS            shift and go to state 239
    MINUS           shift and go to state 240
    LSHIFT          shift and go to state 241
    RSHIFT          shift and go to state 242
    LSHIFTA         shift and go to state 243
    RSHIFTA         shift and go to state 244
    LT              shift and go to state 245
    GT              shift and go to state 246
    LE              shift and go to state 247
    GE              shift and go to state 248
    EQ              shift and go to state 249
    NE              shift and go to state 250
    EQL             shift and go to state 251
    NEL             shift and go to state 252
    AND             shift and go to state 253
    XOR             shift and go to state 254
    XNOR            shift and go to state 255
    OR              shift and go to state 256
    LAND            shift and go to state 257
    LOR             shift and go to state 258
    COND            shift and go to state 259


state 449

    (55) length -> LBRACKET expression . COLON expression RBRACKET
    (140) expression -> expression . POWER expression
    (141) expression -> expression . TIMES expression
    (142) expression -> expression . DIVIDE expression
    (143) expression -> expression . MOD expression
    (144) expression -> expression . PLUS expression
    (145) expression -> expression . MINUS expression
    (146) expression -> expression . LSHIFT expression
    (147) expression -> expression . RSHIFT expression
    (148) expression -> expression . LSHIFTA expression
    (149) expression -> expression . RSHIFTA expression
    (150) expression -> expression . LT expression
    (151) expression -> expression . GT expression
    (152) expression -> expression . LE expression
    (153) expression -> expression . GE expression
    (154) expression -> expression . EQ expression
    (155) expression -> expression . NE expression
    (156) expression -> expression . EQL expression
    (157) expression -> expression . NEL expression
    (158) expression -> expression . AND expression
    (159) expression -> expression . XOR expression
    (160) expression -> expression . XNOR expression
    (161) expression -> expression . OR expression
    (162) expression -> expression . LAND expression
    (163) expression -> expression . LOR expression
    (164) expression -> expression . COND expression COLON expression

    COLON           shift and go to state 561
    POWER           shift and go to state 236
    TIMES           shift and go to state 398
    DIVIDE          shift and go to state 237
    MOD             shift and go to state 238
    PLUS            shift and go to state 239
    MINUS           shift and go to state 240
    LSHIFT          shift and go to state 241
    RSHIFT          shift and go to state 242
    LSHIFTA         shift and go to state 243
    RSHIFTA         shift and go to state 244
    LT              shift and go to state 245
    GT              shift and go to state 246
    LE              shift and go to state 247
    GE              shift and go to state 248
    EQ              shift and go to state 249
    NE              shift and go to state 250
    EQL             shift and go to state 251
    NEL             shift and go to state 252
    AND             shift and go to state 253
    XOR             shift and go to state 254
    XNOR            shift and go to state 255
    OR              shift and go to state 256
    LAND            shift and go to state 257
    LOR             shift and go to state 258
    COND            shift and go to state 259


state 450

    (86) declassign_element -> delays ID EQUALS . delays rvalue
    (240) delays -> . DELAY LPAREN expression RPAREN
    (241) delays -> . DELAY identifier
    (242) delays -> . DELAY intnumber
    (243) delays -> . DELAY floatnumber
    (244) delays -> . empty
    (400) empty -> .

    DELAY           shift and go to state 140
    MINUS           reduce using rule 400 (empty -> .)
    PLUS            reduce using rule 400 (empty -> .)
    LNOT            reduce using rule 400 (empty -> .)
    NOT             reduce using rule 400 (empty -> .)
    AND             reduce using rule 400 (empty -> .)
    NAND            reduce using rule 400 (empty -> .)
    NOR             reduce using rule 400 (empty -> .)
    OR              reduce using rule 400 (empty -> .)
    XOR             reduce using rule 400 (empty -> .)
    XNOR            reduce using rule 400 (empty -> .)
    LPAREN          reduce using rule 400 (empty -> .)
    LBRACE          reduce using rule 400 (empty -> .)
    DOLLER          reduce using rule 400 (empty -> .)
    ID              reduce using rule 400 (empty -> .)
    INTNUMBER_DEC   reduce using rule 400 (empty -> .)
    SIGNED_INTNUMBER_DEC reduce using rule 400 (empty -> .)
    INTNUMBER_BIN   reduce using rule 400 (empty -> .)
    SIGNED_INTNUMBER_BIN reduce using rule 400 (empty -> .)
    INTNUMBER_OCT   reduce using rule 400 (empty -> .)
    SIGNED_INTNUMBER_OCT reduce using rule 400 (empty -> .)
    INTNUMBER_HEX   reduce using rule 400 (empty -> .)
    SIGNED_INTNUMBER_HEX reduce using rule 400 (empty -> .)
    FLOATNUMBER     reduce using rule 400 (empty -> .)
    STRING_LITERAL  reduce using rule 400 (empty -> .)

    delays                         shift and go to state 562
    empty                          shift and go to state 141

state 451

    (240) delays -> DELAY LPAREN expression . RPAREN
    (140) expression -> expression . POWER expression
    (141) expression -> expression . TIMES expression
    (142) expression -> expression . DIVIDE expression
    (143) expression -> expression . MOD expression
    (144) expression -> expression . PLUS expression
    (145) expression -> expression . MINUS expression
    (146) expression -> expression . LSHIFT expression
    (147) expression -> expression . RSHIFT expression
    (148) expression -> expression . LSHIFTA expression
    (149) expression -> expression . RSHIFTA expression
    (150) expression -> expression . LT expression
    (151) expression -> expression . GT expression
    (152) expression -> expression . LE expression
    (153) expression -> expression . GE expression
    (154) expression -> expression . EQ expression
    (155) expression -> expression . NE expression
    (156) expression -> expression . EQL expression
    (157) expression -> expression . NEL expression
    (158) expression -> expression . AND expression
    (159) expression -> expression . XOR expression
    (160) expression -> expression . XNOR expression
    (161) expression -> expression . OR expression
    (162) expression -> expression . LAND expression
    (163) expression -> expression . LOR expression
    (164) expression -> expression . COND expression COLON expression

    RPAREN          shift and go to state 563
    POWER           shift and go to state 236
    TIMES           shift and go to state 398
    DIVIDE          shift and go to state 237
    MOD             shift and go to state 238
    PLUS            shift and go to state 239
    MINUS           shift and go to state 240
    LSHIFT          shift and go to state 241
    RSHIFT          shift and go to state 242
    LSHIFTA         shift and go to state 243
    RSHIFTA         shift and go to state 244
    LT              shift and go to state 245
    GT              shift and go to state 246
    LE              shift and go to state 247
    GE              shift and go to state 248
    EQ              shift and go to state 249
    NE              shift and go to state 250
    EQL             shift and go to state 251
    NEL             shift and go to state 252
    AND             shift and go to state 253
    XOR             shift and go to state 254
    XNOR            shift and go to state 255
    OR              shift and go to state 256
    LAND            shift and go to state 257
    LOR             shift and go to state 258
    COND            shift and go to state 259


state 452

    (184) pointer -> identifier LBRACKET . expression RBRACKET
    (130) expression -> . MINUS expression
    (131) expression -> . PLUS expression
    (132) expression -> . LNOT expression
    (133) expression -> . NOT expression
    (134) expression -> . AND expression
    (135) expression -> . NAND expression
    (136) expression -> . NOR expression
    (137) expression -> . OR expression
    (138) expression -> . XOR expression
    (139) expression -> . XNOR expression
    (140) expression -> . expression POWER expression
    (141) expression -> . expression TIMES expression
    (142) expression -> . expression DIVIDE expression
    (143) expression -> . expression MOD expression
    (144) expression -> . expression PLUS expression
    (145) expression -> . expression MINUS expression
    (146) expression -> . expression LSHIFT expression
    (147) expression -> . expression RSHIFT expression
    (148) expression -> . expression LSHIFTA expression
    (149) expression -> . expression RSHIFTA expression
    (150) expression -> . expression LT expression
    (151) expression -> . expression GT expression
    (152) expression -> . expression LE expression
    (153) expression -> . expression GE expression
    (154) expression -> . expression EQ expression
    (155) expression -> . expression NE expression
    (156) expression -> . expression EQL expression
    (157) expression -> . expression NEL expression
    (158) expression -> . expression AND expression
    (159) expression -> . expression XOR expression
    (160) expression -> . expression XNOR expression
    (161) expression -> . expression OR expression
    (162) expression -> . expression LAND expression
    (163) expression -> . expression LOR expression
    (164) expression -> . expression COND expression COLON expression
    (165) expression -> . LPAREN expression RPAREN
    (166) expression -> . concat
    (167) expression -> . repeat
    (168) expression -> . partselect
    (169) expression -> . pointer
    (170) expression -> . functioncall
    (171) expression -> . systemcall
    (172) expression -> . identifier
    (173) expression -> . const_expression
    (174) concat -> . LBRACE concatlist RBRACE
    (177) repeat -> . LBRACE expression concat RBRACE
    (178) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (179) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (180) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (181) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (182) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (183) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (184) pointer -> . identifier LBRACKET expression RBRACKET
    (185) pointer -> . pointer LBRACKET expression RBRACKET
    (373) functioncall -> . identifier LPAREN func_args RPAREN
    (351) systemcall -> . DOLLER ID
    (352) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (353) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (392) identifier -> . ID
    (393) identifier -> . scope ID
    (186) const_expression -> . intnumber
    (187) const_expression -> . floatnumber
    (188) const_expression -> . stringliteral
    (394) scope -> . identifier DOT
    (395) scope -> . pointer DOT
    (190) intnumber -> . INTNUMBER_DEC
    (191) intnumber -> . SIGNED_INTNUMBER_DEC
    (192) intnumber -> . INTNUMBER_BIN
    (193) intnumber -> . SIGNED_INTNUMBER_BIN
    (194) intnumber -> . INTNUMBER_OCT
    (195) intnumber -> . SIGNED_INTNUMBER_OCT
    (196) intnumber -> . INTNUMBER_HEX
    (197) intnumber -> . SIGNED_INTNUMBER_HEX
    (189) floatnumber -> . FLOATNUMBER
    (198) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 88
    PLUS            shift and go to state 89
    LNOT            shift and go to state 90
    NOT             shift and go to state 91
    AND             shift and go to state 92
    NAND            shift and go to state 93
    NOR             shift and go to state 94
    OR              shift and go to state 95
    XOR             shift and go to state 96
    XNOR            shift and go to state 97
    LPAREN          shift and go to state 85
    LBRACE          shift and go to state 106
    DOLLER          shift and go to state 107
    ID              shift and go to state 86
    INTNUMBER_DEC   shift and go to state 112
    SIGNED_INTNUMBER_DEC shift and go to state 113
    INTNUMBER_BIN   shift and go to state 114
    SIGNED_INTNUMBER_BIN shift and go to state 115
    INTNUMBER_OCT   shift and go to state 116
    SIGNED_INTNUMBER_OCT shift and go to state 117
    INTNUMBER_HEX   shift and go to state 118
    SIGNED_INTNUMBER_HEX shift and go to state 119
    FLOATNUMBER     shift and go to state 120
    STRING_LITERAL  shift and go to state 121

    identifier                     shift and go to state 104
    expression                     shift and go to state 564
    concat                         shift and go to state 98
    repeat                         shift and go to state 99
    partselect                     shift and go to state 100
    pointer                        shift and go to state 101
    functioncall                   shift and go to state 102
    systemcall                     shift and go to state 103
    const_expression               shift and go to state 105
    scope                          shift and go to state 108
    intnumber                      shift and go to state 109
    floatnumber                    shift and go to state 110
    stringliteral                  shift and go to state 111

state 453

    (185) pointer -> pointer LBRACKET . expression RBRACKET
    (130) expression -> . MINUS expression
    (131) expression -> . PLUS expression
    (132) expression -> . LNOT expression
    (133) expression -> . NOT expression
    (134) expression -> . AND expression
    (135) expression -> . NAND expression
    (136) expression -> . NOR expression
    (137) expression -> . OR expression
    (138) expression -> . XOR expression
    (139) expression -> . XNOR expression
    (140) expression -> . expression POWER expression
    (141) expression -> . expression TIMES expression
    (142) expression -> . expression DIVIDE expression
    (143) expression -> . expression MOD expression
    (144) expression -> . expression PLUS expression
    (145) expression -> . expression MINUS expression
    (146) expression -> . expression LSHIFT expression
    (147) expression -> . expression RSHIFT expression
    (148) expression -> . expression LSHIFTA expression
    (149) expression -> . expression RSHIFTA expression
    (150) expression -> . expression LT expression
    (151) expression -> . expression GT expression
    (152) expression -> . expression LE expression
    (153) expression -> . expression GE expression
    (154) expression -> . expression EQ expression
    (155) expression -> . expression NE expression
    (156) expression -> . expression EQL expression
    (157) expression -> . expression NEL expression
    (158) expression -> . expression AND expression
    (159) expression -> . expression XOR expression
    (160) expression -> . expression XNOR expression
    (161) expression -> . expression OR expression
    (162) expression -> . expression LAND expression
    (163) expression -> . expression LOR expression
    (164) expression -> . expression COND expression COLON expression
    (165) expression -> . LPAREN expression RPAREN
    (166) expression -> . concat
    (167) expression -> . repeat
    (168) expression -> . partselect
    (169) expression -> . pointer
    (170) expression -> . functioncall
    (171) expression -> . systemcall
    (172) expression -> . identifier
    (173) expression -> . const_expression
    (174) concat -> . LBRACE concatlist RBRACE
    (177) repeat -> . LBRACE expression concat RBRACE
    (178) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (179) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (180) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (181) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (182) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (183) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (184) pointer -> . identifier LBRACKET expression RBRACKET
    (185) pointer -> . pointer LBRACKET expression RBRACKET
    (373) functioncall -> . identifier LPAREN func_args RPAREN
    (351) systemcall -> . DOLLER ID
    (352) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (353) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (392) identifier -> . ID
    (393) identifier -> . scope ID
    (186) const_expression -> . intnumber
    (187) const_expression -> . floatnumber
    (188) const_expression -> . stringliteral
    (394) scope -> . identifier DOT
    (395) scope -> . pointer DOT
    (190) intnumber -> . INTNUMBER_DEC
    (191) intnumber -> . SIGNED_INTNUMBER_DEC
    (192) intnumber -> . INTNUMBER_BIN
    (193) intnumber -> . SIGNED_INTNUMBER_BIN
    (194) intnumber -> . INTNUMBER_OCT
    (195) intnumber -> . SIGNED_INTNUMBER_OCT
    (196) intnumber -> . INTNUMBER_HEX
    (197) intnumber -> . SIGNED_INTNUMBER_HEX
    (189) floatnumber -> . FLOATNUMBER
    (198) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 88
    PLUS            shift and go to state 89
    LNOT            shift and go to state 90
    NOT             shift and go to state 91
    AND             shift and go to state 92
    NAND            shift and go to state 93
    NOR             shift and go to state 94
    OR              shift and go to state 95
    XOR             shift and go to state 96
    XNOR            shift and go to state 97
    LPAREN          shift and go to state 85
    LBRACE          shift and go to state 106
    DOLLER          shift and go to state 107
    ID              shift and go to state 86
    INTNUMBER_DEC   shift and go to state 112
    SIGNED_INTNUMBER_DEC shift and go to state 113
    INTNUMBER_BIN   shift and go to state 114
    SIGNED_INTNUMBER_BIN shift and go to state 115
    INTNUMBER_OCT   shift and go to state 116
    SIGNED_INTNUMBER_OCT shift and go to state 117
    INTNUMBER_HEX   shift and go to state 118
    SIGNED_INTNUMBER_HEX shift and go to state 119
    FLOATNUMBER     shift and go to state 120
    STRING_LITERAL  shift and go to state 121

    pointer                        shift and go to state 101
    expression                     shift and go to state 565
    concat                         shift and go to state 98
    repeat                         shift and go to state 99
    partselect                     shift and go to state 100
    functioncall                   shift and go to state 102
    systemcall                     shift and go to state 103
    identifier                     shift and go to state 104
    const_expression               shift and go to state 105
    scope                          shift and go to state 108
    intnumber                      shift and go to state 109
    floatnumber                    shift and go to state 110
    stringliteral                  shift and go to state 111

state 454

    (89) integernamelist -> integernamelist COMMA integername .

    SEMICOLON       reduce using rule 89 (integernamelist -> integernamelist COMMA integername .)
    COMMA           reduce using rule 89 (integernamelist -> integernamelist COMMA integername .)


state 455

    (88) integerdecl -> INTEGER SIGNED integernamelist SEMICOLON .

    ENDMODULE       reduce using rule 88 (integerdecl -> INTEGER SIGNED integernamelist SEMICOLON .)
    GENERATE        reduce using rule 88 (integerdecl -> INTEGER SIGNED integernamelist SEMICOLON .)
    INTEGER         reduce using rule 88 (integerdecl -> INTEGER SIGNED integernamelist SEMICOLON .)
    REAL            reduce using rule 88 (integerdecl -> INTEGER SIGNED integernamelist SEMICOLON .)
    PARAMETER       reduce using rule 88 (integerdecl -> INTEGER SIGNED integernamelist SEMICOLON .)
    LOCALPARAM      reduce using rule 88 (integerdecl -> INTEGER SIGNED integernamelist SEMICOLON .)
    GENVAR          reduce using rule 88 (integerdecl -> INTEGER SIGNED integernamelist SEMICOLON .)
    ASSIGN          reduce using rule 88 (integerdecl -> INTEGER SIGNED integernamelist SEMICOLON .)
    ALWAYS          reduce using rule 88 (integerdecl -> INTEGER SIGNED integernamelist SEMICOLON .)
    ALWAYS_FF       reduce using rule 88 (integerdecl -> INTEGER SIGNED integernamelist SEMICOLON .)
    ALWAYS_COMB     reduce using rule 88 (integerdecl -> INTEGER SIGNED integernamelist SEMICOLON .)
    INITIAL         reduce using rule 88 (integerdecl -> INTEGER SIGNED integernamelist SEMICOLON .)
    ID              reduce using rule 88 (integerdecl -> INTEGER SIGNED integernamelist SEMICOLON .)
    SENS_OR         reduce using rule 88 (integerdecl -> INTEGER SIGNED integernamelist SEMICOLON .)
    FUNCTION        reduce using rule 88 (integerdecl -> INTEGER SIGNED integernamelist SEMICOLON .)
    TASK            reduce using rule 88 (integerdecl -> INTEGER SIGNED integernamelist SEMICOLON .)
    LPAREN          reduce using rule 88 (integerdecl -> INTEGER SIGNED integernamelist SEMICOLON .)
    INPUT           reduce using rule 88 (integerdecl -> INTEGER SIGNED integernamelist SEMICOLON .)
    OUTPUT          reduce using rule 88 (integerdecl -> INTEGER SIGNED integernamelist SEMICOLON .)
    INOUT           reduce using rule 88 (integerdecl -> INTEGER SIGNED integernamelist SEMICOLON .)
    TRI             reduce using rule 88 (integerdecl -> INTEGER SIGNED integernamelist SEMICOLON .)
    REG             reduce using rule 88 (integerdecl -> INTEGER SIGNED integernamelist SEMICOLON .)
    LOGIC           reduce using rule 88 (integerdecl -> INTEGER SIGNED integernamelist SEMICOLON .)
    WIRE            reduce using rule 88 (integerdecl -> INTEGER SIGNED integernamelist SEMICOLON .)
    SIGNED          reduce using rule 88 (integerdecl -> INTEGER SIGNED integernamelist SEMICOLON .)
    SUPPLY0         reduce using rule 88 (integerdecl -> INTEGER SIGNED integernamelist SEMICOLON .)
    SUPPLY1         reduce using rule 88 (integerdecl -> INTEGER SIGNED integernamelist SEMICOLON .)
    ENDGENERATE     reduce using rule 88 (integerdecl -> INTEGER SIGNED integernamelist SEMICOLON .)
    IF              reduce using rule 88 (integerdecl -> INTEGER SIGNED integernamelist SEMICOLON .)
    FOR             reduce using rule 88 (integerdecl -> INTEGER SIGNED integernamelist SEMICOLON .)
    WHILE           reduce using rule 88 (integerdecl -> INTEGER SIGNED integernamelist SEMICOLON .)
    CASE            reduce using rule 88 (integerdecl -> INTEGER SIGNED integernamelist SEMICOLON .)
    CASEX           reduce using rule 88 (integerdecl -> INTEGER SIGNED integernamelist SEMICOLON .)
    BEGIN           reduce using rule 88 (integerdecl -> INTEGER SIGNED integernamelist SEMICOLON .)
    DELAY           reduce using rule 88 (integerdecl -> INTEGER SIGNED integernamelist SEMICOLON .)
    LBRACE          reduce using rule 88 (integerdecl -> INTEGER SIGNED integernamelist SEMICOLON .)
    END             reduce using rule 88 (integerdecl -> INTEGER SIGNED integernamelist SEMICOLON .)
    UNIQUE          reduce using rule 88 (integerdecl -> INTEGER SIGNED integernamelist SEMICOLON .)
    WAIT            reduce using rule 88 (integerdecl -> INTEGER SIGNED integernamelist SEMICOLON .)
    FOREVER         reduce using rule 88 (integerdecl -> INTEGER SIGNED integernamelist SEMICOLON .)
    FORK            reduce using rule 88 (integerdecl -> INTEGER SIGNED integernamelist SEMICOLON .)
    AT              reduce using rule 88 (integerdecl -> INTEGER SIGNED integernamelist SEMICOLON .)
    DOLLER          reduce using rule 88 (integerdecl -> INTEGER SIGNED integernamelist SEMICOLON .)
    DISABLE         reduce using rule 88 (integerdecl -> INTEGER SIGNED integernamelist SEMICOLON .)
    SEMICOLON       reduce using rule 88 (integerdecl -> INTEGER SIGNED integernamelist SEMICOLON .)
    ELSE            reduce using rule 88 (integerdecl -> INTEGER SIGNED integernamelist SEMICOLON .)


state 456

    (93) realnamelist -> realnamelist COMMA realname .

    SEMICOLON       reduce using rule 93 (realnamelist -> realnamelist COMMA realname .)
    COMMA           reduce using rule 93 (realnamelist -> realnamelist COMMA realname .)


state 457

    (106) param_substitution_list -> param_substitution_list COMMA param_substitution .

    SEMICOLON       reduce using rule 106 (param_substitution_list -> param_substitution_list COMMA param_substitution .)
    COMMA           reduce using rule 106 (param_substitution_list -> param_substitution_list COMMA param_substitution .)
    RPAREN          reduce using rule 106 (param_substitution_list -> param_substitution_list COMMA param_substitution .)


state 458

    (97) parameterdecl -> PARAMETER SIGNED param_substitution_list SEMICOLON .

    ENDMODULE       reduce using rule 97 (parameterdecl -> PARAMETER SIGNED param_substitution_list SEMICOLON .)
    GENERATE        reduce using rule 97 (parameterdecl -> PARAMETER SIGNED param_substitution_list SEMICOLON .)
    INTEGER         reduce using rule 97 (parameterdecl -> PARAMETER SIGNED param_substitution_list SEMICOLON .)
    REAL            reduce using rule 97 (parameterdecl -> PARAMETER SIGNED param_substitution_list SEMICOLON .)
    PARAMETER       reduce using rule 97 (parameterdecl -> PARAMETER SIGNED param_substitution_list SEMICOLON .)
    LOCALPARAM      reduce using rule 97 (parameterdecl -> PARAMETER SIGNED param_substitution_list SEMICOLON .)
    GENVAR          reduce using rule 97 (parameterdecl -> PARAMETER SIGNED param_substitution_list SEMICOLON .)
    ASSIGN          reduce using rule 97 (parameterdecl -> PARAMETER SIGNED param_substitution_list SEMICOLON .)
    ALWAYS          reduce using rule 97 (parameterdecl -> PARAMETER SIGNED param_substitution_list SEMICOLON .)
    ALWAYS_FF       reduce using rule 97 (parameterdecl -> PARAMETER SIGNED param_substitution_list SEMICOLON .)
    ALWAYS_COMB     reduce using rule 97 (parameterdecl -> PARAMETER SIGNED param_substitution_list SEMICOLON .)
    INITIAL         reduce using rule 97 (parameterdecl -> PARAMETER SIGNED param_substitution_list SEMICOLON .)
    ID              reduce using rule 97 (parameterdecl -> PARAMETER SIGNED param_substitution_list SEMICOLON .)
    SENS_OR         reduce using rule 97 (parameterdecl -> PARAMETER SIGNED param_substitution_list SEMICOLON .)
    FUNCTION        reduce using rule 97 (parameterdecl -> PARAMETER SIGNED param_substitution_list SEMICOLON .)
    TASK            reduce using rule 97 (parameterdecl -> PARAMETER SIGNED param_substitution_list SEMICOLON .)
    LPAREN          reduce using rule 97 (parameterdecl -> PARAMETER SIGNED param_substitution_list SEMICOLON .)
    INPUT           reduce using rule 97 (parameterdecl -> PARAMETER SIGNED param_substitution_list SEMICOLON .)
    OUTPUT          reduce using rule 97 (parameterdecl -> PARAMETER SIGNED param_substitution_list SEMICOLON .)
    INOUT           reduce using rule 97 (parameterdecl -> PARAMETER SIGNED param_substitution_list SEMICOLON .)
    TRI             reduce using rule 97 (parameterdecl -> PARAMETER SIGNED param_substitution_list SEMICOLON .)
    REG             reduce using rule 97 (parameterdecl -> PARAMETER SIGNED param_substitution_list SEMICOLON .)
    LOGIC           reduce using rule 97 (parameterdecl -> PARAMETER SIGNED param_substitution_list SEMICOLON .)
    WIRE            reduce using rule 97 (parameterdecl -> PARAMETER SIGNED param_substitution_list SEMICOLON .)
    SIGNED          reduce using rule 97 (parameterdecl -> PARAMETER SIGNED param_substitution_list SEMICOLON .)
    SUPPLY0         reduce using rule 97 (parameterdecl -> PARAMETER SIGNED param_substitution_list SEMICOLON .)
    SUPPLY1         reduce using rule 97 (parameterdecl -> PARAMETER SIGNED param_substitution_list SEMICOLON .)
    ENDGENERATE     reduce using rule 97 (parameterdecl -> PARAMETER SIGNED param_substitution_list SEMICOLON .)
    IF              reduce using rule 97 (parameterdecl -> PARAMETER SIGNED param_substitution_list SEMICOLON .)
    FOR             reduce using rule 97 (parameterdecl -> PARAMETER SIGNED param_substitution_list SEMICOLON .)
    END             reduce using rule 97 (parameterdecl -> PARAMETER SIGNED param_substitution_list SEMICOLON .)
    CASE            reduce using rule 97 (parameterdecl -> PARAMETER SIGNED param_substitution_list SEMICOLON .)
    CASEX           reduce using rule 97 (parameterdecl -> PARAMETER SIGNED param_substitution_list SEMICOLON .)
    UNIQUE          reduce using rule 97 (parameterdecl -> PARAMETER SIGNED param_substitution_list SEMICOLON .)
    WHILE           reduce using rule 97 (parameterdecl -> PARAMETER SIGNED param_substitution_list SEMICOLON .)
    WAIT            reduce using rule 97 (parameterdecl -> PARAMETER SIGNED param_substitution_list SEMICOLON .)
    FOREVER         reduce using rule 97 (parameterdecl -> PARAMETER SIGNED param_substitution_list SEMICOLON .)
    BEGIN           reduce using rule 97 (parameterdecl -> PARAMETER SIGNED param_substitution_list SEMICOLON .)
    FORK            reduce using rule 97 (parameterdecl -> PARAMETER SIGNED param_substitution_list SEMICOLON .)
    DELAY           reduce using rule 97 (parameterdecl -> PARAMETER SIGNED param_substitution_list SEMICOLON .)
    AT              reduce using rule 97 (parameterdecl -> PARAMETER SIGNED param_substitution_list SEMICOLON .)
    DOLLER          reduce using rule 97 (parameterdecl -> PARAMETER SIGNED param_substitution_list SEMICOLON .)
    DISABLE         reduce using rule 97 (parameterdecl -> PARAMETER SIGNED param_substitution_list SEMICOLON .)
    LBRACE          reduce using rule 97 (parameterdecl -> PARAMETER SIGNED param_substitution_list SEMICOLON .)
    SEMICOLON       reduce using rule 97 (parameterdecl -> PARAMETER SIGNED param_substitution_list SEMICOLON .)
    ELSE            reduce using rule 97 (parameterdecl -> PARAMETER SIGNED param_substitution_list SEMICOLON .)


state 459

    (99) parameterdecl -> PARAMETER SIGNED width param_substitution_list . SEMICOLON
    (106) param_substitution_list -> param_substitution_list . COMMA param_substitution

    SEMICOLON       shift and go to state 566
    COMMA           shift and go to state 305


state 460

    (98) parameterdecl -> PARAMETER width param_substitution_list SEMICOLON .

    ENDMODULE       reduce using rule 98 (parameterdecl -> PARAMETER width param_substitution_list SEMICOLON .)
    GENERATE        reduce using rule 98 (parameterdecl -> PARAMETER width param_substitution_list SEMICOLON .)
    INTEGER         reduce using rule 98 (parameterdecl -> PARAMETER width param_substitution_list SEMICOLON .)
    REAL            reduce using rule 98 (parameterdecl -> PARAMETER width param_substitution_list SEMICOLON .)
    PARAMETER       reduce using rule 98 (parameterdecl -> PARAMETER width param_substitution_list SEMICOLON .)
    LOCALPARAM      reduce using rule 98 (parameterdecl -> PARAMETER width param_substitution_list SEMICOLON .)
    GENVAR          reduce using rule 98 (parameterdecl -> PARAMETER width param_substitution_list SEMICOLON .)
    ASSIGN          reduce using rule 98 (parameterdecl -> PARAMETER width param_substitution_list SEMICOLON .)
    ALWAYS          reduce using rule 98 (parameterdecl -> PARAMETER width param_substitution_list SEMICOLON .)
    ALWAYS_FF       reduce using rule 98 (parameterdecl -> PARAMETER width param_substitution_list SEMICOLON .)
    ALWAYS_COMB     reduce using rule 98 (parameterdecl -> PARAMETER width param_substitution_list SEMICOLON .)
    INITIAL         reduce using rule 98 (parameterdecl -> PARAMETER width param_substitution_list SEMICOLON .)
    ID              reduce using rule 98 (parameterdecl -> PARAMETER width param_substitution_list SEMICOLON .)
    SENS_OR         reduce using rule 98 (parameterdecl -> PARAMETER width param_substitution_list SEMICOLON .)
    FUNCTION        reduce using rule 98 (parameterdecl -> PARAMETER width param_substitution_list SEMICOLON .)
    TASK            reduce using rule 98 (parameterdecl -> PARAMETER width param_substitution_list SEMICOLON .)
    LPAREN          reduce using rule 98 (parameterdecl -> PARAMETER width param_substitution_list SEMICOLON .)
    INPUT           reduce using rule 98 (parameterdecl -> PARAMETER width param_substitution_list SEMICOLON .)
    OUTPUT          reduce using rule 98 (parameterdecl -> PARAMETER width param_substitution_list SEMICOLON .)
    INOUT           reduce using rule 98 (parameterdecl -> PARAMETER width param_substitution_list SEMICOLON .)
    TRI             reduce using rule 98 (parameterdecl -> PARAMETER width param_substitution_list SEMICOLON .)
    REG             reduce using rule 98 (parameterdecl -> PARAMETER width param_substitution_list SEMICOLON .)
    LOGIC           reduce using rule 98 (parameterdecl -> PARAMETER width param_substitution_list SEMICOLON .)
    WIRE            reduce using rule 98 (parameterdecl -> PARAMETER width param_substitution_list SEMICOLON .)
    SIGNED          reduce using rule 98 (parameterdecl -> PARAMETER width param_substitution_list SEMICOLON .)
    SUPPLY0         reduce using rule 98 (parameterdecl -> PARAMETER width param_substitution_list SEMICOLON .)
    SUPPLY1         reduce using rule 98 (parameterdecl -> PARAMETER width param_substitution_list SEMICOLON .)
    ENDGENERATE     reduce using rule 98 (parameterdecl -> PARAMETER width param_substitution_list SEMICOLON .)
    IF              reduce using rule 98 (parameterdecl -> PARAMETER width param_substitution_list SEMICOLON .)
    FOR             reduce using rule 98 (parameterdecl -> PARAMETER width param_substitution_list SEMICOLON .)
    END             reduce using rule 98 (parameterdecl -> PARAMETER width param_substitution_list SEMICOLON .)
    CASE            reduce using rule 98 (parameterdecl -> PARAMETER width param_substitution_list SEMICOLON .)
    CASEX           reduce using rule 98 (parameterdecl -> PARAMETER width param_substitution_list SEMICOLON .)
    UNIQUE          reduce using rule 98 (parameterdecl -> PARAMETER width param_substitution_list SEMICOLON .)
    WHILE           reduce using rule 98 (parameterdecl -> PARAMETER width param_substitution_list SEMICOLON .)
    WAIT            reduce using rule 98 (parameterdecl -> PARAMETER width param_substitution_list SEMICOLON .)
    FOREVER         reduce using rule 98 (parameterdecl -> PARAMETER width param_substitution_list SEMICOLON .)
    BEGIN           reduce using rule 98 (parameterdecl -> PARAMETER width param_substitution_list SEMICOLON .)
    FORK            reduce using rule 98 (parameterdecl -> PARAMETER width param_substitution_list SEMICOLON .)
    DELAY           reduce using rule 98 (parameterdecl -> PARAMETER width param_substitution_list SEMICOLON .)
    AT              reduce using rule 98 (parameterdecl -> PARAMETER width param_substitution_list SEMICOLON .)
    DOLLER          reduce using rule 98 (parameterdecl -> PARAMETER width param_substitution_list SEMICOLON .)
    DISABLE         reduce using rule 98 (parameterdecl -> PARAMETER width param_substitution_list SEMICOLON .)
    LBRACE          reduce using rule 98 (parameterdecl -> PARAMETER width param_substitution_list SEMICOLON .)
    SEMICOLON       reduce using rule 98 (parameterdecl -> PARAMETER width param_substitution_list SEMICOLON .)
    ELSE            reduce using rule 98 (parameterdecl -> PARAMETER width param_substitution_list SEMICOLON .)


state 461

    (100) parameterdecl -> PARAMETER INTEGER param_substitution_list SEMICOLON .

    ENDMODULE       reduce using rule 100 (parameterdecl -> PARAMETER INTEGER param_substitution_list SEMICOLON .)
    GENERATE        reduce using rule 100 (parameterdecl -> PARAMETER INTEGER param_substitution_list SEMICOLON .)
    INTEGER         reduce using rule 100 (parameterdecl -> PARAMETER INTEGER param_substitution_list SEMICOLON .)
    REAL            reduce using rule 100 (parameterdecl -> PARAMETER INTEGER param_substitution_list SEMICOLON .)
    PARAMETER       reduce using rule 100 (parameterdecl -> PARAMETER INTEGER param_substitution_list SEMICOLON .)
    LOCALPARAM      reduce using rule 100 (parameterdecl -> PARAMETER INTEGER param_substitution_list SEMICOLON .)
    GENVAR          reduce using rule 100 (parameterdecl -> PARAMETER INTEGER param_substitution_list SEMICOLON .)
    ASSIGN          reduce using rule 100 (parameterdecl -> PARAMETER INTEGER param_substitution_list SEMICOLON .)
    ALWAYS          reduce using rule 100 (parameterdecl -> PARAMETER INTEGER param_substitution_list SEMICOLON .)
    ALWAYS_FF       reduce using rule 100 (parameterdecl -> PARAMETER INTEGER param_substitution_list SEMICOLON .)
    ALWAYS_COMB     reduce using rule 100 (parameterdecl -> PARAMETER INTEGER param_substitution_list SEMICOLON .)
    INITIAL         reduce using rule 100 (parameterdecl -> PARAMETER INTEGER param_substitution_list SEMICOLON .)
    ID              reduce using rule 100 (parameterdecl -> PARAMETER INTEGER param_substitution_list SEMICOLON .)
    SENS_OR         reduce using rule 100 (parameterdecl -> PARAMETER INTEGER param_substitution_list SEMICOLON .)
    FUNCTION        reduce using rule 100 (parameterdecl -> PARAMETER INTEGER param_substitution_list SEMICOLON .)
    TASK            reduce using rule 100 (parameterdecl -> PARAMETER INTEGER param_substitution_list SEMICOLON .)
    LPAREN          reduce using rule 100 (parameterdecl -> PARAMETER INTEGER param_substitution_list SEMICOLON .)
    INPUT           reduce using rule 100 (parameterdecl -> PARAMETER INTEGER param_substitution_list SEMICOLON .)
    OUTPUT          reduce using rule 100 (parameterdecl -> PARAMETER INTEGER param_substitution_list SEMICOLON .)
    INOUT           reduce using rule 100 (parameterdecl -> PARAMETER INTEGER param_substitution_list SEMICOLON .)
    TRI             reduce using rule 100 (parameterdecl -> PARAMETER INTEGER param_substitution_list SEMICOLON .)
    REG             reduce using rule 100 (parameterdecl -> PARAMETER INTEGER param_substitution_list SEMICOLON .)
    LOGIC           reduce using rule 100 (parameterdecl -> PARAMETER INTEGER param_substitution_list SEMICOLON .)
    WIRE            reduce using rule 100 (parameterdecl -> PARAMETER INTEGER param_substitution_list SEMICOLON .)
    SIGNED          reduce using rule 100 (parameterdecl -> PARAMETER INTEGER param_substitution_list SEMICOLON .)
    SUPPLY0         reduce using rule 100 (parameterdecl -> PARAMETER INTEGER param_substitution_list SEMICOLON .)
    SUPPLY1         reduce using rule 100 (parameterdecl -> PARAMETER INTEGER param_substitution_list SEMICOLON .)
    ENDGENERATE     reduce using rule 100 (parameterdecl -> PARAMETER INTEGER param_substitution_list SEMICOLON .)
    IF              reduce using rule 100 (parameterdecl -> PARAMETER INTEGER param_substitution_list SEMICOLON .)
    FOR             reduce using rule 100 (parameterdecl -> PARAMETER INTEGER param_substitution_list SEMICOLON .)
    END             reduce using rule 100 (parameterdecl -> PARAMETER INTEGER param_substitution_list SEMICOLON .)
    CASE            reduce using rule 100 (parameterdecl -> PARAMETER INTEGER param_substitution_list SEMICOLON .)
    CASEX           reduce using rule 100 (parameterdecl -> PARAMETER INTEGER param_substitution_list SEMICOLON .)
    UNIQUE          reduce using rule 100 (parameterdecl -> PARAMETER INTEGER param_substitution_list SEMICOLON .)
    WHILE           reduce using rule 100 (parameterdecl -> PARAMETER INTEGER param_substitution_list SEMICOLON .)
    WAIT            reduce using rule 100 (parameterdecl -> PARAMETER INTEGER param_substitution_list SEMICOLON .)
    FOREVER         reduce using rule 100 (parameterdecl -> PARAMETER INTEGER param_substitution_list SEMICOLON .)
    BEGIN           reduce using rule 100 (parameterdecl -> PARAMETER INTEGER param_substitution_list SEMICOLON .)
    FORK            reduce using rule 100 (parameterdecl -> PARAMETER INTEGER param_substitution_list SEMICOLON .)
    DELAY           reduce using rule 100 (parameterdecl -> PARAMETER INTEGER param_substitution_list SEMICOLON .)
    AT              reduce using rule 100 (parameterdecl -> PARAMETER INTEGER param_substitution_list SEMICOLON .)
    DOLLER          reduce using rule 100 (parameterdecl -> PARAMETER INTEGER param_substitution_list SEMICOLON .)
    DISABLE         reduce using rule 100 (parameterdecl -> PARAMETER INTEGER param_substitution_list SEMICOLON .)
    LBRACE          reduce using rule 100 (parameterdecl -> PARAMETER INTEGER param_substitution_list SEMICOLON .)
    SEMICOLON       reduce using rule 100 (parameterdecl -> PARAMETER INTEGER param_substitution_list SEMICOLON .)
    ELSE            reduce using rule 100 (parameterdecl -> PARAMETER INTEGER param_substitution_list SEMICOLON .)


state 462

    (108) param_substitution -> ID EQUALS rvalue .

    SEMICOLON       reduce using rule 108 (param_substitution -> ID EQUALS rvalue .)
    COMMA           reduce using rule 108 (param_substitution -> ID EQUALS rvalue .)
    RPAREN          reduce using rule 108 (param_substitution -> ID EQUALS rvalue .)


state 463

    (102) localparamdecl -> LOCALPARAM SIGNED param_substitution_list SEMICOLON .

    ENDMODULE       reduce using rule 102 (localparamdecl -> LOCALPARAM SIGNED param_substitution_list SEMICOLON .)
    GENERATE        reduce using rule 102 (localparamdecl -> LOCALPARAM SIGNED param_substitution_list SEMICOLON .)
    INTEGER         reduce using rule 102 (localparamdecl -> LOCALPARAM SIGNED param_substitution_list SEMICOLON .)
    REAL            reduce using rule 102 (localparamdecl -> LOCALPARAM SIGNED param_substitution_list SEMICOLON .)
    PARAMETER       reduce using rule 102 (localparamdecl -> LOCALPARAM SIGNED param_substitution_list SEMICOLON .)
    LOCALPARAM      reduce using rule 102 (localparamdecl -> LOCALPARAM SIGNED param_substitution_list SEMICOLON .)
    GENVAR          reduce using rule 102 (localparamdecl -> LOCALPARAM SIGNED param_substitution_list SEMICOLON .)
    ASSIGN          reduce using rule 102 (localparamdecl -> LOCALPARAM SIGNED param_substitution_list SEMICOLON .)
    ALWAYS          reduce using rule 102 (localparamdecl -> LOCALPARAM SIGNED param_substitution_list SEMICOLON .)
    ALWAYS_FF       reduce using rule 102 (localparamdecl -> LOCALPARAM SIGNED param_substitution_list SEMICOLON .)
    ALWAYS_COMB     reduce using rule 102 (localparamdecl -> LOCALPARAM SIGNED param_substitution_list SEMICOLON .)
    INITIAL         reduce using rule 102 (localparamdecl -> LOCALPARAM SIGNED param_substitution_list SEMICOLON .)
    ID              reduce using rule 102 (localparamdecl -> LOCALPARAM SIGNED param_substitution_list SEMICOLON .)
    SENS_OR         reduce using rule 102 (localparamdecl -> LOCALPARAM SIGNED param_substitution_list SEMICOLON .)
    FUNCTION        reduce using rule 102 (localparamdecl -> LOCALPARAM SIGNED param_substitution_list SEMICOLON .)
    TASK            reduce using rule 102 (localparamdecl -> LOCALPARAM SIGNED param_substitution_list SEMICOLON .)
    LPAREN          reduce using rule 102 (localparamdecl -> LOCALPARAM SIGNED param_substitution_list SEMICOLON .)
    INPUT           reduce using rule 102 (localparamdecl -> LOCALPARAM SIGNED param_substitution_list SEMICOLON .)
    OUTPUT          reduce using rule 102 (localparamdecl -> LOCALPARAM SIGNED param_substitution_list SEMICOLON .)
    INOUT           reduce using rule 102 (localparamdecl -> LOCALPARAM SIGNED param_substitution_list SEMICOLON .)
    TRI             reduce using rule 102 (localparamdecl -> LOCALPARAM SIGNED param_substitution_list SEMICOLON .)
    REG             reduce using rule 102 (localparamdecl -> LOCALPARAM SIGNED param_substitution_list SEMICOLON .)
    LOGIC           reduce using rule 102 (localparamdecl -> LOCALPARAM SIGNED param_substitution_list SEMICOLON .)
    WIRE            reduce using rule 102 (localparamdecl -> LOCALPARAM SIGNED param_substitution_list SEMICOLON .)
    SIGNED          reduce using rule 102 (localparamdecl -> LOCALPARAM SIGNED param_substitution_list SEMICOLON .)
    SUPPLY0         reduce using rule 102 (localparamdecl -> LOCALPARAM SIGNED param_substitution_list SEMICOLON .)
    SUPPLY1         reduce using rule 102 (localparamdecl -> LOCALPARAM SIGNED param_substitution_list SEMICOLON .)
    ENDGENERATE     reduce using rule 102 (localparamdecl -> LOCALPARAM SIGNED param_substitution_list SEMICOLON .)
    IF              reduce using rule 102 (localparamdecl -> LOCALPARAM SIGNED param_substitution_list SEMICOLON .)
    FOR             reduce using rule 102 (localparamdecl -> LOCALPARAM SIGNED param_substitution_list SEMICOLON .)
    END             reduce using rule 102 (localparamdecl -> LOCALPARAM SIGNED param_substitution_list SEMICOLON .)
    CASE            reduce using rule 102 (localparamdecl -> LOCALPARAM SIGNED param_substitution_list SEMICOLON .)
    CASEX           reduce using rule 102 (localparamdecl -> LOCALPARAM SIGNED param_substitution_list SEMICOLON .)
    UNIQUE          reduce using rule 102 (localparamdecl -> LOCALPARAM SIGNED param_substitution_list SEMICOLON .)
    WHILE           reduce using rule 102 (localparamdecl -> LOCALPARAM SIGNED param_substitution_list SEMICOLON .)
    WAIT            reduce using rule 102 (localparamdecl -> LOCALPARAM SIGNED param_substitution_list SEMICOLON .)
    FOREVER         reduce using rule 102 (localparamdecl -> LOCALPARAM SIGNED param_substitution_list SEMICOLON .)
    BEGIN           reduce using rule 102 (localparamdecl -> LOCALPARAM SIGNED param_substitution_list SEMICOLON .)
    FORK            reduce using rule 102 (localparamdecl -> LOCALPARAM SIGNED param_substitution_list SEMICOLON .)
    DELAY           reduce using rule 102 (localparamdecl -> LOCALPARAM SIGNED param_substitution_list SEMICOLON .)
    AT              reduce using rule 102 (localparamdecl -> LOCALPARAM SIGNED param_substitution_list SEMICOLON .)
    DOLLER          reduce using rule 102 (localparamdecl -> LOCALPARAM SIGNED param_substitution_list SEMICOLON .)
    DISABLE         reduce using rule 102 (localparamdecl -> LOCALPARAM SIGNED param_substitution_list SEMICOLON .)
    LBRACE          reduce using rule 102 (localparamdecl -> LOCALPARAM SIGNED param_substitution_list SEMICOLON .)
    SEMICOLON       reduce using rule 102 (localparamdecl -> LOCALPARAM SIGNED param_substitution_list SEMICOLON .)
    ELSE            reduce using rule 102 (localparamdecl -> LOCALPARAM SIGNED param_substitution_list SEMICOLON .)


state 464

    (104) localparamdecl -> LOCALPARAM SIGNED width param_substitution_list . SEMICOLON
    (106) param_substitution_list -> param_substitution_list . COMMA param_substitution

    SEMICOLON       shift and go to state 567
    COMMA           shift and go to state 305


state 465

    (103) localparamdecl -> LOCALPARAM width param_substitution_list SEMICOLON .

    ENDMODULE       reduce using rule 103 (localparamdecl -> LOCALPARAM width param_substitution_list SEMICOLON .)
    GENERATE        reduce using rule 103 (localparamdecl -> LOCALPARAM width param_substitution_list SEMICOLON .)
    INTEGER         reduce using rule 103 (localparamdecl -> LOCALPARAM width param_substitution_list SEMICOLON .)
    REAL            reduce using rule 103 (localparamdecl -> LOCALPARAM width param_substitution_list SEMICOLON .)
    PARAMETER       reduce using rule 103 (localparamdecl -> LOCALPARAM width param_substitution_list SEMICOLON .)
    LOCALPARAM      reduce using rule 103 (localparamdecl -> LOCALPARAM width param_substitution_list SEMICOLON .)
    GENVAR          reduce using rule 103 (localparamdecl -> LOCALPARAM width param_substitution_list SEMICOLON .)
    ASSIGN          reduce using rule 103 (localparamdecl -> LOCALPARAM width param_substitution_list SEMICOLON .)
    ALWAYS          reduce using rule 103 (localparamdecl -> LOCALPARAM width param_substitution_list SEMICOLON .)
    ALWAYS_FF       reduce using rule 103 (localparamdecl -> LOCALPARAM width param_substitution_list SEMICOLON .)
    ALWAYS_COMB     reduce using rule 103 (localparamdecl -> LOCALPARAM width param_substitution_list SEMICOLON .)
    INITIAL         reduce using rule 103 (localparamdecl -> LOCALPARAM width param_substitution_list SEMICOLON .)
    ID              reduce using rule 103 (localparamdecl -> LOCALPARAM width param_substitution_list SEMICOLON .)
    SENS_OR         reduce using rule 103 (localparamdecl -> LOCALPARAM width param_substitution_list SEMICOLON .)
    FUNCTION        reduce using rule 103 (localparamdecl -> LOCALPARAM width param_substitution_list SEMICOLON .)
    TASK            reduce using rule 103 (localparamdecl -> LOCALPARAM width param_substitution_list SEMICOLON .)
    LPAREN          reduce using rule 103 (localparamdecl -> LOCALPARAM width param_substitution_list SEMICOLON .)
    INPUT           reduce using rule 103 (localparamdecl -> LOCALPARAM width param_substitution_list SEMICOLON .)
    OUTPUT          reduce using rule 103 (localparamdecl -> LOCALPARAM width param_substitution_list SEMICOLON .)
    INOUT           reduce using rule 103 (localparamdecl -> LOCALPARAM width param_substitution_list SEMICOLON .)
    TRI             reduce using rule 103 (localparamdecl -> LOCALPARAM width param_substitution_list SEMICOLON .)
    REG             reduce using rule 103 (localparamdecl -> LOCALPARAM width param_substitution_list SEMICOLON .)
    LOGIC           reduce using rule 103 (localparamdecl -> LOCALPARAM width param_substitution_list SEMICOLON .)
    WIRE            reduce using rule 103 (localparamdecl -> LOCALPARAM width param_substitution_list SEMICOLON .)
    SIGNED          reduce using rule 103 (localparamdecl -> LOCALPARAM width param_substitution_list SEMICOLON .)
    SUPPLY0         reduce using rule 103 (localparamdecl -> LOCALPARAM width param_substitution_list SEMICOLON .)
    SUPPLY1         reduce using rule 103 (localparamdecl -> LOCALPARAM width param_substitution_list SEMICOLON .)
    ENDGENERATE     reduce using rule 103 (localparamdecl -> LOCALPARAM width param_substitution_list SEMICOLON .)
    IF              reduce using rule 103 (localparamdecl -> LOCALPARAM width param_substitution_list SEMICOLON .)
    FOR             reduce using rule 103 (localparamdecl -> LOCALPARAM width param_substitution_list SEMICOLON .)
    END             reduce using rule 103 (localparamdecl -> LOCALPARAM width param_substitution_list SEMICOLON .)
    CASE            reduce using rule 103 (localparamdecl -> LOCALPARAM width param_substitution_list SEMICOLON .)
    CASEX           reduce using rule 103 (localparamdecl -> LOCALPARAM width param_substitution_list SEMICOLON .)
    UNIQUE          reduce using rule 103 (localparamdecl -> LOCALPARAM width param_substitution_list SEMICOLON .)
    WHILE           reduce using rule 103 (localparamdecl -> LOCALPARAM width param_substitution_list SEMICOLON .)
    WAIT            reduce using rule 103 (localparamdecl -> LOCALPARAM width param_substitution_list SEMICOLON .)
    FOREVER         reduce using rule 103 (localparamdecl -> LOCALPARAM width param_substitution_list SEMICOLON .)
    BEGIN           reduce using rule 103 (localparamdecl -> LOCALPARAM width param_substitution_list SEMICOLON .)
    FORK            reduce using rule 103 (localparamdecl -> LOCALPARAM width param_substitution_list SEMICOLON .)
    DELAY           reduce using rule 103 (localparamdecl -> LOCALPARAM width param_substitution_list SEMICOLON .)
    AT              reduce using rule 103 (localparamdecl -> LOCALPARAM width param_substitution_list SEMICOLON .)
    DOLLER          reduce using rule 103 (localparamdecl -> LOCALPARAM width param_substitution_list SEMICOLON .)
    DISABLE         reduce using rule 103 (localparamdecl -> LOCALPARAM width param_substitution_list SEMICOLON .)
    LBRACE          reduce using rule 103 (localparamdecl -> LOCALPARAM width param_substitution_list SEMICOLON .)
    SEMICOLON       reduce using rule 103 (localparamdecl -> LOCALPARAM width param_substitution_list SEMICOLON .)
    ELSE            reduce using rule 103 (localparamdecl -> LOCALPARAM width param_substitution_list SEMICOLON .)


state 466

    (105) localparamdecl -> LOCALPARAM INTEGER param_substitution_list SEMICOLON .

    ENDMODULE       reduce using rule 105 (localparamdecl -> LOCALPARAM INTEGER param_substitution_list SEMICOLON .)
    GENERATE        reduce using rule 105 (localparamdecl -> LOCALPARAM INTEGER param_substitution_list SEMICOLON .)
    INTEGER         reduce using rule 105 (localparamdecl -> LOCALPARAM INTEGER param_substitution_list SEMICOLON .)
    REAL            reduce using rule 105 (localparamdecl -> LOCALPARAM INTEGER param_substitution_list SEMICOLON .)
    PARAMETER       reduce using rule 105 (localparamdecl -> LOCALPARAM INTEGER param_substitution_list SEMICOLON .)
    LOCALPARAM      reduce using rule 105 (localparamdecl -> LOCALPARAM INTEGER param_substitution_list SEMICOLON .)
    GENVAR          reduce using rule 105 (localparamdecl -> LOCALPARAM INTEGER param_substitution_list SEMICOLON .)
    ASSIGN          reduce using rule 105 (localparamdecl -> LOCALPARAM INTEGER param_substitution_list SEMICOLON .)
    ALWAYS          reduce using rule 105 (localparamdecl -> LOCALPARAM INTEGER param_substitution_list SEMICOLON .)
    ALWAYS_FF       reduce using rule 105 (localparamdecl -> LOCALPARAM INTEGER param_substitution_list SEMICOLON .)
    ALWAYS_COMB     reduce using rule 105 (localparamdecl -> LOCALPARAM INTEGER param_substitution_list SEMICOLON .)
    INITIAL         reduce using rule 105 (localparamdecl -> LOCALPARAM INTEGER param_substitution_list SEMICOLON .)
    ID              reduce using rule 105 (localparamdecl -> LOCALPARAM INTEGER param_substitution_list SEMICOLON .)
    SENS_OR         reduce using rule 105 (localparamdecl -> LOCALPARAM INTEGER param_substitution_list SEMICOLON .)
    FUNCTION        reduce using rule 105 (localparamdecl -> LOCALPARAM INTEGER param_substitution_list SEMICOLON .)
    TASK            reduce using rule 105 (localparamdecl -> LOCALPARAM INTEGER param_substitution_list SEMICOLON .)
    LPAREN          reduce using rule 105 (localparamdecl -> LOCALPARAM INTEGER param_substitution_list SEMICOLON .)
    INPUT           reduce using rule 105 (localparamdecl -> LOCALPARAM INTEGER param_substitution_list SEMICOLON .)
    OUTPUT          reduce using rule 105 (localparamdecl -> LOCALPARAM INTEGER param_substitution_list SEMICOLON .)
    INOUT           reduce using rule 105 (localparamdecl -> LOCALPARAM INTEGER param_substitution_list SEMICOLON .)
    TRI             reduce using rule 105 (localparamdecl -> LOCALPARAM INTEGER param_substitution_list SEMICOLON .)
    REG             reduce using rule 105 (localparamdecl -> LOCALPARAM INTEGER param_substitution_list SEMICOLON .)
    LOGIC           reduce using rule 105 (localparamdecl -> LOCALPARAM INTEGER param_substitution_list SEMICOLON .)
    WIRE            reduce using rule 105 (localparamdecl -> LOCALPARAM INTEGER param_substitution_list SEMICOLON .)
    SIGNED          reduce using rule 105 (localparamdecl -> LOCALPARAM INTEGER param_substitution_list SEMICOLON .)
    SUPPLY0         reduce using rule 105 (localparamdecl -> LOCALPARAM INTEGER param_substitution_list SEMICOLON .)
    SUPPLY1         reduce using rule 105 (localparamdecl -> LOCALPARAM INTEGER param_substitution_list SEMICOLON .)
    ENDGENERATE     reduce using rule 105 (localparamdecl -> LOCALPARAM INTEGER param_substitution_list SEMICOLON .)
    IF              reduce using rule 105 (localparamdecl -> LOCALPARAM INTEGER param_substitution_list SEMICOLON .)
    FOR             reduce using rule 105 (localparamdecl -> LOCALPARAM INTEGER param_substitution_list SEMICOLON .)
    END             reduce using rule 105 (localparamdecl -> LOCALPARAM INTEGER param_substitution_list SEMICOLON .)
    CASE            reduce using rule 105 (localparamdecl -> LOCALPARAM INTEGER param_substitution_list SEMICOLON .)
    CASEX           reduce using rule 105 (localparamdecl -> LOCALPARAM INTEGER param_substitution_list SEMICOLON .)
    UNIQUE          reduce using rule 105 (localparamdecl -> LOCALPARAM INTEGER param_substitution_list SEMICOLON .)
    WHILE           reduce using rule 105 (localparamdecl -> LOCALPARAM INTEGER param_substitution_list SEMICOLON .)
    WAIT            reduce using rule 105 (localparamdecl -> LOCALPARAM INTEGER param_substitution_list SEMICOLON .)
    FOREVER         reduce using rule 105 (localparamdecl -> LOCALPARAM INTEGER param_substitution_list SEMICOLON .)
    BEGIN           reduce using rule 105 (localparamdecl -> LOCALPARAM INTEGER param_substitution_list SEMICOLON .)
    FORK            reduce using rule 105 (localparamdecl -> LOCALPARAM INTEGER param_substitution_list SEMICOLON .)
    DELAY           reduce using rule 105 (localparamdecl -> LOCALPARAM INTEGER param_substitution_list SEMICOLON .)
    AT              reduce using rule 105 (localparamdecl -> LOCALPARAM INTEGER param_substitution_list SEMICOLON .)
    DOLLER          reduce using rule 105 (localparamdecl -> LOCALPARAM INTEGER param_substitution_list SEMICOLON .)
    DISABLE         reduce using rule 105 (localparamdecl -> LOCALPARAM INTEGER param_substitution_list SEMICOLON .)
    LBRACE          reduce using rule 105 (localparamdecl -> LOCALPARAM INTEGER param_substitution_list SEMICOLON .)
    SEMICOLON       reduce using rule 105 (localparamdecl -> LOCALPARAM INTEGER param_substitution_list SEMICOLON .)
    ELSE            reduce using rule 105 (localparamdecl -> LOCALPARAM INTEGER param_substitution_list SEMICOLON .)


state 467

    (330) genvarlist -> genvarlist COMMA genvar .

    SEMICOLON       reduce using rule 330 (genvarlist -> genvarlist COMMA genvar .)
    COMMA           reduce using rule 330 (genvarlist -> genvarlist COMMA genvar .)


state 468

    (109) assignment -> ASSIGN lvalue EQUALS rvalue . SEMICOLON

    SEMICOLON       shift and go to state 568


state 469

    (110) assignment -> ASSIGN delays lvalue EQUALS . delays rvalue SEMICOLON
    (240) delays -> . DELAY LPAREN expression RPAREN
    (241) delays -> . DELAY identifier
    (242) delays -> . DELAY intnumber
    (243) delays -> . DELAY floatnumber
    (244) delays -> . empty
    (400) empty -> .

    DELAY           shift and go to state 140
    MINUS           reduce using rule 400 (empty -> .)
    PLUS            reduce using rule 400 (empty -> .)
    LNOT            reduce using rule 400 (empty -> .)
    NOT             reduce using rule 400 (empty -> .)
    AND             reduce using rule 400 (empty -> .)
    NAND            reduce using rule 400 (empty -> .)
    NOR             reduce using rule 400 (empty -> .)
    OR              reduce using rule 400 (empty -> .)
    XOR             reduce using rule 400 (empty -> .)
    XNOR            reduce using rule 400 (empty -> .)
    LPAREN          reduce using rule 400 (empty -> .)
    LBRACE          reduce using rule 400 (empty -> .)
    DOLLER          reduce using rule 400 (empty -> .)
    ID              reduce using rule 400 (empty -> .)
    INTNUMBER_DEC   reduce using rule 400 (empty -> .)
    SIGNED_INTNUMBER_DEC reduce using rule 400 (empty -> .)
    INTNUMBER_BIN   reduce using rule 400 (empty -> .)
    SIGNED_INTNUMBER_BIN reduce using rule 400 (empty -> .)
    INTNUMBER_OCT   reduce using rule 400 (empty -> .)
    SIGNED_INTNUMBER_OCT reduce using rule 400 (empty -> .)
    INTNUMBER_HEX   reduce using rule 400 (empty -> .)
    SIGNED_INTNUMBER_HEX reduce using rule 400 (empty -> .)
    FLOATNUMBER     reduce using rule 400 (empty -> .)
    STRING_LITERAL  reduce using rule 400 (empty -> .)

    delays                         shift and go to state 569
    empty                          shift and go to state 141

state 470

    (114) lpartselect -> identifier LBRACKET expression . COLON expression RBRACKET
    (115) lpartselect -> identifier LBRACKET expression . PLUSCOLON expression RBRACKET
    (116) lpartselect -> identifier LBRACKET expression . MINUSCOLON expression RBRACKET
    (184) pointer -> identifier LBRACKET expression . RBRACKET
    (140) expression -> expression . POWER expression
    (141) expression -> expression . TIMES expression
    (142) expression -> expression . DIVIDE expression
    (143) expression -> expression . MOD expression
    (144) expression -> expression . PLUS expression
    (145) expression -> expression . MINUS expression
    (146) expression -> expression . LSHIFT expression
    (147) expression -> expression . RSHIFT expression
    (148) expression -> expression . LSHIFTA expression
    (149) expression -> expression . RSHIFTA expression
    (150) expression -> expression . LT expression
    (151) expression -> expression . GT expression
    (152) expression -> expression . LE expression
    (153) expression -> expression . GE expression
    (154) expression -> expression . EQ expression
    (155) expression -> expression . NE expression
    (156) expression -> expression . EQL expression
    (157) expression -> expression . NEL expression
    (158) expression -> expression . AND expression
    (159) expression -> expression . XOR expression
    (160) expression -> expression . XNOR expression
    (161) expression -> expression . OR expression
    (162) expression -> expression . LAND expression
    (163) expression -> expression . LOR expression
    (164) expression -> expression . COND expression COLON expression

    COLON           shift and go to state 570
    PLUSCOLON       shift and go to state 571
    MINUSCOLON      shift and go to state 572
    RBRACKET        shift and go to state 542
    POWER           shift and go to state 236
    TIMES           shift and go to state 398
    DIVIDE          shift and go to state 237
    MOD             shift and go to state 238
    PLUS            shift and go to state 239
    MINUS           shift and go to state 240
    LSHIFT          shift and go to state 241
    RSHIFT          shift and go to state 242
    LSHIFTA         shift and go to state 243
    RSHIFTA         shift and go to state 244
    LT              shift and go to state 245
    GT              shift and go to state 246
    LE              shift and go to state 247
    GE              shift and go to state 248
    EQ              shift and go to state 249
    NE              shift and go to state 250
    EQL             shift and go to state 251
    NEL             shift and go to state 252
    AND             shift and go to state 253
    XOR             shift and go to state 254
    XNOR            shift and go to state 255
    OR              shift and go to state 256
    LAND            shift and go to state 257
    LOR             shift and go to state 258
    COND            shift and go to state 259


state 471

    (111) lpartselect -> pointer LBRACKET expression . COLON expression RBRACKET
    (112) lpartselect -> pointer LBRACKET expression . PLUSCOLON expression RBRACKET
    (113) lpartselect -> pointer LBRACKET expression . MINUSCOLON expression RBRACKET
    (185) pointer -> pointer LBRACKET expression . RBRACKET
    (140) expression -> expression . POWER expression
    (141) expression -> expression . TIMES expression
    (142) expression -> expression . DIVIDE expression
    (143) expression -> expression . MOD expression
    (144) expression -> expression . PLUS expression
    (145) expression -> expression . MINUS expression
    (146) expression -> expression . LSHIFT expression
    (147) expression -> expression . RSHIFT expression
    (148) expression -> expression . LSHIFTA expression
    (149) expression -> expression . RSHIFTA expression
    (150) expression -> expression . LT expression
    (151) expression -> expression . GT expression
    (152) expression -> expression . LE expression
    (153) expression -> expression . GE expression
    (154) expression -> expression . EQ expression
    (155) expression -> expression . NE expression
    (156) expression -> expression . EQL expression
    (157) expression -> expression . NEL expression
    (158) expression -> expression . AND expression
    (159) expression -> expression . XOR expression
    (160) expression -> expression . XNOR expression
    (161) expression -> expression . OR expression
    (162) expression -> expression . LAND expression
    (163) expression -> expression . LOR expression
    (164) expression -> expression . COND expression COLON expression

    COLON           shift and go to state 573
    PLUSCOLON       shift and go to state 574
    MINUSCOLON      shift and go to state 575
    RBRACKET        shift and go to state 538
    POWER           shift and go to state 236
    TIMES           shift and go to state 398
    DIVIDE          shift and go to state 237
    MOD             shift and go to state 238
    PLUS            shift and go to state 239
    MINUS           shift and go to state 240
    LSHIFT          shift and go to state 241
    RSHIFT          shift and go to state 242
    LSHIFTA         shift and go to state 243
    RSHIFTA         shift and go to state 244
    LT              shift and go to state 245
    GT              shift and go to state 246
    LE              shift and go to state 247
    GE              shift and go to state 248
    EQ              shift and go to state 249
    NE              shift and go to state 250
    EQL             shift and go to state 251
    NEL             shift and go to state 252
    AND             shift and go to state 253
    XOR             shift and go to state 254
    XNOR            shift and go to state 255
    OR              shift and go to state 256
    LAND            shift and go to state 257
    LOR             shift and go to state 258
    COND            shift and go to state 259


state 472

    (118) lconcat -> LBRACE lconcatlist RBRACE .

    EQUALS          reduce using rule 118 (lconcat -> LBRACE lconcatlist RBRACE .)
    RBRACE          reduce using rule 118 (lconcat -> LBRACE lconcatlist RBRACE .)
    COMMA           reduce using rule 118 (lconcat -> LBRACE lconcatlist RBRACE .)
    LE              reduce using rule 118 (lconcat -> LBRACE lconcatlist RBRACE .)


state 473

    (119) lconcatlist -> lconcatlist COMMA . lconcat_one
    (121) lconcat_one -> . identifier
    (122) lconcat_one -> . lpartselect
    (123) lconcat_one -> . lpointer
    (124) lconcat_one -> . lconcat
    (392) identifier -> . ID
    (393) identifier -> . scope ID
    (111) lpartselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (112) lpartselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (113) lpartselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (114) lpartselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (115) lpartselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (116) lpartselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (117) lpointer -> . pointer
    (118) lconcat -> . LBRACE lconcatlist RBRACE
    (394) scope -> . identifier DOT
    (395) scope -> . pointer DOT
    (184) pointer -> . identifier LBRACKET expression RBRACKET
    (185) pointer -> . pointer LBRACKET expression RBRACKET

    ID              shift and go to state 86
    LBRACE          shift and go to state 169

    lconcat_one                    shift and go to state 576
    identifier                     shift and go to state 324
    lpartselect                    shift and go to state 325
    lpointer                       shift and go to state 326
    lconcat                        shift and go to state 327
    scope                          shift and go to state 108
    pointer                        shift and go to state 328

state 474

    (202) senslist -> AT LPAREN edgesigs . RPAREN
    (207) edgesigs -> edgesigs . SENS_OR edgesig

    RPAREN          shift and go to state 577
    SENS_OR         shift and go to state 578


state 475

    (211) senslist -> AT LPAREN levelsigs . RPAREN
    (216) levelsigs -> levelsigs . SENS_OR levelsig
    (217) levelsigs -> levelsigs . COMMA levelsig

    RPAREN          shift and go to state 579
    SENS_OR         shift and go to state 580
    COMMA           shift and go to state 581


state 476

    (220) senslist -> AT LPAREN TIMES . RPAREN

    RPAREN          shift and go to state 582


state 477

    (208) edgesigs -> edgesig .

    RPAREN          reduce using rule 208 (edgesigs -> edgesig .)
    SENS_OR         reduce using rule 208 (edgesigs -> edgesig .)


state 478

    (218) levelsigs -> levelsig .

    RPAREN          reduce using rule 218 (levelsigs -> levelsig .)
    SENS_OR         reduce using rule 218 (levelsigs -> levelsig .)
    COMMA           reduce using rule 218 (levelsigs -> levelsig .)


state 479

    (203) edgesig -> POSEDGE . edgesig_base
    (205) edgesig_base -> . identifier
    (206) edgesig_base -> . pointer
    (392) identifier -> . ID
    (393) identifier -> . scope ID
    (184) pointer -> . identifier LBRACKET expression RBRACKET
    (185) pointer -> . pointer LBRACKET expression RBRACKET
    (394) scope -> . identifier DOT
    (395) scope -> . pointer DOT

    ID              shift and go to state 86

    edgesig_base                   shift and go to state 583
    identifier                     shift and go to state 584
    pointer                        shift and go to state 585
    scope                          shift and go to state 108

state 480

    (204) edgesig -> NEGEDGE . edgesig_base
    (205) edgesig_base -> . identifier
    (206) edgesig_base -> . pointer
    (392) identifier -> . ID
    (393) identifier -> . scope ID
    (184) pointer -> . identifier LBRACKET expression RBRACKET
    (185) pointer -> . pointer LBRACKET expression RBRACKET
    (394) scope -> . identifier DOT
    (395) scope -> . pointer DOT

    ID              shift and go to state 86

    edgesig_base                   shift and go to state 586
    identifier                     shift and go to state 584
    pointer                        shift and go to state 585
    scope                          shift and go to state 108

state 481

    (184) pointer -> identifier LBRACKET . expression RBRACKET
    (178) partselect -> identifier LBRACKET . expression COLON expression RBRACKET
    (179) partselect -> identifier LBRACKET . expression PLUSCOLON expression RBRACKET
    (180) partselect -> identifier LBRACKET . expression MINUSCOLON expression RBRACKET
    (130) expression -> . MINUS expression
    (131) expression -> . PLUS expression
    (132) expression -> . LNOT expression
    (133) expression -> . NOT expression
    (134) expression -> . AND expression
    (135) expression -> . NAND expression
    (136) expression -> . NOR expression
    (137) expression -> . OR expression
    (138) expression -> . XOR expression
    (139) expression -> . XNOR expression
    (140) expression -> . expression POWER expression
    (141) expression -> . expression TIMES expression
    (142) expression -> . expression DIVIDE expression
    (143) expression -> . expression MOD expression
    (144) expression -> . expression PLUS expression
    (145) expression -> . expression MINUS expression
    (146) expression -> . expression LSHIFT expression
    (147) expression -> . expression RSHIFT expression
    (148) expression -> . expression LSHIFTA expression
    (149) expression -> . expression RSHIFTA expression
    (150) expression -> . expression LT expression
    (151) expression -> . expression GT expression
    (152) expression -> . expression LE expression
    (153) expression -> . expression GE expression
    (154) expression -> . expression EQ expression
    (155) expression -> . expression NE expression
    (156) expression -> . expression EQL expression
    (157) expression -> . expression NEL expression
    (158) expression -> . expression AND expression
    (159) expression -> . expression XOR expression
    (160) expression -> . expression XNOR expression
    (161) expression -> . expression OR expression
    (162) expression -> . expression LAND expression
    (163) expression -> . expression LOR expression
    (164) expression -> . expression COND expression COLON expression
    (165) expression -> . LPAREN expression RPAREN
    (166) expression -> . concat
    (167) expression -> . repeat
    (168) expression -> . partselect
    (169) expression -> . pointer
    (170) expression -> . functioncall
    (171) expression -> . systemcall
    (172) expression -> . identifier
    (173) expression -> . const_expression
    (174) concat -> . LBRACE concatlist RBRACE
    (177) repeat -> . LBRACE expression concat RBRACE
    (178) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (179) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (180) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (181) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (182) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (183) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (184) pointer -> . identifier LBRACKET expression RBRACKET
    (185) pointer -> . pointer LBRACKET expression RBRACKET
    (373) functioncall -> . identifier LPAREN func_args RPAREN
    (351) systemcall -> . DOLLER ID
    (352) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (353) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (392) identifier -> . ID
    (393) identifier -> . scope ID
    (186) const_expression -> . intnumber
    (187) const_expression -> . floatnumber
    (188) const_expression -> . stringliteral
    (394) scope -> . identifier DOT
    (395) scope -> . pointer DOT
    (190) intnumber -> . INTNUMBER_DEC
    (191) intnumber -> . SIGNED_INTNUMBER_DEC
    (192) intnumber -> . INTNUMBER_BIN
    (193) intnumber -> . SIGNED_INTNUMBER_BIN
    (194) intnumber -> . INTNUMBER_OCT
    (195) intnumber -> . SIGNED_INTNUMBER_OCT
    (196) intnumber -> . INTNUMBER_HEX
    (197) intnumber -> . SIGNED_INTNUMBER_HEX
    (189) floatnumber -> . FLOATNUMBER
    (198) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 88
    PLUS            shift and go to state 89
    LNOT            shift and go to state 90
    NOT             shift and go to state 91
    AND             shift and go to state 92
    NAND            shift and go to state 93
    NOR             shift and go to state 94
    OR              shift and go to state 95
    XOR             shift and go to state 96
    XNOR            shift and go to state 97
    LPAREN          shift and go to state 85
    LBRACE          shift and go to state 106
    DOLLER          shift and go to state 107
    ID              shift and go to state 86
    INTNUMBER_DEC   shift and go to state 112
    SIGNED_INTNUMBER_DEC shift and go to state 113
    INTNUMBER_BIN   shift and go to state 114
    SIGNED_INTNUMBER_BIN shift and go to state 115
    INTNUMBER_OCT   shift and go to state 116
    SIGNED_INTNUMBER_OCT shift and go to state 117
    INTNUMBER_HEX   shift and go to state 118
    SIGNED_INTNUMBER_HEX shift and go to state 119
    FLOATNUMBER     shift and go to state 120
    STRING_LITERAL  shift and go to state 121

    identifier                     shift and go to state 104
    expression                     shift and go to state 587
    concat                         shift and go to state 98
    repeat                         shift and go to state 99
    partselect                     shift and go to state 100
    pointer                        shift and go to state 101
    functioncall                   shift and go to state 102
    systemcall                     shift and go to state 103
    const_expression               shift and go to state 105
    scope                          shift and go to state 108
    intnumber                      shift and go to state 109
    floatnumber                    shift and go to state 110
    stringliteral                  shift and go to state 111

state 482

    (185) pointer -> pointer LBRACKET . expression RBRACKET
    (181) partselect -> pointer LBRACKET . expression COLON expression RBRACKET
    (182) partselect -> pointer LBRACKET . expression PLUSCOLON expression RBRACKET
    (183) partselect -> pointer LBRACKET . expression MINUSCOLON expression RBRACKET
    (130) expression -> . MINUS expression
    (131) expression -> . PLUS expression
    (132) expression -> . LNOT expression
    (133) expression -> . NOT expression
    (134) expression -> . AND expression
    (135) expression -> . NAND expression
    (136) expression -> . NOR expression
    (137) expression -> . OR expression
    (138) expression -> . XOR expression
    (139) expression -> . XNOR expression
    (140) expression -> . expression POWER expression
    (141) expression -> . expression TIMES expression
    (142) expression -> . expression DIVIDE expression
    (143) expression -> . expression MOD expression
    (144) expression -> . expression PLUS expression
    (145) expression -> . expression MINUS expression
    (146) expression -> . expression LSHIFT expression
    (147) expression -> . expression RSHIFT expression
    (148) expression -> . expression LSHIFTA expression
    (149) expression -> . expression RSHIFTA expression
    (150) expression -> . expression LT expression
    (151) expression -> . expression GT expression
    (152) expression -> . expression LE expression
    (153) expression -> . expression GE expression
    (154) expression -> . expression EQ expression
    (155) expression -> . expression NE expression
    (156) expression -> . expression EQL expression
    (157) expression -> . expression NEL expression
    (158) expression -> . expression AND expression
    (159) expression -> . expression XOR expression
    (160) expression -> . expression XNOR expression
    (161) expression -> . expression OR expression
    (162) expression -> . expression LAND expression
    (163) expression -> . expression LOR expression
    (164) expression -> . expression COND expression COLON expression
    (165) expression -> . LPAREN expression RPAREN
    (166) expression -> . concat
    (167) expression -> . repeat
    (168) expression -> . partselect
    (169) expression -> . pointer
    (170) expression -> . functioncall
    (171) expression -> . systemcall
    (172) expression -> . identifier
    (173) expression -> . const_expression
    (174) concat -> . LBRACE concatlist RBRACE
    (177) repeat -> . LBRACE expression concat RBRACE
    (178) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (179) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (180) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (181) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (182) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (183) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (184) pointer -> . identifier LBRACKET expression RBRACKET
    (185) pointer -> . pointer LBRACKET expression RBRACKET
    (373) functioncall -> . identifier LPAREN func_args RPAREN
    (351) systemcall -> . DOLLER ID
    (352) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (353) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (392) identifier -> . ID
    (393) identifier -> . scope ID
    (186) const_expression -> . intnumber
    (187) const_expression -> . floatnumber
    (188) const_expression -> . stringliteral
    (394) scope -> . identifier DOT
    (395) scope -> . pointer DOT
    (190) intnumber -> . INTNUMBER_DEC
    (191) intnumber -> . SIGNED_INTNUMBER_DEC
    (192) intnumber -> . INTNUMBER_BIN
    (193) intnumber -> . SIGNED_INTNUMBER_BIN
    (194) intnumber -> . INTNUMBER_OCT
    (195) intnumber -> . SIGNED_INTNUMBER_OCT
    (196) intnumber -> . INTNUMBER_HEX
    (197) intnumber -> . SIGNED_INTNUMBER_HEX
    (189) floatnumber -> . FLOATNUMBER
    (198) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 88
    PLUS            shift and go to state 89
    LNOT            shift and go to state 90
    NOT             shift and go to state 91
    AND             shift and go to state 92
    NAND            shift and go to state 93
    NOR             shift and go to state 94
    OR              shift and go to state 95
    XOR             shift and go to state 96
    XNOR            shift and go to state 97
    LPAREN          shift and go to state 85
    LBRACE          shift and go to state 106
    DOLLER          shift and go to state 107
    ID              shift and go to state 86
    INTNUMBER_DEC   shift and go to state 112
    SIGNED_INTNUMBER_DEC shift and go to state 113
    INTNUMBER_BIN   shift and go to state 114
    SIGNED_INTNUMBER_BIN shift and go to state 115
    INTNUMBER_OCT   shift and go to state 116
    SIGNED_INTNUMBER_OCT shift and go to state 117
    INTNUMBER_HEX   shift and go to state 118
    SIGNED_INTNUMBER_HEX shift and go to state 119
    FLOATNUMBER     shift and go to state 120
    STRING_LITERAL  shift and go to state 121

    pointer                        shift and go to state 101
    expression                     shift and go to state 588
    concat                         shift and go to state 98
    repeat                         shift and go to state 99
    partselect                     shift and go to state 100
    functioncall                   shift and go to state 102
    systemcall                     shift and go to state 103
    identifier                     shift and go to state 104
    const_expression               shift and go to state 105
    scope                          shift and go to state 108
    intnumber                      shift and go to state 109
    floatnumber                    shift and go to state 110
    stringliteral                  shift and go to state 111

state 483

    (262) if_statement -> IF LPAREN cond . RPAREN true_statement ELSE else_statement
    (263) if_statement -> IF LPAREN cond . RPAREN true_statement

    RPAREN          shift and go to state 589


state 484

    (264) if_statement -> delays IF LPAREN . cond RPAREN true_statement ELSE else_statement
    (265) if_statement -> delays IF LPAREN . cond RPAREN true_statement
    (266) cond -> . expression
    (130) expression -> . MINUS expression
    (131) expression -> . PLUS expression
    (132) expression -> . LNOT expression
    (133) expression -> . NOT expression
    (134) expression -> . AND expression
    (135) expression -> . NAND expression
    (136) expression -> . NOR expression
    (137) expression -> . OR expression
    (138) expression -> . XOR expression
    (139) expression -> . XNOR expression
    (140) expression -> . expression POWER expression
    (141) expression -> . expression TIMES expression
    (142) expression -> . expression DIVIDE expression
    (143) expression -> . expression MOD expression
    (144) expression -> . expression PLUS expression
    (145) expression -> . expression MINUS expression
    (146) expression -> . expression LSHIFT expression
    (147) expression -> . expression RSHIFT expression
    (148) expression -> . expression LSHIFTA expression
    (149) expression -> . expression RSHIFTA expression
    (150) expression -> . expression LT expression
    (151) expression -> . expression GT expression
    (152) expression -> . expression LE expression
    (153) expression -> . expression GE expression
    (154) expression -> . expression EQ expression
    (155) expression -> . expression NE expression
    (156) expression -> . expression EQL expression
    (157) expression -> . expression NEL expression
    (158) expression -> . expression AND expression
    (159) expression -> . expression XOR expression
    (160) expression -> . expression XNOR expression
    (161) expression -> . expression OR expression
    (162) expression -> . expression LAND expression
    (163) expression -> . expression LOR expression
    (164) expression -> . expression COND expression COLON expression
    (165) expression -> . LPAREN expression RPAREN
    (166) expression -> . concat
    (167) expression -> . repeat
    (168) expression -> . partselect
    (169) expression -> . pointer
    (170) expression -> . functioncall
    (171) expression -> . systemcall
    (172) expression -> . identifier
    (173) expression -> . const_expression
    (174) concat -> . LBRACE concatlist RBRACE
    (177) repeat -> . LBRACE expression concat RBRACE
    (178) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (179) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (180) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (181) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (182) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (183) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (184) pointer -> . identifier LBRACKET expression RBRACKET
    (185) pointer -> . pointer LBRACKET expression RBRACKET
    (373) functioncall -> . identifier LPAREN func_args RPAREN
    (351) systemcall -> . DOLLER ID
    (352) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (353) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (392) identifier -> . ID
    (393) identifier -> . scope ID
    (186) const_expression -> . intnumber
    (187) const_expression -> . floatnumber
    (188) const_expression -> . stringliteral
    (394) scope -> . identifier DOT
    (395) scope -> . pointer DOT
    (190) intnumber -> . INTNUMBER_DEC
    (191) intnumber -> . SIGNED_INTNUMBER_DEC
    (192) intnumber -> . INTNUMBER_BIN
    (193) intnumber -> . SIGNED_INTNUMBER_BIN
    (194) intnumber -> . INTNUMBER_OCT
    (195) intnumber -> . SIGNED_INTNUMBER_OCT
    (196) intnumber -> . INTNUMBER_HEX
    (197) intnumber -> . SIGNED_INTNUMBER_HEX
    (189) floatnumber -> . FLOATNUMBER
    (198) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 88
    PLUS            shift and go to state 89
    LNOT            shift and go to state 90
    NOT             shift and go to state 91
    AND             shift and go to state 92
    NAND            shift and go to state 93
    NOR             shift and go to state 94
    OR              shift and go to state 95
    XOR             shift and go to state 96
    XNOR            shift and go to state 97
    LPAREN          shift and go to state 85
    LBRACE          shift and go to state 106
    DOLLER          shift and go to state 107
    ID              shift and go to state 86
    INTNUMBER_DEC   shift and go to state 112
    SIGNED_INTNUMBER_DEC shift and go to state 113
    INTNUMBER_BIN   shift and go to state 114
    SIGNED_INTNUMBER_BIN shift and go to state 115
    INTNUMBER_OCT   shift and go to state 116
    SIGNED_INTNUMBER_OCT shift and go to state 117
    INTNUMBER_HEX   shift and go to state 118
    SIGNED_INTNUMBER_HEX shift and go to state 119
    FLOATNUMBER     shift and go to state 120
    STRING_LITERAL  shift and go to state 121

    cond                           shift and go to state 590
    expression                     shift and go to state 437
    concat                         shift and go to state 98
    repeat                         shift and go to state 99
    partselect                     shift and go to state 100
    pointer                        shift and go to state 101
    functioncall                   shift and go to state 102
    systemcall                     shift and go to state 103
    identifier                     shift and go to state 104
    const_expression               shift and go to state 105
    scope                          shift and go to state 108
    intnumber                      shift and go to state 109
    floatnumber                    shift and go to state 110
    stringliteral                  shift and go to state 111

state 485

    (237) blocking_substitution -> delays lvalue EQUALS . delays rvalue SEMICOLON
    (240) delays -> . DELAY LPAREN expression RPAREN
    (241) delays -> . DELAY identifier
    (242) delays -> . DELAY intnumber
    (243) delays -> . DELAY floatnumber
    (244) delays -> . empty
    (400) empty -> .

    DELAY           shift and go to state 140
    MINUS           reduce using rule 400 (empty -> .)
    PLUS            reduce using rule 400 (empty -> .)
    LNOT            reduce using rule 400 (empty -> .)
    NOT             reduce using rule 400 (empty -> .)
    AND             reduce using rule 400 (empty -> .)
    NAND            reduce using rule 400 (empty -> .)
    NOR             reduce using rule 400 (empty -> .)
    OR              reduce using rule 400 (empty -> .)
    XOR             reduce using rule 400 (empty -> .)
    XNOR            reduce using rule 400 (empty -> .)
    LPAREN          reduce using rule 400 (empty -> .)
    LBRACE          reduce using rule 400 (empty -> .)
    DOLLER          reduce using rule 400 (empty -> .)
    ID              reduce using rule 400 (empty -> .)
    INTNUMBER_DEC   reduce using rule 400 (empty -> .)
    SIGNED_INTNUMBER_DEC reduce using rule 400 (empty -> .)
    INTNUMBER_BIN   reduce using rule 400 (empty -> .)
    SIGNED_INTNUMBER_BIN reduce using rule 400 (empty -> .)
    INTNUMBER_OCT   reduce using rule 400 (empty -> .)
    SIGNED_INTNUMBER_OCT reduce using rule 400 (empty -> .)
    INTNUMBER_HEX   reduce using rule 400 (empty -> .)
    SIGNED_INTNUMBER_HEX reduce using rule 400 (empty -> .)
    FLOATNUMBER     reduce using rule 400 (empty -> .)
    STRING_LITERAL  reduce using rule 400 (empty -> .)

    delays                         shift and go to state 591
    empty                          shift and go to state 141

state 486

    (239) nonblocking_substitution -> delays lvalue LE . delays rvalue SEMICOLON
    (240) delays -> . DELAY LPAREN expression RPAREN
    (241) delays -> . DELAY identifier
    (242) delays -> . DELAY intnumber
    (243) delays -> . DELAY floatnumber
    (244) delays -> . empty
    (400) empty -> .

    DELAY           shift and go to state 140
    MINUS           reduce using rule 400 (empty -> .)
    PLUS            reduce using rule 400 (empty -> .)
    LNOT            reduce using rule 400 (empty -> .)
    NOT             reduce using rule 400 (empty -> .)
    AND             reduce using rule 400 (empty -> .)
    NAND            reduce using rule 400 (empty -> .)
    NOR             reduce using rule 400 (empty -> .)
    OR              reduce using rule 400 (empty -> .)
    XOR             reduce using rule 400 (empty -> .)
    XNOR            reduce using rule 400 (empty -> .)
    LPAREN          reduce using rule 400 (empty -> .)
    LBRACE          reduce using rule 400 (empty -> .)
    DOLLER          reduce using rule 400 (empty -> .)
    ID              reduce using rule 400 (empty -> .)
    INTNUMBER_DEC   reduce using rule 400 (empty -> .)
    SIGNED_INTNUMBER_DEC reduce using rule 400 (empty -> .)
    INTNUMBER_BIN   reduce using rule 400 (empty -> .)
    SIGNED_INTNUMBER_BIN reduce using rule 400 (empty -> .)
    INTNUMBER_OCT   reduce using rule 400 (empty -> .)
    SIGNED_INTNUMBER_OCT reduce using rule 400 (empty -> .)
    INTNUMBER_HEX   reduce using rule 400 (empty -> .)
    SIGNED_INTNUMBER_HEX reduce using rule 400 (empty -> .)
    FLOATNUMBER     reduce using rule 400 (empty -> .)
    STRING_LITERAL  reduce using rule 400 (empty -> .)

    delays                         shift and go to state 592
    empty                          shift and go to state 141

state 487

    (280) case_statement -> CASE LPAREN case_comp . RPAREN casecontent_statements ENDCASE

    RPAREN          shift and go to state 593


state 488

    (283) case_comp -> expression .
    (140) expression -> expression . POWER expression
    (141) expression -> expression . TIMES expression
    (142) expression -> expression . DIVIDE expression
    (143) expression -> expression . MOD expression
    (144) expression -> expression . PLUS expression
    (145) expression -> expression . MINUS expression
    (146) expression -> expression . LSHIFT expression
    (147) expression -> expression . RSHIFT expression
    (148) expression -> expression . LSHIFTA expression
    (149) expression -> expression . RSHIFTA expression
    (150) expression -> expression . LT expression
    (151) expression -> expression . GT expression
    (152) expression -> expression . LE expression
    (153) expression -> expression . GE expression
    (154) expression -> expression . EQ expression
    (155) expression -> expression . NE expression
    (156) expression -> expression . EQL expression
    (157) expression -> expression . NEL expression
    (158) expression -> expression . AND expression
    (159) expression -> expression . XOR expression
    (160) expression -> expression . XNOR expression
    (161) expression -> expression . OR expression
    (162) expression -> expression . LAND expression
    (163) expression -> expression . LOR expression
    (164) expression -> expression . COND expression COLON expression

    RPAREN          reduce using rule 283 (case_comp -> expression .)
    POWER           shift and go to state 236
    TIMES           shift and go to state 398
    DIVIDE          shift and go to state 237
    MOD             shift and go to state 238
    PLUS            shift and go to state 239
    MINUS           shift and go to state 240
    LSHIFT          shift and go to state 241
    RSHIFT          shift and go to state 242
    LSHIFTA         shift and go to state 243
    RSHIFTA         shift and go to state 244
    LT              shift and go to state 245
    GT              shift and go to state 246
    LE              shift and go to state 247
    GE              shift and go to state 248
    EQ              shift and go to state 249
    NE              shift and go to state 250
    EQL             shift and go to state 251
    NEL             shift and go to state 252
    AND             shift and go to state 253
    XOR             shift and go to state 254
    XNOR            shift and go to state 255
    OR              shift and go to state 256
    LAND            shift and go to state 257
    LOR             shift and go to state 258
    COND            shift and go to state 259


state 489

    (281) casex_statement -> CASEX LPAREN case_comp . RPAREN casecontent_statements ENDCASE

    RPAREN          shift and go to state 594


state 490

    (282) unique_case_statement -> UNIQUE CASE LPAREN . case_comp RPAREN casecontent_statements ENDCASE
    (283) case_comp -> . expression
    (130) expression -> . MINUS expression
    (131) expression -> . PLUS expression
    (132) expression -> . LNOT expression
    (133) expression -> . NOT expression
    (134) expression -> . AND expression
    (135) expression -> . NAND expression
    (136) expression -> . NOR expression
    (137) expression -> . OR expression
    (138) expression -> . XOR expression
    (139) expression -> . XNOR expression
    (140) expression -> . expression POWER expression
    (141) expression -> . expression TIMES expression
    (142) expression -> . expression DIVIDE expression
    (143) expression -> . expression MOD expression
    (144) expression -> . expression PLUS expression
    (145) expression -> . expression MINUS expression
    (146) expression -> . expression LSHIFT expression
    (147) expression -> . expression RSHIFT expression
    (148) expression -> . expression LSHIFTA expression
    (149) expression -> . expression RSHIFTA expression
    (150) expression -> . expression LT expression
    (151) expression -> . expression GT expression
    (152) expression -> . expression LE expression
    (153) expression -> . expression GE expression
    (154) expression -> . expression EQ expression
    (155) expression -> . expression NE expression
    (156) expression -> . expression EQL expression
    (157) expression -> . expression NEL expression
    (158) expression -> . expression AND expression
    (159) expression -> . expression XOR expression
    (160) expression -> . expression XNOR expression
    (161) expression -> . expression OR expression
    (162) expression -> . expression LAND expression
    (163) expression -> . expression LOR expression
    (164) expression -> . expression COND expression COLON expression
    (165) expression -> . LPAREN expression RPAREN
    (166) expression -> . concat
    (167) expression -> . repeat
    (168) expression -> . partselect
    (169) expression -> . pointer
    (170) expression -> . functioncall
    (171) expression -> . systemcall
    (172) expression -> . identifier
    (173) expression -> . const_expression
    (174) concat -> . LBRACE concatlist RBRACE
    (177) repeat -> . LBRACE expression concat RBRACE
    (178) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (179) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (180) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (181) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (182) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (183) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (184) pointer -> . identifier LBRACKET expression RBRACKET
    (185) pointer -> . pointer LBRACKET expression RBRACKET
    (373) functioncall -> . identifier LPAREN func_args RPAREN
    (351) systemcall -> . DOLLER ID
    (352) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (353) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (392) identifier -> . ID
    (393) identifier -> . scope ID
    (186) const_expression -> . intnumber
    (187) const_expression -> . floatnumber
    (188) const_expression -> . stringliteral
    (394) scope -> . identifier DOT
    (395) scope -> . pointer DOT
    (190) intnumber -> . INTNUMBER_DEC
    (191) intnumber -> . SIGNED_INTNUMBER_DEC
    (192) intnumber -> . INTNUMBER_BIN
    (193) intnumber -> . SIGNED_INTNUMBER_BIN
    (194) intnumber -> . INTNUMBER_OCT
    (195) intnumber -> . SIGNED_INTNUMBER_OCT
    (196) intnumber -> . INTNUMBER_HEX
    (197) intnumber -> . SIGNED_INTNUMBER_HEX
    (189) floatnumber -> . FLOATNUMBER
    (198) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 88
    PLUS            shift and go to state 89
    LNOT            shift and go to state 90
    NOT             shift and go to state 91
    AND             shift and go to state 92
    NAND            shift and go to state 93
    NOR             shift and go to state 94
    OR              shift and go to state 95
    XOR             shift and go to state 96
    XNOR            shift and go to state 97
    LPAREN          shift and go to state 85
    LBRACE          shift and go to state 106
    DOLLER          shift and go to state 107
    ID              shift and go to state 86
    INTNUMBER_DEC   shift and go to state 112
    SIGNED_INTNUMBER_DEC shift and go to state 113
    INTNUMBER_BIN   shift and go to state 114
    SIGNED_INTNUMBER_BIN shift and go to state 115
    INTNUMBER_OCT   shift and go to state 116
    SIGNED_INTNUMBER_OCT shift and go to state 117
    INTNUMBER_HEX   shift and go to state 118
    SIGNED_INTNUMBER_HEX shift and go to state 119
    FLOATNUMBER     shift and go to state 120
    STRING_LITERAL  shift and go to state 121

    case_comp                      shift and go to state 595
    expression                     shift and go to state 488
    concat                         shift and go to state 98
    repeat                         shift and go to state 99
    partselect                     shift and go to state 100
    pointer                        shift and go to state 101
    functioncall                   shift and go to state 102
    systemcall                     shift and go to state 103
    identifier                     shift and go to state 104
    const_expression               shift and go to state 105
    scope                          shift and go to state 108
    intnumber                      shift and go to state 109
    floatnumber                    shift and go to state 110
    stringliteral                  shift and go to state 111

state 491

    (270) for_statement -> FOR LPAREN forpre . forcond forpost RPAREN forcontent_statement
    (273) forcond -> . cond SEMICOLON
    (274) forcond -> . SEMICOLON
    (266) cond -> . expression
    (130) expression -> . MINUS expression
    (131) expression -> . PLUS expression
    (132) expression -> . LNOT expression
    (133) expression -> . NOT expression
    (134) expression -> . AND expression
    (135) expression -> . NAND expression
    (136) expression -> . NOR expression
    (137) expression -> . OR expression
    (138) expression -> . XOR expression
    (139) expression -> . XNOR expression
    (140) expression -> . expression POWER expression
    (141) expression -> . expression TIMES expression
    (142) expression -> . expression DIVIDE expression
    (143) expression -> . expression MOD expression
    (144) expression -> . expression PLUS expression
    (145) expression -> . expression MINUS expression
    (146) expression -> . expression LSHIFT expression
    (147) expression -> . expression RSHIFT expression
    (148) expression -> . expression LSHIFTA expression
    (149) expression -> . expression RSHIFTA expression
    (150) expression -> . expression LT expression
    (151) expression -> . expression GT expression
    (152) expression -> . expression LE expression
    (153) expression -> . expression GE expression
    (154) expression -> . expression EQ expression
    (155) expression -> . expression NE expression
    (156) expression -> . expression EQL expression
    (157) expression -> . expression NEL expression
    (158) expression -> . expression AND expression
    (159) expression -> . expression XOR expression
    (160) expression -> . expression XNOR expression
    (161) expression -> . expression OR expression
    (162) expression -> . expression LAND expression
    (163) expression -> . expression LOR expression
    (164) expression -> . expression COND expression COLON expression
    (165) expression -> . LPAREN expression RPAREN
    (166) expression -> . concat
    (167) expression -> . repeat
    (168) expression -> . partselect
    (169) expression -> . pointer
    (170) expression -> . functioncall
    (171) expression -> . systemcall
    (172) expression -> . identifier
    (173) expression -> . const_expression
    (174) concat -> . LBRACE concatlist RBRACE
    (177) repeat -> . LBRACE expression concat RBRACE
    (178) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (179) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (180) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (181) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (182) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (183) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (184) pointer -> . identifier LBRACKET expression RBRACKET
    (185) pointer -> . pointer LBRACKET expression RBRACKET
    (373) functioncall -> . identifier LPAREN func_args RPAREN
    (351) systemcall -> . DOLLER ID
    (352) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (353) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (392) identifier -> . ID
    (393) identifier -> . scope ID
    (186) const_expression -> . intnumber
    (187) const_expression -> . floatnumber
    (188) const_expression -> . stringliteral
    (394) scope -> . identifier DOT
    (395) scope -> . pointer DOT
    (190) intnumber -> . INTNUMBER_DEC
    (191) intnumber -> . SIGNED_INTNUMBER_DEC
    (192) intnumber -> . INTNUMBER_BIN
    (193) intnumber -> . SIGNED_INTNUMBER_BIN
    (194) intnumber -> . INTNUMBER_OCT
    (195) intnumber -> . SIGNED_INTNUMBER_OCT
    (196) intnumber -> . INTNUMBER_HEX
    (197) intnumber -> . SIGNED_INTNUMBER_HEX
    (189) floatnumber -> . FLOATNUMBER
    (198) stringliteral -> . STRING_LITERAL

    SEMICOLON       shift and go to state 558
    MINUS           shift and go to state 88
    PLUS            shift and go to state 89
    LNOT            shift and go to state 90
    NOT             shift and go to state 91
    AND             shift and go to state 92
    NAND            shift and go to state 93
    NOR             shift and go to state 94
    OR              shift and go to state 95
    XOR             shift and go to state 96
    XNOR            shift and go to state 97
    LPAREN          shift and go to state 85
    LBRACE          shift and go to state 106
    DOLLER          shift and go to state 107
    ID              shift and go to state 86
    INTNUMBER_DEC   shift and go to state 112
    SIGNED_INTNUMBER_DEC shift and go to state 113
    INTNUMBER_BIN   shift and go to state 114
    SIGNED_INTNUMBER_BIN shift and go to state 115
    INTNUMBER_OCT   shift and go to state 116
    SIGNED_INTNUMBER_OCT shift and go to state 117
    INTNUMBER_HEX   shift and go to state 118
    SIGNED_INTNUMBER_HEX shift and go to state 119
    FLOATNUMBER     shift and go to state 120
    STRING_LITERAL  shift and go to state 121

    forcond                        shift and go to state 596
    cond                           shift and go to state 557
    expression                     shift and go to state 437
    concat                         shift and go to state 98
    repeat                         shift and go to state 99
    partselect                     shift and go to state 100
    pointer                        shift and go to state 101
    functioncall                   shift and go to state 102
    systemcall                     shift and go to state 103
    identifier                     shift and go to state 104
    const_expression               shift and go to state 105
    scope                          shift and go to state 108
    intnumber                      shift and go to state 109
    floatnumber                    shift and go to state 110
    stringliteral                  shift and go to state 111

state 492

    (278) while_statement -> WHILE LPAREN cond . RPAREN whilecontent_statement

    RPAREN          shift and go to state 597


state 493

    (293) wait_statement -> WAIT LPAREN cond . RPAREN waitcontent_statement

    RPAREN          shift and go to state 598


state 494

    (245) block -> BEGIN block_statements END .

    ENDMODULE       reduce using rule 245 (block -> BEGIN block_statements END .)
    GENERATE        reduce using rule 245 (block -> BEGIN block_statements END .)
    INTEGER         reduce using rule 245 (block -> BEGIN block_statements END .)
    REAL            reduce using rule 245 (block -> BEGIN block_statements END .)
    PARAMETER       reduce using rule 245 (block -> BEGIN block_statements END .)
    LOCALPARAM      reduce using rule 245 (block -> BEGIN block_statements END .)
    GENVAR          reduce using rule 245 (block -> BEGIN block_statements END .)
    ASSIGN          reduce using rule 245 (block -> BEGIN block_statements END .)
    ALWAYS          reduce using rule 245 (block -> BEGIN block_statements END .)
    ALWAYS_FF       reduce using rule 245 (block -> BEGIN block_statements END .)
    ALWAYS_COMB     reduce using rule 245 (block -> BEGIN block_statements END .)
    INITIAL         reduce using rule 245 (block -> BEGIN block_statements END .)
    ID              reduce using rule 245 (block -> BEGIN block_statements END .)
    SENS_OR         reduce using rule 245 (block -> BEGIN block_statements END .)
    FUNCTION        reduce using rule 245 (block -> BEGIN block_statements END .)
    TASK            reduce using rule 245 (block -> BEGIN block_statements END .)
    LPAREN          reduce using rule 245 (block -> BEGIN block_statements END .)
    INPUT           reduce using rule 245 (block -> BEGIN block_statements END .)
    OUTPUT          reduce using rule 245 (block -> BEGIN block_statements END .)
    INOUT           reduce using rule 245 (block -> BEGIN block_statements END .)
    TRI             reduce using rule 245 (block -> BEGIN block_statements END .)
    REG             reduce using rule 245 (block -> BEGIN block_statements END .)
    LOGIC           reduce using rule 245 (block -> BEGIN block_statements END .)
    WIRE            reduce using rule 245 (block -> BEGIN block_statements END .)
    SIGNED          reduce using rule 245 (block -> BEGIN block_statements END .)
    SUPPLY0         reduce using rule 245 (block -> BEGIN block_statements END .)
    SUPPLY1         reduce using rule 245 (block -> BEGIN block_statements END .)
    ENDGENERATE     reduce using rule 245 (block -> BEGIN block_statements END .)
    IF              reduce using rule 245 (block -> BEGIN block_statements END .)
    FOR             reduce using rule 245 (block -> BEGIN block_statements END .)
    ELSE            reduce using rule 245 (block -> BEGIN block_statements END .)
    END             reduce using rule 245 (block -> BEGIN block_statements END .)
    CASE            reduce using rule 245 (block -> BEGIN block_statements END .)
    CASEX           reduce using rule 245 (block -> BEGIN block_statements END .)
    UNIQUE          reduce using rule 245 (block -> BEGIN block_statements END .)
    WHILE           reduce using rule 245 (block -> BEGIN block_statements END .)
    WAIT            reduce using rule 245 (block -> BEGIN block_statements END .)
    FOREVER         reduce using rule 245 (block -> BEGIN block_statements END .)
    BEGIN           reduce using rule 245 (block -> BEGIN block_statements END .)
    FORK            reduce using rule 245 (block -> BEGIN block_statements END .)
    DELAY           reduce using rule 245 (block -> BEGIN block_statements END .)
    AT              reduce using rule 245 (block -> BEGIN block_statements END .)
    DOLLER          reduce using rule 245 (block -> BEGIN block_statements END .)
    DISABLE         reduce using rule 245 (block -> BEGIN block_statements END .)
    LBRACE          reduce using rule 245 (block -> BEGIN block_statements END .)
    SEMICOLON       reduce using rule 245 (block -> BEGIN block_statements END .)
    JOIN            reduce using rule 245 (block -> BEGIN block_statements END .)
    ENDFUNCTION     reduce using rule 245 (block -> BEGIN block_statements END .)
    ENDTASK         reduce using rule 245 (block -> BEGIN block_statements END .)
    ENDCASE         reduce using rule 245 (block -> BEGIN block_statements END .)
    DEFAULT         reduce using rule 245 (block -> BEGIN block_statements END .)
    MINUS           reduce using rule 245 (block -> BEGIN block_statements END .)
    PLUS            reduce using rule 245 (block -> BEGIN block_statements END .)
    LNOT            reduce using rule 245 (block -> BEGIN block_statements END .)
    NOT             reduce using rule 245 (block -> BEGIN block_statements END .)
    AND             reduce using rule 245 (block -> BEGIN block_statements END .)
    NAND            reduce using rule 245 (block -> BEGIN block_statements END .)
    NOR             reduce using rule 245 (block -> BEGIN block_statements END .)
    OR              reduce using rule 245 (block -> BEGIN block_statements END .)
    XOR             reduce using rule 245 (block -> BEGIN block_statements END .)
    XNOR            reduce using rule 245 (block -> BEGIN block_statements END .)
    INTNUMBER_DEC   reduce using rule 245 (block -> BEGIN block_statements END .)
    SIGNED_INTNUMBER_DEC reduce using rule 245 (block -> BEGIN block_statements END .)
    INTNUMBER_BIN   reduce using rule 245 (block -> BEGIN block_statements END .)
    SIGNED_INTNUMBER_BIN reduce using rule 245 (block -> BEGIN block_statements END .)
    INTNUMBER_OCT   reduce using rule 245 (block -> BEGIN block_statements END .)
    SIGNED_INTNUMBER_OCT reduce using rule 245 (block -> BEGIN block_statements END .)
    INTNUMBER_HEX   reduce using rule 245 (block -> BEGIN block_statements END .)
    SIGNED_INTNUMBER_HEX reduce using rule 245 (block -> BEGIN block_statements END .)
    FLOATNUMBER     reduce using rule 245 (block -> BEGIN block_statements END .)
    STRING_LITERAL  reduce using rule 245 (block -> BEGIN block_statements END .)


state 495

    (247) block_statements -> block_statements block_statement .

    END             reduce using rule 247 (block_statements -> block_statements block_statement .)
    IF              reduce using rule 247 (block_statements -> block_statements block_statement .)
    CASE            reduce using rule 247 (block_statements -> block_statements block_statement .)
    CASEX           reduce using rule 247 (block_statements -> block_statements block_statement .)
    UNIQUE          reduce using rule 247 (block_statements -> block_statements block_statement .)
    FOR             reduce using rule 247 (block_statements -> block_statements block_statement .)
    WHILE           reduce using rule 247 (block_statements -> block_statements block_statement .)
    WAIT            reduce using rule 247 (block_statements -> block_statements block_statement .)
    FOREVER         reduce using rule 247 (block_statements -> block_statements block_statement .)
    BEGIN           reduce using rule 247 (block_statements -> block_statements block_statement .)
    FORK            reduce using rule 247 (block_statements -> block_statements block_statement .)
    DELAY           reduce using rule 247 (block_statements -> block_statements block_statement .)
    AT              reduce using rule 247 (block_statements -> block_statements block_statement .)
    DOLLER          reduce using rule 247 (block_statements -> block_statements block_statement .)
    DISABLE         reduce using rule 247 (block_statements -> block_statements block_statement .)
    LBRACE          reduce using rule 247 (block_statements -> block_statements block_statement .)
    ID              reduce using rule 247 (block_statements -> block_statements block_statement .)
    SEMICOLON       reduce using rule 247 (block_statements -> block_statements block_statement .)
    JOIN            reduce using rule 247 (block_statements -> block_statements block_statement .)


state 496

    (250) namedblock -> BEGIN COLON ID . namedblock_statements END
    (251) namedblock -> BEGIN COLON ID . END
    (252) namedblock_statements -> . namedblock_statements namedblock_statement
    (253) namedblock_statements -> . namedblock_statement
    (254) namedblock_statement -> . basic_statement
    (255) namedblock_statement -> . decl
    (256) namedblock_statement -> . integerdecl
    (257) namedblock_statement -> . realdecl
    (258) namedblock_statement -> . parameterdecl
    (259) namedblock_statement -> . localparamdecl
    (221) basic_statement -> . if_statement
    (222) basic_statement -> . case_statement
    (223) basic_statement -> . casex_statement
    (224) basic_statement -> . unique_case_statement
    (225) basic_statement -> . for_statement
    (226) basic_statement -> . while_statement
    (227) basic_statement -> . event_statement
    (228) basic_statement -> . wait_statement
    (229) basic_statement -> . forever_statement
    (230) basic_statement -> . block
    (231) basic_statement -> . namedblock
    (232) basic_statement -> . parallelblock
    (233) basic_statement -> . blocking_substitution
    (234) basic_statement -> . nonblocking_substitution
    (235) basic_statement -> . single_statement
    (77) decl -> . sigtypes declnamelist SEMICOLON
    (78) decl -> . sigtypes width declnamelist SEMICOLON
    (87) integerdecl -> . INTEGER integernamelist SEMICOLON
    (88) integerdecl -> . INTEGER SIGNED integernamelist SEMICOLON
    (92) realdecl -> . REAL realnamelist SEMICOLON
    (96) parameterdecl -> . PARAMETER param_substitution_list SEMICOLON
    (97) parameterdecl -> . PARAMETER SIGNED param_substitution_list SEMICOLON
    (98) parameterdecl -> . PARAMETER width param_substitution_list SEMICOLON
    (99) parameterdecl -> . PARAMETER SIGNED width param_substitution_list SEMICOLON
    (100) parameterdecl -> . PARAMETER INTEGER param_substitution_list SEMICOLON
    (101) localparamdecl -> . LOCALPARAM param_substitution_list SEMICOLON
    (102) localparamdecl -> . LOCALPARAM SIGNED param_substitution_list SEMICOLON
    (103) localparamdecl -> . LOCALPARAM width param_substitution_list SEMICOLON
    (104) localparamdecl -> . LOCALPARAM SIGNED width param_substitution_list SEMICOLON
    (105) localparamdecl -> . LOCALPARAM INTEGER param_substitution_list SEMICOLON
    (262) if_statement -> . IF LPAREN cond RPAREN true_statement ELSE else_statement
    (263) if_statement -> . IF LPAREN cond RPAREN true_statement
    (264) if_statement -> . delays IF LPAREN cond RPAREN true_statement ELSE else_statement
    (265) if_statement -> . delays IF LPAREN cond RPAREN true_statement
    (280) case_statement -> . CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE
    (281) casex_statement -> . CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE
    (282) unique_case_statement -> . UNIQUE CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE
    (270) for_statement -> . FOR LPAREN forpre forcond forpost RPAREN forcontent_statement
    (278) while_statement -> . WHILE LPAREN cond RPAREN whilecontent_statement
    (292) event_statement -> . senslist SEMICOLON
    (293) wait_statement -> . WAIT LPAREN cond RPAREN waitcontent_statement
    (296) forever_statement -> . FOREVER basic_statement
    (245) block -> . BEGIN block_statements END
    (246) block -> . BEGIN END
    (250) namedblock -> . BEGIN COLON ID namedblock_statements END
    (251) namedblock -> . BEGIN COLON ID END
    (260) parallelblock -> . FORK block_statements JOIN
    (261) parallelblock -> . FORK JOIN
    (237) blocking_substitution -> . delays lvalue EQUALS delays rvalue SEMICOLON
    (239) nonblocking_substitution -> . delays lvalue LE delays rvalue SEMICOLON
    (397) single_statement -> . DELAY expression SEMICOLON
    (398) single_statement -> . systemcall SEMICOLON
    (399) single_statement -> . disable SEMICOLON
    (35) sigtypes -> . sigtypes sigtype
    (36) sigtypes -> . sigtype
    (240) delays -> . DELAY LPAREN expression RPAREN
    (241) delays -> . DELAY identifier
    (242) delays -> . DELAY intnumber
    (243) delays -> . DELAY floatnumber
    (244) delays -> . empty
    (202) senslist -> . AT LPAREN edgesigs RPAREN
    (209) senslist -> . empty
    (210) senslist -> . AT levelsig
    (211) senslist -> . AT LPAREN levelsigs RPAREN
    (219) senslist -> . AT TIMES
    (220) senslist -> . AT LPAREN TIMES RPAREN
    (351) systemcall -> . DOLLER ID
    (352) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (353) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (396) disable -> . DISABLE ID
    (37) sigtype -> . INPUT
    (38) sigtype -> . OUTPUT
    (39) sigtype -> . INOUT
    (40) sigtype -> . TRI
    (41) sigtype -> . REG
    (42) sigtype -> . LOGIC
    (43) sigtype -> . WIRE
    (44) sigtype -> . SIGNED
    (45) sigtype -> . SUPPLY0
    (46) sigtype -> . SUPPLY1
    (400) empty -> .

  ! shift/reduce conflict for IF resolved as shift
    END             shift and go to state 600
    INTEGER         shift and go to state 47
    REAL            shift and go to state 49
    PARAMETER       shift and go to state 50
    LOCALPARAM      shift and go to state 51
    IF              shift and go to state 192
    CASE            shift and go to state 194
    CASEX           shift and go to state 195
    UNIQUE          shift and go to state 196
    FOR             shift and go to state 197
    WHILE           shift and go to state 198
    WAIT            shift and go to state 200
    FOREVER         shift and go to state 201
    BEGIN           shift and go to state 202
    FORK            shift and go to state 203
    DELAY           shift and go to state 204
    AT              shift and go to state 171
    DOLLER          shift and go to state 107
    DISABLE         shift and go to state 208
    INPUT           shift and go to state 63
    OUTPUT          shift and go to state 64
    INOUT           shift and go to state 65
    TRI             shift and go to state 66
    REG             shift and go to state 67
    LOGIC           shift and go to state 68
    WIRE            shift and go to state 69
    SIGNED          shift and go to state 48
    SUPPLY0         shift and go to state 70
    SUPPLY1         shift and go to state 71
    LBRACE          reduce using rule 400 (empty -> .)
    ID              reduce using rule 400 (empty -> .)
    SEMICOLON       reduce using rule 400 (empty -> .)

  ! IF              [ reduce using rule 400 (empty -> .) ]

    namedblock_statements          shift and go to state 599
    namedblock_statement           shift and go to state 601
    basic_statement                shift and go to state 602
    decl                           shift and go to state 603
    integerdecl                    shift and go to state 604
    realdecl                       shift and go to state 605
    parameterdecl                  shift and go to state 606
    localparamdecl                 shift and go to state 607
    if_statement                   shift and go to state 177
    case_statement                 shift and go to state 178
    casex_statement                shift and go to state 179
    unique_case_statement          shift and go to state 180
    for_statement                  shift and go to state 181
    while_statement                shift and go to state 182
    event_statement                shift and go to state 183
    wait_statement                 shift and go to state 184
    forever_statement              shift and go to state 185
    block                          shift and go to state 186
    namedblock                     shift and go to state 187
    parallelblock                  shift and go to state 188
    blocking_substitution          shift and go to state 189
    nonblocking_substitution       shift and go to state 190
    single_statement               shift and go to state 191
    sigtypes                       shift and go to state 523
    delays                         shift and go to state 193
    senslist                       shift and go to state 199
    systemcall                     shift and go to state 205
    disable                        shift and go to state 206
    sigtype                        shift and go to state 62
    empty                          shift and go to state 207

state 497

    (260) parallelblock -> FORK block_statements JOIN .

    ENDMODULE       reduce using rule 260 (parallelblock -> FORK block_statements JOIN .)
    GENERATE        reduce using rule 260 (parallelblock -> FORK block_statements JOIN .)
    INTEGER         reduce using rule 260 (parallelblock -> FORK block_statements JOIN .)
    REAL            reduce using rule 260 (parallelblock -> FORK block_statements JOIN .)
    PARAMETER       reduce using rule 260 (parallelblock -> FORK block_statements JOIN .)
    LOCALPARAM      reduce using rule 260 (parallelblock -> FORK block_statements JOIN .)
    GENVAR          reduce using rule 260 (parallelblock -> FORK block_statements JOIN .)
    ASSIGN          reduce using rule 260 (parallelblock -> FORK block_statements JOIN .)
    ALWAYS          reduce using rule 260 (parallelblock -> FORK block_statements JOIN .)
    ALWAYS_FF       reduce using rule 260 (parallelblock -> FORK block_statements JOIN .)
    ALWAYS_COMB     reduce using rule 260 (parallelblock -> FORK block_statements JOIN .)
    INITIAL         reduce using rule 260 (parallelblock -> FORK block_statements JOIN .)
    ID              reduce using rule 260 (parallelblock -> FORK block_statements JOIN .)
    SENS_OR         reduce using rule 260 (parallelblock -> FORK block_statements JOIN .)
    FUNCTION        reduce using rule 260 (parallelblock -> FORK block_statements JOIN .)
    TASK            reduce using rule 260 (parallelblock -> FORK block_statements JOIN .)
    LPAREN          reduce using rule 260 (parallelblock -> FORK block_statements JOIN .)
    INPUT           reduce using rule 260 (parallelblock -> FORK block_statements JOIN .)
    OUTPUT          reduce using rule 260 (parallelblock -> FORK block_statements JOIN .)
    INOUT           reduce using rule 260 (parallelblock -> FORK block_statements JOIN .)
    TRI             reduce using rule 260 (parallelblock -> FORK block_statements JOIN .)
    REG             reduce using rule 260 (parallelblock -> FORK block_statements JOIN .)
    LOGIC           reduce using rule 260 (parallelblock -> FORK block_statements JOIN .)
    WIRE            reduce using rule 260 (parallelblock -> FORK block_statements JOIN .)
    SIGNED          reduce using rule 260 (parallelblock -> FORK block_statements JOIN .)
    SUPPLY0         reduce using rule 260 (parallelblock -> FORK block_statements JOIN .)
    SUPPLY1         reduce using rule 260 (parallelblock -> FORK block_statements JOIN .)
    ENDGENERATE     reduce using rule 260 (parallelblock -> FORK block_statements JOIN .)
    IF              reduce using rule 260 (parallelblock -> FORK block_statements JOIN .)
    FOR             reduce using rule 260 (parallelblock -> FORK block_statements JOIN .)
    ELSE            reduce using rule 260 (parallelblock -> FORK block_statements JOIN .)
    END             reduce using rule 260 (parallelblock -> FORK block_statements JOIN .)
    CASE            reduce using rule 260 (parallelblock -> FORK block_statements JOIN .)
    CASEX           reduce using rule 260 (parallelblock -> FORK block_statements JOIN .)
    UNIQUE          reduce using rule 260 (parallelblock -> FORK block_statements JOIN .)
    WHILE           reduce using rule 260 (parallelblock -> FORK block_statements JOIN .)
    WAIT            reduce using rule 260 (parallelblock -> FORK block_statements JOIN .)
    FOREVER         reduce using rule 260 (parallelblock -> FORK block_statements JOIN .)
    BEGIN           reduce using rule 260 (parallelblock -> FORK block_statements JOIN .)
    FORK            reduce using rule 260 (parallelblock -> FORK block_statements JOIN .)
    DELAY           reduce using rule 260 (parallelblock -> FORK block_statements JOIN .)
    AT              reduce using rule 260 (parallelblock -> FORK block_statements JOIN .)
    DOLLER          reduce using rule 260 (parallelblock -> FORK block_statements JOIN .)
    DISABLE         reduce using rule 260 (parallelblock -> FORK block_statements JOIN .)
    LBRACE          reduce using rule 260 (parallelblock -> FORK block_statements JOIN .)
    SEMICOLON       reduce using rule 260 (parallelblock -> FORK block_statements JOIN .)
    JOIN            reduce using rule 260 (parallelblock -> FORK block_statements JOIN .)
    ENDFUNCTION     reduce using rule 260 (parallelblock -> FORK block_statements JOIN .)
    ENDTASK         reduce using rule 260 (parallelblock -> FORK block_statements JOIN .)
    ENDCASE         reduce using rule 260 (parallelblock -> FORK block_statements JOIN .)
    DEFAULT         reduce using rule 260 (parallelblock -> FORK block_statements JOIN .)
    MINUS           reduce using rule 260 (parallelblock -> FORK block_statements JOIN .)
    PLUS            reduce using rule 260 (parallelblock -> FORK block_statements JOIN .)
    LNOT            reduce using rule 260 (parallelblock -> FORK block_statements JOIN .)
    NOT             reduce using rule 260 (parallelblock -> FORK block_statements JOIN .)
    AND             reduce using rule 260 (parallelblock -> FORK block_statements JOIN .)
    NAND            reduce using rule 260 (parallelblock -> FORK block_statements JOIN .)
    NOR             reduce using rule 260 (parallelblock -> FORK block_statements JOIN .)
    OR              reduce using rule 260 (parallelblock -> FORK block_statements JOIN .)
    XOR             reduce using rule 260 (parallelblock -> FORK block_statements JOIN .)
    XNOR            reduce using rule 260 (parallelblock -> FORK block_statements JOIN .)
    INTNUMBER_DEC   reduce using rule 260 (parallelblock -> FORK block_statements JOIN .)
    SIGNED_INTNUMBER_DEC reduce using rule 260 (parallelblock -> FORK block_statements JOIN .)
    INTNUMBER_BIN   reduce using rule 260 (parallelblock -> FORK block_statements JOIN .)
    SIGNED_INTNUMBER_BIN reduce using rule 260 (parallelblock -> FORK block_statements JOIN .)
    INTNUMBER_OCT   reduce using rule 260 (parallelblock -> FORK block_statements JOIN .)
    SIGNED_INTNUMBER_OCT reduce using rule 260 (parallelblock -> FORK block_statements JOIN .)
    INTNUMBER_HEX   reduce using rule 260 (parallelblock -> FORK block_statements JOIN .)
    SIGNED_INTNUMBER_HEX reduce using rule 260 (parallelblock -> FORK block_statements JOIN .)
    FLOATNUMBER     reduce using rule 260 (parallelblock -> FORK block_statements JOIN .)
    STRING_LITERAL  reduce using rule 260 (parallelblock -> FORK block_statements JOIN .)


state 498

    (397) single_statement -> DELAY expression SEMICOLON .

    ENDMODULE       reduce using rule 397 (single_statement -> DELAY expression SEMICOLON .)
    GENERATE        reduce using rule 397 (single_statement -> DELAY expression SEMICOLON .)
    INTEGER         reduce using rule 397 (single_statement -> DELAY expression SEMICOLON .)
    REAL            reduce using rule 397 (single_statement -> DELAY expression SEMICOLON .)
    PARAMETER       reduce using rule 397 (single_statement -> DELAY expression SEMICOLON .)
    LOCALPARAM      reduce using rule 397 (single_statement -> DELAY expression SEMICOLON .)
    GENVAR          reduce using rule 397 (single_statement -> DELAY expression SEMICOLON .)
    ASSIGN          reduce using rule 397 (single_statement -> DELAY expression SEMICOLON .)
    ALWAYS          reduce using rule 397 (single_statement -> DELAY expression SEMICOLON .)
    ALWAYS_FF       reduce using rule 397 (single_statement -> DELAY expression SEMICOLON .)
    ALWAYS_COMB     reduce using rule 397 (single_statement -> DELAY expression SEMICOLON .)
    INITIAL         reduce using rule 397 (single_statement -> DELAY expression SEMICOLON .)
    ID              reduce using rule 397 (single_statement -> DELAY expression SEMICOLON .)
    SENS_OR         reduce using rule 397 (single_statement -> DELAY expression SEMICOLON .)
    FUNCTION        reduce using rule 397 (single_statement -> DELAY expression SEMICOLON .)
    TASK            reduce using rule 397 (single_statement -> DELAY expression SEMICOLON .)
    LPAREN          reduce using rule 397 (single_statement -> DELAY expression SEMICOLON .)
    INPUT           reduce using rule 397 (single_statement -> DELAY expression SEMICOLON .)
    OUTPUT          reduce using rule 397 (single_statement -> DELAY expression SEMICOLON .)
    INOUT           reduce using rule 397 (single_statement -> DELAY expression SEMICOLON .)
    TRI             reduce using rule 397 (single_statement -> DELAY expression SEMICOLON .)
    REG             reduce using rule 397 (single_statement -> DELAY expression SEMICOLON .)
    LOGIC           reduce using rule 397 (single_statement -> DELAY expression SEMICOLON .)
    WIRE            reduce using rule 397 (single_statement -> DELAY expression SEMICOLON .)
    SIGNED          reduce using rule 397 (single_statement -> DELAY expression SEMICOLON .)
    SUPPLY0         reduce using rule 397 (single_statement -> DELAY expression SEMICOLON .)
    SUPPLY1         reduce using rule 397 (single_statement -> DELAY expression SEMICOLON .)
    ENDGENERATE     reduce using rule 397 (single_statement -> DELAY expression SEMICOLON .)
    IF              reduce using rule 397 (single_statement -> DELAY expression SEMICOLON .)
    FOR             reduce using rule 397 (single_statement -> DELAY expression SEMICOLON .)
    ELSE            reduce using rule 397 (single_statement -> DELAY expression SEMICOLON .)
    END             reduce using rule 397 (single_statement -> DELAY expression SEMICOLON .)
    CASE            reduce using rule 397 (single_statement -> DELAY expression SEMICOLON .)
    CASEX           reduce using rule 397 (single_statement -> DELAY expression SEMICOLON .)
    UNIQUE          reduce using rule 397 (single_statement -> DELAY expression SEMICOLON .)
    WHILE           reduce using rule 397 (single_statement -> DELAY expression SEMICOLON .)
    WAIT            reduce using rule 397 (single_statement -> DELAY expression SEMICOLON .)
    FOREVER         reduce using rule 397 (single_statement -> DELAY expression SEMICOLON .)
    BEGIN           reduce using rule 397 (single_statement -> DELAY expression SEMICOLON .)
    FORK            reduce using rule 397 (single_statement -> DELAY expression SEMICOLON .)
    DELAY           reduce using rule 397 (single_statement -> DELAY expression SEMICOLON .)
    AT              reduce using rule 397 (single_statement -> DELAY expression SEMICOLON .)
    DOLLER          reduce using rule 397 (single_statement -> DELAY expression SEMICOLON .)
    DISABLE         reduce using rule 397 (single_statement -> DELAY expression SEMICOLON .)
    LBRACE          reduce using rule 397 (single_statement -> DELAY expression SEMICOLON .)
    SEMICOLON       reduce using rule 397 (single_statement -> DELAY expression SEMICOLON .)
    JOIN            reduce using rule 397 (single_statement -> DELAY expression SEMICOLON .)
    ENDFUNCTION     reduce using rule 397 (single_statement -> DELAY expression SEMICOLON .)
    ENDTASK         reduce using rule 397 (single_statement -> DELAY expression SEMICOLON .)
    ENDCASE         reduce using rule 397 (single_statement -> DELAY expression SEMICOLON .)
    DEFAULT         reduce using rule 397 (single_statement -> DELAY expression SEMICOLON .)
    MINUS           reduce using rule 397 (single_statement -> DELAY expression SEMICOLON .)
    PLUS            reduce using rule 397 (single_statement -> DELAY expression SEMICOLON .)
    LNOT            reduce using rule 397 (single_statement -> DELAY expression SEMICOLON .)
    NOT             reduce using rule 397 (single_statement -> DELAY expression SEMICOLON .)
    AND             reduce using rule 397 (single_statement -> DELAY expression SEMICOLON .)
    NAND            reduce using rule 397 (single_statement -> DELAY expression SEMICOLON .)
    NOR             reduce using rule 397 (single_statement -> DELAY expression SEMICOLON .)
    OR              reduce using rule 397 (single_statement -> DELAY expression SEMICOLON .)
    XOR             reduce using rule 397 (single_statement -> DELAY expression SEMICOLON .)
    XNOR            reduce using rule 397 (single_statement -> DELAY expression SEMICOLON .)
    INTNUMBER_DEC   reduce using rule 397 (single_statement -> DELAY expression SEMICOLON .)
    SIGNED_INTNUMBER_DEC reduce using rule 397 (single_statement -> DELAY expression SEMICOLON .)
    INTNUMBER_BIN   reduce using rule 397 (single_statement -> DELAY expression SEMICOLON .)
    SIGNED_INTNUMBER_BIN reduce using rule 397 (single_statement -> DELAY expression SEMICOLON .)
    INTNUMBER_OCT   reduce using rule 397 (single_statement -> DELAY expression SEMICOLON .)
    SIGNED_INTNUMBER_OCT reduce using rule 397 (single_statement -> DELAY expression SEMICOLON .)
    INTNUMBER_HEX   reduce using rule 397 (single_statement -> DELAY expression SEMICOLON .)
    SIGNED_INTNUMBER_HEX reduce using rule 397 (single_statement -> DELAY expression SEMICOLON .)
    FLOATNUMBER     reduce using rule 397 (single_statement -> DELAY expression SEMICOLON .)
    STRING_LITERAL  reduce using rule 397 (single_statement -> DELAY expression SEMICOLON .)


state 499

    (240) delays -> DELAY LPAREN expression . RPAREN
    (165) expression -> LPAREN expression . RPAREN
    (140) expression -> expression . POWER expression
    (141) expression -> expression . TIMES expression
    (142) expression -> expression . DIVIDE expression
    (143) expression -> expression . MOD expression
    (144) expression -> expression . PLUS expression
    (145) expression -> expression . MINUS expression
    (146) expression -> expression . LSHIFT expression
    (147) expression -> expression . RSHIFT expression
    (148) expression -> expression . LSHIFTA expression
    (149) expression -> expression . RSHIFTA expression
    (150) expression -> expression . LT expression
    (151) expression -> expression . GT expression
    (152) expression -> expression . LE expression
    (153) expression -> expression . GE expression
    (154) expression -> expression . EQ expression
    (155) expression -> expression . NE expression
    (156) expression -> expression . EQL expression
    (157) expression -> expression . NEL expression
    (158) expression -> expression . AND expression
    (159) expression -> expression . XOR expression
    (160) expression -> expression . XNOR expression
    (161) expression -> expression . OR expression
    (162) expression -> expression . LAND expression
    (163) expression -> expression . LOR expression
    (164) expression -> expression . COND expression COLON expression

    RPAREN          shift and go to state 608
    POWER           shift and go to state 236
    TIMES           shift and go to state 398
    DIVIDE          shift and go to state 237
    MOD             shift and go to state 238
    PLUS            shift and go to state 239
    MINUS           shift and go to state 240
    LSHIFT          shift and go to state 241
    RSHIFT          shift and go to state 242
    LSHIFTA         shift and go to state 243
    RSHIFTA         shift and go to state 244
    LT              shift and go to state 245
    GT              shift and go to state 246
    LE              shift and go to state 247
    GE              shift and go to state 248
    EQ              shift and go to state 249
    NE              shift and go to state 250
    EQL             shift and go to state 251
    NEL             shift and go to state 252
    AND             shift and go to state 253
    XOR             shift and go to state 254
    XNOR            shift and go to state 255
    OR              shift and go to state 256
    LAND            shift and go to state 257
    LOR             shift and go to state 258
    COND            shift and go to state 259


state 500

    (301) instance_body -> ID LPAREN . instance_ports RPAREN
    (318) instance_ports -> . instance_ports_list
    (319) instance_ports -> . instance_ports_arg
    (320) instance_ports_list -> . instance_ports_list COMMA instance_port_list
    (321) instance_ports_list -> . instance_port_list
    (322) instance_ports_list -> . empty
    (324) instance_ports_arg -> . instance_ports_arg COMMA instance_port_arg
    (325) instance_ports_arg -> . instance_port_arg
    (323) instance_port_list -> . expression
    (400) empty -> .
    (326) instance_port_arg -> . DOT ID LPAREN identifier RPAREN
    (327) instance_port_arg -> . DOT ID LPAREN expression RPAREN
    (328) instance_port_arg -> . DOT ID LPAREN RPAREN
    (130) expression -> . MINUS expression
    (131) expression -> . PLUS expression
    (132) expression -> . LNOT expression
    (133) expression -> . NOT expression
    (134) expression -> . AND expression
    (135) expression -> . NAND expression
    (136) expression -> . NOR expression
    (137) expression -> . OR expression
    (138) expression -> . XOR expression
    (139) expression -> . XNOR expression
    (140) expression -> . expression POWER expression
    (141) expression -> . expression TIMES expression
    (142) expression -> . expression DIVIDE expression
    (143) expression -> . expression MOD expression
    (144) expression -> . expression PLUS expression
    (145) expression -> . expression MINUS expression
    (146) expression -> . expression LSHIFT expression
    (147) expression -> . expression RSHIFT expression
    (148) expression -> . expression LSHIFTA expression
    (149) expression -> . expression RSHIFTA expression
    (150) expression -> . expression LT expression
    (151) expression -> . expression GT expression
    (152) expression -> . expression LE expression
    (153) expression -> . expression GE expression
    (154) expression -> . expression EQ expression
    (155) expression -> . expression NE expression
    (156) expression -> . expression EQL expression
    (157) expression -> . expression NEL expression
    (158) expression -> . expression AND expression
    (159) expression -> . expression XOR expression
    (160) expression -> . expression XNOR expression
    (161) expression -> . expression OR expression
    (162) expression -> . expression LAND expression
    (163) expression -> . expression LOR expression
    (164) expression -> . expression COND expression COLON expression
    (165) expression -> . LPAREN expression RPAREN
    (166) expression -> . concat
    (167) expression -> . repeat
    (168) expression -> . partselect
    (169) expression -> . pointer
    (170) expression -> . functioncall
    (171) expression -> . systemcall
    (172) expression -> . identifier
    (173) expression -> . const_expression
    (174) concat -> . LBRACE concatlist RBRACE
    (177) repeat -> . LBRACE expression concat RBRACE
    (178) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (179) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (180) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (181) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (182) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (183) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (184) pointer -> . identifier LBRACKET expression RBRACKET
    (185) pointer -> . pointer LBRACKET expression RBRACKET
    (373) functioncall -> . identifier LPAREN func_args RPAREN
    (351) systemcall -> . DOLLER ID
    (352) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (353) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (392) identifier -> . ID
    (393) identifier -> . scope ID
    (186) const_expression -> . intnumber
    (187) const_expression -> . floatnumber
    (188) const_expression -> . stringliteral
    (394) scope -> . identifier DOT
    (395) scope -> . pointer DOT
    (190) intnumber -> . INTNUMBER_DEC
    (191) intnumber -> . SIGNED_INTNUMBER_DEC
    (192) intnumber -> . INTNUMBER_BIN
    (193) intnumber -> . SIGNED_INTNUMBER_BIN
    (194) intnumber -> . INTNUMBER_OCT
    (195) intnumber -> . SIGNED_INTNUMBER_OCT
    (196) intnumber -> . INTNUMBER_HEX
    (197) intnumber -> . SIGNED_INTNUMBER_HEX
    (189) floatnumber -> . FLOATNUMBER
    (198) stringliteral -> . STRING_LITERAL

    COMMA           reduce using rule 400 (empty -> .)
    RPAREN          reduce using rule 400 (empty -> .)
    DOT             shift and go to state 379
    MINUS           shift and go to state 88
    PLUS            shift and go to state 89
    LNOT            shift and go to state 90
    NOT             shift and go to state 91
    AND             shift and go to state 92
    NAND            shift and go to state 93
    NOR             shift and go to state 94
    OR              shift and go to state 95
    XOR             shift and go to state 96
    XNOR            shift and go to state 97
    LPAREN          shift and go to state 85
    LBRACE          shift and go to state 106
    DOLLER          shift and go to state 107
    ID              shift and go to state 86
    INTNUMBER_DEC   shift and go to state 112
    SIGNED_INTNUMBER_DEC shift and go to state 113
    INTNUMBER_BIN   shift and go to state 114
    SIGNED_INTNUMBER_BIN shift and go to state 115
    INTNUMBER_OCT   shift and go to state 116
    SIGNED_INTNUMBER_OCT shift and go to state 117
    INTNUMBER_HEX   shift and go to state 118
    SIGNED_INTNUMBER_HEX shift and go to state 119
    FLOATNUMBER     shift and go to state 120
    STRING_LITERAL  shift and go to state 121

    instance_ports                 shift and go to state 609
    instance_ports_list            shift and go to state 373
    instance_ports_arg             shift and go to state 374
    instance_port_list             shift and go to state 375
    empty                          shift and go to state 376
    instance_port_arg              shift and go to state 377
    expression                     shift and go to state 378
    identifier                     shift and go to state 104
    concat                         shift and go to state 98
    repeat                         shift and go to state 99
    partselect                     shift and go to state 100
    pointer                        shift and go to state 101
    functioncall                   shift and go to state 102
    systemcall                     shift and go to state 103
    const_expression               shift and go to state 105
    scope                          shift and go to state 108
    intnumber                      shift and go to state 109
    floatnumber                    shift and go to state 110
    stringliteral                  shift and go to state 111

state 501

    (302) instance_body -> ID width . LPAREN instance_ports RPAREN

    LPAREN          shift and go to state 610


state 502

    (297) instance -> ID parameterlist instance_bodylist SEMICOLON .

    ENDMODULE       reduce using rule 297 (instance -> ID parameterlist instance_bodylist SEMICOLON .)
    GENERATE        reduce using rule 297 (instance -> ID parameterlist instance_bodylist SEMICOLON .)
    INTEGER         reduce using rule 297 (instance -> ID parameterlist instance_bodylist SEMICOLON .)
    REAL            reduce using rule 297 (instance -> ID parameterlist instance_bodylist SEMICOLON .)
    PARAMETER       reduce using rule 297 (instance -> ID parameterlist instance_bodylist SEMICOLON .)
    LOCALPARAM      reduce using rule 297 (instance -> ID parameterlist instance_bodylist SEMICOLON .)
    GENVAR          reduce using rule 297 (instance -> ID parameterlist instance_bodylist SEMICOLON .)
    ASSIGN          reduce using rule 297 (instance -> ID parameterlist instance_bodylist SEMICOLON .)
    ALWAYS          reduce using rule 297 (instance -> ID parameterlist instance_bodylist SEMICOLON .)
    ALWAYS_FF       reduce using rule 297 (instance -> ID parameterlist instance_bodylist SEMICOLON .)
    ALWAYS_COMB     reduce using rule 297 (instance -> ID parameterlist instance_bodylist SEMICOLON .)
    INITIAL         reduce using rule 297 (instance -> ID parameterlist instance_bodylist SEMICOLON .)
    ID              reduce using rule 297 (instance -> ID parameterlist instance_bodylist SEMICOLON .)
    SENS_OR         reduce using rule 297 (instance -> ID parameterlist instance_bodylist SEMICOLON .)
    FUNCTION        reduce using rule 297 (instance -> ID parameterlist instance_bodylist SEMICOLON .)
    TASK            reduce using rule 297 (instance -> ID parameterlist instance_bodylist SEMICOLON .)
    LPAREN          reduce using rule 297 (instance -> ID parameterlist instance_bodylist SEMICOLON .)
    INPUT           reduce using rule 297 (instance -> ID parameterlist instance_bodylist SEMICOLON .)
    OUTPUT          reduce using rule 297 (instance -> ID parameterlist instance_bodylist SEMICOLON .)
    INOUT           reduce using rule 297 (instance -> ID parameterlist instance_bodylist SEMICOLON .)
    TRI             reduce using rule 297 (instance -> ID parameterlist instance_bodylist SEMICOLON .)
    REG             reduce using rule 297 (instance -> ID parameterlist instance_bodylist SEMICOLON .)
    LOGIC           reduce using rule 297 (instance -> ID parameterlist instance_bodylist SEMICOLON .)
    WIRE            reduce using rule 297 (instance -> ID parameterlist instance_bodylist SEMICOLON .)
    SIGNED          reduce using rule 297 (instance -> ID parameterlist instance_bodylist SEMICOLON .)
    SUPPLY0         reduce using rule 297 (instance -> ID parameterlist instance_bodylist SEMICOLON .)
    SUPPLY1         reduce using rule 297 (instance -> ID parameterlist instance_bodylist SEMICOLON .)
    ENDGENERATE     reduce using rule 297 (instance -> ID parameterlist instance_bodylist SEMICOLON .)
    IF              reduce using rule 297 (instance -> ID parameterlist instance_bodylist SEMICOLON .)
    FOR             reduce using rule 297 (instance -> ID parameterlist instance_bodylist SEMICOLON .)
    ELSE            reduce using rule 297 (instance -> ID parameterlist instance_bodylist SEMICOLON .)
    END             reduce using rule 297 (instance -> ID parameterlist instance_bodylist SEMICOLON .)


state 503

    (299) instance_bodylist -> instance_bodylist COMMA . instance_body
    (301) instance_body -> . ID LPAREN instance_ports RPAREN
    (302) instance_body -> . ID width LPAREN instance_ports RPAREN

    ID              shift and go to state 366

    instance_body                  shift and go to state 611

state 504

    (305) instance_bodylist_noname -> instance_bodylist_noname COMMA instance_body_noname .

    SEMICOLON       reduce using rule 305 (instance_bodylist_noname -> instance_bodylist_noname COMMA instance_body_noname .)
    COMMA           reduce using rule 305 (instance_bodylist_noname -> instance_bodylist_noname COMMA instance_body_noname .)


state 505

    (308) parameterlist -> DELAY LPAREN param_args . RPAREN
    (313) param_args -> param_args . COMMA param_arg

    RPAREN          shift and go to state 612
    COMMA           shift and go to state 613


state 506

    (309) parameterlist -> DELAY LPAREN param_args_noname . RPAREN
    (311) param_args_noname -> param_args_noname . COMMA param_arg_noname

    RPAREN          shift and go to state 614
    COMMA           shift and go to state 615


state 507

    (314) param_args -> param_arg .

    RPAREN          reduce using rule 314 (param_args -> param_arg .)
    COMMA           reduce using rule 314 (param_args -> param_arg .)


state 508

    (315) param_args -> empty .

    RPAREN          reduce using rule 315 (param_args -> empty .)
    COMMA           reduce using rule 315 (param_args -> empty .)


state 509

    (312) param_args_noname -> param_arg_noname .

    RPAREN          reduce using rule 312 (param_args_noname -> param_arg_noname .)
    COMMA           reduce using rule 312 (param_args_noname -> param_arg_noname .)


state 510

    (317) param_arg -> DOT . ID LPAREN expression RPAREN

    ID              shift and go to state 616


state 511

    (316) param_arg_noname -> expression .
    (140) expression -> expression . POWER expression
    (141) expression -> expression . TIMES expression
    (142) expression -> expression . DIVIDE expression
    (143) expression -> expression . MOD expression
    (144) expression -> expression . PLUS expression
    (145) expression -> expression . MINUS expression
    (146) expression -> expression . LSHIFT expression
    (147) expression -> expression . RSHIFT expression
    (148) expression -> expression . LSHIFTA expression
    (149) expression -> expression . RSHIFTA expression
    (150) expression -> expression . LT expression
    (151) expression -> expression . GT expression
    (152) expression -> expression . LE expression
    (153) expression -> expression . GE expression
    (154) expression -> expression . EQ expression
    (155) expression -> expression . NE expression
    (156) expression -> expression . EQL expression
    (157) expression -> expression . NEL expression
    (158) expression -> expression . AND expression
    (159) expression -> expression . XOR expression
    (160) expression -> expression . XNOR expression
    (161) expression -> expression . OR expression
    (162) expression -> expression . LAND expression
    (163) expression -> expression . LOR expression
    (164) expression -> expression . COND expression COLON expression

    RPAREN          reduce using rule 316 (param_arg_noname -> expression .)
    COMMA           reduce using rule 316 (param_arg_noname -> expression .)
    POWER           shift and go to state 236
    TIMES           shift and go to state 398
    DIVIDE          shift and go to state 237
    MOD             shift and go to state 238
    PLUS            shift and go to state 239
    MINUS           shift and go to state 240
    LSHIFT          shift and go to state 241
    RSHIFT          shift and go to state 242
    LSHIFTA         shift and go to state 243
    RSHIFTA         shift and go to state 244
    LT              shift and go to state 245
    GT              shift and go to state 246
    LE              shift and go to state 247
    GE              shift and go to state 248
    EQ              shift and go to state 249
    NE              shift and go to state 250
    EQL             shift and go to state 251
    NEL             shift and go to state 252
    AND             shift and go to state 253
    XOR             shift and go to state 254
    XNOR            shift and go to state 255
    OR              shift and go to state 256
    LAND            shift and go to state 257
    LOR             shift and go to state 258
    COND            shift and go to state 259


state 512

    (307) instance_body_noname -> LPAREN instance_ports RPAREN .

    SEMICOLON       reduce using rule 307 (instance_body_noname -> LPAREN instance_ports RPAREN .)
    COMMA           reduce using rule 307 (instance_body_noname -> LPAREN instance_ports RPAREN .)


state 513

    (320) instance_ports_list -> instance_ports_list COMMA . instance_port_list
    (323) instance_port_list -> . expression
    (130) expression -> . MINUS expression
    (131) expression -> . PLUS expression
    (132) expression -> . LNOT expression
    (133) expression -> . NOT expression
    (134) expression -> . AND expression
    (135) expression -> . NAND expression
    (136) expression -> . NOR expression
    (137) expression -> . OR expression
    (138) expression -> . XOR expression
    (139) expression -> . XNOR expression
    (140) expression -> . expression POWER expression
    (141) expression -> . expression TIMES expression
    (142) expression -> . expression DIVIDE expression
    (143) expression -> . expression MOD expression
    (144) expression -> . expression PLUS expression
    (145) expression -> . expression MINUS expression
    (146) expression -> . expression LSHIFT expression
    (147) expression -> . expression RSHIFT expression
    (148) expression -> . expression LSHIFTA expression
    (149) expression -> . expression RSHIFTA expression
    (150) expression -> . expression LT expression
    (151) expression -> . expression GT expression
    (152) expression -> . expression LE expression
    (153) expression -> . expression GE expression
    (154) expression -> . expression EQ expression
    (155) expression -> . expression NE expression
    (156) expression -> . expression EQL expression
    (157) expression -> . expression NEL expression
    (158) expression -> . expression AND expression
    (159) expression -> . expression XOR expression
    (160) expression -> . expression XNOR expression
    (161) expression -> . expression OR expression
    (162) expression -> . expression LAND expression
    (163) expression -> . expression LOR expression
    (164) expression -> . expression COND expression COLON expression
    (165) expression -> . LPAREN expression RPAREN
    (166) expression -> . concat
    (167) expression -> . repeat
    (168) expression -> . partselect
    (169) expression -> . pointer
    (170) expression -> . functioncall
    (171) expression -> . systemcall
    (172) expression -> . identifier
    (173) expression -> . const_expression
    (174) concat -> . LBRACE concatlist RBRACE
    (177) repeat -> . LBRACE expression concat RBRACE
    (178) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (179) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (180) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (181) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (182) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (183) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (184) pointer -> . identifier LBRACKET expression RBRACKET
    (185) pointer -> . pointer LBRACKET expression RBRACKET
    (373) functioncall -> . identifier LPAREN func_args RPAREN
    (351) systemcall -> . DOLLER ID
    (352) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (353) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (392) identifier -> . ID
    (393) identifier -> . scope ID
    (186) const_expression -> . intnumber
    (187) const_expression -> . floatnumber
    (188) const_expression -> . stringliteral
    (394) scope -> . identifier DOT
    (395) scope -> . pointer DOT
    (190) intnumber -> . INTNUMBER_DEC
    (191) intnumber -> . SIGNED_INTNUMBER_DEC
    (192) intnumber -> . INTNUMBER_BIN
    (193) intnumber -> . SIGNED_INTNUMBER_BIN
    (194) intnumber -> . INTNUMBER_OCT
    (195) intnumber -> . SIGNED_INTNUMBER_OCT
    (196) intnumber -> . INTNUMBER_HEX
    (197) intnumber -> . SIGNED_INTNUMBER_HEX
    (189) floatnumber -> . FLOATNUMBER
    (198) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 88
    PLUS            shift and go to state 89
    LNOT            shift and go to state 90
    NOT             shift and go to state 91
    AND             shift and go to state 92
    NAND            shift and go to state 93
    NOR             shift and go to state 94
    OR              shift and go to state 95
    XOR             shift and go to state 96
    XNOR            shift and go to state 97
    LPAREN          shift and go to state 85
    LBRACE          shift and go to state 106
    DOLLER          shift and go to state 107
    ID              shift and go to state 86
    INTNUMBER_DEC   shift and go to state 112
    SIGNED_INTNUMBER_DEC shift and go to state 113
    INTNUMBER_BIN   shift and go to state 114
    SIGNED_INTNUMBER_BIN shift and go to state 115
    INTNUMBER_OCT   shift and go to state 116
    SIGNED_INTNUMBER_OCT shift and go to state 117
    INTNUMBER_HEX   shift and go to state 118
    SIGNED_INTNUMBER_HEX shift and go to state 119
    FLOATNUMBER     shift and go to state 120
    STRING_LITERAL  shift and go to state 121

    instance_port_list             shift and go to state 617
    expression                     shift and go to state 378
    concat                         shift and go to state 98
    repeat                         shift and go to state 99
    partselect                     shift and go to state 100
    pointer                        shift and go to state 101
    functioncall                   shift and go to state 102
    systemcall                     shift and go to state 103
    identifier                     shift and go to state 104
    const_expression               shift and go to state 105
    scope                          shift and go to state 108
    intnumber                      shift and go to state 109
    floatnumber                    shift and go to state 110
    stringliteral                  shift and go to state 111

state 514

    (324) instance_ports_arg -> instance_ports_arg COMMA . instance_port_arg
    (326) instance_port_arg -> . DOT ID LPAREN identifier RPAREN
    (327) instance_port_arg -> . DOT ID LPAREN expression RPAREN
    (328) instance_port_arg -> . DOT ID LPAREN RPAREN

    DOT             shift and go to state 379

    instance_port_arg              shift and go to state 618

state 515

    (326) instance_port_arg -> DOT ID . LPAREN identifier RPAREN
    (327) instance_port_arg -> DOT ID . LPAREN expression RPAREN
    (328) instance_port_arg -> DOT ID . LPAREN RPAREN

    LPAREN          shift and go to state 619


state 516

    (298) instance -> SENS_OR parameterlist instance_bodylist SEMICOLON .

    ENDMODULE       reduce using rule 298 (instance -> SENS_OR parameterlist instance_bodylist SEMICOLON .)
    GENERATE        reduce using rule 298 (instance -> SENS_OR parameterlist instance_bodylist SEMICOLON .)
    INTEGER         reduce using rule 298 (instance -> SENS_OR parameterlist instance_bodylist SEMICOLON .)
    REAL            reduce using rule 298 (instance -> SENS_OR parameterlist instance_bodylist SEMICOLON .)
    PARAMETER       reduce using rule 298 (instance -> SENS_OR parameterlist instance_bodylist SEMICOLON .)
    LOCALPARAM      reduce using rule 298 (instance -> SENS_OR parameterlist instance_bodylist SEMICOLON .)
    GENVAR          reduce using rule 298 (instance -> SENS_OR parameterlist instance_bodylist SEMICOLON .)
    ASSIGN          reduce using rule 298 (instance -> SENS_OR parameterlist instance_bodylist SEMICOLON .)
    ALWAYS          reduce using rule 298 (instance -> SENS_OR parameterlist instance_bodylist SEMICOLON .)
    ALWAYS_FF       reduce using rule 298 (instance -> SENS_OR parameterlist instance_bodylist SEMICOLON .)
    ALWAYS_COMB     reduce using rule 298 (instance -> SENS_OR parameterlist instance_bodylist SEMICOLON .)
    INITIAL         reduce using rule 298 (instance -> SENS_OR parameterlist instance_bodylist SEMICOLON .)
    ID              reduce using rule 298 (instance -> SENS_OR parameterlist instance_bodylist SEMICOLON .)
    SENS_OR         reduce using rule 298 (instance -> SENS_OR parameterlist instance_bodylist SEMICOLON .)
    FUNCTION        reduce using rule 298 (instance -> SENS_OR parameterlist instance_bodylist SEMICOLON .)
    TASK            reduce using rule 298 (instance -> SENS_OR parameterlist instance_bodylist SEMICOLON .)
    LPAREN          reduce using rule 298 (instance -> SENS_OR parameterlist instance_bodylist SEMICOLON .)
    INPUT           reduce using rule 298 (instance -> SENS_OR parameterlist instance_bodylist SEMICOLON .)
    OUTPUT          reduce using rule 298 (instance -> SENS_OR parameterlist instance_bodylist SEMICOLON .)
    INOUT           reduce using rule 298 (instance -> SENS_OR parameterlist instance_bodylist SEMICOLON .)
    TRI             reduce using rule 298 (instance -> SENS_OR parameterlist instance_bodylist SEMICOLON .)
    REG             reduce using rule 298 (instance -> SENS_OR parameterlist instance_bodylist SEMICOLON .)
    LOGIC           reduce using rule 298 (instance -> SENS_OR parameterlist instance_bodylist SEMICOLON .)
    WIRE            reduce using rule 298 (instance -> SENS_OR parameterlist instance_bodylist SEMICOLON .)
    SIGNED          reduce using rule 298 (instance -> SENS_OR parameterlist instance_bodylist SEMICOLON .)
    SUPPLY0         reduce using rule 298 (instance -> SENS_OR parameterlist instance_bodylist SEMICOLON .)
    SUPPLY1         reduce using rule 298 (instance -> SENS_OR parameterlist instance_bodylist SEMICOLON .)
    ENDGENERATE     reduce using rule 298 (instance -> SENS_OR parameterlist instance_bodylist SEMICOLON .)
    IF              reduce using rule 298 (instance -> SENS_OR parameterlist instance_bodylist SEMICOLON .)
    FOR             reduce using rule 298 (instance -> SENS_OR parameterlist instance_bodylist SEMICOLON .)
    ELSE            reduce using rule 298 (instance -> SENS_OR parameterlist instance_bodylist SEMICOLON .)
    END             reduce using rule 298 (instance -> SENS_OR parameterlist instance_bodylist SEMICOLON .)


state 517

    (358) function -> FUNCTION width ID SEMICOLON . function_statement ENDFUNCTION
    (360) function_statement -> . funcvardecls function_calc
    (361) funcvardecls -> . funcvardecls funcvardecl
    (362) funcvardecls -> . funcvardecl
    (363) funcvardecl -> . decl
    (364) funcvardecl -> . integerdecl
    (77) decl -> . sigtypes declnamelist SEMICOLON
    (78) decl -> . sigtypes width declnamelist SEMICOLON
    (87) integerdecl -> . INTEGER integernamelist SEMICOLON
    (88) integerdecl -> . INTEGER SIGNED integernamelist SEMICOLON
    (35) sigtypes -> . sigtypes sigtype
    (36) sigtypes -> . sigtype
    (37) sigtype -> . INPUT
    (38) sigtype -> . OUTPUT
    (39) sigtype -> . INOUT
    (40) sigtype -> . TRI
    (41) sigtype -> . REG
    (42) sigtype -> . LOGIC
    (43) sigtype -> . WIRE
    (44) sigtype -> . SIGNED
    (45) sigtype -> . SUPPLY0
    (46) sigtype -> . SUPPLY1

    INTEGER         shift and go to state 47
    INPUT           shift and go to state 63
    OUTPUT          shift and go to state 64
    INOUT           shift and go to state 65
    TRI             shift and go to state 66
    REG             shift and go to state 67
    LOGIC           shift and go to state 68
    WIRE            shift and go to state 69
    SIGNED          shift and go to state 48
    SUPPLY0         shift and go to state 70
    SUPPLY1         shift and go to state 71

    function_statement             shift and go to state 620
    funcvardecls                   shift and go to state 519
    funcvardecl                    shift and go to state 520
    decl                           shift and go to state 521
    integerdecl                    shift and go to state 522
    sigtypes                       shift and go to state 523
    sigtype                        shift and go to state 62

state 518

    (359) function -> FUNCTION ID SEMICOLON function_statement . ENDFUNCTION

    ENDFUNCTION     shift and go to state 621


state 519

    (360) function_statement -> funcvardecls . function_calc
    (361) funcvardecls -> funcvardecls . funcvardecl
    (365) function_calc -> . blocking_substitution
    (366) function_calc -> . if_statement
    (367) function_calc -> . for_statement
    (368) function_calc -> . while_statement
    (369) function_calc -> . case_statement
    (370) function_calc -> . casex_statement
    (371) function_calc -> . block
    (372) function_calc -> . namedblock
    (363) funcvardecl -> . decl
    (364) funcvardecl -> . integerdecl
    (237) blocking_substitution -> . delays lvalue EQUALS delays rvalue SEMICOLON
    (262) if_statement -> . IF LPAREN cond RPAREN true_statement ELSE else_statement
    (263) if_statement -> . IF LPAREN cond RPAREN true_statement
    (264) if_statement -> . delays IF LPAREN cond RPAREN true_statement ELSE else_statement
    (265) if_statement -> . delays IF LPAREN cond RPAREN true_statement
    (270) for_statement -> . FOR LPAREN forpre forcond forpost RPAREN forcontent_statement
    (278) while_statement -> . WHILE LPAREN cond RPAREN whilecontent_statement
    (280) case_statement -> . CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE
    (281) casex_statement -> . CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE
    (245) block -> . BEGIN block_statements END
    (246) block -> . BEGIN END
    (250) namedblock -> . BEGIN COLON ID namedblock_statements END
    (251) namedblock -> . BEGIN COLON ID END
    (77) decl -> . sigtypes declnamelist SEMICOLON
    (78) decl -> . sigtypes width declnamelist SEMICOLON
    (87) integerdecl -> . INTEGER integernamelist SEMICOLON
    (88) integerdecl -> . INTEGER SIGNED integernamelist SEMICOLON
    (240) delays -> . DELAY LPAREN expression RPAREN
    (241) delays -> . DELAY identifier
    (242) delays -> . DELAY intnumber
    (243) delays -> . DELAY floatnumber
    (244) delays -> . empty
    (35) sigtypes -> . sigtypes sigtype
    (36) sigtypes -> . sigtype
    (400) empty -> .
    (37) sigtype -> . INPUT
    (38) sigtype -> . OUTPUT
    (39) sigtype -> . INOUT
    (40) sigtype -> . TRI
    (41) sigtype -> . REG
    (42) sigtype -> . LOGIC
    (43) sigtype -> . WIRE
    (44) sigtype -> . SIGNED
    (45) sigtype -> . SUPPLY0
    (46) sigtype -> . SUPPLY1

  ! shift/reduce conflict for IF resolved as shift
    IF              shift and go to state 192
    FOR             shift and go to state 197
    WHILE           shift and go to state 198
    CASE            shift and go to state 194
    CASEX           shift and go to state 195
    BEGIN           shift and go to state 202
    INTEGER         shift and go to state 47
    DELAY           shift and go to state 140
    LBRACE          reduce using rule 400 (empty -> .)
    ID              reduce using rule 400 (empty -> .)
    INPUT           shift and go to state 63
    OUTPUT          shift and go to state 64
    INOUT           shift and go to state 65
    TRI             shift and go to state 66
    REG             shift and go to state 67
    LOGIC           shift and go to state 68
    WIRE            shift and go to state 69
    SIGNED          shift and go to state 48
    SUPPLY0         shift and go to state 70
    SUPPLY1         shift and go to state 71

  ! IF              [ reduce using rule 400 (empty -> .) ]

    function_calc                  shift and go to state 622
    funcvardecl                    shift and go to state 623
    blocking_substitution          shift and go to state 624
    if_statement                   shift and go to state 625
    for_statement                  shift and go to state 626
    while_statement                shift and go to state 627
    case_statement                 shift and go to state 628
    casex_statement                shift and go to state 629
    block                          shift and go to state 630
    namedblock                     shift and go to state 631
    decl                           shift and go to state 521
    integerdecl                    shift and go to state 522
    delays                         shift and go to state 632
    sigtypes                       shift and go to state 523
    empty                          shift and go to state 141
    sigtype                        shift and go to state 62

state 520

    (362) funcvardecls -> funcvardecl .

    IF              reduce using rule 362 (funcvardecls -> funcvardecl .)
    FOR             reduce using rule 362 (funcvardecls -> funcvardecl .)
    WHILE           reduce using rule 362 (funcvardecls -> funcvardecl .)
    CASE            reduce using rule 362 (funcvardecls -> funcvardecl .)
    CASEX           reduce using rule 362 (funcvardecls -> funcvardecl .)
    BEGIN           reduce using rule 362 (funcvardecls -> funcvardecl .)
    INTEGER         reduce using rule 362 (funcvardecls -> funcvardecl .)
    DELAY           reduce using rule 362 (funcvardecls -> funcvardecl .)
    INPUT           reduce using rule 362 (funcvardecls -> funcvardecl .)
    OUTPUT          reduce using rule 362 (funcvardecls -> funcvardecl .)
    INOUT           reduce using rule 362 (funcvardecls -> funcvardecl .)
    TRI             reduce using rule 362 (funcvardecls -> funcvardecl .)
    REG             reduce using rule 362 (funcvardecls -> funcvardecl .)
    LOGIC           reduce using rule 362 (funcvardecls -> funcvardecl .)
    WIRE            reduce using rule 362 (funcvardecls -> funcvardecl .)
    SIGNED          reduce using rule 362 (funcvardecls -> funcvardecl .)
    SUPPLY0         reduce using rule 362 (funcvardecls -> funcvardecl .)
    SUPPLY1         reduce using rule 362 (funcvardecls -> funcvardecl .)
    LBRACE          reduce using rule 362 (funcvardecls -> funcvardecl .)
    ID              reduce using rule 362 (funcvardecls -> funcvardecl .)


state 521

    (363) funcvardecl -> decl .

    IF              reduce using rule 363 (funcvardecl -> decl .)
    FOR             reduce using rule 363 (funcvardecl -> decl .)
    WHILE           reduce using rule 363 (funcvardecl -> decl .)
    CASE            reduce using rule 363 (funcvardecl -> decl .)
    CASEX           reduce using rule 363 (funcvardecl -> decl .)
    BEGIN           reduce using rule 363 (funcvardecl -> decl .)
    INTEGER         reduce using rule 363 (funcvardecl -> decl .)
    DELAY           reduce using rule 363 (funcvardecl -> decl .)
    INPUT           reduce using rule 363 (funcvardecl -> decl .)
    OUTPUT          reduce using rule 363 (funcvardecl -> decl .)
    INOUT           reduce using rule 363 (funcvardecl -> decl .)
    TRI             reduce using rule 363 (funcvardecl -> decl .)
    REG             reduce using rule 363 (funcvardecl -> decl .)
    LOGIC           reduce using rule 363 (funcvardecl -> decl .)
    WIRE            reduce using rule 363 (funcvardecl -> decl .)
    SIGNED          reduce using rule 363 (funcvardecl -> decl .)
    SUPPLY0         reduce using rule 363 (funcvardecl -> decl .)
    SUPPLY1         reduce using rule 363 (funcvardecl -> decl .)
    LBRACE          reduce using rule 363 (funcvardecl -> decl .)
    ID              reduce using rule 363 (funcvardecl -> decl .)


state 522

    (364) funcvardecl -> integerdecl .

    IF              reduce using rule 364 (funcvardecl -> integerdecl .)
    FOR             reduce using rule 364 (funcvardecl -> integerdecl .)
    WHILE           reduce using rule 364 (funcvardecl -> integerdecl .)
    CASE            reduce using rule 364 (funcvardecl -> integerdecl .)
    CASEX           reduce using rule 364 (funcvardecl -> integerdecl .)
    BEGIN           reduce using rule 364 (funcvardecl -> integerdecl .)
    INTEGER         reduce using rule 364 (funcvardecl -> integerdecl .)
    DELAY           reduce using rule 364 (funcvardecl -> integerdecl .)
    INPUT           reduce using rule 364 (funcvardecl -> integerdecl .)
    OUTPUT          reduce using rule 364 (funcvardecl -> integerdecl .)
    INOUT           reduce using rule 364 (funcvardecl -> integerdecl .)
    TRI             reduce using rule 364 (funcvardecl -> integerdecl .)
    REG             reduce using rule 364 (funcvardecl -> integerdecl .)
    LOGIC           reduce using rule 364 (funcvardecl -> integerdecl .)
    WIRE            reduce using rule 364 (funcvardecl -> integerdecl .)
    SIGNED          reduce using rule 364 (funcvardecl -> integerdecl .)
    SUPPLY0         reduce using rule 364 (funcvardecl -> integerdecl .)
    SUPPLY1         reduce using rule 364 (funcvardecl -> integerdecl .)
    LBRACE          reduce using rule 364 (funcvardecl -> integerdecl .)
    ID              reduce using rule 364 (funcvardecl -> integerdecl .)


state 523

    (77) decl -> sigtypes . declnamelist SEMICOLON
    (78) decl -> sigtypes . width declnamelist SEMICOLON
    (35) sigtypes -> sigtypes . sigtype
    (79) declnamelist -> . declnamelist COMMA declname
    (80) declnamelist -> . declname
    (54) width -> . LBRACKET expression COLON expression RBRACKET
    (37) sigtype -> . INPUT
    (38) sigtype -> . OUTPUT
    (39) sigtype -> . INOUT
    (40) sigtype -> . TRI
    (41) sigtype -> . REG
    (42) sigtype -> . LOGIC
    (43) sigtype -> . WIRE
    (44) sigtype -> . SIGNED
    (45) sigtype -> . SUPPLY0
    (46) sigtype -> . SUPPLY1
    (81) declname -> . ID
    (82) declname -> . ID length

    LBRACKET        shift and go to state 137
    INPUT           shift and go to state 63
    OUTPUT          shift and go to state 64
    INOUT           shift and go to state 65
    TRI             shift and go to state 66
    REG             shift and go to state 67
    LOGIC           shift and go to state 68
    WIRE            shift and go to state 69
    SIGNED          shift and go to state 48
    SUPPLY0         shift and go to state 70
    SUPPLY1         shift and go to state 71
    ID              shift and go to state 443

    declnamelist                   shift and go to state 132
    width                          shift and go to state 633
    sigtype                        shift and go to state 135
    declname                       shift and go to state 136

state 524

    (377) task -> TASK ID SEMICOLON task_statement . ENDTASK

    ENDTASK         shift and go to state 634


state 525

    (378) task_statement -> taskvardecls . task_calc
    (379) taskvardecls -> taskvardecls . taskvardecl
    (384) task_calc -> . blocking_substitution
    (385) task_calc -> . if_statement
    (386) task_calc -> . for_statement
    (387) task_calc -> . while_statement
    (388) task_calc -> . case_statement
    (389) task_calc -> . casex_statement
    (390) task_calc -> . block
    (391) task_calc -> . namedblock
    (382) taskvardecl -> . decl
    (383) taskvardecl -> . integerdecl
    (237) blocking_substitution -> . delays lvalue EQUALS delays rvalue SEMICOLON
    (262) if_statement -> . IF LPAREN cond RPAREN true_statement ELSE else_statement
    (263) if_statement -> . IF LPAREN cond RPAREN true_statement
    (264) if_statement -> . delays IF LPAREN cond RPAREN true_statement ELSE else_statement
    (265) if_statement -> . delays IF LPAREN cond RPAREN true_statement
    (270) for_statement -> . FOR LPAREN forpre forcond forpost RPAREN forcontent_statement
    (278) while_statement -> . WHILE LPAREN cond RPAREN whilecontent_statement
    (280) case_statement -> . CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE
    (281) casex_statement -> . CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE
    (245) block -> . BEGIN block_statements END
    (246) block -> . BEGIN END
    (250) namedblock -> . BEGIN COLON ID namedblock_statements END
    (251) namedblock -> . BEGIN COLON ID END
    (77) decl -> . sigtypes declnamelist SEMICOLON
    (78) decl -> . sigtypes width declnamelist SEMICOLON
    (87) integerdecl -> . INTEGER integernamelist SEMICOLON
    (88) integerdecl -> . INTEGER SIGNED integernamelist SEMICOLON
    (240) delays -> . DELAY LPAREN expression RPAREN
    (241) delays -> . DELAY identifier
    (242) delays -> . DELAY intnumber
    (243) delays -> . DELAY floatnumber
    (244) delays -> . empty
    (35) sigtypes -> . sigtypes sigtype
    (36) sigtypes -> . sigtype
    (400) empty -> .
    (37) sigtype -> . INPUT
    (38) sigtype -> . OUTPUT
    (39) sigtype -> . INOUT
    (40) sigtype -> . TRI
    (41) sigtype -> . REG
    (42) sigtype -> . LOGIC
    (43) sigtype -> . WIRE
    (44) sigtype -> . SIGNED
    (45) sigtype -> . SUPPLY0
    (46) sigtype -> . SUPPLY1

  ! shift/reduce conflict for IF resolved as shift
    IF              shift and go to state 192
    FOR             shift and go to state 197
    WHILE           shift and go to state 198
    CASE            shift and go to state 194
    CASEX           shift and go to state 195
    BEGIN           shift and go to state 202
    INTEGER         shift and go to state 47
    DELAY           shift and go to state 140
    LBRACE          reduce using rule 400 (empty -> .)
    ID              reduce using rule 400 (empty -> .)
    INPUT           shift and go to state 63
    OUTPUT          shift and go to state 64
    INOUT           shift and go to state 65
    TRI             shift and go to state 66
    REG             shift and go to state 67
    LOGIC           shift and go to state 68
    WIRE            shift and go to state 69
    SIGNED          shift and go to state 48
    SUPPLY0         shift and go to state 70
    SUPPLY1         shift and go to state 71

  ! IF              [ reduce using rule 400 (empty -> .) ]

    task_calc                      shift and go to state 635
    taskvardecl                    shift and go to state 636
    blocking_substitution          shift and go to state 637
    if_statement                   shift and go to state 638
    for_statement                  shift and go to state 639
    while_statement                shift and go to state 640
    case_statement                 shift and go to state 641
    casex_statement                shift and go to state 642
    block                          shift and go to state 643
    namedblock                     shift and go to state 644
    decl                           shift and go to state 528
    integerdecl                    shift and go to state 529
    delays                         shift and go to state 632
    sigtypes                       shift and go to state 523
    empty                          shift and go to state 141
    sigtype                        shift and go to state 62

state 526

    (380) taskvardecls -> taskvardecl .

    IF              reduce using rule 380 (taskvardecls -> taskvardecl .)
    FOR             reduce using rule 380 (taskvardecls -> taskvardecl .)
    WHILE           reduce using rule 380 (taskvardecls -> taskvardecl .)
    CASE            reduce using rule 380 (taskvardecls -> taskvardecl .)
    CASEX           reduce using rule 380 (taskvardecls -> taskvardecl .)
    BEGIN           reduce using rule 380 (taskvardecls -> taskvardecl .)
    INTEGER         reduce using rule 380 (taskvardecls -> taskvardecl .)
    DELAY           reduce using rule 380 (taskvardecls -> taskvardecl .)
    INPUT           reduce using rule 380 (taskvardecls -> taskvardecl .)
    OUTPUT          reduce using rule 380 (taskvardecls -> taskvardecl .)
    INOUT           reduce using rule 380 (taskvardecls -> taskvardecl .)
    TRI             reduce using rule 380 (taskvardecls -> taskvardecl .)
    REG             reduce using rule 380 (taskvardecls -> taskvardecl .)
    LOGIC           reduce using rule 380 (taskvardecls -> taskvardecl .)
    WIRE            reduce using rule 380 (taskvardecls -> taskvardecl .)
    SIGNED          reduce using rule 380 (taskvardecls -> taskvardecl .)
    SUPPLY0         reduce using rule 380 (taskvardecls -> taskvardecl .)
    SUPPLY1         reduce using rule 380 (taskvardecls -> taskvardecl .)
    LBRACE          reduce using rule 380 (taskvardecls -> taskvardecl .)
    ID              reduce using rule 380 (taskvardecls -> taskvardecl .)


state 527

    (381) taskvardecls -> empty .

    IF              reduce using rule 381 (taskvardecls -> empty .)
    FOR             reduce using rule 381 (taskvardecls -> empty .)
    WHILE           reduce using rule 381 (taskvardecls -> empty .)
    CASE            reduce using rule 381 (taskvardecls -> empty .)
    CASEX           reduce using rule 381 (taskvardecls -> empty .)
    BEGIN           reduce using rule 381 (taskvardecls -> empty .)
    INTEGER         reduce using rule 381 (taskvardecls -> empty .)
    DELAY           reduce using rule 381 (taskvardecls -> empty .)
    INPUT           reduce using rule 381 (taskvardecls -> empty .)
    OUTPUT          reduce using rule 381 (taskvardecls -> empty .)
    INOUT           reduce using rule 381 (taskvardecls -> empty .)
    TRI             reduce using rule 381 (taskvardecls -> empty .)
    REG             reduce using rule 381 (taskvardecls -> empty .)
    LOGIC           reduce using rule 381 (taskvardecls -> empty .)
    WIRE            reduce using rule 381 (taskvardecls -> empty .)
    SIGNED          reduce using rule 381 (taskvardecls -> empty .)
    SUPPLY0         reduce using rule 381 (taskvardecls -> empty .)
    SUPPLY1         reduce using rule 381 (taskvardecls -> empty .)
    LBRACE          reduce using rule 381 (taskvardecls -> empty .)
    ID              reduce using rule 381 (taskvardecls -> empty .)


state 528

    (382) taskvardecl -> decl .

    IF              reduce using rule 382 (taskvardecl -> decl .)
    FOR             reduce using rule 382 (taskvardecl -> decl .)
    WHILE           reduce using rule 382 (taskvardecl -> decl .)
    CASE            reduce using rule 382 (taskvardecl -> decl .)
    CASEX           reduce using rule 382 (taskvardecl -> decl .)
    BEGIN           reduce using rule 382 (taskvardecl -> decl .)
    INTEGER         reduce using rule 382 (taskvardecl -> decl .)
    DELAY           reduce using rule 382 (taskvardecl -> decl .)
    INPUT           reduce using rule 382 (taskvardecl -> decl .)
    OUTPUT          reduce using rule 382 (taskvardecl -> decl .)
    INOUT           reduce using rule 382 (taskvardecl -> decl .)
    TRI             reduce using rule 382 (taskvardecl -> decl .)
    REG             reduce using rule 382 (taskvardecl -> decl .)
    LOGIC           reduce using rule 382 (taskvardecl -> decl .)
    WIRE            reduce using rule 382 (taskvardecl -> decl .)
    SIGNED          reduce using rule 382 (taskvardecl -> decl .)
    SUPPLY0         reduce using rule 382 (taskvardecl -> decl .)
    SUPPLY1         reduce using rule 382 (taskvardecl -> decl .)
    LBRACE          reduce using rule 382 (taskvardecl -> decl .)
    ID              reduce using rule 382 (taskvardecl -> decl .)


state 529

    (383) taskvardecl -> integerdecl .

    IF              reduce using rule 383 (taskvardecl -> integerdecl .)
    FOR             reduce using rule 383 (taskvardecl -> integerdecl .)
    WHILE           reduce using rule 383 (taskvardecl -> integerdecl .)
    CASE            reduce using rule 383 (taskvardecl -> integerdecl .)
    CASEX           reduce using rule 383 (taskvardecl -> integerdecl .)
    BEGIN           reduce using rule 383 (taskvardecl -> integerdecl .)
    INTEGER         reduce using rule 383 (taskvardecl -> integerdecl .)
    DELAY           reduce using rule 383 (taskvardecl -> integerdecl .)
    INPUT           reduce using rule 383 (taskvardecl -> integerdecl .)
    OUTPUT          reduce using rule 383 (taskvardecl -> integerdecl .)
    INOUT           reduce using rule 383 (taskvardecl -> integerdecl .)
    TRI             reduce using rule 383 (taskvardecl -> integerdecl .)
    REG             reduce using rule 383 (taskvardecl -> integerdecl .)
    LOGIC           reduce using rule 383 (taskvardecl -> integerdecl .)
    WIRE            reduce using rule 383 (taskvardecl -> integerdecl .)
    SIGNED          reduce using rule 383 (taskvardecl -> integerdecl .)
    SUPPLY0         reduce using rule 383 (taskvardecl -> integerdecl .)
    SUPPLY1         reduce using rule 383 (taskvardecl -> integerdecl .)
    LBRACE          reduce using rule 383 (taskvardecl -> integerdecl .)
    ID              reduce using rule 383 (taskvardecl -> integerdecl .)


state 530

    (49) ioport -> sigtypes portname .

    RPAREN          reduce using rule 49 (ioport -> sigtypes portname .)
    COMMA           reduce using rule 49 (ioport -> sigtypes portname .)


state 531

    (50) ioport -> sigtypes width . portname
    (34) portname -> . ID

    ID              shift and go to state 77

    portname                       shift and go to state 645

state 532

    (19) param -> PARAMETER SIGNED param_substitution_list COMMA .
    (106) param_substitution_list -> param_substitution_list COMMA . param_substitution
    (108) param_substitution -> . ID EQUALS rvalue

    PARAMETER       reduce using rule 19 (param -> PARAMETER SIGNED param_substitution_list COMMA .)
    ID              shift and go to state 154

    param_substitution             shift and go to state 457

state 533

    (26) param_end -> PARAMETER SIGNED width param_substitution_list .
    (21) param -> PARAMETER SIGNED width param_substitution_list . COMMA
    (106) param_substitution_list -> param_substitution_list . COMMA param_substitution

    RPAREN          reduce using rule 26 (param_end -> PARAMETER SIGNED width param_substitution_list .)
    COMMA           shift and go to state 646


state 534

    (20) param -> PARAMETER width param_substitution_list COMMA .
    (106) param_substitution_list -> param_substitution_list COMMA . param_substitution
    (108) param_substitution -> . ID EQUALS rvalue

    PARAMETER       reduce using rule 20 (param -> PARAMETER width param_substitution_list COMMA .)
    ID              shift and go to state 154

    param_substitution             shift and go to state 457

state 535

    (22) param -> PARAMETER INTEGER param_substitution_list COMMA .
    (106) param_substitution_list -> param_substitution_list COMMA . param_substitution
    (108) param_substitution -> . ID EQUALS rvalue

    PARAMETER       reduce using rule 22 (param -> PARAMETER INTEGER param_substitution_list COMMA .)
    ID              shift and go to state 154

    param_substitution             shift and go to state 457

state 536

    (164) expression -> expression COND expression COLON . expression
    (130) expression -> . MINUS expression
    (131) expression -> . PLUS expression
    (132) expression -> . LNOT expression
    (133) expression -> . NOT expression
    (134) expression -> . AND expression
    (135) expression -> . NAND expression
    (136) expression -> . NOR expression
    (137) expression -> . OR expression
    (138) expression -> . XOR expression
    (139) expression -> . XNOR expression
    (140) expression -> . expression POWER expression
    (141) expression -> . expression TIMES expression
    (142) expression -> . expression DIVIDE expression
    (143) expression -> . expression MOD expression
    (144) expression -> . expression PLUS expression
    (145) expression -> . expression MINUS expression
    (146) expression -> . expression LSHIFT expression
    (147) expression -> . expression RSHIFT expression
    (148) expression -> . expression LSHIFTA expression
    (149) expression -> . expression RSHIFTA expression
    (150) expression -> . expression LT expression
    (151) expression -> . expression GT expression
    (152) expression -> . expression LE expression
    (153) expression -> . expression GE expression
    (154) expression -> . expression EQ expression
    (155) expression -> . expression NE expression
    (156) expression -> . expression EQL expression
    (157) expression -> . expression NEL expression
    (158) expression -> . expression AND expression
    (159) expression -> . expression XOR expression
    (160) expression -> . expression XNOR expression
    (161) expression -> . expression OR expression
    (162) expression -> . expression LAND expression
    (163) expression -> . expression LOR expression
    (164) expression -> . expression COND expression COLON expression
    (165) expression -> . LPAREN expression RPAREN
    (166) expression -> . concat
    (167) expression -> . repeat
    (168) expression -> . partselect
    (169) expression -> . pointer
    (170) expression -> . functioncall
    (171) expression -> . systemcall
    (172) expression -> . identifier
    (173) expression -> . const_expression
    (174) concat -> . LBRACE concatlist RBRACE
    (177) repeat -> . LBRACE expression concat RBRACE
    (178) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (179) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (180) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (181) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (182) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (183) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (184) pointer -> . identifier LBRACKET expression RBRACKET
    (185) pointer -> . pointer LBRACKET expression RBRACKET
    (373) functioncall -> . identifier LPAREN func_args RPAREN
    (351) systemcall -> . DOLLER ID
    (352) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (353) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (392) identifier -> . ID
    (393) identifier -> . scope ID
    (186) const_expression -> . intnumber
    (187) const_expression -> . floatnumber
    (188) const_expression -> . stringliteral
    (394) scope -> . identifier DOT
    (395) scope -> . pointer DOT
    (190) intnumber -> . INTNUMBER_DEC
    (191) intnumber -> . SIGNED_INTNUMBER_DEC
    (192) intnumber -> . INTNUMBER_BIN
    (193) intnumber -> . SIGNED_INTNUMBER_BIN
    (194) intnumber -> . INTNUMBER_OCT
    (195) intnumber -> . SIGNED_INTNUMBER_OCT
    (196) intnumber -> . INTNUMBER_HEX
    (197) intnumber -> . SIGNED_INTNUMBER_HEX
    (189) floatnumber -> . FLOATNUMBER
    (198) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 88
    PLUS            shift and go to state 89
    LNOT            shift and go to state 90
    NOT             shift and go to state 91
    AND             shift and go to state 92
    NAND            shift and go to state 93
    NOR             shift and go to state 94
    OR              shift and go to state 95
    XOR             shift and go to state 96
    XNOR            shift and go to state 97
    LPAREN          shift and go to state 85
    LBRACE          shift and go to state 106
    DOLLER          shift and go to state 107
    ID              shift and go to state 86
    INTNUMBER_DEC   shift and go to state 112
    SIGNED_INTNUMBER_DEC shift and go to state 113
    INTNUMBER_BIN   shift and go to state 114
    SIGNED_INTNUMBER_BIN shift and go to state 115
    INTNUMBER_OCT   shift and go to state 116
    SIGNED_INTNUMBER_OCT shift and go to state 117
    INTNUMBER_HEX   shift and go to state 118
    SIGNED_INTNUMBER_HEX shift and go to state 119
    FLOATNUMBER     shift and go to state 120
    STRING_LITERAL  shift and go to state 121

    expression                     shift and go to state 647
    concat                         shift and go to state 98
    repeat                         shift and go to state 99
    partselect                     shift and go to state 100
    pointer                        shift and go to state 101
    functioncall                   shift and go to state 102
    systemcall                     shift and go to state 103
    identifier                     shift and go to state 104
    const_expression               shift and go to state 105
    scope                          shift and go to state 108
    intnumber                      shift and go to state 109
    floatnumber                    shift and go to state 110
    stringliteral                  shift and go to state 111

state 537

    (181) partselect -> pointer LBRACKET expression COLON . expression RBRACKET
    (130) expression -> . MINUS expression
    (131) expression -> . PLUS expression
    (132) expression -> . LNOT expression
    (133) expression -> . NOT expression
    (134) expression -> . AND expression
    (135) expression -> . NAND expression
    (136) expression -> . NOR expression
    (137) expression -> . OR expression
    (138) expression -> . XOR expression
    (139) expression -> . XNOR expression
    (140) expression -> . expression POWER expression
    (141) expression -> . expression TIMES expression
    (142) expression -> . expression DIVIDE expression
    (143) expression -> . expression MOD expression
    (144) expression -> . expression PLUS expression
    (145) expression -> . expression MINUS expression
    (146) expression -> . expression LSHIFT expression
    (147) expression -> . expression RSHIFT expression
    (148) expression -> . expression LSHIFTA expression
    (149) expression -> . expression RSHIFTA expression
    (150) expression -> . expression LT expression
    (151) expression -> . expression GT expression
    (152) expression -> . expression LE expression
    (153) expression -> . expression GE expression
    (154) expression -> . expression EQ expression
    (155) expression -> . expression NE expression
    (156) expression -> . expression EQL expression
    (157) expression -> . expression NEL expression
    (158) expression -> . expression AND expression
    (159) expression -> . expression XOR expression
    (160) expression -> . expression XNOR expression
    (161) expression -> . expression OR expression
    (162) expression -> . expression LAND expression
    (163) expression -> . expression LOR expression
    (164) expression -> . expression COND expression COLON expression
    (165) expression -> . LPAREN expression RPAREN
    (166) expression -> . concat
    (167) expression -> . repeat
    (168) expression -> . partselect
    (169) expression -> . pointer
    (170) expression -> . functioncall
    (171) expression -> . systemcall
    (172) expression -> . identifier
    (173) expression -> . const_expression
    (174) concat -> . LBRACE concatlist RBRACE
    (177) repeat -> . LBRACE expression concat RBRACE
    (178) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (179) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (180) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (181) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (182) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (183) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (184) pointer -> . identifier LBRACKET expression RBRACKET
    (185) pointer -> . pointer LBRACKET expression RBRACKET
    (373) functioncall -> . identifier LPAREN func_args RPAREN
    (351) systemcall -> . DOLLER ID
    (352) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (353) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (392) identifier -> . ID
    (393) identifier -> . scope ID
    (186) const_expression -> . intnumber
    (187) const_expression -> . floatnumber
    (188) const_expression -> . stringliteral
    (394) scope -> . identifier DOT
    (395) scope -> . pointer DOT
    (190) intnumber -> . INTNUMBER_DEC
    (191) intnumber -> . SIGNED_INTNUMBER_DEC
    (192) intnumber -> . INTNUMBER_BIN
    (193) intnumber -> . SIGNED_INTNUMBER_BIN
    (194) intnumber -> . INTNUMBER_OCT
    (195) intnumber -> . SIGNED_INTNUMBER_OCT
    (196) intnumber -> . INTNUMBER_HEX
    (197) intnumber -> . SIGNED_INTNUMBER_HEX
    (189) floatnumber -> . FLOATNUMBER
    (198) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 88
    PLUS            shift and go to state 89
    LNOT            shift and go to state 90
    NOT             shift and go to state 91
    AND             shift and go to state 92
    NAND            shift and go to state 93
    NOR             shift and go to state 94
    OR              shift and go to state 95
    XOR             shift and go to state 96
    XNOR            shift and go to state 97
    LPAREN          shift and go to state 85
    LBRACE          shift and go to state 106
    DOLLER          shift and go to state 107
    ID              shift and go to state 86
    INTNUMBER_DEC   shift and go to state 112
    SIGNED_INTNUMBER_DEC shift and go to state 113
    INTNUMBER_BIN   shift and go to state 114
    SIGNED_INTNUMBER_BIN shift and go to state 115
    INTNUMBER_OCT   shift and go to state 116
    SIGNED_INTNUMBER_OCT shift and go to state 117
    INTNUMBER_HEX   shift and go to state 118
    SIGNED_INTNUMBER_HEX shift and go to state 119
    FLOATNUMBER     shift and go to state 120
    STRING_LITERAL  shift and go to state 121

    pointer                        shift and go to state 101
    expression                     shift and go to state 648
    concat                         shift and go to state 98
    repeat                         shift and go to state 99
    partselect                     shift and go to state 100
    functioncall                   shift and go to state 102
    systemcall                     shift and go to state 103
    identifier                     shift and go to state 104
    const_expression               shift and go to state 105
    scope                          shift and go to state 108
    intnumber                      shift and go to state 109
    floatnumber                    shift and go to state 110
    stringliteral                  shift and go to state 111

state 538

    (185) pointer -> pointer LBRACKET expression RBRACKET .

    LBRACKET        reduce using rule 185 (pointer -> pointer LBRACKET expression RBRACKET .)
    DOT             reduce using rule 185 (pointer -> pointer LBRACKET expression RBRACKET .)
    TIMES           reduce using rule 185 (pointer -> pointer LBRACKET expression RBRACKET .)
    POWER           reduce using rule 185 (pointer -> pointer LBRACKET expression RBRACKET .)
    DIVIDE          reduce using rule 185 (pointer -> pointer LBRACKET expression RBRACKET .)
    MOD             reduce using rule 185 (pointer -> pointer LBRACKET expression RBRACKET .)
    PLUS            reduce using rule 185 (pointer -> pointer LBRACKET expression RBRACKET .)
    MINUS           reduce using rule 185 (pointer -> pointer LBRACKET expression RBRACKET .)
    LSHIFT          reduce using rule 185 (pointer -> pointer LBRACKET expression RBRACKET .)
    RSHIFT          reduce using rule 185 (pointer -> pointer LBRACKET expression RBRACKET .)
    LSHIFTA         reduce using rule 185 (pointer -> pointer LBRACKET expression RBRACKET .)
    RSHIFTA         reduce using rule 185 (pointer -> pointer LBRACKET expression RBRACKET .)
    LT              reduce using rule 185 (pointer -> pointer LBRACKET expression RBRACKET .)
    GT              reduce using rule 185 (pointer -> pointer LBRACKET expression RBRACKET .)
    LE              reduce using rule 185 (pointer -> pointer LBRACKET expression RBRACKET .)
    GE              reduce using rule 185 (pointer -> pointer LBRACKET expression RBRACKET .)
    EQ              reduce using rule 185 (pointer -> pointer LBRACKET expression RBRACKET .)
    NE              reduce using rule 185 (pointer -> pointer LBRACKET expression RBRACKET .)
    EQL             reduce using rule 185 (pointer -> pointer LBRACKET expression RBRACKET .)
    NEL             reduce using rule 185 (pointer -> pointer LBRACKET expression RBRACKET .)
    AND             reduce using rule 185 (pointer -> pointer LBRACKET expression RBRACKET .)
    XOR             reduce using rule 185 (pointer -> pointer LBRACKET expression RBRACKET .)
    XNOR            reduce using rule 185 (pointer -> pointer LBRACKET expression RBRACKET .)
    OR              reduce using rule 185 (pointer -> pointer LBRACKET expression RBRACKET .)
    LAND            reduce using rule 185 (pointer -> pointer LBRACKET expression RBRACKET .)
    LOR             reduce using rule 185 (pointer -> pointer LBRACKET expression RBRACKET .)
    COND            reduce using rule 185 (pointer -> pointer LBRACKET expression RBRACKET .)
    EQUALS          reduce using rule 185 (pointer -> pointer LBRACKET expression RBRACKET .)
    RPAREN          reduce using rule 185 (pointer -> pointer LBRACKET expression RBRACKET .)
    LBRACE          reduce using rule 185 (pointer -> pointer LBRACKET expression RBRACKET .)
    RBRACE          reduce using rule 185 (pointer -> pointer LBRACKET expression RBRACKET .)
    COMMA           reduce using rule 185 (pointer -> pointer LBRACKET expression RBRACKET .)
    COLON           reduce using rule 185 (pointer -> pointer LBRACKET expression RBRACKET .)
    SEMICOLON       reduce using rule 185 (pointer -> pointer LBRACKET expression RBRACKET .)
    PLUSCOLON       reduce using rule 185 (pointer -> pointer LBRACKET expression RBRACKET .)
    MINUSCOLON      reduce using rule 185 (pointer -> pointer LBRACKET expression RBRACKET .)
    RBRACKET        reduce using rule 185 (pointer -> pointer LBRACKET expression RBRACKET .)
    IF              reduce using rule 185 (pointer -> pointer LBRACKET expression RBRACKET .)
    CASE            reduce using rule 185 (pointer -> pointer LBRACKET expression RBRACKET .)
    CASEX           reduce using rule 185 (pointer -> pointer LBRACKET expression RBRACKET .)
    UNIQUE          reduce using rule 185 (pointer -> pointer LBRACKET expression RBRACKET .)
    FOR             reduce using rule 185 (pointer -> pointer LBRACKET expression RBRACKET .)
    WHILE           reduce using rule 185 (pointer -> pointer LBRACKET expression RBRACKET .)
    WAIT            reduce using rule 185 (pointer -> pointer LBRACKET expression RBRACKET .)
    FOREVER         reduce using rule 185 (pointer -> pointer LBRACKET expression RBRACKET .)
    BEGIN           reduce using rule 185 (pointer -> pointer LBRACKET expression RBRACKET .)
    FORK            reduce using rule 185 (pointer -> pointer LBRACKET expression RBRACKET .)
    DELAY           reduce using rule 185 (pointer -> pointer LBRACKET expression RBRACKET .)
    AT              reduce using rule 185 (pointer -> pointer LBRACKET expression RBRACKET .)
    DOLLER          reduce using rule 185 (pointer -> pointer LBRACKET expression RBRACKET .)
    DISABLE         reduce using rule 185 (pointer -> pointer LBRACKET expression RBRACKET .)
    ID              reduce using rule 185 (pointer -> pointer LBRACKET expression RBRACKET .)
    SENS_OR         reduce using rule 185 (pointer -> pointer LBRACKET expression RBRACKET .)


state 539

    (182) partselect -> pointer LBRACKET expression PLUSCOLON . expression RBRACKET
    (130) expression -> . MINUS expression
    (131) expression -> . PLUS expression
    (132) expression -> . LNOT expression
    (133) expression -> . NOT expression
    (134) expression -> . AND expression
    (135) expression -> . NAND expression
    (136) expression -> . NOR expression
    (137) expression -> . OR expression
    (138) expression -> . XOR expression
    (139) expression -> . XNOR expression
    (140) expression -> . expression POWER expression
    (141) expression -> . expression TIMES expression
    (142) expression -> . expression DIVIDE expression
    (143) expression -> . expression MOD expression
    (144) expression -> . expression PLUS expression
    (145) expression -> . expression MINUS expression
    (146) expression -> . expression LSHIFT expression
    (147) expression -> . expression RSHIFT expression
    (148) expression -> . expression LSHIFTA expression
    (149) expression -> . expression RSHIFTA expression
    (150) expression -> . expression LT expression
    (151) expression -> . expression GT expression
    (152) expression -> . expression LE expression
    (153) expression -> . expression GE expression
    (154) expression -> . expression EQ expression
    (155) expression -> . expression NE expression
    (156) expression -> . expression EQL expression
    (157) expression -> . expression NEL expression
    (158) expression -> . expression AND expression
    (159) expression -> . expression XOR expression
    (160) expression -> . expression XNOR expression
    (161) expression -> . expression OR expression
    (162) expression -> . expression LAND expression
    (163) expression -> . expression LOR expression
    (164) expression -> . expression COND expression COLON expression
    (165) expression -> . LPAREN expression RPAREN
    (166) expression -> . concat
    (167) expression -> . repeat
    (168) expression -> . partselect
    (169) expression -> . pointer
    (170) expression -> . functioncall
    (171) expression -> . systemcall
    (172) expression -> . identifier
    (173) expression -> . const_expression
    (174) concat -> . LBRACE concatlist RBRACE
    (177) repeat -> . LBRACE expression concat RBRACE
    (178) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (179) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (180) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (181) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (182) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (183) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (184) pointer -> . identifier LBRACKET expression RBRACKET
    (185) pointer -> . pointer LBRACKET expression RBRACKET
    (373) functioncall -> . identifier LPAREN func_args RPAREN
    (351) systemcall -> . DOLLER ID
    (352) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (353) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (392) identifier -> . ID
    (393) identifier -> . scope ID
    (186) const_expression -> . intnumber
    (187) const_expression -> . floatnumber
    (188) const_expression -> . stringliteral
    (394) scope -> . identifier DOT
    (395) scope -> . pointer DOT
    (190) intnumber -> . INTNUMBER_DEC
    (191) intnumber -> . SIGNED_INTNUMBER_DEC
    (192) intnumber -> . INTNUMBER_BIN
    (193) intnumber -> . SIGNED_INTNUMBER_BIN
    (194) intnumber -> . INTNUMBER_OCT
    (195) intnumber -> . SIGNED_INTNUMBER_OCT
    (196) intnumber -> . INTNUMBER_HEX
    (197) intnumber -> . SIGNED_INTNUMBER_HEX
    (189) floatnumber -> . FLOATNUMBER
    (198) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 88
    PLUS            shift and go to state 89
    LNOT            shift and go to state 90
    NOT             shift and go to state 91
    AND             shift and go to state 92
    NAND            shift and go to state 93
    NOR             shift and go to state 94
    OR              shift and go to state 95
    XOR             shift and go to state 96
    XNOR            shift and go to state 97
    LPAREN          shift and go to state 85
    LBRACE          shift and go to state 106
    DOLLER          shift and go to state 107
    ID              shift and go to state 86
    INTNUMBER_DEC   shift and go to state 112
    SIGNED_INTNUMBER_DEC shift and go to state 113
    INTNUMBER_BIN   shift and go to state 114
    SIGNED_INTNUMBER_BIN shift and go to state 115
    INTNUMBER_OCT   shift and go to state 116
    SIGNED_INTNUMBER_OCT shift and go to state 117
    INTNUMBER_HEX   shift and go to state 118
    SIGNED_INTNUMBER_HEX shift and go to state 119
    FLOATNUMBER     shift and go to state 120
    STRING_LITERAL  shift and go to state 121

    pointer                        shift and go to state 101
    expression                     shift and go to state 649
    concat                         shift and go to state 98
    repeat                         shift and go to state 99
    partselect                     shift and go to state 100
    functioncall                   shift and go to state 102
    systemcall                     shift and go to state 103
    identifier                     shift and go to state 104
    const_expression               shift and go to state 105
    scope                          shift and go to state 108
    intnumber                      shift and go to state 109
    floatnumber                    shift and go to state 110
    stringliteral                  shift and go to state 111

state 540

    (183) partselect -> pointer LBRACKET expression MINUSCOLON . expression RBRACKET
    (130) expression -> . MINUS expression
    (131) expression -> . PLUS expression
    (132) expression -> . LNOT expression
    (133) expression -> . NOT expression
    (134) expression -> . AND expression
    (135) expression -> . NAND expression
    (136) expression -> . NOR expression
    (137) expression -> . OR expression
    (138) expression -> . XOR expression
    (139) expression -> . XNOR expression
    (140) expression -> . expression POWER expression
    (141) expression -> . expression TIMES expression
    (142) expression -> . expression DIVIDE expression
    (143) expression -> . expression MOD expression
    (144) expression -> . expression PLUS expression
    (145) expression -> . expression MINUS expression
    (146) expression -> . expression LSHIFT expression
    (147) expression -> . expression RSHIFT expression
    (148) expression -> . expression LSHIFTA expression
    (149) expression -> . expression RSHIFTA expression
    (150) expression -> . expression LT expression
    (151) expression -> . expression GT expression
    (152) expression -> . expression LE expression
    (153) expression -> . expression GE expression
    (154) expression -> . expression EQ expression
    (155) expression -> . expression NE expression
    (156) expression -> . expression EQL expression
    (157) expression -> . expression NEL expression
    (158) expression -> . expression AND expression
    (159) expression -> . expression XOR expression
    (160) expression -> . expression XNOR expression
    (161) expression -> . expression OR expression
    (162) expression -> . expression LAND expression
    (163) expression -> . expression LOR expression
    (164) expression -> . expression COND expression COLON expression
    (165) expression -> . LPAREN expression RPAREN
    (166) expression -> . concat
    (167) expression -> . repeat
    (168) expression -> . partselect
    (169) expression -> . pointer
    (170) expression -> . functioncall
    (171) expression -> . systemcall
    (172) expression -> . identifier
    (173) expression -> . const_expression
    (174) concat -> . LBRACE concatlist RBRACE
    (177) repeat -> . LBRACE expression concat RBRACE
    (178) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (179) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (180) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (181) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (182) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (183) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (184) pointer -> . identifier LBRACKET expression RBRACKET
    (185) pointer -> . pointer LBRACKET expression RBRACKET
    (373) functioncall -> . identifier LPAREN func_args RPAREN
    (351) systemcall -> . DOLLER ID
    (352) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (353) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (392) identifier -> . ID
    (393) identifier -> . scope ID
    (186) const_expression -> . intnumber
    (187) const_expression -> . floatnumber
    (188) const_expression -> . stringliteral
    (394) scope -> . identifier DOT
    (395) scope -> . pointer DOT
    (190) intnumber -> . INTNUMBER_DEC
    (191) intnumber -> . SIGNED_INTNUMBER_DEC
    (192) intnumber -> . INTNUMBER_BIN
    (193) intnumber -> . SIGNED_INTNUMBER_BIN
    (194) intnumber -> . INTNUMBER_OCT
    (195) intnumber -> . SIGNED_INTNUMBER_OCT
    (196) intnumber -> . INTNUMBER_HEX
    (197) intnumber -> . SIGNED_INTNUMBER_HEX
    (189) floatnumber -> . FLOATNUMBER
    (198) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 88
    PLUS            shift and go to state 89
    LNOT            shift and go to state 90
    NOT             shift and go to state 91
    AND             shift and go to state 92
    NAND            shift and go to state 93
    NOR             shift and go to state 94
    OR              shift and go to state 95
    XOR             shift and go to state 96
    XNOR            shift and go to state 97
    LPAREN          shift and go to state 85
    LBRACE          shift and go to state 106
    DOLLER          shift and go to state 107
    ID              shift and go to state 86
    INTNUMBER_DEC   shift and go to state 112
    SIGNED_INTNUMBER_DEC shift and go to state 113
    INTNUMBER_BIN   shift and go to state 114
    SIGNED_INTNUMBER_BIN shift and go to state 115
    INTNUMBER_OCT   shift and go to state 116
    SIGNED_INTNUMBER_OCT shift and go to state 117
    INTNUMBER_HEX   shift and go to state 118
    SIGNED_INTNUMBER_HEX shift and go to state 119
    FLOATNUMBER     shift and go to state 120
    STRING_LITERAL  shift and go to state 121

    pointer                        shift and go to state 101
    expression                     shift and go to state 650
    concat                         shift and go to state 98
    repeat                         shift and go to state 99
    partselect                     shift and go to state 100
    functioncall                   shift and go to state 102
    systemcall                     shift and go to state 103
    identifier                     shift and go to state 104
    const_expression               shift and go to state 105
    scope                          shift and go to state 108
    intnumber                      shift and go to state 109
    floatnumber                    shift and go to state 110
    stringliteral                  shift and go to state 111

state 541

    (178) partselect -> identifier LBRACKET expression COLON . expression RBRACKET
    (130) expression -> . MINUS expression
    (131) expression -> . PLUS expression
    (132) expression -> . LNOT expression
    (133) expression -> . NOT expression
    (134) expression -> . AND expression
    (135) expression -> . NAND expression
    (136) expression -> . NOR expression
    (137) expression -> . OR expression
    (138) expression -> . XOR expression
    (139) expression -> . XNOR expression
    (140) expression -> . expression POWER expression
    (141) expression -> . expression TIMES expression
    (142) expression -> . expression DIVIDE expression
    (143) expression -> . expression MOD expression
    (144) expression -> . expression PLUS expression
    (145) expression -> . expression MINUS expression
    (146) expression -> . expression LSHIFT expression
    (147) expression -> . expression RSHIFT expression
    (148) expression -> . expression LSHIFTA expression
    (149) expression -> . expression RSHIFTA expression
    (150) expression -> . expression LT expression
    (151) expression -> . expression GT expression
    (152) expression -> . expression LE expression
    (153) expression -> . expression GE expression
    (154) expression -> . expression EQ expression
    (155) expression -> . expression NE expression
    (156) expression -> . expression EQL expression
    (157) expression -> . expression NEL expression
    (158) expression -> . expression AND expression
    (159) expression -> . expression XOR expression
    (160) expression -> . expression XNOR expression
    (161) expression -> . expression OR expression
    (162) expression -> . expression LAND expression
    (163) expression -> . expression LOR expression
    (164) expression -> . expression COND expression COLON expression
    (165) expression -> . LPAREN expression RPAREN
    (166) expression -> . concat
    (167) expression -> . repeat
    (168) expression -> . partselect
    (169) expression -> . pointer
    (170) expression -> . functioncall
    (171) expression -> . systemcall
    (172) expression -> . identifier
    (173) expression -> . const_expression
    (174) concat -> . LBRACE concatlist RBRACE
    (177) repeat -> . LBRACE expression concat RBRACE
    (178) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (179) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (180) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (181) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (182) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (183) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (184) pointer -> . identifier LBRACKET expression RBRACKET
    (185) pointer -> . pointer LBRACKET expression RBRACKET
    (373) functioncall -> . identifier LPAREN func_args RPAREN
    (351) systemcall -> . DOLLER ID
    (352) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (353) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (392) identifier -> . ID
    (393) identifier -> . scope ID
    (186) const_expression -> . intnumber
    (187) const_expression -> . floatnumber
    (188) const_expression -> . stringliteral
    (394) scope -> . identifier DOT
    (395) scope -> . pointer DOT
    (190) intnumber -> . INTNUMBER_DEC
    (191) intnumber -> . SIGNED_INTNUMBER_DEC
    (192) intnumber -> . INTNUMBER_BIN
    (193) intnumber -> . SIGNED_INTNUMBER_BIN
    (194) intnumber -> . INTNUMBER_OCT
    (195) intnumber -> . SIGNED_INTNUMBER_OCT
    (196) intnumber -> . INTNUMBER_HEX
    (197) intnumber -> . SIGNED_INTNUMBER_HEX
    (189) floatnumber -> . FLOATNUMBER
    (198) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 88
    PLUS            shift and go to state 89
    LNOT            shift and go to state 90
    NOT             shift and go to state 91
    AND             shift and go to state 92
    NAND            shift and go to state 93
    NOR             shift and go to state 94
    OR              shift and go to state 95
    XOR             shift and go to state 96
    XNOR            shift and go to state 97
    LPAREN          shift and go to state 85
    LBRACE          shift and go to state 106
    DOLLER          shift and go to state 107
    ID              shift and go to state 86
    INTNUMBER_DEC   shift and go to state 112
    SIGNED_INTNUMBER_DEC shift and go to state 113
    INTNUMBER_BIN   shift and go to state 114
    SIGNED_INTNUMBER_BIN shift and go to state 115
    INTNUMBER_OCT   shift and go to state 116
    SIGNED_INTNUMBER_OCT shift and go to state 117
    INTNUMBER_HEX   shift and go to state 118
    SIGNED_INTNUMBER_HEX shift and go to state 119
    FLOATNUMBER     shift and go to state 120
    STRING_LITERAL  shift and go to state 121

    identifier                     shift and go to state 104
    expression                     shift and go to state 651
    concat                         shift and go to state 98
    repeat                         shift and go to state 99
    partselect                     shift and go to state 100
    pointer                        shift and go to state 101
    functioncall                   shift and go to state 102
    systemcall                     shift and go to state 103
    const_expression               shift and go to state 105
    scope                          shift and go to state 108
    intnumber                      shift and go to state 109
    floatnumber                    shift and go to state 110
    stringliteral                  shift and go to state 111

state 542

    (184) pointer -> identifier LBRACKET expression RBRACKET .

    LBRACKET        reduce using rule 184 (pointer -> identifier LBRACKET expression RBRACKET .)
    DOT             reduce using rule 184 (pointer -> identifier LBRACKET expression RBRACKET .)
    TIMES           reduce using rule 184 (pointer -> identifier LBRACKET expression RBRACKET .)
    POWER           reduce using rule 184 (pointer -> identifier LBRACKET expression RBRACKET .)
    DIVIDE          reduce using rule 184 (pointer -> identifier LBRACKET expression RBRACKET .)
    MOD             reduce using rule 184 (pointer -> identifier LBRACKET expression RBRACKET .)
    PLUS            reduce using rule 184 (pointer -> identifier LBRACKET expression RBRACKET .)
    MINUS           reduce using rule 184 (pointer -> identifier LBRACKET expression RBRACKET .)
    LSHIFT          reduce using rule 184 (pointer -> identifier LBRACKET expression RBRACKET .)
    RSHIFT          reduce using rule 184 (pointer -> identifier LBRACKET expression RBRACKET .)
    LSHIFTA         reduce using rule 184 (pointer -> identifier LBRACKET expression RBRACKET .)
    RSHIFTA         reduce using rule 184 (pointer -> identifier LBRACKET expression RBRACKET .)
    LT              reduce using rule 184 (pointer -> identifier LBRACKET expression RBRACKET .)
    GT              reduce using rule 184 (pointer -> identifier LBRACKET expression RBRACKET .)
    LE              reduce using rule 184 (pointer -> identifier LBRACKET expression RBRACKET .)
    GE              reduce using rule 184 (pointer -> identifier LBRACKET expression RBRACKET .)
    EQ              reduce using rule 184 (pointer -> identifier LBRACKET expression RBRACKET .)
    NE              reduce using rule 184 (pointer -> identifier LBRACKET expression RBRACKET .)
    EQL             reduce using rule 184 (pointer -> identifier LBRACKET expression RBRACKET .)
    NEL             reduce using rule 184 (pointer -> identifier LBRACKET expression RBRACKET .)
    AND             reduce using rule 184 (pointer -> identifier LBRACKET expression RBRACKET .)
    XOR             reduce using rule 184 (pointer -> identifier LBRACKET expression RBRACKET .)
    XNOR            reduce using rule 184 (pointer -> identifier LBRACKET expression RBRACKET .)
    OR              reduce using rule 184 (pointer -> identifier LBRACKET expression RBRACKET .)
    LAND            reduce using rule 184 (pointer -> identifier LBRACKET expression RBRACKET .)
    LOR             reduce using rule 184 (pointer -> identifier LBRACKET expression RBRACKET .)
    COND            reduce using rule 184 (pointer -> identifier LBRACKET expression RBRACKET .)
    EQUALS          reduce using rule 184 (pointer -> identifier LBRACKET expression RBRACKET .)
    RPAREN          reduce using rule 184 (pointer -> identifier LBRACKET expression RBRACKET .)
    LBRACE          reduce using rule 184 (pointer -> identifier LBRACKET expression RBRACKET .)
    RBRACE          reduce using rule 184 (pointer -> identifier LBRACKET expression RBRACKET .)
    COMMA           reduce using rule 184 (pointer -> identifier LBRACKET expression RBRACKET .)
    COLON           reduce using rule 184 (pointer -> identifier LBRACKET expression RBRACKET .)
    SEMICOLON       reduce using rule 184 (pointer -> identifier LBRACKET expression RBRACKET .)
    PLUSCOLON       reduce using rule 184 (pointer -> identifier LBRACKET expression RBRACKET .)
    MINUSCOLON      reduce using rule 184 (pointer -> identifier LBRACKET expression RBRACKET .)
    RBRACKET        reduce using rule 184 (pointer -> identifier LBRACKET expression RBRACKET .)
    IF              reduce using rule 184 (pointer -> identifier LBRACKET expression RBRACKET .)
    CASE            reduce using rule 184 (pointer -> identifier LBRACKET expression RBRACKET .)
    CASEX           reduce using rule 184 (pointer -> identifier LBRACKET expression RBRACKET .)
    UNIQUE          reduce using rule 184 (pointer -> identifier LBRACKET expression RBRACKET .)
    FOR             reduce using rule 184 (pointer -> identifier LBRACKET expression RBRACKET .)
    WHILE           reduce using rule 184 (pointer -> identifier LBRACKET expression RBRACKET .)
    WAIT            reduce using rule 184 (pointer -> identifier LBRACKET expression RBRACKET .)
    FOREVER         reduce using rule 184 (pointer -> identifier LBRACKET expression RBRACKET .)
    BEGIN           reduce using rule 184 (pointer -> identifier LBRACKET expression RBRACKET .)
    FORK            reduce using rule 184 (pointer -> identifier LBRACKET expression RBRACKET .)
    DELAY           reduce using rule 184 (pointer -> identifier LBRACKET expression RBRACKET .)
    AT              reduce using rule 184 (pointer -> identifier LBRACKET expression RBRACKET .)
    DOLLER          reduce using rule 184 (pointer -> identifier LBRACKET expression RBRACKET .)
    DISABLE         reduce using rule 184 (pointer -> identifier LBRACKET expression RBRACKET .)
    ID              reduce using rule 184 (pointer -> identifier LBRACKET expression RBRACKET .)
    SENS_OR         reduce using rule 184 (pointer -> identifier LBRACKET expression RBRACKET .)


state 543

    (179) partselect -> identifier LBRACKET expression PLUSCOLON . expression RBRACKET
    (130) expression -> . MINUS expression
    (131) expression -> . PLUS expression
    (132) expression -> . LNOT expression
    (133) expression -> . NOT expression
    (134) expression -> . AND expression
    (135) expression -> . NAND expression
    (136) expression -> . NOR expression
    (137) expression -> . OR expression
    (138) expression -> . XOR expression
    (139) expression -> . XNOR expression
    (140) expression -> . expression POWER expression
    (141) expression -> . expression TIMES expression
    (142) expression -> . expression DIVIDE expression
    (143) expression -> . expression MOD expression
    (144) expression -> . expression PLUS expression
    (145) expression -> . expression MINUS expression
    (146) expression -> . expression LSHIFT expression
    (147) expression -> . expression RSHIFT expression
    (148) expression -> . expression LSHIFTA expression
    (149) expression -> . expression RSHIFTA expression
    (150) expression -> . expression LT expression
    (151) expression -> . expression GT expression
    (152) expression -> . expression LE expression
    (153) expression -> . expression GE expression
    (154) expression -> . expression EQ expression
    (155) expression -> . expression NE expression
    (156) expression -> . expression EQL expression
    (157) expression -> . expression NEL expression
    (158) expression -> . expression AND expression
    (159) expression -> . expression XOR expression
    (160) expression -> . expression XNOR expression
    (161) expression -> . expression OR expression
    (162) expression -> . expression LAND expression
    (163) expression -> . expression LOR expression
    (164) expression -> . expression COND expression COLON expression
    (165) expression -> . LPAREN expression RPAREN
    (166) expression -> . concat
    (167) expression -> . repeat
    (168) expression -> . partselect
    (169) expression -> . pointer
    (170) expression -> . functioncall
    (171) expression -> . systemcall
    (172) expression -> . identifier
    (173) expression -> . const_expression
    (174) concat -> . LBRACE concatlist RBRACE
    (177) repeat -> . LBRACE expression concat RBRACE
    (178) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (179) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (180) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (181) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (182) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (183) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (184) pointer -> . identifier LBRACKET expression RBRACKET
    (185) pointer -> . pointer LBRACKET expression RBRACKET
    (373) functioncall -> . identifier LPAREN func_args RPAREN
    (351) systemcall -> . DOLLER ID
    (352) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (353) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (392) identifier -> . ID
    (393) identifier -> . scope ID
    (186) const_expression -> . intnumber
    (187) const_expression -> . floatnumber
    (188) const_expression -> . stringliteral
    (394) scope -> . identifier DOT
    (395) scope -> . pointer DOT
    (190) intnumber -> . INTNUMBER_DEC
    (191) intnumber -> . SIGNED_INTNUMBER_DEC
    (192) intnumber -> . INTNUMBER_BIN
    (193) intnumber -> . SIGNED_INTNUMBER_BIN
    (194) intnumber -> . INTNUMBER_OCT
    (195) intnumber -> . SIGNED_INTNUMBER_OCT
    (196) intnumber -> . INTNUMBER_HEX
    (197) intnumber -> . SIGNED_INTNUMBER_HEX
    (189) floatnumber -> . FLOATNUMBER
    (198) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 88
    PLUS            shift and go to state 89
    LNOT            shift and go to state 90
    NOT             shift and go to state 91
    AND             shift and go to state 92
    NAND            shift and go to state 93
    NOR             shift and go to state 94
    OR              shift and go to state 95
    XOR             shift and go to state 96
    XNOR            shift and go to state 97
    LPAREN          shift and go to state 85
    LBRACE          shift and go to state 106
    DOLLER          shift and go to state 107
    ID              shift and go to state 86
    INTNUMBER_DEC   shift and go to state 112
    SIGNED_INTNUMBER_DEC shift and go to state 113
    INTNUMBER_BIN   shift and go to state 114
    SIGNED_INTNUMBER_BIN shift and go to state 115
    INTNUMBER_OCT   shift and go to state 116
    SIGNED_INTNUMBER_OCT shift and go to state 117
    INTNUMBER_HEX   shift and go to state 118
    SIGNED_INTNUMBER_HEX shift and go to state 119
    FLOATNUMBER     shift and go to state 120
    STRING_LITERAL  shift and go to state 121

    identifier                     shift and go to state 104
    expression                     shift and go to state 652
    concat                         shift and go to state 98
    repeat                         shift and go to state 99
    partselect                     shift and go to state 100
    pointer                        shift and go to state 101
    functioncall                   shift and go to state 102
    systemcall                     shift and go to state 103
    const_expression               shift and go to state 105
    scope                          shift and go to state 108
    intnumber                      shift and go to state 109
    floatnumber                    shift and go to state 110
    stringliteral                  shift and go to state 111

state 544

    (180) partselect -> identifier LBRACKET expression MINUSCOLON . expression RBRACKET
    (130) expression -> . MINUS expression
    (131) expression -> . PLUS expression
    (132) expression -> . LNOT expression
    (133) expression -> . NOT expression
    (134) expression -> . AND expression
    (135) expression -> . NAND expression
    (136) expression -> . NOR expression
    (137) expression -> . OR expression
    (138) expression -> . XOR expression
    (139) expression -> . XNOR expression
    (140) expression -> . expression POWER expression
    (141) expression -> . expression TIMES expression
    (142) expression -> . expression DIVIDE expression
    (143) expression -> . expression MOD expression
    (144) expression -> . expression PLUS expression
    (145) expression -> . expression MINUS expression
    (146) expression -> . expression LSHIFT expression
    (147) expression -> . expression RSHIFT expression
    (148) expression -> . expression LSHIFTA expression
    (149) expression -> . expression RSHIFTA expression
    (150) expression -> . expression LT expression
    (151) expression -> . expression GT expression
    (152) expression -> . expression LE expression
    (153) expression -> . expression GE expression
    (154) expression -> . expression EQ expression
    (155) expression -> . expression NE expression
    (156) expression -> . expression EQL expression
    (157) expression -> . expression NEL expression
    (158) expression -> . expression AND expression
    (159) expression -> . expression XOR expression
    (160) expression -> . expression XNOR expression
    (161) expression -> . expression OR expression
    (162) expression -> . expression LAND expression
    (163) expression -> . expression LOR expression
    (164) expression -> . expression COND expression COLON expression
    (165) expression -> . LPAREN expression RPAREN
    (166) expression -> . concat
    (167) expression -> . repeat
    (168) expression -> . partselect
    (169) expression -> . pointer
    (170) expression -> . functioncall
    (171) expression -> . systemcall
    (172) expression -> . identifier
    (173) expression -> . const_expression
    (174) concat -> . LBRACE concatlist RBRACE
    (177) repeat -> . LBRACE expression concat RBRACE
    (178) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (179) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (180) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (181) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (182) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (183) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (184) pointer -> . identifier LBRACKET expression RBRACKET
    (185) pointer -> . pointer LBRACKET expression RBRACKET
    (373) functioncall -> . identifier LPAREN func_args RPAREN
    (351) systemcall -> . DOLLER ID
    (352) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (353) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (392) identifier -> . ID
    (393) identifier -> . scope ID
    (186) const_expression -> . intnumber
    (187) const_expression -> . floatnumber
    (188) const_expression -> . stringliteral
    (394) scope -> . identifier DOT
    (395) scope -> . pointer DOT
    (190) intnumber -> . INTNUMBER_DEC
    (191) intnumber -> . SIGNED_INTNUMBER_DEC
    (192) intnumber -> . INTNUMBER_BIN
    (193) intnumber -> . SIGNED_INTNUMBER_BIN
    (194) intnumber -> . INTNUMBER_OCT
    (195) intnumber -> . SIGNED_INTNUMBER_OCT
    (196) intnumber -> . INTNUMBER_HEX
    (197) intnumber -> . SIGNED_INTNUMBER_HEX
    (189) floatnumber -> . FLOATNUMBER
    (198) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 88
    PLUS            shift and go to state 89
    LNOT            shift and go to state 90
    NOT             shift and go to state 91
    AND             shift and go to state 92
    NAND            shift and go to state 93
    NOR             shift and go to state 94
    OR              shift and go to state 95
    XOR             shift and go to state 96
    XNOR            shift and go to state 97
    LPAREN          shift and go to state 85
    LBRACE          shift and go to state 106
    DOLLER          shift and go to state 107
    ID              shift and go to state 86
    INTNUMBER_DEC   shift and go to state 112
    SIGNED_INTNUMBER_DEC shift and go to state 113
    INTNUMBER_BIN   shift and go to state 114
    SIGNED_INTNUMBER_BIN shift and go to state 115
    INTNUMBER_OCT   shift and go to state 116
    SIGNED_INTNUMBER_OCT shift and go to state 117
    INTNUMBER_HEX   shift and go to state 118
    SIGNED_INTNUMBER_HEX shift and go to state 119
    FLOATNUMBER     shift and go to state 120
    STRING_LITERAL  shift and go to state 121

    identifier                     shift and go to state 104
    expression                     shift and go to state 653
    concat                         shift and go to state 98
    repeat                         shift and go to state 99
    partselect                     shift and go to state 100
    pointer                        shift and go to state 101
    functioncall                   shift and go to state 102
    systemcall                     shift and go to state 103
    const_expression               shift and go to state 105
    scope                          shift and go to state 108
    intnumber                      shift and go to state 109
    floatnumber                    shift and go to state 110
    stringliteral                  shift and go to state 111

state 545

    (373) functioncall -> identifier LPAREN func_args RPAREN .

    TIMES           reduce using rule 373 (functioncall -> identifier LPAREN func_args RPAREN .)
    POWER           reduce using rule 373 (functioncall -> identifier LPAREN func_args RPAREN .)
    DIVIDE          reduce using rule 373 (functioncall -> identifier LPAREN func_args RPAREN .)
    MOD             reduce using rule 373 (functioncall -> identifier LPAREN func_args RPAREN .)
    PLUS            reduce using rule 373 (functioncall -> identifier LPAREN func_args RPAREN .)
    MINUS           reduce using rule 373 (functioncall -> identifier LPAREN func_args RPAREN .)
    LSHIFT          reduce using rule 373 (functioncall -> identifier LPAREN func_args RPAREN .)
    RSHIFT          reduce using rule 373 (functioncall -> identifier LPAREN func_args RPAREN .)
    LSHIFTA         reduce using rule 373 (functioncall -> identifier LPAREN func_args RPAREN .)
    RSHIFTA         reduce using rule 373 (functioncall -> identifier LPAREN func_args RPAREN .)
    LT              reduce using rule 373 (functioncall -> identifier LPAREN func_args RPAREN .)
    GT              reduce using rule 373 (functioncall -> identifier LPAREN func_args RPAREN .)
    LE              reduce using rule 373 (functioncall -> identifier LPAREN func_args RPAREN .)
    GE              reduce using rule 373 (functioncall -> identifier LPAREN func_args RPAREN .)
    EQ              reduce using rule 373 (functioncall -> identifier LPAREN func_args RPAREN .)
    NE              reduce using rule 373 (functioncall -> identifier LPAREN func_args RPAREN .)
    EQL             reduce using rule 373 (functioncall -> identifier LPAREN func_args RPAREN .)
    NEL             reduce using rule 373 (functioncall -> identifier LPAREN func_args RPAREN .)
    AND             reduce using rule 373 (functioncall -> identifier LPAREN func_args RPAREN .)
    XOR             reduce using rule 373 (functioncall -> identifier LPAREN func_args RPAREN .)
    XNOR            reduce using rule 373 (functioncall -> identifier LPAREN func_args RPAREN .)
    OR              reduce using rule 373 (functioncall -> identifier LPAREN func_args RPAREN .)
    LAND            reduce using rule 373 (functioncall -> identifier LPAREN func_args RPAREN .)
    LOR             reduce using rule 373 (functioncall -> identifier LPAREN func_args RPAREN .)
    COND            reduce using rule 373 (functioncall -> identifier LPAREN func_args RPAREN .)
    RPAREN          reduce using rule 373 (functioncall -> identifier LPAREN func_args RPAREN .)
    LBRACE          reduce using rule 373 (functioncall -> identifier LPAREN func_args RPAREN .)
    RBRACE          reduce using rule 373 (functioncall -> identifier LPAREN func_args RPAREN .)
    COMMA           reduce using rule 373 (functioncall -> identifier LPAREN func_args RPAREN .)
    COLON           reduce using rule 373 (functioncall -> identifier LPAREN func_args RPAREN .)
    SEMICOLON       reduce using rule 373 (functioncall -> identifier LPAREN func_args RPAREN .)
    PLUSCOLON       reduce using rule 373 (functioncall -> identifier LPAREN func_args RPAREN .)
    MINUSCOLON      reduce using rule 373 (functioncall -> identifier LPAREN func_args RPAREN .)
    RBRACKET        reduce using rule 373 (functioncall -> identifier LPAREN func_args RPAREN .)


state 546

    (374) func_args -> func_args COMMA . expression
    (130) expression -> . MINUS expression
    (131) expression -> . PLUS expression
    (132) expression -> . LNOT expression
    (133) expression -> . NOT expression
    (134) expression -> . AND expression
    (135) expression -> . NAND expression
    (136) expression -> . NOR expression
    (137) expression -> . OR expression
    (138) expression -> . XOR expression
    (139) expression -> . XNOR expression
    (140) expression -> . expression POWER expression
    (141) expression -> . expression TIMES expression
    (142) expression -> . expression DIVIDE expression
    (143) expression -> . expression MOD expression
    (144) expression -> . expression PLUS expression
    (145) expression -> . expression MINUS expression
    (146) expression -> . expression LSHIFT expression
    (147) expression -> . expression RSHIFT expression
    (148) expression -> . expression LSHIFTA expression
    (149) expression -> . expression RSHIFTA expression
    (150) expression -> . expression LT expression
    (151) expression -> . expression GT expression
    (152) expression -> . expression LE expression
    (153) expression -> . expression GE expression
    (154) expression -> . expression EQ expression
    (155) expression -> . expression NE expression
    (156) expression -> . expression EQL expression
    (157) expression -> . expression NEL expression
    (158) expression -> . expression AND expression
    (159) expression -> . expression XOR expression
    (160) expression -> . expression XNOR expression
    (161) expression -> . expression OR expression
    (162) expression -> . expression LAND expression
    (163) expression -> . expression LOR expression
    (164) expression -> . expression COND expression COLON expression
    (165) expression -> . LPAREN expression RPAREN
    (166) expression -> . concat
    (167) expression -> . repeat
    (168) expression -> . partselect
    (169) expression -> . pointer
    (170) expression -> . functioncall
    (171) expression -> . systemcall
    (172) expression -> . identifier
    (173) expression -> . const_expression
    (174) concat -> . LBRACE concatlist RBRACE
    (177) repeat -> . LBRACE expression concat RBRACE
    (178) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (179) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (180) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (181) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (182) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (183) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (184) pointer -> . identifier LBRACKET expression RBRACKET
    (185) pointer -> . pointer LBRACKET expression RBRACKET
    (373) functioncall -> . identifier LPAREN func_args RPAREN
    (351) systemcall -> . DOLLER ID
    (352) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (353) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (392) identifier -> . ID
    (393) identifier -> . scope ID
    (186) const_expression -> . intnumber
    (187) const_expression -> . floatnumber
    (188) const_expression -> . stringliteral
    (394) scope -> . identifier DOT
    (395) scope -> . pointer DOT
    (190) intnumber -> . INTNUMBER_DEC
    (191) intnumber -> . SIGNED_INTNUMBER_DEC
    (192) intnumber -> . INTNUMBER_BIN
    (193) intnumber -> . SIGNED_INTNUMBER_BIN
    (194) intnumber -> . INTNUMBER_OCT
    (195) intnumber -> . SIGNED_INTNUMBER_OCT
    (196) intnumber -> . INTNUMBER_HEX
    (197) intnumber -> . SIGNED_INTNUMBER_HEX
    (189) floatnumber -> . FLOATNUMBER
    (198) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 88
    PLUS            shift and go to state 89
    LNOT            shift and go to state 90
    NOT             shift and go to state 91
    AND             shift and go to state 92
    NAND            shift and go to state 93
    NOR             shift and go to state 94
    OR              shift and go to state 95
    XOR             shift and go to state 96
    XNOR            shift and go to state 97
    LPAREN          shift and go to state 85
    LBRACE          shift and go to state 106
    DOLLER          shift and go to state 107
    ID              shift and go to state 86
    INTNUMBER_DEC   shift and go to state 112
    SIGNED_INTNUMBER_DEC shift and go to state 113
    INTNUMBER_BIN   shift and go to state 114
    SIGNED_INTNUMBER_BIN shift and go to state 115
    INTNUMBER_OCT   shift and go to state 116
    SIGNED_INTNUMBER_OCT shift and go to state 117
    INTNUMBER_HEX   shift and go to state 118
    SIGNED_INTNUMBER_HEX shift and go to state 119
    FLOATNUMBER     shift and go to state 120
    STRING_LITERAL  shift and go to state 121

    expression                     shift and go to state 654
    concat                         shift and go to state 98
    repeat                         shift and go to state 99
    partselect                     shift and go to state 100
    pointer                        shift and go to state 101
    functioncall                   shift and go to state 102
    systemcall                     shift and go to state 103
    identifier                     shift and go to state 104
    const_expression               shift and go to state 105
    scope                          shift and go to state 108
    intnumber                      shift and go to state 109
    floatnumber                    shift and go to state 110
    stringliteral                  shift and go to state 111

state 547

    (175) concatlist -> concatlist COMMA expression .
    (140) expression -> expression . POWER expression
    (141) expression -> expression . TIMES expression
    (142) expression -> expression . DIVIDE expression
    (143) expression -> expression . MOD expression
    (144) expression -> expression . PLUS expression
    (145) expression -> expression . MINUS expression
    (146) expression -> expression . LSHIFT expression
    (147) expression -> expression . RSHIFT expression
    (148) expression -> expression . LSHIFTA expression
    (149) expression -> expression . RSHIFTA expression
    (150) expression -> expression . LT expression
    (151) expression -> expression . GT expression
    (152) expression -> expression . LE expression
    (153) expression -> expression . GE expression
    (154) expression -> expression . EQ expression
    (155) expression -> expression . NE expression
    (156) expression -> expression . EQL expression
    (157) expression -> expression . NEL expression
    (158) expression -> expression . AND expression
    (159) expression -> expression . XOR expression
    (160) expression -> expression . XNOR expression
    (161) expression -> expression . OR expression
    (162) expression -> expression . LAND expression
    (163) expression -> expression . LOR expression
    (164) expression -> expression . COND expression COLON expression

    RBRACE          reduce using rule 175 (concatlist -> concatlist COMMA expression .)
    COMMA           reduce using rule 175 (concatlist -> concatlist COMMA expression .)
    POWER           shift and go to state 236
    TIMES           shift and go to state 398
    DIVIDE          shift and go to state 237
    MOD             shift and go to state 238
    PLUS            shift and go to state 239
    MINUS           shift and go to state 240
    LSHIFT          shift and go to state 241
    RSHIFT          shift and go to state 242
    LSHIFTA         shift and go to state 243
    RSHIFTA         shift and go to state 244
    LT              shift and go to state 245
    GT              shift and go to state 246
    LE              shift and go to state 247
    GE              shift and go to state 248
    EQ              shift and go to state 249
    NE              shift and go to state 250
    EQL             shift and go to state 251
    NEL             shift and go to state 252
    AND             shift and go to state 253
    XOR             shift and go to state 254
    XNOR            shift and go to state 255
    OR              shift and go to state 256
    LAND            shift and go to state 257
    LOR             shift and go to state 258
    COND            shift and go to state 259


state 548

    (176) concatlist -> expression .
    (140) expression -> expression . POWER expression
    (141) expression -> expression . TIMES expression
    (142) expression -> expression . DIVIDE expression
    (143) expression -> expression . MOD expression
    (144) expression -> expression . PLUS expression
    (145) expression -> expression . MINUS expression
    (146) expression -> expression . LSHIFT expression
    (147) expression -> expression . RSHIFT expression
    (148) expression -> expression . LSHIFTA expression
    (149) expression -> expression . RSHIFTA expression
    (150) expression -> expression . LT expression
    (151) expression -> expression . GT expression
    (152) expression -> expression . LE expression
    (153) expression -> expression . GE expression
    (154) expression -> expression . EQ expression
    (155) expression -> expression . NE expression
    (156) expression -> expression . EQL expression
    (157) expression -> expression . NEL expression
    (158) expression -> expression . AND expression
    (159) expression -> expression . XOR expression
    (160) expression -> expression . XNOR expression
    (161) expression -> expression . OR expression
    (162) expression -> expression . LAND expression
    (163) expression -> expression . LOR expression
    (164) expression -> expression . COND expression COLON expression

    RBRACE          reduce using rule 176 (concatlist -> expression .)
    COMMA           reduce using rule 176 (concatlist -> expression .)
    POWER           shift and go to state 236
    TIMES           shift and go to state 398
    DIVIDE          shift and go to state 237
    MOD             shift and go to state 238
    PLUS            shift and go to state 239
    MINUS           shift and go to state 240
    LSHIFT          shift and go to state 241
    RSHIFT          shift and go to state 242
    LSHIFTA         shift and go to state 243
    RSHIFTA         shift and go to state 244
    LT              shift and go to state 245
    GT              shift and go to state 246
    LE              shift and go to state 247
    GE              shift and go to state 248
    EQ              shift and go to state 249
    NE              shift and go to state 250
    EQL             shift and go to state 251
    NEL             shift and go to state 252
    AND             shift and go to state 253
    XOR             shift and go to state 254
    XNOR            shift and go to state 255
    OR              shift and go to state 256
    LAND            shift and go to state 257
    LOR             shift and go to state 258
    COND            shift and go to state 259


state 549

    (177) repeat -> LBRACE expression concat RBRACE .

    TIMES           reduce using rule 177 (repeat -> LBRACE expression concat RBRACE .)
    POWER           reduce using rule 177 (repeat -> LBRACE expression concat RBRACE .)
    DIVIDE          reduce using rule 177 (repeat -> LBRACE expression concat RBRACE .)
    MOD             reduce using rule 177 (repeat -> LBRACE expression concat RBRACE .)
    PLUS            reduce using rule 177 (repeat -> LBRACE expression concat RBRACE .)
    MINUS           reduce using rule 177 (repeat -> LBRACE expression concat RBRACE .)
    LSHIFT          reduce using rule 177 (repeat -> LBRACE expression concat RBRACE .)
    RSHIFT          reduce using rule 177 (repeat -> LBRACE expression concat RBRACE .)
    LSHIFTA         reduce using rule 177 (repeat -> LBRACE expression concat RBRACE .)
    RSHIFTA         reduce using rule 177 (repeat -> LBRACE expression concat RBRACE .)
    LT              reduce using rule 177 (repeat -> LBRACE expression concat RBRACE .)
    GT              reduce using rule 177 (repeat -> LBRACE expression concat RBRACE .)
    LE              reduce using rule 177 (repeat -> LBRACE expression concat RBRACE .)
    GE              reduce using rule 177 (repeat -> LBRACE expression concat RBRACE .)
    EQ              reduce using rule 177 (repeat -> LBRACE expression concat RBRACE .)
    NE              reduce using rule 177 (repeat -> LBRACE expression concat RBRACE .)
    EQL             reduce using rule 177 (repeat -> LBRACE expression concat RBRACE .)
    NEL             reduce using rule 177 (repeat -> LBRACE expression concat RBRACE .)
    AND             reduce using rule 177 (repeat -> LBRACE expression concat RBRACE .)
    XOR             reduce using rule 177 (repeat -> LBRACE expression concat RBRACE .)
    XNOR            reduce using rule 177 (repeat -> LBRACE expression concat RBRACE .)
    OR              reduce using rule 177 (repeat -> LBRACE expression concat RBRACE .)
    LAND            reduce using rule 177 (repeat -> LBRACE expression concat RBRACE .)
    LOR             reduce using rule 177 (repeat -> LBRACE expression concat RBRACE .)
    COND            reduce using rule 177 (repeat -> LBRACE expression concat RBRACE .)
    RPAREN          reduce using rule 177 (repeat -> LBRACE expression concat RBRACE .)
    LBRACE          reduce using rule 177 (repeat -> LBRACE expression concat RBRACE .)
    RBRACE          reduce using rule 177 (repeat -> LBRACE expression concat RBRACE .)
    COMMA           reduce using rule 177 (repeat -> LBRACE expression concat RBRACE .)
    COLON           reduce using rule 177 (repeat -> LBRACE expression concat RBRACE .)
    SEMICOLON       reduce using rule 177 (repeat -> LBRACE expression concat RBRACE .)
    PLUSCOLON       reduce using rule 177 (repeat -> LBRACE expression concat RBRACE .)
    MINUSCOLON      reduce using rule 177 (repeat -> LBRACE expression concat RBRACE .)
    RBRACKET        reduce using rule 177 (repeat -> LBRACE expression concat RBRACE .)


state 550

    (352) systemcall -> DOLLER ID LPAREN sysargs . RPAREN
    (354) sysargs -> sysargs . COMMA sysarg

    RPAREN          shift and go to state 655
    COMMA           shift and go to state 656


state 551

    (355) sysargs -> sysarg .

    RPAREN          reduce using rule 355 (sysargs -> sysarg .)
    COMMA           reduce using rule 355 (sysargs -> sysarg .)


state 552

    (356) sysargs -> empty .

    RPAREN          reduce using rule 356 (sysargs -> empty .)
    COMMA           reduce using rule 356 (sysargs -> empty .)


state 553

    (357) sysarg -> expression .
    (140) expression -> expression . POWER expression
    (141) expression -> expression . TIMES expression
    (142) expression -> expression . DIVIDE expression
    (143) expression -> expression . MOD expression
    (144) expression -> expression . PLUS expression
    (145) expression -> expression . MINUS expression
    (146) expression -> expression . LSHIFT expression
    (147) expression -> expression . RSHIFT expression
    (148) expression -> expression . LSHIFTA expression
    (149) expression -> expression . RSHIFTA expression
    (150) expression -> expression . LT expression
    (151) expression -> expression . GT expression
    (152) expression -> expression . LE expression
    (153) expression -> expression . GE expression
    (154) expression -> expression . EQ expression
    (155) expression -> expression . NE expression
    (156) expression -> expression . EQL expression
    (157) expression -> expression . NEL expression
    (158) expression -> expression . AND expression
    (159) expression -> expression . XOR expression
    (160) expression -> expression . XNOR expression
    (161) expression -> expression . OR expression
    (162) expression -> expression . LAND expression
    (163) expression -> expression . LOR expression
    (164) expression -> expression . COND expression COLON expression

    RPAREN          reduce using rule 357 (sysarg -> expression .)
    COMMA           reduce using rule 357 (sysarg -> expression .)
    POWER           shift and go to state 236
    TIMES           shift and go to state 398
    DIVIDE          shift and go to state 237
    MOD             shift and go to state 238
    PLUS            shift and go to state 239
    MINUS           shift and go to state 240
    LSHIFT          shift and go to state 241
    RSHIFT          shift and go to state 242
    LSHIFTA         shift and go to state 243
    RSHIFTA         shift and go to state 244
    LT              shift and go to state 245
    GT              shift and go to state 246
    LE              shift and go to state 247
    GE              shift and go to state 248
    EQ              shift and go to state 249
    NE              shift and go to state 250
    EQL             shift and go to state 251
    NEL             shift and go to state 252
    AND             shift and go to state 253
    XOR             shift and go to state 254
    XNOR            shift and go to state 255
    OR              shift and go to state 256
    LAND            shift and go to state 257
    LOR             shift and go to state 258
    COND            shift and go to state 259


state 554

    (353) systemcall -> DOLLER SIGNED LPAREN sysargs . RPAREN
    (354) sysargs -> sysargs . COMMA sysarg

    RPAREN          shift and go to state 657
    COMMA           shift and go to state 656


state 555

    (342) generate_if -> IF LPAREN cond RPAREN . gif_true_item ELSE gif_false_item
    (343) generate_if -> IF LPAREN cond RPAREN . gif_true_item
    (344) gif_true_item -> . generate_item
    (345) gif_true_item -> . generate_block
    (337) generate_item -> . standard_item
    (338) generate_item -> . generate_if
    (339) generate_item -> . generate_for
    (340) generate_block -> . BEGIN generate_items END
    (341) generate_block -> . BEGIN COLON ID generate_items END
    (61) standard_item -> . decl
    (62) standard_item -> . integerdecl
    (63) standard_item -> . realdecl
    (64) standard_item -> . declassign
    (65) standard_item -> . parameterdecl
    (66) standard_item -> . localparamdecl
    (67) standard_item -> . genvardecl
    (68) standard_item -> . assignment
    (69) standard_item -> . always
    (70) standard_item -> . always_ff
    (71) standard_item -> . always_comb
    (72) standard_item -> . initial
    (73) standard_item -> . instance
    (74) standard_item -> . function
    (75) standard_item -> . task
    (76) standard_item -> . pragma
    (342) generate_if -> . IF LPAREN cond RPAREN gif_true_item ELSE gif_false_item
    (343) generate_if -> . IF LPAREN cond RPAREN gif_true_item
    (348) generate_for -> . FOR LPAREN forpre forcond forpost RPAREN generate_forcontent
    (77) decl -> . sigtypes declnamelist SEMICOLON
    (78) decl -> . sigtypes width declnamelist SEMICOLON
    (87) integerdecl -> . INTEGER integernamelist SEMICOLON
    (88) integerdecl -> . INTEGER SIGNED integernamelist SEMICOLON
    (92) realdecl -> . REAL realnamelist SEMICOLON
    (83) declassign -> . sigtypes declassign_element SEMICOLON
    (84) declassign -> . sigtypes width declassign_element SEMICOLON
    (96) parameterdecl -> . PARAMETER param_substitution_list SEMICOLON
    (97) parameterdecl -> . PARAMETER SIGNED param_substitution_list SEMICOLON
    (98) parameterdecl -> . PARAMETER width param_substitution_list SEMICOLON
    (99) parameterdecl -> . PARAMETER SIGNED width param_substitution_list SEMICOLON
    (100) parameterdecl -> . PARAMETER INTEGER param_substitution_list SEMICOLON
    (101) localparamdecl -> . LOCALPARAM param_substitution_list SEMICOLON
    (102) localparamdecl -> . LOCALPARAM SIGNED param_substitution_list SEMICOLON
    (103) localparamdecl -> . LOCALPARAM width param_substitution_list SEMICOLON
    (104) localparamdecl -> . LOCALPARAM SIGNED width param_substitution_list SEMICOLON
    (105) localparamdecl -> . LOCALPARAM INTEGER param_substitution_list SEMICOLON
    (329) genvardecl -> . GENVAR genvarlist SEMICOLON
    (109) assignment -> . ASSIGN lvalue EQUALS rvalue SEMICOLON
    (110) assignment -> . ASSIGN delays lvalue EQUALS delays rvalue SEMICOLON
    (199) always -> . ALWAYS senslist always_statement
    (200) always_ff -> . ALWAYS_FF senslist always_statement
    (201) always_comb -> . ALWAYS_COMB senslist always_statement
    (290) initial -> . INITIAL initial_statement
    (297) instance -> . ID parameterlist instance_bodylist SEMICOLON
    (298) instance -> . SENS_OR parameterlist instance_bodylist SEMICOLON
    (303) instance -> . ID instance_bodylist_noname SEMICOLON
    (304) instance -> . SENS_OR instance_bodylist_noname SEMICOLON
    (358) function -> . FUNCTION width ID SEMICOLON function_statement ENDFUNCTION
    (359) function -> . FUNCTION ID SEMICOLON function_statement ENDFUNCTION
    (377) task -> . TASK ID SEMICOLON task_statement ENDTASK
    (7) pragma -> . LPAREN TIMES ID EQUALS expression TIMES RPAREN
    (8) pragma -> . LPAREN TIMES ID TIMES RPAREN
    (35) sigtypes -> . sigtypes sigtype
    (36) sigtypes -> . sigtype
    (37) sigtype -> . INPUT
    (38) sigtype -> . OUTPUT
    (39) sigtype -> . INOUT
    (40) sigtype -> . TRI
    (41) sigtype -> . REG
    (42) sigtype -> . LOGIC
    (43) sigtype -> . WIRE
    (44) sigtype -> . SIGNED
    (45) sigtype -> . SUPPLY0
    (46) sigtype -> . SUPPLY1

    BEGIN           shift and go to state 661
    IF              shift and go to state 130
    FOR             shift and go to state 131
    INTEGER         shift and go to state 47
    REAL            shift and go to state 49
    PARAMETER       shift and go to state 50
    LOCALPARAM      shift and go to state 51
    GENVAR          shift and go to state 52
    ASSIGN          shift and go to state 53
    ALWAYS          shift and go to state 54
    ALWAYS_FF       shift and go to state 55
    ALWAYS_COMB     shift and go to state 56
    INITIAL         shift and go to state 57
    ID              shift and go to state 58
    SENS_OR         shift and go to state 59
    FUNCTION        shift and go to state 60
    TASK            shift and go to state 61
    LPAREN          shift and go to state 8
    INPUT           shift and go to state 63
    OUTPUT          shift and go to state 64
    INOUT           shift and go to state 65
    TRI             shift and go to state 66
    REG             shift and go to state 67
    LOGIC           shift and go to state 68
    WIRE            shift and go to state 69
    SIGNED          shift and go to state 48
    SUPPLY0         shift and go to state 70
    SUPPLY1         shift and go to state 71

    gif_true_item                  shift and go to state 658
    generate_item                  shift and go to state 659
    generate_block                 shift and go to state 660
    standard_item                  shift and go to state 127
    generate_if                    shift and go to state 128
    generate_for                   shift and go to state 129
    decl                           shift and go to state 29
    integerdecl                    shift and go to state 30
    realdecl                       shift and go to state 31
    declassign                     shift and go to state 32
    parameterdecl                  shift and go to state 33
    localparamdecl                 shift and go to state 34
    genvardecl                     shift and go to state 35
    assignment                     shift and go to state 36
    always                         shift and go to state 37
    always_ff                      shift and go to state 38
    always_comb                    shift and go to state 39
    initial                        shift and go to state 40
    instance                       shift and go to state 41
    function                       shift and go to state 42
    task                           shift and go to state 43
    pragma                         shift and go to state 44
    sigtypes                       shift and go to state 46
    sigtype                        shift and go to state 62

state 556

    (348) generate_for -> FOR LPAREN forpre forcond . forpost RPAREN generate_forcontent
    (275) forpost -> . blocking_substitution_base
    (276) forpost -> . empty
    (238) blocking_substitution_base -> . delays lvalue EQUALS delays rvalue
    (400) empty -> .
    (240) delays -> . DELAY LPAREN expression RPAREN
    (241) delays -> . DELAY identifier
    (242) delays -> . DELAY intnumber
    (243) delays -> . DELAY floatnumber
    (244) delays -> . empty

    RPAREN          reduce using rule 400 (empty -> .)
    LBRACE          reduce using rule 400 (empty -> .)
    ID              reduce using rule 400 (empty -> .)
    DELAY           shift and go to state 140

    forpost                        shift and go to state 662
    blocking_substitution_base     shift and go to state 663
    empty                          shift and go to state 664
    delays                         shift and go to state 665

state 557

    (273) forcond -> cond . SEMICOLON

    SEMICOLON       shift and go to state 666


state 558

    (274) forcond -> SEMICOLON .

    DELAY           reduce using rule 274 (forcond -> SEMICOLON .)
    RPAREN          reduce using rule 274 (forcond -> SEMICOLON .)
    LBRACE          reduce using rule 274 (forcond -> SEMICOLON .)
    ID              reduce using rule 274 (forcond -> SEMICOLON .)


state 559

    (237) blocking_substitution -> delays lvalue . EQUALS delays rvalue SEMICOLON

    EQUALS          shift and go to state 485


state 560

    (54) width -> LBRACKET expression COLON expression . RBRACKET
    (140) expression -> expression . POWER expression
    (141) expression -> expression . TIMES expression
    (142) expression -> expression . DIVIDE expression
    (143) expression -> expression . MOD expression
    (144) expression -> expression . PLUS expression
    (145) expression -> expression . MINUS expression
    (146) expression -> expression . LSHIFT expression
    (147) expression -> expression . RSHIFT expression
    (148) expression -> expression . LSHIFTA expression
    (149) expression -> expression . RSHIFTA expression
    (150) expression -> expression . LT expression
    (151) expression -> expression . GT expression
    (152) expression -> expression . LE expression
    (153) expression -> expression . GE expression
    (154) expression -> expression . EQ expression
    (155) expression -> expression . NE expression
    (156) expression -> expression . EQL expression
    (157) expression -> expression . NEL expression
    (158) expression -> expression . AND expression
    (159) expression -> expression . XOR expression
    (160) expression -> expression . XNOR expression
    (161) expression -> expression . OR expression
    (162) expression -> expression . LAND expression
    (163) expression -> expression . LOR expression
    (164) expression -> expression . COND expression COLON expression

    RBRACKET        shift and go to state 667
    POWER           shift and go to state 236
    TIMES           shift and go to state 398
    DIVIDE          shift and go to state 237
    MOD             shift and go to state 238
    PLUS            shift and go to state 239
    MINUS           shift and go to state 240
    LSHIFT          shift and go to state 241
    RSHIFT          shift and go to state 242
    LSHIFTA         shift and go to state 243
    RSHIFTA         shift and go to state 244
    LT              shift and go to state 245
    GT              shift and go to state 246
    LE              shift and go to state 247
    GE              shift and go to state 248
    EQ              shift and go to state 249
    NE              shift and go to state 250
    EQL             shift and go to state 251
    NEL             shift and go to state 252
    AND             shift and go to state 253
    XOR             shift and go to state 254
    XNOR            shift and go to state 255
    OR              shift and go to state 256
    LAND            shift and go to state 257
    LOR             shift and go to state 258
    COND            shift and go to state 259


state 561

    (55) length -> LBRACKET expression COLON . expression RBRACKET
    (130) expression -> . MINUS expression
    (131) expression -> . PLUS expression
    (132) expression -> . LNOT expression
    (133) expression -> . NOT expression
    (134) expression -> . AND expression
    (135) expression -> . NAND expression
    (136) expression -> . NOR expression
    (137) expression -> . OR expression
    (138) expression -> . XOR expression
    (139) expression -> . XNOR expression
    (140) expression -> . expression POWER expression
    (141) expression -> . expression TIMES expression
    (142) expression -> . expression DIVIDE expression
    (143) expression -> . expression MOD expression
    (144) expression -> . expression PLUS expression
    (145) expression -> . expression MINUS expression
    (146) expression -> . expression LSHIFT expression
    (147) expression -> . expression RSHIFT expression
    (148) expression -> . expression LSHIFTA expression
    (149) expression -> . expression RSHIFTA expression
    (150) expression -> . expression LT expression
    (151) expression -> . expression GT expression
    (152) expression -> . expression LE expression
    (153) expression -> . expression GE expression
    (154) expression -> . expression EQ expression
    (155) expression -> . expression NE expression
    (156) expression -> . expression EQL expression
    (157) expression -> . expression NEL expression
    (158) expression -> . expression AND expression
    (159) expression -> . expression XOR expression
    (160) expression -> . expression XNOR expression
    (161) expression -> . expression OR expression
    (162) expression -> . expression LAND expression
    (163) expression -> . expression LOR expression
    (164) expression -> . expression COND expression COLON expression
    (165) expression -> . LPAREN expression RPAREN
    (166) expression -> . concat
    (167) expression -> . repeat
    (168) expression -> . partselect
    (169) expression -> . pointer
    (170) expression -> . functioncall
    (171) expression -> . systemcall
    (172) expression -> . identifier
    (173) expression -> . const_expression
    (174) concat -> . LBRACE concatlist RBRACE
    (177) repeat -> . LBRACE expression concat RBRACE
    (178) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (179) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (180) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (181) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (182) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (183) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (184) pointer -> . identifier LBRACKET expression RBRACKET
    (185) pointer -> . pointer LBRACKET expression RBRACKET
    (373) functioncall -> . identifier LPAREN func_args RPAREN
    (351) systemcall -> . DOLLER ID
    (352) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (353) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (392) identifier -> . ID
    (393) identifier -> . scope ID
    (186) const_expression -> . intnumber
    (187) const_expression -> . floatnumber
    (188) const_expression -> . stringliteral
    (394) scope -> . identifier DOT
    (395) scope -> . pointer DOT
    (190) intnumber -> . INTNUMBER_DEC
    (191) intnumber -> . SIGNED_INTNUMBER_DEC
    (192) intnumber -> . INTNUMBER_BIN
    (193) intnumber -> . SIGNED_INTNUMBER_BIN
    (194) intnumber -> . INTNUMBER_OCT
    (195) intnumber -> . SIGNED_INTNUMBER_OCT
    (196) intnumber -> . INTNUMBER_HEX
    (197) intnumber -> . SIGNED_INTNUMBER_HEX
    (189) floatnumber -> . FLOATNUMBER
    (198) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 88
    PLUS            shift and go to state 89
    LNOT            shift and go to state 90
    NOT             shift and go to state 91
    AND             shift and go to state 92
    NAND            shift and go to state 93
    NOR             shift and go to state 94
    OR              shift and go to state 95
    XOR             shift and go to state 96
    XNOR            shift and go to state 97
    LPAREN          shift and go to state 85
    LBRACE          shift and go to state 106
    DOLLER          shift and go to state 107
    ID              shift and go to state 86
    INTNUMBER_DEC   shift and go to state 112
    SIGNED_INTNUMBER_DEC shift and go to state 113
    INTNUMBER_BIN   shift and go to state 114
    SIGNED_INTNUMBER_BIN shift and go to state 115
    INTNUMBER_OCT   shift and go to state 116
    SIGNED_INTNUMBER_OCT shift and go to state 117
    INTNUMBER_HEX   shift and go to state 118
    SIGNED_INTNUMBER_HEX shift and go to state 119
    FLOATNUMBER     shift and go to state 120
    STRING_LITERAL  shift and go to state 121

    expression                     shift and go to state 668
    concat                         shift and go to state 98
    repeat                         shift and go to state 99
    partselect                     shift and go to state 100
    pointer                        shift and go to state 101
    functioncall                   shift and go to state 102
    systemcall                     shift and go to state 103
    identifier                     shift and go to state 104
    const_expression               shift and go to state 105
    scope                          shift and go to state 108
    intnumber                      shift and go to state 109
    floatnumber                    shift and go to state 110
    stringliteral                  shift and go to state 111

state 562

    (86) declassign_element -> delays ID EQUALS delays . rvalue
    (129) rvalue -> . expression
    (130) expression -> . MINUS expression
    (131) expression -> . PLUS expression
    (132) expression -> . LNOT expression
    (133) expression -> . NOT expression
    (134) expression -> . AND expression
    (135) expression -> . NAND expression
    (136) expression -> . NOR expression
    (137) expression -> . OR expression
    (138) expression -> . XOR expression
    (139) expression -> . XNOR expression
    (140) expression -> . expression POWER expression
    (141) expression -> . expression TIMES expression
    (142) expression -> . expression DIVIDE expression
    (143) expression -> . expression MOD expression
    (144) expression -> . expression PLUS expression
    (145) expression -> . expression MINUS expression
    (146) expression -> . expression LSHIFT expression
    (147) expression -> . expression RSHIFT expression
    (148) expression -> . expression LSHIFTA expression
    (149) expression -> . expression RSHIFTA expression
    (150) expression -> . expression LT expression
    (151) expression -> . expression GT expression
    (152) expression -> . expression LE expression
    (153) expression -> . expression GE expression
    (154) expression -> . expression EQ expression
    (155) expression -> . expression NE expression
    (156) expression -> . expression EQL expression
    (157) expression -> . expression NEL expression
    (158) expression -> . expression AND expression
    (159) expression -> . expression XOR expression
    (160) expression -> . expression XNOR expression
    (161) expression -> . expression OR expression
    (162) expression -> . expression LAND expression
    (163) expression -> . expression LOR expression
    (164) expression -> . expression COND expression COLON expression
    (165) expression -> . LPAREN expression RPAREN
    (166) expression -> . concat
    (167) expression -> . repeat
    (168) expression -> . partselect
    (169) expression -> . pointer
    (170) expression -> . functioncall
    (171) expression -> . systemcall
    (172) expression -> . identifier
    (173) expression -> . const_expression
    (174) concat -> . LBRACE concatlist RBRACE
    (177) repeat -> . LBRACE expression concat RBRACE
    (178) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (179) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (180) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (181) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (182) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (183) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (184) pointer -> . identifier LBRACKET expression RBRACKET
    (185) pointer -> . pointer LBRACKET expression RBRACKET
    (373) functioncall -> . identifier LPAREN func_args RPAREN
    (351) systemcall -> . DOLLER ID
    (352) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (353) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (392) identifier -> . ID
    (393) identifier -> . scope ID
    (186) const_expression -> . intnumber
    (187) const_expression -> . floatnumber
    (188) const_expression -> . stringliteral
    (394) scope -> . identifier DOT
    (395) scope -> . pointer DOT
    (190) intnumber -> . INTNUMBER_DEC
    (191) intnumber -> . SIGNED_INTNUMBER_DEC
    (192) intnumber -> . INTNUMBER_BIN
    (193) intnumber -> . SIGNED_INTNUMBER_BIN
    (194) intnumber -> . INTNUMBER_OCT
    (195) intnumber -> . SIGNED_INTNUMBER_OCT
    (196) intnumber -> . INTNUMBER_HEX
    (197) intnumber -> . SIGNED_INTNUMBER_HEX
    (189) floatnumber -> . FLOATNUMBER
    (198) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 88
    PLUS            shift and go to state 89
    LNOT            shift and go to state 90
    NOT             shift and go to state 91
    AND             shift and go to state 92
    NAND            shift and go to state 93
    NOR             shift and go to state 94
    OR              shift and go to state 95
    XOR             shift and go to state 96
    XNOR            shift and go to state 97
    LPAREN          shift and go to state 85
    LBRACE          shift and go to state 106
    DOLLER          shift and go to state 107
    ID              shift and go to state 86
    INTNUMBER_DEC   shift and go to state 112
    SIGNED_INTNUMBER_DEC shift and go to state 113
    INTNUMBER_BIN   shift and go to state 114
    SIGNED_INTNUMBER_BIN shift and go to state 115
    INTNUMBER_OCT   shift and go to state 116
    SIGNED_INTNUMBER_OCT shift and go to state 117
    INTNUMBER_HEX   shift and go to state 118
    SIGNED_INTNUMBER_HEX shift and go to state 119
    FLOATNUMBER     shift and go to state 120
    STRING_LITERAL  shift and go to state 121

    rvalue                         shift and go to state 669
    expression                     shift and go to state 448
    concat                         shift and go to state 98
    repeat                         shift and go to state 99
    partselect                     shift and go to state 100
    pointer                        shift and go to state 101
    functioncall                   shift and go to state 102
    systemcall                     shift and go to state 103
    identifier                     shift and go to state 104
    const_expression               shift and go to state 105
    scope                          shift and go to state 108
    intnumber                      shift and go to state 109
    floatnumber                    shift and go to state 110
    stringliteral                  shift and go to state 111

state 563

    (240) delays -> DELAY LPAREN expression RPAREN .

    ID              reduce using rule 240 (delays -> DELAY LPAREN expression RPAREN .)
    LBRACE          reduce using rule 240 (delays -> DELAY LPAREN expression RPAREN .)
    MINUS           reduce using rule 240 (delays -> DELAY LPAREN expression RPAREN .)
    PLUS            reduce using rule 240 (delays -> DELAY LPAREN expression RPAREN .)
    LNOT            reduce using rule 240 (delays -> DELAY LPAREN expression RPAREN .)
    NOT             reduce using rule 240 (delays -> DELAY LPAREN expression RPAREN .)
    AND             reduce using rule 240 (delays -> DELAY LPAREN expression RPAREN .)
    NAND            reduce using rule 240 (delays -> DELAY LPAREN expression RPAREN .)
    NOR             reduce using rule 240 (delays -> DELAY LPAREN expression RPAREN .)
    OR              reduce using rule 240 (delays -> DELAY LPAREN expression RPAREN .)
    XOR             reduce using rule 240 (delays -> DELAY LPAREN expression RPAREN .)
    XNOR            reduce using rule 240 (delays -> DELAY LPAREN expression RPAREN .)
    LPAREN          reduce using rule 240 (delays -> DELAY LPAREN expression RPAREN .)
    DOLLER          reduce using rule 240 (delays -> DELAY LPAREN expression RPAREN .)
    INTNUMBER_DEC   reduce using rule 240 (delays -> DELAY LPAREN expression RPAREN .)
    SIGNED_INTNUMBER_DEC reduce using rule 240 (delays -> DELAY LPAREN expression RPAREN .)
    INTNUMBER_BIN   reduce using rule 240 (delays -> DELAY LPAREN expression RPAREN .)
    SIGNED_INTNUMBER_BIN reduce using rule 240 (delays -> DELAY LPAREN expression RPAREN .)
    INTNUMBER_OCT   reduce using rule 240 (delays -> DELAY LPAREN expression RPAREN .)
    SIGNED_INTNUMBER_OCT reduce using rule 240 (delays -> DELAY LPAREN expression RPAREN .)
    INTNUMBER_HEX   reduce using rule 240 (delays -> DELAY LPAREN expression RPAREN .)
    SIGNED_INTNUMBER_HEX reduce using rule 240 (delays -> DELAY LPAREN expression RPAREN .)
    FLOATNUMBER     reduce using rule 240 (delays -> DELAY LPAREN expression RPAREN .)
    STRING_LITERAL  reduce using rule 240 (delays -> DELAY LPAREN expression RPAREN .)
    IF              reduce using rule 240 (delays -> DELAY LPAREN expression RPAREN .)


state 564

    (184) pointer -> identifier LBRACKET expression . RBRACKET
    (140) expression -> expression . POWER expression
    (141) expression -> expression . TIMES expression
    (142) expression -> expression . DIVIDE expression
    (143) expression -> expression . MOD expression
    (144) expression -> expression . PLUS expression
    (145) expression -> expression . MINUS expression
    (146) expression -> expression . LSHIFT expression
    (147) expression -> expression . RSHIFT expression
    (148) expression -> expression . LSHIFTA expression
    (149) expression -> expression . RSHIFTA expression
    (150) expression -> expression . LT expression
    (151) expression -> expression . GT expression
    (152) expression -> expression . LE expression
    (153) expression -> expression . GE expression
    (154) expression -> expression . EQ expression
    (155) expression -> expression . NE expression
    (156) expression -> expression . EQL expression
    (157) expression -> expression . NEL expression
    (158) expression -> expression . AND expression
    (159) expression -> expression . XOR expression
    (160) expression -> expression . XNOR expression
    (161) expression -> expression . OR expression
    (162) expression -> expression . LAND expression
    (163) expression -> expression . LOR expression
    (164) expression -> expression . COND expression COLON expression

    RBRACKET        shift and go to state 542
    POWER           shift and go to state 236
    TIMES           shift and go to state 398
    DIVIDE          shift and go to state 237
    MOD             shift and go to state 238
    PLUS            shift and go to state 239
    MINUS           shift and go to state 240
    LSHIFT          shift and go to state 241
    RSHIFT          shift and go to state 242
    LSHIFTA         shift and go to state 243
    RSHIFTA         shift and go to state 244
    LT              shift and go to state 245
    GT              shift and go to state 246
    LE              shift and go to state 247
    GE              shift and go to state 248
    EQ              shift and go to state 249
    NE              shift and go to state 250
    EQL             shift and go to state 251
    NEL             shift and go to state 252
    AND             shift and go to state 253
    XOR             shift and go to state 254
    XNOR            shift and go to state 255
    OR              shift and go to state 256
    LAND            shift and go to state 257
    LOR             shift and go to state 258
    COND            shift and go to state 259


state 565

    (185) pointer -> pointer LBRACKET expression . RBRACKET
    (140) expression -> expression . POWER expression
    (141) expression -> expression . TIMES expression
    (142) expression -> expression . DIVIDE expression
    (143) expression -> expression . MOD expression
    (144) expression -> expression . PLUS expression
    (145) expression -> expression . MINUS expression
    (146) expression -> expression . LSHIFT expression
    (147) expression -> expression . RSHIFT expression
    (148) expression -> expression . LSHIFTA expression
    (149) expression -> expression . RSHIFTA expression
    (150) expression -> expression . LT expression
    (151) expression -> expression . GT expression
    (152) expression -> expression . LE expression
    (153) expression -> expression . GE expression
    (154) expression -> expression . EQ expression
    (155) expression -> expression . NE expression
    (156) expression -> expression . EQL expression
    (157) expression -> expression . NEL expression
    (158) expression -> expression . AND expression
    (159) expression -> expression . XOR expression
    (160) expression -> expression . XNOR expression
    (161) expression -> expression . OR expression
    (162) expression -> expression . LAND expression
    (163) expression -> expression . LOR expression
    (164) expression -> expression . COND expression COLON expression

    RBRACKET        shift and go to state 538
    POWER           shift and go to state 236
    TIMES           shift and go to state 398
    DIVIDE          shift and go to state 237
    MOD             shift and go to state 238
    PLUS            shift and go to state 239
    MINUS           shift and go to state 240
    LSHIFT          shift and go to state 241
    RSHIFT          shift and go to state 242
    LSHIFTA         shift and go to state 243
    RSHIFTA         shift and go to state 244
    LT              shift and go to state 245
    GT              shift and go to state 246
    LE              shift and go to state 247
    GE              shift and go to state 248
    EQ              shift and go to state 249
    NE              shift and go to state 250
    EQL             shift and go to state 251
    NEL             shift and go to state 252
    AND             shift and go to state 253
    XOR             shift and go to state 254
    XNOR            shift and go to state 255
    OR              shift and go to state 256
    LAND            shift and go to state 257
    LOR             shift and go to state 258
    COND            shift and go to state 259


state 566

    (99) parameterdecl -> PARAMETER SIGNED width param_substitution_list SEMICOLON .

    ENDMODULE       reduce using rule 99 (parameterdecl -> PARAMETER SIGNED width param_substitution_list SEMICOLON .)
    GENERATE        reduce using rule 99 (parameterdecl -> PARAMETER SIGNED width param_substitution_list SEMICOLON .)
    INTEGER         reduce using rule 99 (parameterdecl -> PARAMETER SIGNED width param_substitution_list SEMICOLON .)
    REAL            reduce using rule 99 (parameterdecl -> PARAMETER SIGNED width param_substitution_list SEMICOLON .)
    PARAMETER       reduce using rule 99 (parameterdecl -> PARAMETER SIGNED width param_substitution_list SEMICOLON .)
    LOCALPARAM      reduce using rule 99 (parameterdecl -> PARAMETER SIGNED width param_substitution_list SEMICOLON .)
    GENVAR          reduce using rule 99 (parameterdecl -> PARAMETER SIGNED width param_substitution_list SEMICOLON .)
    ASSIGN          reduce using rule 99 (parameterdecl -> PARAMETER SIGNED width param_substitution_list SEMICOLON .)
    ALWAYS          reduce using rule 99 (parameterdecl -> PARAMETER SIGNED width param_substitution_list SEMICOLON .)
    ALWAYS_FF       reduce using rule 99 (parameterdecl -> PARAMETER SIGNED width param_substitution_list SEMICOLON .)
    ALWAYS_COMB     reduce using rule 99 (parameterdecl -> PARAMETER SIGNED width param_substitution_list SEMICOLON .)
    INITIAL         reduce using rule 99 (parameterdecl -> PARAMETER SIGNED width param_substitution_list SEMICOLON .)
    ID              reduce using rule 99 (parameterdecl -> PARAMETER SIGNED width param_substitution_list SEMICOLON .)
    SENS_OR         reduce using rule 99 (parameterdecl -> PARAMETER SIGNED width param_substitution_list SEMICOLON .)
    FUNCTION        reduce using rule 99 (parameterdecl -> PARAMETER SIGNED width param_substitution_list SEMICOLON .)
    TASK            reduce using rule 99 (parameterdecl -> PARAMETER SIGNED width param_substitution_list SEMICOLON .)
    LPAREN          reduce using rule 99 (parameterdecl -> PARAMETER SIGNED width param_substitution_list SEMICOLON .)
    INPUT           reduce using rule 99 (parameterdecl -> PARAMETER SIGNED width param_substitution_list SEMICOLON .)
    OUTPUT          reduce using rule 99 (parameterdecl -> PARAMETER SIGNED width param_substitution_list SEMICOLON .)
    INOUT           reduce using rule 99 (parameterdecl -> PARAMETER SIGNED width param_substitution_list SEMICOLON .)
    TRI             reduce using rule 99 (parameterdecl -> PARAMETER SIGNED width param_substitution_list SEMICOLON .)
    REG             reduce using rule 99 (parameterdecl -> PARAMETER SIGNED width param_substitution_list SEMICOLON .)
    LOGIC           reduce using rule 99 (parameterdecl -> PARAMETER SIGNED width param_substitution_list SEMICOLON .)
    WIRE            reduce using rule 99 (parameterdecl -> PARAMETER SIGNED width param_substitution_list SEMICOLON .)
    SIGNED          reduce using rule 99 (parameterdecl -> PARAMETER SIGNED width param_substitution_list SEMICOLON .)
    SUPPLY0         reduce using rule 99 (parameterdecl -> PARAMETER SIGNED width param_substitution_list SEMICOLON .)
    SUPPLY1         reduce using rule 99 (parameterdecl -> PARAMETER SIGNED width param_substitution_list SEMICOLON .)
    ENDGENERATE     reduce using rule 99 (parameterdecl -> PARAMETER SIGNED width param_substitution_list SEMICOLON .)
    IF              reduce using rule 99 (parameterdecl -> PARAMETER SIGNED width param_substitution_list SEMICOLON .)
    FOR             reduce using rule 99 (parameterdecl -> PARAMETER SIGNED width param_substitution_list SEMICOLON .)
    END             reduce using rule 99 (parameterdecl -> PARAMETER SIGNED width param_substitution_list SEMICOLON .)
    CASE            reduce using rule 99 (parameterdecl -> PARAMETER SIGNED width param_substitution_list SEMICOLON .)
    CASEX           reduce using rule 99 (parameterdecl -> PARAMETER SIGNED width param_substitution_list SEMICOLON .)
    UNIQUE          reduce using rule 99 (parameterdecl -> PARAMETER SIGNED width param_substitution_list SEMICOLON .)
    WHILE           reduce using rule 99 (parameterdecl -> PARAMETER SIGNED width param_substitution_list SEMICOLON .)
    WAIT            reduce using rule 99 (parameterdecl -> PARAMETER SIGNED width param_substitution_list SEMICOLON .)
    FOREVER         reduce using rule 99 (parameterdecl -> PARAMETER SIGNED width param_substitution_list SEMICOLON .)
    BEGIN           reduce using rule 99 (parameterdecl -> PARAMETER SIGNED width param_substitution_list SEMICOLON .)
    FORK            reduce using rule 99 (parameterdecl -> PARAMETER SIGNED width param_substitution_list SEMICOLON .)
    DELAY           reduce using rule 99 (parameterdecl -> PARAMETER SIGNED width param_substitution_list SEMICOLON .)
    AT              reduce using rule 99 (parameterdecl -> PARAMETER SIGNED width param_substitution_list SEMICOLON .)
    DOLLER          reduce using rule 99 (parameterdecl -> PARAMETER SIGNED width param_substitution_list SEMICOLON .)
    DISABLE         reduce using rule 99 (parameterdecl -> PARAMETER SIGNED width param_substitution_list SEMICOLON .)
    LBRACE          reduce using rule 99 (parameterdecl -> PARAMETER SIGNED width param_substitution_list SEMICOLON .)
    SEMICOLON       reduce using rule 99 (parameterdecl -> PARAMETER SIGNED width param_substitution_list SEMICOLON .)
    ELSE            reduce using rule 99 (parameterdecl -> PARAMETER SIGNED width param_substitution_list SEMICOLON .)


state 567

    (104) localparamdecl -> LOCALPARAM SIGNED width param_substitution_list SEMICOLON .

    ENDMODULE       reduce using rule 104 (localparamdecl -> LOCALPARAM SIGNED width param_substitution_list SEMICOLON .)
    GENERATE        reduce using rule 104 (localparamdecl -> LOCALPARAM SIGNED width param_substitution_list SEMICOLON .)
    INTEGER         reduce using rule 104 (localparamdecl -> LOCALPARAM SIGNED width param_substitution_list SEMICOLON .)
    REAL            reduce using rule 104 (localparamdecl -> LOCALPARAM SIGNED width param_substitution_list SEMICOLON .)
    PARAMETER       reduce using rule 104 (localparamdecl -> LOCALPARAM SIGNED width param_substitution_list SEMICOLON .)
    LOCALPARAM      reduce using rule 104 (localparamdecl -> LOCALPARAM SIGNED width param_substitution_list SEMICOLON .)
    GENVAR          reduce using rule 104 (localparamdecl -> LOCALPARAM SIGNED width param_substitution_list SEMICOLON .)
    ASSIGN          reduce using rule 104 (localparamdecl -> LOCALPARAM SIGNED width param_substitution_list SEMICOLON .)
    ALWAYS          reduce using rule 104 (localparamdecl -> LOCALPARAM SIGNED width param_substitution_list SEMICOLON .)
    ALWAYS_FF       reduce using rule 104 (localparamdecl -> LOCALPARAM SIGNED width param_substitution_list SEMICOLON .)
    ALWAYS_COMB     reduce using rule 104 (localparamdecl -> LOCALPARAM SIGNED width param_substitution_list SEMICOLON .)
    INITIAL         reduce using rule 104 (localparamdecl -> LOCALPARAM SIGNED width param_substitution_list SEMICOLON .)
    ID              reduce using rule 104 (localparamdecl -> LOCALPARAM SIGNED width param_substitution_list SEMICOLON .)
    SENS_OR         reduce using rule 104 (localparamdecl -> LOCALPARAM SIGNED width param_substitution_list SEMICOLON .)
    FUNCTION        reduce using rule 104 (localparamdecl -> LOCALPARAM SIGNED width param_substitution_list SEMICOLON .)
    TASK            reduce using rule 104 (localparamdecl -> LOCALPARAM SIGNED width param_substitution_list SEMICOLON .)
    LPAREN          reduce using rule 104 (localparamdecl -> LOCALPARAM SIGNED width param_substitution_list SEMICOLON .)
    INPUT           reduce using rule 104 (localparamdecl -> LOCALPARAM SIGNED width param_substitution_list SEMICOLON .)
    OUTPUT          reduce using rule 104 (localparamdecl -> LOCALPARAM SIGNED width param_substitution_list SEMICOLON .)
    INOUT           reduce using rule 104 (localparamdecl -> LOCALPARAM SIGNED width param_substitution_list SEMICOLON .)
    TRI             reduce using rule 104 (localparamdecl -> LOCALPARAM SIGNED width param_substitution_list SEMICOLON .)
    REG             reduce using rule 104 (localparamdecl -> LOCALPARAM SIGNED width param_substitution_list SEMICOLON .)
    LOGIC           reduce using rule 104 (localparamdecl -> LOCALPARAM SIGNED width param_substitution_list SEMICOLON .)
    WIRE            reduce using rule 104 (localparamdecl -> LOCALPARAM SIGNED width param_substitution_list SEMICOLON .)
    SIGNED          reduce using rule 104 (localparamdecl -> LOCALPARAM SIGNED width param_substitution_list SEMICOLON .)
    SUPPLY0         reduce using rule 104 (localparamdecl -> LOCALPARAM SIGNED width param_substitution_list SEMICOLON .)
    SUPPLY1         reduce using rule 104 (localparamdecl -> LOCALPARAM SIGNED width param_substitution_list SEMICOLON .)
    ENDGENERATE     reduce using rule 104 (localparamdecl -> LOCALPARAM SIGNED width param_substitution_list SEMICOLON .)
    IF              reduce using rule 104 (localparamdecl -> LOCALPARAM SIGNED width param_substitution_list SEMICOLON .)
    FOR             reduce using rule 104 (localparamdecl -> LOCALPARAM SIGNED width param_substitution_list SEMICOLON .)
    END             reduce using rule 104 (localparamdecl -> LOCALPARAM SIGNED width param_substitution_list SEMICOLON .)
    CASE            reduce using rule 104 (localparamdecl -> LOCALPARAM SIGNED width param_substitution_list SEMICOLON .)
    CASEX           reduce using rule 104 (localparamdecl -> LOCALPARAM SIGNED width param_substitution_list SEMICOLON .)
    UNIQUE          reduce using rule 104 (localparamdecl -> LOCALPARAM SIGNED width param_substitution_list SEMICOLON .)
    WHILE           reduce using rule 104 (localparamdecl -> LOCALPARAM SIGNED width param_substitution_list SEMICOLON .)
    WAIT            reduce using rule 104 (localparamdecl -> LOCALPARAM SIGNED width param_substitution_list SEMICOLON .)
    FOREVER         reduce using rule 104 (localparamdecl -> LOCALPARAM SIGNED width param_substitution_list SEMICOLON .)
    BEGIN           reduce using rule 104 (localparamdecl -> LOCALPARAM SIGNED width param_substitution_list SEMICOLON .)
    FORK            reduce using rule 104 (localparamdecl -> LOCALPARAM SIGNED width param_substitution_list SEMICOLON .)
    DELAY           reduce using rule 104 (localparamdecl -> LOCALPARAM SIGNED width param_substitution_list SEMICOLON .)
    AT              reduce using rule 104 (localparamdecl -> LOCALPARAM SIGNED width param_substitution_list SEMICOLON .)
    DOLLER          reduce using rule 104 (localparamdecl -> LOCALPARAM SIGNED width param_substitution_list SEMICOLON .)
    DISABLE         reduce using rule 104 (localparamdecl -> LOCALPARAM SIGNED width param_substitution_list SEMICOLON .)
    LBRACE          reduce using rule 104 (localparamdecl -> LOCALPARAM SIGNED width param_substitution_list SEMICOLON .)
    SEMICOLON       reduce using rule 104 (localparamdecl -> LOCALPARAM SIGNED width param_substitution_list SEMICOLON .)
    ELSE            reduce using rule 104 (localparamdecl -> LOCALPARAM SIGNED width param_substitution_list SEMICOLON .)


state 568

    (109) assignment -> ASSIGN lvalue EQUALS rvalue SEMICOLON .

    ENDMODULE       reduce using rule 109 (assignment -> ASSIGN lvalue EQUALS rvalue SEMICOLON .)
    GENERATE        reduce using rule 109 (assignment -> ASSIGN lvalue EQUALS rvalue SEMICOLON .)
    INTEGER         reduce using rule 109 (assignment -> ASSIGN lvalue EQUALS rvalue SEMICOLON .)
    REAL            reduce using rule 109 (assignment -> ASSIGN lvalue EQUALS rvalue SEMICOLON .)
    PARAMETER       reduce using rule 109 (assignment -> ASSIGN lvalue EQUALS rvalue SEMICOLON .)
    LOCALPARAM      reduce using rule 109 (assignment -> ASSIGN lvalue EQUALS rvalue SEMICOLON .)
    GENVAR          reduce using rule 109 (assignment -> ASSIGN lvalue EQUALS rvalue SEMICOLON .)
    ASSIGN          reduce using rule 109 (assignment -> ASSIGN lvalue EQUALS rvalue SEMICOLON .)
    ALWAYS          reduce using rule 109 (assignment -> ASSIGN lvalue EQUALS rvalue SEMICOLON .)
    ALWAYS_FF       reduce using rule 109 (assignment -> ASSIGN lvalue EQUALS rvalue SEMICOLON .)
    ALWAYS_COMB     reduce using rule 109 (assignment -> ASSIGN lvalue EQUALS rvalue SEMICOLON .)
    INITIAL         reduce using rule 109 (assignment -> ASSIGN lvalue EQUALS rvalue SEMICOLON .)
    ID              reduce using rule 109 (assignment -> ASSIGN lvalue EQUALS rvalue SEMICOLON .)
    SENS_OR         reduce using rule 109 (assignment -> ASSIGN lvalue EQUALS rvalue SEMICOLON .)
    FUNCTION        reduce using rule 109 (assignment -> ASSIGN lvalue EQUALS rvalue SEMICOLON .)
    TASK            reduce using rule 109 (assignment -> ASSIGN lvalue EQUALS rvalue SEMICOLON .)
    LPAREN          reduce using rule 109 (assignment -> ASSIGN lvalue EQUALS rvalue SEMICOLON .)
    INPUT           reduce using rule 109 (assignment -> ASSIGN lvalue EQUALS rvalue SEMICOLON .)
    OUTPUT          reduce using rule 109 (assignment -> ASSIGN lvalue EQUALS rvalue SEMICOLON .)
    INOUT           reduce using rule 109 (assignment -> ASSIGN lvalue EQUALS rvalue SEMICOLON .)
    TRI             reduce using rule 109 (assignment -> ASSIGN lvalue EQUALS rvalue SEMICOLON .)
    REG             reduce using rule 109 (assignment -> ASSIGN lvalue EQUALS rvalue SEMICOLON .)
    LOGIC           reduce using rule 109 (assignment -> ASSIGN lvalue EQUALS rvalue SEMICOLON .)
    WIRE            reduce using rule 109 (assignment -> ASSIGN lvalue EQUALS rvalue SEMICOLON .)
    SIGNED          reduce using rule 109 (assignment -> ASSIGN lvalue EQUALS rvalue SEMICOLON .)
    SUPPLY0         reduce using rule 109 (assignment -> ASSIGN lvalue EQUALS rvalue SEMICOLON .)
    SUPPLY1         reduce using rule 109 (assignment -> ASSIGN lvalue EQUALS rvalue SEMICOLON .)
    ENDGENERATE     reduce using rule 109 (assignment -> ASSIGN lvalue EQUALS rvalue SEMICOLON .)
    IF              reduce using rule 109 (assignment -> ASSIGN lvalue EQUALS rvalue SEMICOLON .)
    FOR             reduce using rule 109 (assignment -> ASSIGN lvalue EQUALS rvalue SEMICOLON .)
    ELSE            reduce using rule 109 (assignment -> ASSIGN lvalue EQUALS rvalue SEMICOLON .)
    END             reduce using rule 109 (assignment -> ASSIGN lvalue EQUALS rvalue SEMICOLON .)


state 569

    (110) assignment -> ASSIGN delays lvalue EQUALS delays . rvalue SEMICOLON
    (129) rvalue -> . expression
    (130) expression -> . MINUS expression
    (131) expression -> . PLUS expression
    (132) expression -> . LNOT expression
    (133) expression -> . NOT expression
    (134) expression -> . AND expression
    (135) expression -> . NAND expression
    (136) expression -> . NOR expression
    (137) expression -> . OR expression
    (138) expression -> . XOR expression
    (139) expression -> . XNOR expression
    (140) expression -> . expression POWER expression
    (141) expression -> . expression TIMES expression
    (142) expression -> . expression DIVIDE expression
    (143) expression -> . expression MOD expression
    (144) expression -> . expression PLUS expression
    (145) expression -> . expression MINUS expression
    (146) expression -> . expression LSHIFT expression
    (147) expression -> . expression RSHIFT expression
    (148) expression -> . expression LSHIFTA expression
    (149) expression -> . expression RSHIFTA expression
    (150) expression -> . expression LT expression
    (151) expression -> . expression GT expression
    (152) expression -> . expression LE expression
    (153) expression -> . expression GE expression
    (154) expression -> . expression EQ expression
    (155) expression -> . expression NE expression
    (156) expression -> . expression EQL expression
    (157) expression -> . expression NEL expression
    (158) expression -> . expression AND expression
    (159) expression -> . expression XOR expression
    (160) expression -> . expression XNOR expression
    (161) expression -> . expression OR expression
    (162) expression -> . expression LAND expression
    (163) expression -> . expression LOR expression
    (164) expression -> . expression COND expression COLON expression
    (165) expression -> . LPAREN expression RPAREN
    (166) expression -> . concat
    (167) expression -> . repeat
    (168) expression -> . partselect
    (169) expression -> . pointer
    (170) expression -> . functioncall
    (171) expression -> . systemcall
    (172) expression -> . identifier
    (173) expression -> . const_expression
    (174) concat -> . LBRACE concatlist RBRACE
    (177) repeat -> . LBRACE expression concat RBRACE
    (178) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (179) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (180) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (181) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (182) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (183) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (184) pointer -> . identifier LBRACKET expression RBRACKET
    (185) pointer -> . pointer LBRACKET expression RBRACKET
    (373) functioncall -> . identifier LPAREN func_args RPAREN
    (351) systemcall -> . DOLLER ID
    (352) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (353) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (392) identifier -> . ID
    (393) identifier -> . scope ID
    (186) const_expression -> . intnumber
    (187) const_expression -> . floatnumber
    (188) const_expression -> . stringliteral
    (394) scope -> . identifier DOT
    (395) scope -> . pointer DOT
    (190) intnumber -> . INTNUMBER_DEC
    (191) intnumber -> . SIGNED_INTNUMBER_DEC
    (192) intnumber -> . INTNUMBER_BIN
    (193) intnumber -> . SIGNED_INTNUMBER_BIN
    (194) intnumber -> . INTNUMBER_OCT
    (195) intnumber -> . SIGNED_INTNUMBER_OCT
    (196) intnumber -> . INTNUMBER_HEX
    (197) intnumber -> . SIGNED_INTNUMBER_HEX
    (189) floatnumber -> . FLOATNUMBER
    (198) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 88
    PLUS            shift and go to state 89
    LNOT            shift and go to state 90
    NOT             shift and go to state 91
    AND             shift and go to state 92
    NAND            shift and go to state 93
    NOR             shift and go to state 94
    OR              shift and go to state 95
    XOR             shift and go to state 96
    XNOR            shift and go to state 97
    LPAREN          shift and go to state 85
    LBRACE          shift and go to state 106
    DOLLER          shift and go to state 107
    ID              shift and go to state 86
    INTNUMBER_DEC   shift and go to state 112
    SIGNED_INTNUMBER_DEC shift and go to state 113
    INTNUMBER_BIN   shift and go to state 114
    SIGNED_INTNUMBER_BIN shift and go to state 115
    INTNUMBER_OCT   shift and go to state 116
    SIGNED_INTNUMBER_OCT shift and go to state 117
    INTNUMBER_HEX   shift and go to state 118
    SIGNED_INTNUMBER_HEX shift and go to state 119
    FLOATNUMBER     shift and go to state 120
    STRING_LITERAL  shift and go to state 121

    rvalue                         shift and go to state 670
    expression                     shift and go to state 448
    concat                         shift and go to state 98
    repeat                         shift and go to state 99
    partselect                     shift and go to state 100
    pointer                        shift and go to state 101
    functioncall                   shift and go to state 102
    systemcall                     shift and go to state 103
    identifier                     shift and go to state 104
    const_expression               shift and go to state 105
    scope                          shift and go to state 108
    intnumber                      shift and go to state 109
    floatnumber                    shift and go to state 110
    stringliteral                  shift and go to state 111

state 570

    (114) lpartselect -> identifier LBRACKET expression COLON . expression RBRACKET
    (130) expression -> . MINUS expression
    (131) expression -> . PLUS expression
    (132) expression -> . LNOT expression
    (133) expression -> . NOT expression
    (134) expression -> . AND expression
    (135) expression -> . NAND expression
    (136) expression -> . NOR expression
    (137) expression -> . OR expression
    (138) expression -> . XOR expression
    (139) expression -> . XNOR expression
    (140) expression -> . expression POWER expression
    (141) expression -> . expression TIMES expression
    (142) expression -> . expression DIVIDE expression
    (143) expression -> . expression MOD expression
    (144) expression -> . expression PLUS expression
    (145) expression -> . expression MINUS expression
    (146) expression -> . expression LSHIFT expression
    (147) expression -> . expression RSHIFT expression
    (148) expression -> . expression LSHIFTA expression
    (149) expression -> . expression RSHIFTA expression
    (150) expression -> . expression LT expression
    (151) expression -> . expression GT expression
    (152) expression -> . expression LE expression
    (153) expression -> . expression GE expression
    (154) expression -> . expression EQ expression
    (155) expression -> . expression NE expression
    (156) expression -> . expression EQL expression
    (157) expression -> . expression NEL expression
    (158) expression -> . expression AND expression
    (159) expression -> . expression XOR expression
    (160) expression -> . expression XNOR expression
    (161) expression -> . expression OR expression
    (162) expression -> . expression LAND expression
    (163) expression -> . expression LOR expression
    (164) expression -> . expression COND expression COLON expression
    (165) expression -> . LPAREN expression RPAREN
    (166) expression -> . concat
    (167) expression -> . repeat
    (168) expression -> . partselect
    (169) expression -> . pointer
    (170) expression -> . functioncall
    (171) expression -> . systemcall
    (172) expression -> . identifier
    (173) expression -> . const_expression
    (174) concat -> . LBRACE concatlist RBRACE
    (177) repeat -> . LBRACE expression concat RBRACE
    (178) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (179) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (180) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (181) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (182) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (183) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (184) pointer -> . identifier LBRACKET expression RBRACKET
    (185) pointer -> . pointer LBRACKET expression RBRACKET
    (373) functioncall -> . identifier LPAREN func_args RPAREN
    (351) systemcall -> . DOLLER ID
    (352) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (353) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (392) identifier -> . ID
    (393) identifier -> . scope ID
    (186) const_expression -> . intnumber
    (187) const_expression -> . floatnumber
    (188) const_expression -> . stringliteral
    (394) scope -> . identifier DOT
    (395) scope -> . pointer DOT
    (190) intnumber -> . INTNUMBER_DEC
    (191) intnumber -> . SIGNED_INTNUMBER_DEC
    (192) intnumber -> . INTNUMBER_BIN
    (193) intnumber -> . SIGNED_INTNUMBER_BIN
    (194) intnumber -> . INTNUMBER_OCT
    (195) intnumber -> . SIGNED_INTNUMBER_OCT
    (196) intnumber -> . INTNUMBER_HEX
    (197) intnumber -> . SIGNED_INTNUMBER_HEX
    (189) floatnumber -> . FLOATNUMBER
    (198) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 88
    PLUS            shift and go to state 89
    LNOT            shift and go to state 90
    NOT             shift and go to state 91
    AND             shift and go to state 92
    NAND            shift and go to state 93
    NOR             shift and go to state 94
    OR              shift and go to state 95
    XOR             shift and go to state 96
    XNOR            shift and go to state 97
    LPAREN          shift and go to state 85
    LBRACE          shift and go to state 106
    DOLLER          shift and go to state 107
    ID              shift and go to state 86
    INTNUMBER_DEC   shift and go to state 112
    SIGNED_INTNUMBER_DEC shift and go to state 113
    INTNUMBER_BIN   shift and go to state 114
    SIGNED_INTNUMBER_BIN shift and go to state 115
    INTNUMBER_OCT   shift and go to state 116
    SIGNED_INTNUMBER_OCT shift and go to state 117
    INTNUMBER_HEX   shift and go to state 118
    SIGNED_INTNUMBER_HEX shift and go to state 119
    FLOATNUMBER     shift and go to state 120
    STRING_LITERAL  shift and go to state 121

    identifier                     shift and go to state 104
    expression                     shift and go to state 671
    concat                         shift and go to state 98
    repeat                         shift and go to state 99
    partselect                     shift and go to state 100
    pointer                        shift and go to state 101
    functioncall                   shift and go to state 102
    systemcall                     shift and go to state 103
    const_expression               shift and go to state 105
    scope                          shift and go to state 108
    intnumber                      shift and go to state 109
    floatnumber                    shift and go to state 110
    stringliteral                  shift and go to state 111

state 571

    (115) lpartselect -> identifier LBRACKET expression PLUSCOLON . expression RBRACKET
    (130) expression -> . MINUS expression
    (131) expression -> . PLUS expression
    (132) expression -> . LNOT expression
    (133) expression -> . NOT expression
    (134) expression -> . AND expression
    (135) expression -> . NAND expression
    (136) expression -> . NOR expression
    (137) expression -> . OR expression
    (138) expression -> . XOR expression
    (139) expression -> . XNOR expression
    (140) expression -> . expression POWER expression
    (141) expression -> . expression TIMES expression
    (142) expression -> . expression DIVIDE expression
    (143) expression -> . expression MOD expression
    (144) expression -> . expression PLUS expression
    (145) expression -> . expression MINUS expression
    (146) expression -> . expression LSHIFT expression
    (147) expression -> . expression RSHIFT expression
    (148) expression -> . expression LSHIFTA expression
    (149) expression -> . expression RSHIFTA expression
    (150) expression -> . expression LT expression
    (151) expression -> . expression GT expression
    (152) expression -> . expression LE expression
    (153) expression -> . expression GE expression
    (154) expression -> . expression EQ expression
    (155) expression -> . expression NE expression
    (156) expression -> . expression EQL expression
    (157) expression -> . expression NEL expression
    (158) expression -> . expression AND expression
    (159) expression -> . expression XOR expression
    (160) expression -> . expression XNOR expression
    (161) expression -> . expression OR expression
    (162) expression -> . expression LAND expression
    (163) expression -> . expression LOR expression
    (164) expression -> . expression COND expression COLON expression
    (165) expression -> . LPAREN expression RPAREN
    (166) expression -> . concat
    (167) expression -> . repeat
    (168) expression -> . partselect
    (169) expression -> . pointer
    (170) expression -> . functioncall
    (171) expression -> . systemcall
    (172) expression -> . identifier
    (173) expression -> . const_expression
    (174) concat -> . LBRACE concatlist RBRACE
    (177) repeat -> . LBRACE expression concat RBRACE
    (178) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (179) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (180) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (181) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (182) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (183) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (184) pointer -> . identifier LBRACKET expression RBRACKET
    (185) pointer -> . pointer LBRACKET expression RBRACKET
    (373) functioncall -> . identifier LPAREN func_args RPAREN
    (351) systemcall -> . DOLLER ID
    (352) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (353) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (392) identifier -> . ID
    (393) identifier -> . scope ID
    (186) const_expression -> . intnumber
    (187) const_expression -> . floatnumber
    (188) const_expression -> . stringliteral
    (394) scope -> . identifier DOT
    (395) scope -> . pointer DOT
    (190) intnumber -> . INTNUMBER_DEC
    (191) intnumber -> . SIGNED_INTNUMBER_DEC
    (192) intnumber -> . INTNUMBER_BIN
    (193) intnumber -> . SIGNED_INTNUMBER_BIN
    (194) intnumber -> . INTNUMBER_OCT
    (195) intnumber -> . SIGNED_INTNUMBER_OCT
    (196) intnumber -> . INTNUMBER_HEX
    (197) intnumber -> . SIGNED_INTNUMBER_HEX
    (189) floatnumber -> . FLOATNUMBER
    (198) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 88
    PLUS            shift and go to state 89
    LNOT            shift and go to state 90
    NOT             shift and go to state 91
    AND             shift and go to state 92
    NAND            shift and go to state 93
    NOR             shift and go to state 94
    OR              shift and go to state 95
    XOR             shift and go to state 96
    XNOR            shift and go to state 97
    LPAREN          shift and go to state 85
    LBRACE          shift and go to state 106
    DOLLER          shift and go to state 107
    ID              shift and go to state 86
    INTNUMBER_DEC   shift and go to state 112
    SIGNED_INTNUMBER_DEC shift and go to state 113
    INTNUMBER_BIN   shift and go to state 114
    SIGNED_INTNUMBER_BIN shift and go to state 115
    INTNUMBER_OCT   shift and go to state 116
    SIGNED_INTNUMBER_OCT shift and go to state 117
    INTNUMBER_HEX   shift and go to state 118
    SIGNED_INTNUMBER_HEX shift and go to state 119
    FLOATNUMBER     shift and go to state 120
    STRING_LITERAL  shift and go to state 121

    identifier                     shift and go to state 104
    expression                     shift and go to state 672
    concat                         shift and go to state 98
    repeat                         shift and go to state 99
    partselect                     shift and go to state 100
    pointer                        shift and go to state 101
    functioncall                   shift and go to state 102
    systemcall                     shift and go to state 103
    const_expression               shift and go to state 105
    scope                          shift and go to state 108
    intnumber                      shift and go to state 109
    floatnumber                    shift and go to state 110
    stringliteral                  shift and go to state 111

state 572

    (116) lpartselect -> identifier LBRACKET expression MINUSCOLON . expression RBRACKET
    (130) expression -> . MINUS expression
    (131) expression -> . PLUS expression
    (132) expression -> . LNOT expression
    (133) expression -> . NOT expression
    (134) expression -> . AND expression
    (135) expression -> . NAND expression
    (136) expression -> . NOR expression
    (137) expression -> . OR expression
    (138) expression -> . XOR expression
    (139) expression -> . XNOR expression
    (140) expression -> . expression POWER expression
    (141) expression -> . expression TIMES expression
    (142) expression -> . expression DIVIDE expression
    (143) expression -> . expression MOD expression
    (144) expression -> . expression PLUS expression
    (145) expression -> . expression MINUS expression
    (146) expression -> . expression LSHIFT expression
    (147) expression -> . expression RSHIFT expression
    (148) expression -> . expression LSHIFTA expression
    (149) expression -> . expression RSHIFTA expression
    (150) expression -> . expression LT expression
    (151) expression -> . expression GT expression
    (152) expression -> . expression LE expression
    (153) expression -> . expression GE expression
    (154) expression -> . expression EQ expression
    (155) expression -> . expression NE expression
    (156) expression -> . expression EQL expression
    (157) expression -> . expression NEL expression
    (158) expression -> . expression AND expression
    (159) expression -> . expression XOR expression
    (160) expression -> . expression XNOR expression
    (161) expression -> . expression OR expression
    (162) expression -> . expression LAND expression
    (163) expression -> . expression LOR expression
    (164) expression -> . expression COND expression COLON expression
    (165) expression -> . LPAREN expression RPAREN
    (166) expression -> . concat
    (167) expression -> . repeat
    (168) expression -> . partselect
    (169) expression -> . pointer
    (170) expression -> . functioncall
    (171) expression -> . systemcall
    (172) expression -> . identifier
    (173) expression -> . const_expression
    (174) concat -> . LBRACE concatlist RBRACE
    (177) repeat -> . LBRACE expression concat RBRACE
    (178) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (179) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (180) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (181) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (182) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (183) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (184) pointer -> . identifier LBRACKET expression RBRACKET
    (185) pointer -> . pointer LBRACKET expression RBRACKET
    (373) functioncall -> . identifier LPAREN func_args RPAREN
    (351) systemcall -> . DOLLER ID
    (352) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (353) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (392) identifier -> . ID
    (393) identifier -> . scope ID
    (186) const_expression -> . intnumber
    (187) const_expression -> . floatnumber
    (188) const_expression -> . stringliteral
    (394) scope -> . identifier DOT
    (395) scope -> . pointer DOT
    (190) intnumber -> . INTNUMBER_DEC
    (191) intnumber -> . SIGNED_INTNUMBER_DEC
    (192) intnumber -> . INTNUMBER_BIN
    (193) intnumber -> . SIGNED_INTNUMBER_BIN
    (194) intnumber -> . INTNUMBER_OCT
    (195) intnumber -> . SIGNED_INTNUMBER_OCT
    (196) intnumber -> . INTNUMBER_HEX
    (197) intnumber -> . SIGNED_INTNUMBER_HEX
    (189) floatnumber -> . FLOATNUMBER
    (198) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 88
    PLUS            shift and go to state 89
    LNOT            shift and go to state 90
    NOT             shift and go to state 91
    AND             shift and go to state 92
    NAND            shift and go to state 93
    NOR             shift and go to state 94
    OR              shift and go to state 95
    XOR             shift and go to state 96
    XNOR            shift and go to state 97
    LPAREN          shift and go to state 85
    LBRACE          shift and go to state 106
    DOLLER          shift and go to state 107
    ID              shift and go to state 86
    INTNUMBER_DEC   shift and go to state 112
    SIGNED_INTNUMBER_DEC shift and go to state 113
    INTNUMBER_BIN   shift and go to state 114
    SIGNED_INTNUMBER_BIN shift and go to state 115
    INTNUMBER_OCT   shift and go to state 116
    SIGNED_INTNUMBER_OCT shift and go to state 117
    INTNUMBER_HEX   shift and go to state 118
    SIGNED_INTNUMBER_HEX shift and go to state 119
    FLOATNUMBER     shift and go to state 120
    STRING_LITERAL  shift and go to state 121

    identifier                     shift and go to state 104
    expression                     shift and go to state 673
    concat                         shift and go to state 98
    repeat                         shift and go to state 99
    partselect                     shift and go to state 100
    pointer                        shift and go to state 101
    functioncall                   shift and go to state 102
    systemcall                     shift and go to state 103
    const_expression               shift and go to state 105
    scope                          shift and go to state 108
    intnumber                      shift and go to state 109
    floatnumber                    shift and go to state 110
    stringliteral                  shift and go to state 111

state 573

    (111) lpartselect -> pointer LBRACKET expression COLON . expression RBRACKET
    (130) expression -> . MINUS expression
    (131) expression -> . PLUS expression
    (132) expression -> . LNOT expression
    (133) expression -> . NOT expression
    (134) expression -> . AND expression
    (135) expression -> . NAND expression
    (136) expression -> . NOR expression
    (137) expression -> . OR expression
    (138) expression -> . XOR expression
    (139) expression -> . XNOR expression
    (140) expression -> . expression POWER expression
    (141) expression -> . expression TIMES expression
    (142) expression -> . expression DIVIDE expression
    (143) expression -> . expression MOD expression
    (144) expression -> . expression PLUS expression
    (145) expression -> . expression MINUS expression
    (146) expression -> . expression LSHIFT expression
    (147) expression -> . expression RSHIFT expression
    (148) expression -> . expression LSHIFTA expression
    (149) expression -> . expression RSHIFTA expression
    (150) expression -> . expression LT expression
    (151) expression -> . expression GT expression
    (152) expression -> . expression LE expression
    (153) expression -> . expression GE expression
    (154) expression -> . expression EQ expression
    (155) expression -> . expression NE expression
    (156) expression -> . expression EQL expression
    (157) expression -> . expression NEL expression
    (158) expression -> . expression AND expression
    (159) expression -> . expression XOR expression
    (160) expression -> . expression XNOR expression
    (161) expression -> . expression OR expression
    (162) expression -> . expression LAND expression
    (163) expression -> . expression LOR expression
    (164) expression -> . expression COND expression COLON expression
    (165) expression -> . LPAREN expression RPAREN
    (166) expression -> . concat
    (167) expression -> . repeat
    (168) expression -> . partselect
    (169) expression -> . pointer
    (170) expression -> . functioncall
    (171) expression -> . systemcall
    (172) expression -> . identifier
    (173) expression -> . const_expression
    (174) concat -> . LBRACE concatlist RBRACE
    (177) repeat -> . LBRACE expression concat RBRACE
    (178) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (179) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (180) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (181) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (182) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (183) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (184) pointer -> . identifier LBRACKET expression RBRACKET
    (185) pointer -> . pointer LBRACKET expression RBRACKET
    (373) functioncall -> . identifier LPAREN func_args RPAREN
    (351) systemcall -> . DOLLER ID
    (352) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (353) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (392) identifier -> . ID
    (393) identifier -> . scope ID
    (186) const_expression -> . intnumber
    (187) const_expression -> . floatnumber
    (188) const_expression -> . stringliteral
    (394) scope -> . identifier DOT
    (395) scope -> . pointer DOT
    (190) intnumber -> . INTNUMBER_DEC
    (191) intnumber -> . SIGNED_INTNUMBER_DEC
    (192) intnumber -> . INTNUMBER_BIN
    (193) intnumber -> . SIGNED_INTNUMBER_BIN
    (194) intnumber -> . INTNUMBER_OCT
    (195) intnumber -> . SIGNED_INTNUMBER_OCT
    (196) intnumber -> . INTNUMBER_HEX
    (197) intnumber -> . SIGNED_INTNUMBER_HEX
    (189) floatnumber -> . FLOATNUMBER
    (198) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 88
    PLUS            shift and go to state 89
    LNOT            shift and go to state 90
    NOT             shift and go to state 91
    AND             shift and go to state 92
    NAND            shift and go to state 93
    NOR             shift and go to state 94
    OR              shift and go to state 95
    XOR             shift and go to state 96
    XNOR            shift and go to state 97
    LPAREN          shift and go to state 85
    LBRACE          shift and go to state 106
    DOLLER          shift and go to state 107
    ID              shift and go to state 86
    INTNUMBER_DEC   shift and go to state 112
    SIGNED_INTNUMBER_DEC shift and go to state 113
    INTNUMBER_BIN   shift and go to state 114
    SIGNED_INTNUMBER_BIN shift and go to state 115
    INTNUMBER_OCT   shift and go to state 116
    SIGNED_INTNUMBER_OCT shift and go to state 117
    INTNUMBER_HEX   shift and go to state 118
    SIGNED_INTNUMBER_HEX shift and go to state 119
    FLOATNUMBER     shift and go to state 120
    STRING_LITERAL  shift and go to state 121

    pointer                        shift and go to state 101
    expression                     shift and go to state 674
    concat                         shift and go to state 98
    repeat                         shift and go to state 99
    partselect                     shift and go to state 100
    functioncall                   shift and go to state 102
    systemcall                     shift and go to state 103
    identifier                     shift and go to state 104
    const_expression               shift and go to state 105
    scope                          shift and go to state 108
    intnumber                      shift and go to state 109
    floatnumber                    shift and go to state 110
    stringliteral                  shift and go to state 111

state 574

    (112) lpartselect -> pointer LBRACKET expression PLUSCOLON . expression RBRACKET
    (130) expression -> . MINUS expression
    (131) expression -> . PLUS expression
    (132) expression -> . LNOT expression
    (133) expression -> . NOT expression
    (134) expression -> . AND expression
    (135) expression -> . NAND expression
    (136) expression -> . NOR expression
    (137) expression -> . OR expression
    (138) expression -> . XOR expression
    (139) expression -> . XNOR expression
    (140) expression -> . expression POWER expression
    (141) expression -> . expression TIMES expression
    (142) expression -> . expression DIVIDE expression
    (143) expression -> . expression MOD expression
    (144) expression -> . expression PLUS expression
    (145) expression -> . expression MINUS expression
    (146) expression -> . expression LSHIFT expression
    (147) expression -> . expression RSHIFT expression
    (148) expression -> . expression LSHIFTA expression
    (149) expression -> . expression RSHIFTA expression
    (150) expression -> . expression LT expression
    (151) expression -> . expression GT expression
    (152) expression -> . expression LE expression
    (153) expression -> . expression GE expression
    (154) expression -> . expression EQ expression
    (155) expression -> . expression NE expression
    (156) expression -> . expression EQL expression
    (157) expression -> . expression NEL expression
    (158) expression -> . expression AND expression
    (159) expression -> . expression XOR expression
    (160) expression -> . expression XNOR expression
    (161) expression -> . expression OR expression
    (162) expression -> . expression LAND expression
    (163) expression -> . expression LOR expression
    (164) expression -> . expression COND expression COLON expression
    (165) expression -> . LPAREN expression RPAREN
    (166) expression -> . concat
    (167) expression -> . repeat
    (168) expression -> . partselect
    (169) expression -> . pointer
    (170) expression -> . functioncall
    (171) expression -> . systemcall
    (172) expression -> . identifier
    (173) expression -> . const_expression
    (174) concat -> . LBRACE concatlist RBRACE
    (177) repeat -> . LBRACE expression concat RBRACE
    (178) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (179) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (180) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (181) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (182) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (183) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (184) pointer -> . identifier LBRACKET expression RBRACKET
    (185) pointer -> . pointer LBRACKET expression RBRACKET
    (373) functioncall -> . identifier LPAREN func_args RPAREN
    (351) systemcall -> . DOLLER ID
    (352) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (353) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (392) identifier -> . ID
    (393) identifier -> . scope ID
    (186) const_expression -> . intnumber
    (187) const_expression -> . floatnumber
    (188) const_expression -> . stringliteral
    (394) scope -> . identifier DOT
    (395) scope -> . pointer DOT
    (190) intnumber -> . INTNUMBER_DEC
    (191) intnumber -> . SIGNED_INTNUMBER_DEC
    (192) intnumber -> . INTNUMBER_BIN
    (193) intnumber -> . SIGNED_INTNUMBER_BIN
    (194) intnumber -> . INTNUMBER_OCT
    (195) intnumber -> . SIGNED_INTNUMBER_OCT
    (196) intnumber -> . INTNUMBER_HEX
    (197) intnumber -> . SIGNED_INTNUMBER_HEX
    (189) floatnumber -> . FLOATNUMBER
    (198) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 88
    PLUS            shift and go to state 89
    LNOT            shift and go to state 90
    NOT             shift and go to state 91
    AND             shift and go to state 92
    NAND            shift and go to state 93
    NOR             shift and go to state 94
    OR              shift and go to state 95
    XOR             shift and go to state 96
    XNOR            shift and go to state 97
    LPAREN          shift and go to state 85
    LBRACE          shift and go to state 106
    DOLLER          shift and go to state 107
    ID              shift and go to state 86
    INTNUMBER_DEC   shift and go to state 112
    SIGNED_INTNUMBER_DEC shift and go to state 113
    INTNUMBER_BIN   shift and go to state 114
    SIGNED_INTNUMBER_BIN shift and go to state 115
    INTNUMBER_OCT   shift and go to state 116
    SIGNED_INTNUMBER_OCT shift and go to state 117
    INTNUMBER_HEX   shift and go to state 118
    SIGNED_INTNUMBER_HEX shift and go to state 119
    FLOATNUMBER     shift and go to state 120
    STRING_LITERAL  shift and go to state 121

    pointer                        shift and go to state 101
    expression                     shift and go to state 675
    concat                         shift and go to state 98
    repeat                         shift and go to state 99
    partselect                     shift and go to state 100
    functioncall                   shift and go to state 102
    systemcall                     shift and go to state 103
    identifier                     shift and go to state 104
    const_expression               shift and go to state 105
    scope                          shift and go to state 108
    intnumber                      shift and go to state 109
    floatnumber                    shift and go to state 110
    stringliteral                  shift and go to state 111

state 575

    (113) lpartselect -> pointer LBRACKET expression MINUSCOLON . expression RBRACKET
    (130) expression -> . MINUS expression
    (131) expression -> . PLUS expression
    (132) expression -> . LNOT expression
    (133) expression -> . NOT expression
    (134) expression -> . AND expression
    (135) expression -> . NAND expression
    (136) expression -> . NOR expression
    (137) expression -> . OR expression
    (138) expression -> . XOR expression
    (139) expression -> . XNOR expression
    (140) expression -> . expression POWER expression
    (141) expression -> . expression TIMES expression
    (142) expression -> . expression DIVIDE expression
    (143) expression -> . expression MOD expression
    (144) expression -> . expression PLUS expression
    (145) expression -> . expression MINUS expression
    (146) expression -> . expression LSHIFT expression
    (147) expression -> . expression RSHIFT expression
    (148) expression -> . expression LSHIFTA expression
    (149) expression -> . expression RSHIFTA expression
    (150) expression -> . expression LT expression
    (151) expression -> . expression GT expression
    (152) expression -> . expression LE expression
    (153) expression -> . expression GE expression
    (154) expression -> . expression EQ expression
    (155) expression -> . expression NE expression
    (156) expression -> . expression EQL expression
    (157) expression -> . expression NEL expression
    (158) expression -> . expression AND expression
    (159) expression -> . expression XOR expression
    (160) expression -> . expression XNOR expression
    (161) expression -> . expression OR expression
    (162) expression -> . expression LAND expression
    (163) expression -> . expression LOR expression
    (164) expression -> . expression COND expression COLON expression
    (165) expression -> . LPAREN expression RPAREN
    (166) expression -> . concat
    (167) expression -> . repeat
    (168) expression -> . partselect
    (169) expression -> . pointer
    (170) expression -> . functioncall
    (171) expression -> . systemcall
    (172) expression -> . identifier
    (173) expression -> . const_expression
    (174) concat -> . LBRACE concatlist RBRACE
    (177) repeat -> . LBRACE expression concat RBRACE
    (178) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (179) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (180) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (181) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (182) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (183) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (184) pointer -> . identifier LBRACKET expression RBRACKET
    (185) pointer -> . pointer LBRACKET expression RBRACKET
    (373) functioncall -> . identifier LPAREN func_args RPAREN
    (351) systemcall -> . DOLLER ID
    (352) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (353) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (392) identifier -> . ID
    (393) identifier -> . scope ID
    (186) const_expression -> . intnumber
    (187) const_expression -> . floatnumber
    (188) const_expression -> . stringliteral
    (394) scope -> . identifier DOT
    (395) scope -> . pointer DOT
    (190) intnumber -> . INTNUMBER_DEC
    (191) intnumber -> . SIGNED_INTNUMBER_DEC
    (192) intnumber -> . INTNUMBER_BIN
    (193) intnumber -> . SIGNED_INTNUMBER_BIN
    (194) intnumber -> . INTNUMBER_OCT
    (195) intnumber -> . SIGNED_INTNUMBER_OCT
    (196) intnumber -> . INTNUMBER_HEX
    (197) intnumber -> . SIGNED_INTNUMBER_HEX
    (189) floatnumber -> . FLOATNUMBER
    (198) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 88
    PLUS            shift and go to state 89
    LNOT            shift and go to state 90
    NOT             shift and go to state 91
    AND             shift and go to state 92
    NAND            shift and go to state 93
    NOR             shift and go to state 94
    OR              shift and go to state 95
    XOR             shift and go to state 96
    XNOR            shift and go to state 97
    LPAREN          shift and go to state 85
    LBRACE          shift and go to state 106
    DOLLER          shift and go to state 107
    ID              shift and go to state 86
    INTNUMBER_DEC   shift and go to state 112
    SIGNED_INTNUMBER_DEC shift and go to state 113
    INTNUMBER_BIN   shift and go to state 114
    SIGNED_INTNUMBER_BIN shift and go to state 115
    INTNUMBER_OCT   shift and go to state 116
    SIGNED_INTNUMBER_OCT shift and go to state 117
    INTNUMBER_HEX   shift and go to state 118
    SIGNED_INTNUMBER_HEX shift and go to state 119
    FLOATNUMBER     shift and go to state 120
    STRING_LITERAL  shift and go to state 121

    pointer                        shift and go to state 101
    expression                     shift and go to state 676
    concat                         shift and go to state 98
    repeat                         shift and go to state 99
    partselect                     shift and go to state 100
    functioncall                   shift and go to state 102
    systemcall                     shift and go to state 103
    identifier                     shift and go to state 104
    const_expression               shift and go to state 105
    scope                          shift and go to state 108
    intnumber                      shift and go to state 109
    floatnumber                    shift and go to state 110
    stringliteral                  shift and go to state 111

state 576

    (119) lconcatlist -> lconcatlist COMMA lconcat_one .

    RBRACE          reduce using rule 119 (lconcatlist -> lconcatlist COMMA lconcat_one .)
    COMMA           reduce using rule 119 (lconcatlist -> lconcatlist COMMA lconcat_one .)


state 577

    (202) senslist -> AT LPAREN edgesigs RPAREN .

    IF              reduce using rule 202 (senslist -> AT LPAREN edgesigs RPAREN .)
    CASE            reduce using rule 202 (senslist -> AT LPAREN edgesigs RPAREN .)
    CASEX           reduce using rule 202 (senslist -> AT LPAREN edgesigs RPAREN .)
    UNIQUE          reduce using rule 202 (senslist -> AT LPAREN edgesigs RPAREN .)
    FOR             reduce using rule 202 (senslist -> AT LPAREN edgesigs RPAREN .)
    WHILE           reduce using rule 202 (senslist -> AT LPAREN edgesigs RPAREN .)
    WAIT            reduce using rule 202 (senslist -> AT LPAREN edgesigs RPAREN .)
    FOREVER         reduce using rule 202 (senslist -> AT LPAREN edgesigs RPAREN .)
    BEGIN           reduce using rule 202 (senslist -> AT LPAREN edgesigs RPAREN .)
    FORK            reduce using rule 202 (senslist -> AT LPAREN edgesigs RPAREN .)
    DELAY           reduce using rule 202 (senslist -> AT LPAREN edgesigs RPAREN .)
    AT              reduce using rule 202 (senslist -> AT LPAREN edgesigs RPAREN .)
    DOLLER          reduce using rule 202 (senslist -> AT LPAREN edgesigs RPAREN .)
    DISABLE         reduce using rule 202 (senslist -> AT LPAREN edgesigs RPAREN .)
    LBRACE          reduce using rule 202 (senslist -> AT LPAREN edgesigs RPAREN .)
    ID              reduce using rule 202 (senslist -> AT LPAREN edgesigs RPAREN .)
    SEMICOLON       reduce using rule 202 (senslist -> AT LPAREN edgesigs RPAREN .)


state 578

    (207) edgesigs -> edgesigs SENS_OR . edgesig
    (203) edgesig -> . POSEDGE edgesig_base
    (204) edgesig -> . NEGEDGE edgesig_base

    POSEDGE         shift and go to state 479
    NEGEDGE         shift and go to state 480

    edgesig                        shift and go to state 677

state 579

    (211) senslist -> AT LPAREN levelsigs RPAREN .

    IF              reduce using rule 211 (senslist -> AT LPAREN levelsigs RPAREN .)
    CASE            reduce using rule 211 (senslist -> AT LPAREN levelsigs RPAREN .)
    CASEX           reduce using rule 211 (senslist -> AT LPAREN levelsigs RPAREN .)
    UNIQUE          reduce using rule 211 (senslist -> AT LPAREN levelsigs RPAREN .)
    FOR             reduce using rule 211 (senslist -> AT LPAREN levelsigs RPAREN .)
    WHILE           reduce using rule 211 (senslist -> AT LPAREN levelsigs RPAREN .)
    WAIT            reduce using rule 211 (senslist -> AT LPAREN levelsigs RPAREN .)
    FOREVER         reduce using rule 211 (senslist -> AT LPAREN levelsigs RPAREN .)
    BEGIN           reduce using rule 211 (senslist -> AT LPAREN levelsigs RPAREN .)
    FORK            reduce using rule 211 (senslist -> AT LPAREN levelsigs RPAREN .)
    DELAY           reduce using rule 211 (senslist -> AT LPAREN levelsigs RPAREN .)
    AT              reduce using rule 211 (senslist -> AT LPAREN levelsigs RPAREN .)
    DOLLER          reduce using rule 211 (senslist -> AT LPAREN levelsigs RPAREN .)
    DISABLE         reduce using rule 211 (senslist -> AT LPAREN levelsigs RPAREN .)
    LBRACE          reduce using rule 211 (senslist -> AT LPAREN levelsigs RPAREN .)
    ID              reduce using rule 211 (senslist -> AT LPAREN levelsigs RPAREN .)
    SEMICOLON       reduce using rule 211 (senslist -> AT LPAREN levelsigs RPAREN .)


state 580

    (216) levelsigs -> levelsigs SENS_OR . levelsig
    (212) levelsig -> . levelsig_base
    (213) levelsig_base -> . identifier
    (214) levelsig_base -> . pointer
    (215) levelsig_base -> . partselect
    (392) identifier -> . ID
    (393) identifier -> . scope ID
    (184) pointer -> . identifier LBRACKET expression RBRACKET
    (185) pointer -> . pointer LBRACKET expression RBRACKET
    (178) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (179) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (180) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (181) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (182) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (183) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (394) scope -> . identifier DOT
    (395) scope -> . pointer DOT

    ID              shift and go to state 86

    levelsig                       shift and go to state 678
    levelsig_base                  shift and go to state 334
    identifier                     shift and go to state 335
    pointer                        shift and go to state 336
    partselect                     shift and go to state 337
    scope                          shift and go to state 108

state 581

    (217) levelsigs -> levelsigs COMMA . levelsig
    (212) levelsig -> . levelsig_base
    (213) levelsig_base -> . identifier
    (214) levelsig_base -> . pointer
    (215) levelsig_base -> . partselect
    (392) identifier -> . ID
    (393) identifier -> . scope ID
    (184) pointer -> . identifier LBRACKET expression RBRACKET
    (185) pointer -> . pointer LBRACKET expression RBRACKET
    (178) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (179) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (180) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (181) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (182) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (183) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (394) scope -> . identifier DOT
    (395) scope -> . pointer DOT

    ID              shift and go to state 86

    levelsig                       shift and go to state 679
    levelsig_base                  shift and go to state 334
    identifier                     shift and go to state 335
    pointer                        shift and go to state 336
    partselect                     shift and go to state 337
    scope                          shift and go to state 108

state 582

    (220) senslist -> AT LPAREN TIMES RPAREN .

    IF              reduce using rule 220 (senslist -> AT LPAREN TIMES RPAREN .)
    CASE            reduce using rule 220 (senslist -> AT LPAREN TIMES RPAREN .)
    CASEX           reduce using rule 220 (senslist -> AT LPAREN TIMES RPAREN .)
    UNIQUE          reduce using rule 220 (senslist -> AT LPAREN TIMES RPAREN .)
    FOR             reduce using rule 220 (senslist -> AT LPAREN TIMES RPAREN .)
    WHILE           reduce using rule 220 (senslist -> AT LPAREN TIMES RPAREN .)
    WAIT            reduce using rule 220 (senslist -> AT LPAREN TIMES RPAREN .)
    FOREVER         reduce using rule 220 (senslist -> AT LPAREN TIMES RPAREN .)
    BEGIN           reduce using rule 220 (senslist -> AT LPAREN TIMES RPAREN .)
    FORK            reduce using rule 220 (senslist -> AT LPAREN TIMES RPAREN .)
    DELAY           reduce using rule 220 (senslist -> AT LPAREN TIMES RPAREN .)
    AT              reduce using rule 220 (senslist -> AT LPAREN TIMES RPAREN .)
    DOLLER          reduce using rule 220 (senslist -> AT LPAREN TIMES RPAREN .)
    DISABLE         reduce using rule 220 (senslist -> AT LPAREN TIMES RPAREN .)
    LBRACE          reduce using rule 220 (senslist -> AT LPAREN TIMES RPAREN .)
    ID              reduce using rule 220 (senslist -> AT LPAREN TIMES RPAREN .)
    SEMICOLON       reduce using rule 220 (senslist -> AT LPAREN TIMES RPAREN .)


state 583

    (203) edgesig -> POSEDGE edgesig_base .

    RPAREN          reduce using rule 203 (edgesig -> POSEDGE edgesig_base .)
    SENS_OR         reduce using rule 203 (edgesig -> POSEDGE edgesig_base .)


state 584

    (205) edgesig_base -> identifier .
    (184) pointer -> identifier . LBRACKET expression RBRACKET
    (394) scope -> identifier . DOT

    RPAREN          reduce using rule 205 (edgesig_base -> identifier .)
    SENS_OR         reduce using rule 205 (edgesig_base -> identifier .)
    LBRACKET        shift and go to state 452
    DOT             shift and go to state 274


state 585

    (206) edgesig_base -> pointer .
    (185) pointer -> pointer . LBRACKET expression RBRACKET
    (395) scope -> pointer . DOT

    RPAREN          reduce using rule 206 (edgesig_base -> pointer .)
    SENS_OR         reduce using rule 206 (edgesig_base -> pointer .)
    LBRACKET        shift and go to state 453
    DOT             shift and go to state 271


state 586

    (204) edgesig -> NEGEDGE edgesig_base .

    RPAREN          reduce using rule 204 (edgesig -> NEGEDGE edgesig_base .)
    SENS_OR         reduce using rule 204 (edgesig -> NEGEDGE edgesig_base .)


state 587

    (184) pointer -> identifier LBRACKET expression . RBRACKET
    (178) partselect -> identifier LBRACKET expression . COLON expression RBRACKET
    (179) partselect -> identifier LBRACKET expression . PLUSCOLON expression RBRACKET
    (180) partselect -> identifier LBRACKET expression . MINUSCOLON expression RBRACKET
    (140) expression -> expression . POWER expression
    (141) expression -> expression . TIMES expression
    (142) expression -> expression . DIVIDE expression
    (143) expression -> expression . MOD expression
    (144) expression -> expression . PLUS expression
    (145) expression -> expression . MINUS expression
    (146) expression -> expression . LSHIFT expression
    (147) expression -> expression . RSHIFT expression
    (148) expression -> expression . LSHIFTA expression
    (149) expression -> expression . RSHIFTA expression
    (150) expression -> expression . LT expression
    (151) expression -> expression . GT expression
    (152) expression -> expression . LE expression
    (153) expression -> expression . GE expression
    (154) expression -> expression . EQ expression
    (155) expression -> expression . NE expression
    (156) expression -> expression . EQL expression
    (157) expression -> expression . NEL expression
    (158) expression -> expression . AND expression
    (159) expression -> expression . XOR expression
    (160) expression -> expression . XNOR expression
    (161) expression -> expression . OR expression
    (162) expression -> expression . LAND expression
    (163) expression -> expression . LOR expression
    (164) expression -> expression . COND expression COLON expression

    RBRACKET        shift and go to state 542
    COLON           shift and go to state 541
    PLUSCOLON       shift and go to state 543
    MINUSCOLON      shift and go to state 544
    POWER           shift and go to state 236
    TIMES           shift and go to state 398
    DIVIDE          shift and go to state 237
    MOD             shift and go to state 238
    PLUS            shift and go to state 239
    MINUS           shift and go to state 240
    LSHIFT          shift and go to state 241
    RSHIFT          shift and go to state 242
    LSHIFTA         shift and go to state 243
    RSHIFTA         shift and go to state 244
    LT              shift and go to state 245
    GT              shift and go to state 246
    LE              shift and go to state 247
    GE              shift and go to state 248
    EQ              shift and go to state 249
    NE              shift and go to state 250
    EQL             shift and go to state 251
    NEL             shift and go to state 252
    AND             shift and go to state 253
    XOR             shift and go to state 254
    XNOR            shift and go to state 255
    OR              shift and go to state 256
    LAND            shift and go to state 257
    LOR             shift and go to state 258
    COND            shift and go to state 259


state 588

    (185) pointer -> pointer LBRACKET expression . RBRACKET
    (181) partselect -> pointer LBRACKET expression . COLON expression RBRACKET
    (182) partselect -> pointer LBRACKET expression . PLUSCOLON expression RBRACKET
    (183) partselect -> pointer LBRACKET expression . MINUSCOLON expression RBRACKET
    (140) expression -> expression . POWER expression
    (141) expression -> expression . TIMES expression
    (142) expression -> expression . DIVIDE expression
    (143) expression -> expression . MOD expression
    (144) expression -> expression . PLUS expression
    (145) expression -> expression . MINUS expression
    (146) expression -> expression . LSHIFT expression
    (147) expression -> expression . RSHIFT expression
    (148) expression -> expression . LSHIFTA expression
    (149) expression -> expression . RSHIFTA expression
    (150) expression -> expression . LT expression
    (151) expression -> expression . GT expression
    (152) expression -> expression . LE expression
    (153) expression -> expression . GE expression
    (154) expression -> expression . EQ expression
    (155) expression -> expression . NE expression
    (156) expression -> expression . EQL expression
    (157) expression -> expression . NEL expression
    (158) expression -> expression . AND expression
    (159) expression -> expression . XOR expression
    (160) expression -> expression . XNOR expression
    (161) expression -> expression . OR expression
    (162) expression -> expression . LAND expression
    (163) expression -> expression . LOR expression
    (164) expression -> expression . COND expression COLON expression

    RBRACKET        shift and go to state 538
    COLON           shift and go to state 537
    PLUSCOLON       shift and go to state 539
    MINUSCOLON      shift and go to state 540
    POWER           shift and go to state 236
    TIMES           shift and go to state 398
    DIVIDE          shift and go to state 237
    MOD             shift and go to state 238
    PLUS            shift and go to state 239
    MINUS           shift and go to state 240
    LSHIFT          shift and go to state 241
    RSHIFT          shift and go to state 242
    LSHIFTA         shift and go to state 243
    RSHIFTA         shift and go to state 244
    LT              shift and go to state 245
    GT              shift and go to state 246
    LE              shift and go to state 247
    GE              shift and go to state 248
    EQ              shift and go to state 249
    NE              shift and go to state 250
    EQL             shift and go to state 251
    NEL             shift and go to state 252
    AND             shift and go to state 253
    XOR             shift and go to state 254
    XNOR            shift and go to state 255
    OR              shift and go to state 256
    LAND            shift and go to state 257
    LOR             shift and go to state 258
    COND            shift and go to state 259


state 589

    (262) if_statement -> IF LPAREN cond RPAREN . true_statement ELSE else_statement
    (263) if_statement -> IF LPAREN cond RPAREN . true_statement
    (268) true_statement -> . ifcontent_statement
    (267) ifcontent_statement -> . basic_statement
    (221) basic_statement -> . if_statement
    (222) basic_statement -> . case_statement
    (223) basic_statement -> . casex_statement
    (224) basic_statement -> . unique_case_statement
    (225) basic_statement -> . for_statement
    (226) basic_statement -> . while_statement
    (227) basic_statement -> . event_statement
    (228) basic_statement -> . wait_statement
    (229) basic_statement -> . forever_statement
    (230) basic_statement -> . block
    (231) basic_statement -> . namedblock
    (232) basic_statement -> . parallelblock
    (233) basic_statement -> . blocking_substitution
    (234) basic_statement -> . nonblocking_substitution
    (235) basic_statement -> . single_statement
    (262) if_statement -> . IF LPAREN cond RPAREN true_statement ELSE else_statement
    (263) if_statement -> . IF LPAREN cond RPAREN true_statement
    (264) if_statement -> . delays IF LPAREN cond RPAREN true_statement ELSE else_statement
    (265) if_statement -> . delays IF LPAREN cond RPAREN true_statement
    (280) case_statement -> . CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE
    (281) casex_statement -> . CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE
    (282) unique_case_statement -> . UNIQUE CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE
    (270) for_statement -> . FOR LPAREN forpre forcond forpost RPAREN forcontent_statement
    (278) while_statement -> . WHILE LPAREN cond RPAREN whilecontent_statement
    (292) event_statement -> . senslist SEMICOLON
    (293) wait_statement -> . WAIT LPAREN cond RPAREN waitcontent_statement
    (296) forever_statement -> . FOREVER basic_statement
    (245) block -> . BEGIN block_statements END
    (246) block -> . BEGIN END
    (250) namedblock -> . BEGIN COLON ID namedblock_statements END
    (251) namedblock -> . BEGIN COLON ID END
    (260) parallelblock -> . FORK block_statements JOIN
    (261) parallelblock -> . FORK JOIN
    (237) blocking_substitution -> . delays lvalue EQUALS delays rvalue SEMICOLON
    (239) nonblocking_substitution -> . delays lvalue LE delays rvalue SEMICOLON
    (397) single_statement -> . DELAY expression SEMICOLON
    (398) single_statement -> . systemcall SEMICOLON
    (399) single_statement -> . disable SEMICOLON
    (240) delays -> . DELAY LPAREN expression RPAREN
    (241) delays -> . DELAY identifier
    (242) delays -> . DELAY intnumber
    (243) delays -> . DELAY floatnumber
    (244) delays -> . empty
    (202) senslist -> . AT LPAREN edgesigs RPAREN
    (209) senslist -> . empty
    (210) senslist -> . AT levelsig
    (211) senslist -> . AT LPAREN levelsigs RPAREN
    (219) senslist -> . AT TIMES
    (220) senslist -> . AT LPAREN TIMES RPAREN
    (351) systemcall -> . DOLLER ID
    (352) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (353) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (396) disable -> . DISABLE ID
    (400) empty -> .

  ! shift/reduce conflict for IF resolved as shift
    IF              shift and go to state 192
    CASE            shift and go to state 194
    CASEX           shift and go to state 195
    UNIQUE          shift and go to state 196
    FOR             shift and go to state 197
    WHILE           shift and go to state 198
    WAIT            shift and go to state 200
    FOREVER         shift and go to state 201
    BEGIN           shift and go to state 202
    FORK            shift and go to state 203
    DELAY           shift and go to state 204
    AT              shift and go to state 171
    DOLLER          shift and go to state 107
    DISABLE         shift and go to state 208
    LBRACE          reduce using rule 400 (empty -> .)
    ID              reduce using rule 400 (empty -> .)
    SEMICOLON       reduce using rule 400 (empty -> .)

  ! IF              [ reduce using rule 400 (empty -> .) ]

    true_statement                 shift and go to state 680
    ifcontent_statement            shift and go to state 681
    basic_statement                shift and go to state 682
    if_statement                   shift and go to state 177
    case_statement                 shift and go to state 178
    casex_statement                shift and go to state 179
    unique_case_statement          shift and go to state 180
    for_statement                  shift and go to state 181
    while_statement                shift and go to state 182
    event_statement                shift and go to state 183
    wait_statement                 shift and go to state 184
    forever_statement              shift and go to state 185
    block                          shift and go to state 186
    namedblock                     shift and go to state 187
    parallelblock                  shift and go to state 188
    blocking_substitution          shift and go to state 189
    nonblocking_substitution       shift and go to state 190
    single_statement               shift and go to state 191
    delays                         shift and go to state 193
    senslist                       shift and go to state 199
    systemcall                     shift and go to state 205
    disable                        shift and go to state 206
    empty                          shift and go to state 207

state 590

    (264) if_statement -> delays IF LPAREN cond . RPAREN true_statement ELSE else_statement
    (265) if_statement -> delays IF LPAREN cond . RPAREN true_statement

    RPAREN          shift and go to state 683


state 591

    (237) blocking_substitution -> delays lvalue EQUALS delays . rvalue SEMICOLON
    (129) rvalue -> . expression
    (130) expression -> . MINUS expression
    (131) expression -> . PLUS expression
    (132) expression -> . LNOT expression
    (133) expression -> . NOT expression
    (134) expression -> . AND expression
    (135) expression -> . NAND expression
    (136) expression -> . NOR expression
    (137) expression -> . OR expression
    (138) expression -> . XOR expression
    (139) expression -> . XNOR expression
    (140) expression -> . expression POWER expression
    (141) expression -> . expression TIMES expression
    (142) expression -> . expression DIVIDE expression
    (143) expression -> . expression MOD expression
    (144) expression -> . expression PLUS expression
    (145) expression -> . expression MINUS expression
    (146) expression -> . expression LSHIFT expression
    (147) expression -> . expression RSHIFT expression
    (148) expression -> . expression LSHIFTA expression
    (149) expression -> . expression RSHIFTA expression
    (150) expression -> . expression LT expression
    (151) expression -> . expression GT expression
    (152) expression -> . expression LE expression
    (153) expression -> . expression GE expression
    (154) expression -> . expression EQ expression
    (155) expression -> . expression NE expression
    (156) expression -> . expression EQL expression
    (157) expression -> . expression NEL expression
    (158) expression -> . expression AND expression
    (159) expression -> . expression XOR expression
    (160) expression -> . expression XNOR expression
    (161) expression -> . expression OR expression
    (162) expression -> . expression LAND expression
    (163) expression -> . expression LOR expression
    (164) expression -> . expression COND expression COLON expression
    (165) expression -> . LPAREN expression RPAREN
    (166) expression -> . concat
    (167) expression -> . repeat
    (168) expression -> . partselect
    (169) expression -> . pointer
    (170) expression -> . functioncall
    (171) expression -> . systemcall
    (172) expression -> . identifier
    (173) expression -> . const_expression
    (174) concat -> . LBRACE concatlist RBRACE
    (177) repeat -> . LBRACE expression concat RBRACE
    (178) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (179) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (180) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (181) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (182) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (183) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (184) pointer -> . identifier LBRACKET expression RBRACKET
    (185) pointer -> . pointer LBRACKET expression RBRACKET
    (373) functioncall -> . identifier LPAREN func_args RPAREN
    (351) systemcall -> . DOLLER ID
    (352) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (353) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (392) identifier -> . ID
    (393) identifier -> . scope ID
    (186) const_expression -> . intnumber
    (187) const_expression -> . floatnumber
    (188) const_expression -> . stringliteral
    (394) scope -> . identifier DOT
    (395) scope -> . pointer DOT
    (190) intnumber -> . INTNUMBER_DEC
    (191) intnumber -> . SIGNED_INTNUMBER_DEC
    (192) intnumber -> . INTNUMBER_BIN
    (193) intnumber -> . SIGNED_INTNUMBER_BIN
    (194) intnumber -> . INTNUMBER_OCT
    (195) intnumber -> . SIGNED_INTNUMBER_OCT
    (196) intnumber -> . INTNUMBER_HEX
    (197) intnumber -> . SIGNED_INTNUMBER_HEX
    (189) floatnumber -> . FLOATNUMBER
    (198) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 88
    PLUS            shift and go to state 89
    LNOT            shift and go to state 90
    NOT             shift and go to state 91
    AND             shift and go to state 92
    NAND            shift and go to state 93
    NOR             shift and go to state 94
    OR              shift and go to state 95
    XOR             shift and go to state 96
    XNOR            shift and go to state 97
    LPAREN          shift and go to state 85
    LBRACE          shift and go to state 106
    DOLLER          shift and go to state 107
    ID              shift and go to state 86
    INTNUMBER_DEC   shift and go to state 112
    SIGNED_INTNUMBER_DEC shift and go to state 113
    INTNUMBER_BIN   shift and go to state 114
    SIGNED_INTNUMBER_BIN shift and go to state 115
    INTNUMBER_OCT   shift and go to state 116
    SIGNED_INTNUMBER_OCT shift and go to state 117
    INTNUMBER_HEX   shift and go to state 118
    SIGNED_INTNUMBER_HEX shift and go to state 119
    FLOATNUMBER     shift and go to state 120
    STRING_LITERAL  shift and go to state 121

    rvalue                         shift and go to state 684
    expression                     shift and go to state 448
    concat                         shift and go to state 98
    repeat                         shift and go to state 99
    partselect                     shift and go to state 100
    pointer                        shift and go to state 101
    functioncall                   shift and go to state 102
    systemcall                     shift and go to state 103
    identifier                     shift and go to state 104
    const_expression               shift and go to state 105
    scope                          shift and go to state 108
    intnumber                      shift and go to state 109
    floatnumber                    shift and go to state 110
    stringliteral                  shift and go to state 111

state 592

    (239) nonblocking_substitution -> delays lvalue LE delays . rvalue SEMICOLON
    (129) rvalue -> . expression
    (130) expression -> . MINUS expression
    (131) expression -> . PLUS expression
    (132) expression -> . LNOT expression
    (133) expression -> . NOT expression
    (134) expression -> . AND expression
    (135) expression -> . NAND expression
    (136) expression -> . NOR expression
    (137) expression -> . OR expression
    (138) expression -> . XOR expression
    (139) expression -> . XNOR expression
    (140) expression -> . expression POWER expression
    (141) expression -> . expression TIMES expression
    (142) expression -> . expression DIVIDE expression
    (143) expression -> . expression MOD expression
    (144) expression -> . expression PLUS expression
    (145) expression -> . expression MINUS expression
    (146) expression -> . expression LSHIFT expression
    (147) expression -> . expression RSHIFT expression
    (148) expression -> . expression LSHIFTA expression
    (149) expression -> . expression RSHIFTA expression
    (150) expression -> . expression LT expression
    (151) expression -> . expression GT expression
    (152) expression -> . expression LE expression
    (153) expression -> . expression GE expression
    (154) expression -> . expression EQ expression
    (155) expression -> . expression NE expression
    (156) expression -> . expression EQL expression
    (157) expression -> . expression NEL expression
    (158) expression -> . expression AND expression
    (159) expression -> . expression XOR expression
    (160) expression -> . expression XNOR expression
    (161) expression -> . expression OR expression
    (162) expression -> . expression LAND expression
    (163) expression -> . expression LOR expression
    (164) expression -> . expression COND expression COLON expression
    (165) expression -> . LPAREN expression RPAREN
    (166) expression -> . concat
    (167) expression -> . repeat
    (168) expression -> . partselect
    (169) expression -> . pointer
    (170) expression -> . functioncall
    (171) expression -> . systemcall
    (172) expression -> . identifier
    (173) expression -> . const_expression
    (174) concat -> . LBRACE concatlist RBRACE
    (177) repeat -> . LBRACE expression concat RBRACE
    (178) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (179) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (180) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (181) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (182) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (183) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (184) pointer -> . identifier LBRACKET expression RBRACKET
    (185) pointer -> . pointer LBRACKET expression RBRACKET
    (373) functioncall -> . identifier LPAREN func_args RPAREN
    (351) systemcall -> . DOLLER ID
    (352) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (353) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (392) identifier -> . ID
    (393) identifier -> . scope ID
    (186) const_expression -> . intnumber
    (187) const_expression -> . floatnumber
    (188) const_expression -> . stringliteral
    (394) scope -> . identifier DOT
    (395) scope -> . pointer DOT
    (190) intnumber -> . INTNUMBER_DEC
    (191) intnumber -> . SIGNED_INTNUMBER_DEC
    (192) intnumber -> . INTNUMBER_BIN
    (193) intnumber -> . SIGNED_INTNUMBER_BIN
    (194) intnumber -> . INTNUMBER_OCT
    (195) intnumber -> . SIGNED_INTNUMBER_OCT
    (196) intnumber -> . INTNUMBER_HEX
    (197) intnumber -> . SIGNED_INTNUMBER_HEX
    (189) floatnumber -> . FLOATNUMBER
    (198) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 88
    PLUS            shift and go to state 89
    LNOT            shift and go to state 90
    NOT             shift and go to state 91
    AND             shift and go to state 92
    NAND            shift and go to state 93
    NOR             shift and go to state 94
    OR              shift and go to state 95
    XOR             shift and go to state 96
    XNOR            shift and go to state 97
    LPAREN          shift and go to state 85
    LBRACE          shift and go to state 106
    DOLLER          shift and go to state 107
    ID              shift and go to state 86
    INTNUMBER_DEC   shift and go to state 112
    SIGNED_INTNUMBER_DEC shift and go to state 113
    INTNUMBER_BIN   shift and go to state 114
    SIGNED_INTNUMBER_BIN shift and go to state 115
    INTNUMBER_OCT   shift and go to state 116
    SIGNED_INTNUMBER_OCT shift and go to state 117
    INTNUMBER_HEX   shift and go to state 118
    SIGNED_INTNUMBER_HEX shift and go to state 119
    FLOATNUMBER     shift and go to state 120
    STRING_LITERAL  shift and go to state 121

    rvalue                         shift and go to state 685
    expression                     shift and go to state 448
    concat                         shift and go to state 98
    repeat                         shift and go to state 99
    partselect                     shift and go to state 100
    pointer                        shift and go to state 101
    functioncall                   shift and go to state 102
    systemcall                     shift and go to state 103
    identifier                     shift and go to state 104
    const_expression               shift and go to state 105
    scope                          shift and go to state 108
    intnumber                      shift and go to state 109
    floatnumber                    shift and go to state 110
    stringliteral                  shift and go to state 111

state 593

    (280) case_statement -> CASE LPAREN case_comp RPAREN . casecontent_statements ENDCASE
    (284) casecontent_statements -> . casecontent_statements casecontent_statement
    (285) casecontent_statements -> . casecontent_statement
    (286) casecontent_statement -> . casecontent_condition COLON basic_statement
    (289) casecontent_statement -> . DEFAULT COLON basic_statement
    (287) casecontent_condition -> . casecontent_condition COMMA expression
    (288) casecontent_condition -> . expression
    (130) expression -> . MINUS expression
    (131) expression -> . PLUS expression
    (132) expression -> . LNOT expression
    (133) expression -> . NOT expression
    (134) expression -> . AND expression
    (135) expression -> . NAND expression
    (136) expression -> . NOR expression
    (137) expression -> . OR expression
    (138) expression -> . XOR expression
    (139) expression -> . XNOR expression
    (140) expression -> . expression POWER expression
    (141) expression -> . expression TIMES expression
    (142) expression -> . expression DIVIDE expression
    (143) expression -> . expression MOD expression
    (144) expression -> . expression PLUS expression
    (145) expression -> . expression MINUS expression
    (146) expression -> . expression LSHIFT expression
    (147) expression -> . expression RSHIFT expression
    (148) expression -> . expression LSHIFTA expression
    (149) expression -> . expression RSHIFTA expression
    (150) expression -> . expression LT expression
    (151) expression -> . expression GT expression
    (152) expression -> . expression LE expression
    (153) expression -> . expression GE expression
    (154) expression -> . expression EQ expression
    (155) expression -> . expression NE expression
    (156) expression -> . expression EQL expression
    (157) expression -> . expression NEL expression
    (158) expression -> . expression AND expression
    (159) expression -> . expression XOR expression
    (160) expression -> . expression XNOR expression
    (161) expression -> . expression OR expression
    (162) expression -> . expression LAND expression
    (163) expression -> . expression LOR expression
    (164) expression -> . expression COND expression COLON expression
    (165) expression -> . LPAREN expression RPAREN
    (166) expression -> . concat
    (167) expression -> . repeat
    (168) expression -> . partselect
    (169) expression -> . pointer
    (170) expression -> . functioncall
    (171) expression -> . systemcall
    (172) expression -> . identifier
    (173) expression -> . const_expression
    (174) concat -> . LBRACE concatlist RBRACE
    (177) repeat -> . LBRACE expression concat RBRACE
    (178) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (179) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (180) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (181) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (182) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (183) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (184) pointer -> . identifier LBRACKET expression RBRACKET
    (185) pointer -> . pointer LBRACKET expression RBRACKET
    (373) functioncall -> . identifier LPAREN func_args RPAREN
    (351) systemcall -> . DOLLER ID
    (352) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (353) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (392) identifier -> . ID
    (393) identifier -> . scope ID
    (186) const_expression -> . intnumber
    (187) const_expression -> . floatnumber
    (188) const_expression -> . stringliteral
    (394) scope -> . identifier DOT
    (395) scope -> . pointer DOT
    (190) intnumber -> . INTNUMBER_DEC
    (191) intnumber -> . SIGNED_INTNUMBER_DEC
    (192) intnumber -> . INTNUMBER_BIN
    (193) intnumber -> . SIGNED_INTNUMBER_BIN
    (194) intnumber -> . INTNUMBER_OCT
    (195) intnumber -> . SIGNED_INTNUMBER_OCT
    (196) intnumber -> . INTNUMBER_HEX
    (197) intnumber -> . SIGNED_INTNUMBER_HEX
    (189) floatnumber -> . FLOATNUMBER
    (198) stringliteral -> . STRING_LITERAL

    DEFAULT         shift and go to state 689
    MINUS           shift and go to state 88
    PLUS            shift and go to state 89
    LNOT            shift and go to state 90
    NOT             shift and go to state 91
    AND             shift and go to state 92
    NAND            shift and go to state 93
    NOR             shift and go to state 94
    OR              shift and go to state 95
    XOR             shift and go to state 96
    XNOR            shift and go to state 97
    LPAREN          shift and go to state 85
    LBRACE          shift and go to state 106
    DOLLER          shift and go to state 107
    ID              shift and go to state 86
    INTNUMBER_DEC   shift and go to state 112
    SIGNED_INTNUMBER_DEC shift and go to state 113
    INTNUMBER_BIN   shift and go to state 114
    SIGNED_INTNUMBER_BIN shift and go to state 115
    INTNUMBER_OCT   shift and go to state 116
    SIGNED_INTNUMBER_OCT shift and go to state 117
    INTNUMBER_HEX   shift and go to state 118
    SIGNED_INTNUMBER_HEX shift and go to state 119
    FLOATNUMBER     shift and go to state 120
    STRING_LITERAL  shift and go to state 121

    casecontent_statements         shift and go to state 686
    casecontent_statement          shift and go to state 687
    casecontent_condition          shift and go to state 688
    expression                     shift and go to state 690
    concat                         shift and go to state 98
    repeat                         shift and go to state 99
    partselect                     shift and go to state 100
    pointer                        shift and go to state 101
    functioncall                   shift and go to state 102
    systemcall                     shift and go to state 103
    identifier                     shift and go to state 104
    const_expression               shift and go to state 105
    scope                          shift and go to state 108
    intnumber                      shift and go to state 109
    floatnumber                    shift and go to state 110
    stringliteral                  shift and go to state 111

state 594

    (281) casex_statement -> CASEX LPAREN case_comp RPAREN . casecontent_statements ENDCASE
    (284) casecontent_statements -> . casecontent_statements casecontent_statement
    (285) casecontent_statements -> . casecontent_statement
    (286) casecontent_statement -> . casecontent_condition COLON basic_statement
    (289) casecontent_statement -> . DEFAULT COLON basic_statement
    (287) casecontent_condition -> . casecontent_condition COMMA expression
    (288) casecontent_condition -> . expression
    (130) expression -> . MINUS expression
    (131) expression -> . PLUS expression
    (132) expression -> . LNOT expression
    (133) expression -> . NOT expression
    (134) expression -> . AND expression
    (135) expression -> . NAND expression
    (136) expression -> . NOR expression
    (137) expression -> . OR expression
    (138) expression -> . XOR expression
    (139) expression -> . XNOR expression
    (140) expression -> . expression POWER expression
    (141) expression -> . expression TIMES expression
    (142) expression -> . expression DIVIDE expression
    (143) expression -> . expression MOD expression
    (144) expression -> . expression PLUS expression
    (145) expression -> . expression MINUS expression
    (146) expression -> . expression LSHIFT expression
    (147) expression -> . expression RSHIFT expression
    (148) expression -> . expression LSHIFTA expression
    (149) expression -> . expression RSHIFTA expression
    (150) expression -> . expression LT expression
    (151) expression -> . expression GT expression
    (152) expression -> . expression LE expression
    (153) expression -> . expression GE expression
    (154) expression -> . expression EQ expression
    (155) expression -> . expression NE expression
    (156) expression -> . expression EQL expression
    (157) expression -> . expression NEL expression
    (158) expression -> . expression AND expression
    (159) expression -> . expression XOR expression
    (160) expression -> . expression XNOR expression
    (161) expression -> . expression OR expression
    (162) expression -> . expression LAND expression
    (163) expression -> . expression LOR expression
    (164) expression -> . expression COND expression COLON expression
    (165) expression -> . LPAREN expression RPAREN
    (166) expression -> . concat
    (167) expression -> . repeat
    (168) expression -> . partselect
    (169) expression -> . pointer
    (170) expression -> . functioncall
    (171) expression -> . systemcall
    (172) expression -> . identifier
    (173) expression -> . const_expression
    (174) concat -> . LBRACE concatlist RBRACE
    (177) repeat -> . LBRACE expression concat RBRACE
    (178) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (179) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (180) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (181) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (182) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (183) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (184) pointer -> . identifier LBRACKET expression RBRACKET
    (185) pointer -> . pointer LBRACKET expression RBRACKET
    (373) functioncall -> . identifier LPAREN func_args RPAREN
    (351) systemcall -> . DOLLER ID
    (352) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (353) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (392) identifier -> . ID
    (393) identifier -> . scope ID
    (186) const_expression -> . intnumber
    (187) const_expression -> . floatnumber
    (188) const_expression -> . stringliteral
    (394) scope -> . identifier DOT
    (395) scope -> . pointer DOT
    (190) intnumber -> . INTNUMBER_DEC
    (191) intnumber -> . SIGNED_INTNUMBER_DEC
    (192) intnumber -> . INTNUMBER_BIN
    (193) intnumber -> . SIGNED_INTNUMBER_BIN
    (194) intnumber -> . INTNUMBER_OCT
    (195) intnumber -> . SIGNED_INTNUMBER_OCT
    (196) intnumber -> . INTNUMBER_HEX
    (197) intnumber -> . SIGNED_INTNUMBER_HEX
    (189) floatnumber -> . FLOATNUMBER
    (198) stringliteral -> . STRING_LITERAL

    DEFAULT         shift and go to state 689
    MINUS           shift and go to state 88
    PLUS            shift and go to state 89
    LNOT            shift and go to state 90
    NOT             shift and go to state 91
    AND             shift and go to state 92
    NAND            shift and go to state 93
    NOR             shift and go to state 94
    OR              shift and go to state 95
    XOR             shift and go to state 96
    XNOR            shift and go to state 97
    LPAREN          shift and go to state 85
    LBRACE          shift and go to state 106
    DOLLER          shift and go to state 107
    ID              shift and go to state 86
    INTNUMBER_DEC   shift and go to state 112
    SIGNED_INTNUMBER_DEC shift and go to state 113
    INTNUMBER_BIN   shift and go to state 114
    SIGNED_INTNUMBER_BIN shift and go to state 115
    INTNUMBER_OCT   shift and go to state 116
    SIGNED_INTNUMBER_OCT shift and go to state 117
    INTNUMBER_HEX   shift and go to state 118
    SIGNED_INTNUMBER_HEX shift and go to state 119
    FLOATNUMBER     shift and go to state 120
    STRING_LITERAL  shift and go to state 121

    casecontent_statements         shift and go to state 691
    casecontent_statement          shift and go to state 687
    casecontent_condition          shift and go to state 688
    expression                     shift and go to state 690
    concat                         shift and go to state 98
    repeat                         shift and go to state 99
    partselect                     shift and go to state 100
    pointer                        shift and go to state 101
    functioncall                   shift and go to state 102
    systemcall                     shift and go to state 103
    identifier                     shift and go to state 104
    const_expression               shift and go to state 105
    scope                          shift and go to state 108
    intnumber                      shift and go to state 109
    floatnumber                    shift and go to state 110
    stringliteral                  shift and go to state 111

state 595

    (282) unique_case_statement -> UNIQUE CASE LPAREN case_comp . RPAREN casecontent_statements ENDCASE

    RPAREN          shift and go to state 692


state 596

    (270) for_statement -> FOR LPAREN forpre forcond . forpost RPAREN forcontent_statement
    (275) forpost -> . blocking_substitution_base
    (276) forpost -> . empty
    (238) blocking_substitution_base -> . delays lvalue EQUALS delays rvalue
    (400) empty -> .
    (240) delays -> . DELAY LPAREN expression RPAREN
    (241) delays -> . DELAY identifier
    (242) delays -> . DELAY intnumber
    (243) delays -> . DELAY floatnumber
    (244) delays -> . empty

    RPAREN          reduce using rule 400 (empty -> .)
    LBRACE          reduce using rule 400 (empty -> .)
    ID              reduce using rule 400 (empty -> .)
    DELAY           shift and go to state 140

    forpost                        shift and go to state 693
    blocking_substitution_base     shift and go to state 663
    empty                          shift and go to state 664
    delays                         shift and go to state 665

state 597

    (278) while_statement -> WHILE LPAREN cond RPAREN . whilecontent_statement
    (279) whilecontent_statement -> . basic_statement
    (221) basic_statement -> . if_statement
    (222) basic_statement -> . case_statement
    (223) basic_statement -> . casex_statement
    (224) basic_statement -> . unique_case_statement
    (225) basic_statement -> . for_statement
    (226) basic_statement -> . while_statement
    (227) basic_statement -> . event_statement
    (228) basic_statement -> . wait_statement
    (229) basic_statement -> . forever_statement
    (230) basic_statement -> . block
    (231) basic_statement -> . namedblock
    (232) basic_statement -> . parallelblock
    (233) basic_statement -> . blocking_substitution
    (234) basic_statement -> . nonblocking_substitution
    (235) basic_statement -> . single_statement
    (262) if_statement -> . IF LPAREN cond RPAREN true_statement ELSE else_statement
    (263) if_statement -> . IF LPAREN cond RPAREN true_statement
    (264) if_statement -> . delays IF LPAREN cond RPAREN true_statement ELSE else_statement
    (265) if_statement -> . delays IF LPAREN cond RPAREN true_statement
    (280) case_statement -> . CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE
    (281) casex_statement -> . CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE
    (282) unique_case_statement -> . UNIQUE CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE
    (270) for_statement -> . FOR LPAREN forpre forcond forpost RPAREN forcontent_statement
    (278) while_statement -> . WHILE LPAREN cond RPAREN whilecontent_statement
    (292) event_statement -> . senslist SEMICOLON
    (293) wait_statement -> . WAIT LPAREN cond RPAREN waitcontent_statement
    (296) forever_statement -> . FOREVER basic_statement
    (245) block -> . BEGIN block_statements END
    (246) block -> . BEGIN END
    (250) namedblock -> . BEGIN COLON ID namedblock_statements END
    (251) namedblock -> . BEGIN COLON ID END
    (260) parallelblock -> . FORK block_statements JOIN
    (261) parallelblock -> . FORK JOIN
    (237) blocking_substitution -> . delays lvalue EQUALS delays rvalue SEMICOLON
    (239) nonblocking_substitution -> . delays lvalue LE delays rvalue SEMICOLON
    (397) single_statement -> . DELAY expression SEMICOLON
    (398) single_statement -> . systemcall SEMICOLON
    (399) single_statement -> . disable SEMICOLON
    (240) delays -> . DELAY LPAREN expression RPAREN
    (241) delays -> . DELAY identifier
    (242) delays -> . DELAY intnumber
    (243) delays -> . DELAY floatnumber
    (244) delays -> . empty
    (202) senslist -> . AT LPAREN edgesigs RPAREN
    (209) senslist -> . empty
    (210) senslist -> . AT levelsig
    (211) senslist -> . AT LPAREN levelsigs RPAREN
    (219) senslist -> . AT TIMES
    (220) senslist -> . AT LPAREN TIMES RPAREN
    (351) systemcall -> . DOLLER ID
    (352) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (353) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (396) disable -> . DISABLE ID
    (400) empty -> .

  ! shift/reduce conflict for IF resolved as shift
    IF              shift and go to state 192
    CASE            shift and go to state 194
    CASEX           shift and go to state 195
    UNIQUE          shift and go to state 196
    FOR             shift and go to state 197
    WHILE           shift and go to state 198
    WAIT            shift and go to state 200
    FOREVER         shift and go to state 201
    BEGIN           shift and go to state 202
    FORK            shift and go to state 203
    DELAY           shift and go to state 204
    AT              shift and go to state 171
    DOLLER          shift and go to state 107
    DISABLE         shift and go to state 208
    LBRACE          reduce using rule 400 (empty -> .)
    ID              reduce using rule 400 (empty -> .)
    SEMICOLON       reduce using rule 400 (empty -> .)

  ! IF              [ reduce using rule 400 (empty -> .) ]

    whilecontent_statement         shift and go to state 694
    basic_statement                shift and go to state 695
    if_statement                   shift and go to state 177
    case_statement                 shift and go to state 178
    casex_statement                shift and go to state 179
    unique_case_statement          shift and go to state 180
    for_statement                  shift and go to state 181
    while_statement                shift and go to state 182
    event_statement                shift and go to state 183
    wait_statement                 shift and go to state 184
    forever_statement              shift and go to state 185
    block                          shift and go to state 186
    namedblock                     shift and go to state 187
    parallelblock                  shift and go to state 188
    blocking_substitution          shift and go to state 189
    nonblocking_substitution       shift and go to state 190
    single_statement               shift and go to state 191
    delays                         shift and go to state 193
    senslist                       shift and go to state 199
    systemcall                     shift and go to state 205
    disable                        shift and go to state 206
    empty                          shift and go to state 207

state 598

    (293) wait_statement -> WAIT LPAREN cond RPAREN . waitcontent_statement
    (294) waitcontent_statement -> . basic_statement
    (295) waitcontent_statement -> . SEMICOLON
    (221) basic_statement -> . if_statement
    (222) basic_statement -> . case_statement
    (223) basic_statement -> . casex_statement
    (224) basic_statement -> . unique_case_statement
    (225) basic_statement -> . for_statement
    (226) basic_statement -> . while_statement
    (227) basic_statement -> . event_statement
    (228) basic_statement -> . wait_statement
    (229) basic_statement -> . forever_statement
    (230) basic_statement -> . block
    (231) basic_statement -> . namedblock
    (232) basic_statement -> . parallelblock
    (233) basic_statement -> . blocking_substitution
    (234) basic_statement -> . nonblocking_substitution
    (235) basic_statement -> . single_statement
    (262) if_statement -> . IF LPAREN cond RPAREN true_statement ELSE else_statement
    (263) if_statement -> . IF LPAREN cond RPAREN true_statement
    (264) if_statement -> . delays IF LPAREN cond RPAREN true_statement ELSE else_statement
    (265) if_statement -> . delays IF LPAREN cond RPAREN true_statement
    (280) case_statement -> . CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE
    (281) casex_statement -> . CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE
    (282) unique_case_statement -> . UNIQUE CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE
    (270) for_statement -> . FOR LPAREN forpre forcond forpost RPAREN forcontent_statement
    (278) while_statement -> . WHILE LPAREN cond RPAREN whilecontent_statement
    (292) event_statement -> . senslist SEMICOLON
    (293) wait_statement -> . WAIT LPAREN cond RPAREN waitcontent_statement
    (296) forever_statement -> . FOREVER basic_statement
    (245) block -> . BEGIN block_statements END
    (246) block -> . BEGIN END
    (250) namedblock -> . BEGIN COLON ID namedblock_statements END
    (251) namedblock -> . BEGIN COLON ID END
    (260) parallelblock -> . FORK block_statements JOIN
    (261) parallelblock -> . FORK JOIN
    (237) blocking_substitution -> . delays lvalue EQUALS delays rvalue SEMICOLON
    (239) nonblocking_substitution -> . delays lvalue LE delays rvalue SEMICOLON
    (397) single_statement -> . DELAY expression SEMICOLON
    (398) single_statement -> . systemcall SEMICOLON
    (399) single_statement -> . disable SEMICOLON
    (240) delays -> . DELAY LPAREN expression RPAREN
    (241) delays -> . DELAY identifier
    (242) delays -> . DELAY intnumber
    (243) delays -> . DELAY floatnumber
    (244) delays -> . empty
    (202) senslist -> . AT LPAREN edgesigs RPAREN
    (209) senslist -> . empty
    (210) senslist -> . AT levelsig
    (211) senslist -> . AT LPAREN levelsigs RPAREN
    (219) senslist -> . AT TIMES
    (220) senslist -> . AT LPAREN TIMES RPAREN
    (351) systemcall -> . DOLLER ID
    (352) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (353) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (396) disable -> . DISABLE ID
    (400) empty -> .

  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for SEMICOLON resolved as shift
    SEMICOLON       shift and go to state 698
    IF              shift and go to state 192
    CASE            shift and go to state 194
    CASEX           shift and go to state 195
    UNIQUE          shift and go to state 196
    FOR             shift and go to state 197
    WHILE           shift and go to state 198
    WAIT            shift and go to state 200
    FOREVER         shift and go to state 201
    BEGIN           shift and go to state 202
    FORK            shift and go to state 203
    DELAY           shift and go to state 204
    AT              shift and go to state 171
    DOLLER          shift and go to state 107
    DISABLE         shift and go to state 208
    LBRACE          reduce using rule 400 (empty -> .)
    ID              reduce using rule 400 (empty -> .)

  ! IF              [ reduce using rule 400 (empty -> .) ]
  ! SEMICOLON       [ reduce using rule 400 (empty -> .) ]

    waitcontent_statement          shift and go to state 696
    basic_statement                shift and go to state 697
    if_statement                   shift and go to state 177
    case_statement                 shift and go to state 178
    casex_statement                shift and go to state 179
    unique_case_statement          shift and go to state 180
    for_statement                  shift and go to state 181
    while_statement                shift and go to state 182
    event_statement                shift and go to state 183
    wait_statement                 shift and go to state 184
    forever_statement              shift and go to state 185
    block                          shift and go to state 186
    namedblock                     shift and go to state 187
    parallelblock                  shift and go to state 188
    blocking_substitution          shift and go to state 189
    nonblocking_substitution       shift and go to state 190
    single_statement               shift and go to state 191
    delays                         shift and go to state 193
    senslist                       shift and go to state 199
    systemcall                     shift and go to state 205
    disable                        shift and go to state 206
    empty                          shift and go to state 207

state 599

    (250) namedblock -> BEGIN COLON ID namedblock_statements . END
    (252) namedblock_statements -> namedblock_statements . namedblock_statement
    (254) namedblock_statement -> . basic_statement
    (255) namedblock_statement -> . decl
    (256) namedblock_statement -> . integerdecl
    (257) namedblock_statement -> . realdecl
    (258) namedblock_statement -> . parameterdecl
    (259) namedblock_statement -> . localparamdecl
    (221) basic_statement -> . if_statement
    (222) basic_statement -> . case_statement
    (223) basic_statement -> . casex_statement
    (224) basic_statement -> . unique_case_statement
    (225) basic_statement -> . for_statement
    (226) basic_statement -> . while_statement
    (227) basic_statement -> . event_statement
    (228) basic_statement -> . wait_statement
    (229) basic_statement -> . forever_statement
    (230) basic_statement -> . block
    (231) basic_statement -> . namedblock
    (232) basic_statement -> . parallelblock
    (233) basic_statement -> . blocking_substitution
    (234) basic_statement -> . nonblocking_substitution
    (235) basic_statement -> . single_statement
    (77) decl -> . sigtypes declnamelist SEMICOLON
    (78) decl -> . sigtypes width declnamelist SEMICOLON
    (87) integerdecl -> . INTEGER integernamelist SEMICOLON
    (88) integerdecl -> . INTEGER SIGNED integernamelist SEMICOLON
    (92) realdecl -> . REAL realnamelist SEMICOLON
    (96) parameterdecl -> . PARAMETER param_substitution_list SEMICOLON
    (97) parameterdecl -> . PARAMETER SIGNED param_substitution_list SEMICOLON
    (98) parameterdecl -> . PARAMETER width param_substitution_list SEMICOLON
    (99) parameterdecl -> . PARAMETER SIGNED width param_substitution_list SEMICOLON
    (100) parameterdecl -> . PARAMETER INTEGER param_substitution_list SEMICOLON
    (101) localparamdecl -> . LOCALPARAM param_substitution_list SEMICOLON
    (102) localparamdecl -> . LOCALPARAM SIGNED param_substitution_list SEMICOLON
    (103) localparamdecl -> . LOCALPARAM width param_substitution_list SEMICOLON
    (104) localparamdecl -> . LOCALPARAM SIGNED width param_substitution_list SEMICOLON
    (105) localparamdecl -> . LOCALPARAM INTEGER param_substitution_list SEMICOLON
    (262) if_statement -> . IF LPAREN cond RPAREN true_statement ELSE else_statement
    (263) if_statement -> . IF LPAREN cond RPAREN true_statement
    (264) if_statement -> . delays IF LPAREN cond RPAREN true_statement ELSE else_statement
    (265) if_statement -> . delays IF LPAREN cond RPAREN true_statement
    (280) case_statement -> . CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE
    (281) casex_statement -> . CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE
    (282) unique_case_statement -> . UNIQUE CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE
    (270) for_statement -> . FOR LPAREN forpre forcond forpost RPAREN forcontent_statement
    (278) while_statement -> . WHILE LPAREN cond RPAREN whilecontent_statement
    (292) event_statement -> . senslist SEMICOLON
    (293) wait_statement -> . WAIT LPAREN cond RPAREN waitcontent_statement
    (296) forever_statement -> . FOREVER basic_statement
    (245) block -> . BEGIN block_statements END
    (246) block -> . BEGIN END
    (250) namedblock -> . BEGIN COLON ID namedblock_statements END
    (251) namedblock -> . BEGIN COLON ID END
    (260) parallelblock -> . FORK block_statements JOIN
    (261) parallelblock -> . FORK JOIN
    (237) blocking_substitution -> . delays lvalue EQUALS delays rvalue SEMICOLON
    (239) nonblocking_substitution -> . delays lvalue LE delays rvalue SEMICOLON
    (397) single_statement -> . DELAY expression SEMICOLON
    (398) single_statement -> . systemcall SEMICOLON
    (399) single_statement -> . disable SEMICOLON
    (35) sigtypes -> . sigtypes sigtype
    (36) sigtypes -> . sigtype
    (240) delays -> . DELAY LPAREN expression RPAREN
    (241) delays -> . DELAY identifier
    (242) delays -> . DELAY intnumber
    (243) delays -> . DELAY floatnumber
    (244) delays -> . empty
    (202) senslist -> . AT LPAREN edgesigs RPAREN
    (209) senslist -> . empty
    (210) senslist -> . AT levelsig
    (211) senslist -> . AT LPAREN levelsigs RPAREN
    (219) senslist -> . AT TIMES
    (220) senslist -> . AT LPAREN TIMES RPAREN
    (351) systemcall -> . DOLLER ID
    (352) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (353) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (396) disable -> . DISABLE ID
    (37) sigtype -> . INPUT
    (38) sigtype -> . OUTPUT
    (39) sigtype -> . INOUT
    (40) sigtype -> . TRI
    (41) sigtype -> . REG
    (42) sigtype -> . LOGIC
    (43) sigtype -> . WIRE
    (44) sigtype -> . SIGNED
    (45) sigtype -> . SUPPLY0
    (46) sigtype -> . SUPPLY1
    (400) empty -> .

  ! shift/reduce conflict for IF resolved as shift
    END             shift and go to state 699
    INTEGER         shift and go to state 47
    REAL            shift and go to state 49
    PARAMETER       shift and go to state 50
    LOCALPARAM      shift and go to state 51
    IF              shift and go to state 192
    CASE            shift and go to state 194
    CASEX           shift and go to state 195
    UNIQUE          shift and go to state 196
    FOR             shift and go to state 197
    WHILE           shift and go to state 198
    WAIT            shift and go to state 200
    FOREVER         shift and go to state 201
    BEGIN           shift and go to state 202
    FORK            shift and go to state 203
    DELAY           shift and go to state 204
    AT              shift and go to state 171
    DOLLER          shift and go to state 107
    DISABLE         shift and go to state 208
    INPUT           shift and go to state 63
    OUTPUT          shift and go to state 64
    INOUT           shift and go to state 65
    TRI             shift and go to state 66
    REG             shift and go to state 67
    LOGIC           shift and go to state 68
    WIRE            shift and go to state 69
    SIGNED          shift and go to state 48
    SUPPLY0         shift and go to state 70
    SUPPLY1         shift and go to state 71
    LBRACE          reduce using rule 400 (empty -> .)
    ID              reduce using rule 400 (empty -> .)
    SEMICOLON       reduce using rule 400 (empty -> .)

  ! IF              [ reduce using rule 400 (empty -> .) ]

    namedblock_statement           shift and go to state 700
    basic_statement                shift and go to state 602
    decl                           shift and go to state 603
    integerdecl                    shift and go to state 604
    realdecl                       shift and go to state 605
    parameterdecl                  shift and go to state 606
    localparamdecl                 shift and go to state 607
    if_statement                   shift and go to state 177
    case_statement                 shift and go to state 178
    casex_statement                shift and go to state 179
    unique_case_statement          shift and go to state 180
    for_statement                  shift and go to state 181
    while_statement                shift and go to state 182
    event_statement                shift and go to state 183
    wait_statement                 shift and go to state 184
    forever_statement              shift and go to state 185
    block                          shift and go to state 186
    namedblock                     shift and go to state 187
    parallelblock                  shift and go to state 188
    blocking_substitution          shift and go to state 189
    nonblocking_substitution       shift and go to state 190
    single_statement               shift and go to state 191
    sigtypes                       shift and go to state 523
    delays                         shift and go to state 193
    senslist                       shift and go to state 199
    systemcall                     shift and go to state 205
    disable                        shift and go to state 206
    sigtype                        shift and go to state 62
    empty                          shift and go to state 207

state 600

    (251) namedblock -> BEGIN COLON ID END .

    ENDMODULE       reduce using rule 251 (namedblock -> BEGIN COLON ID END .)
    GENERATE        reduce using rule 251 (namedblock -> BEGIN COLON ID END .)
    INTEGER         reduce using rule 251 (namedblock -> BEGIN COLON ID END .)
    REAL            reduce using rule 251 (namedblock -> BEGIN COLON ID END .)
    PARAMETER       reduce using rule 251 (namedblock -> BEGIN COLON ID END .)
    LOCALPARAM      reduce using rule 251 (namedblock -> BEGIN COLON ID END .)
    GENVAR          reduce using rule 251 (namedblock -> BEGIN COLON ID END .)
    ASSIGN          reduce using rule 251 (namedblock -> BEGIN COLON ID END .)
    ALWAYS          reduce using rule 251 (namedblock -> BEGIN COLON ID END .)
    ALWAYS_FF       reduce using rule 251 (namedblock -> BEGIN COLON ID END .)
    ALWAYS_COMB     reduce using rule 251 (namedblock -> BEGIN COLON ID END .)
    INITIAL         reduce using rule 251 (namedblock -> BEGIN COLON ID END .)
    ID              reduce using rule 251 (namedblock -> BEGIN COLON ID END .)
    SENS_OR         reduce using rule 251 (namedblock -> BEGIN COLON ID END .)
    FUNCTION        reduce using rule 251 (namedblock -> BEGIN COLON ID END .)
    TASK            reduce using rule 251 (namedblock -> BEGIN COLON ID END .)
    LPAREN          reduce using rule 251 (namedblock -> BEGIN COLON ID END .)
    INPUT           reduce using rule 251 (namedblock -> BEGIN COLON ID END .)
    OUTPUT          reduce using rule 251 (namedblock -> BEGIN COLON ID END .)
    INOUT           reduce using rule 251 (namedblock -> BEGIN COLON ID END .)
    TRI             reduce using rule 251 (namedblock -> BEGIN COLON ID END .)
    REG             reduce using rule 251 (namedblock -> BEGIN COLON ID END .)
    LOGIC           reduce using rule 251 (namedblock -> BEGIN COLON ID END .)
    WIRE            reduce using rule 251 (namedblock -> BEGIN COLON ID END .)
    SIGNED          reduce using rule 251 (namedblock -> BEGIN COLON ID END .)
    SUPPLY0         reduce using rule 251 (namedblock -> BEGIN COLON ID END .)
    SUPPLY1         reduce using rule 251 (namedblock -> BEGIN COLON ID END .)
    ENDGENERATE     reduce using rule 251 (namedblock -> BEGIN COLON ID END .)
    IF              reduce using rule 251 (namedblock -> BEGIN COLON ID END .)
    FOR             reduce using rule 251 (namedblock -> BEGIN COLON ID END .)
    ELSE            reduce using rule 251 (namedblock -> BEGIN COLON ID END .)
    END             reduce using rule 251 (namedblock -> BEGIN COLON ID END .)
    CASE            reduce using rule 251 (namedblock -> BEGIN COLON ID END .)
    CASEX           reduce using rule 251 (namedblock -> BEGIN COLON ID END .)
    UNIQUE          reduce using rule 251 (namedblock -> BEGIN COLON ID END .)
    WHILE           reduce using rule 251 (namedblock -> BEGIN COLON ID END .)
    WAIT            reduce using rule 251 (namedblock -> BEGIN COLON ID END .)
    FOREVER         reduce using rule 251 (namedblock -> BEGIN COLON ID END .)
    BEGIN           reduce using rule 251 (namedblock -> BEGIN COLON ID END .)
    FORK            reduce using rule 251 (namedblock -> BEGIN COLON ID END .)
    DELAY           reduce using rule 251 (namedblock -> BEGIN COLON ID END .)
    AT              reduce using rule 251 (namedblock -> BEGIN COLON ID END .)
    DOLLER          reduce using rule 251 (namedblock -> BEGIN COLON ID END .)
    DISABLE         reduce using rule 251 (namedblock -> BEGIN COLON ID END .)
    LBRACE          reduce using rule 251 (namedblock -> BEGIN COLON ID END .)
    SEMICOLON       reduce using rule 251 (namedblock -> BEGIN COLON ID END .)
    JOIN            reduce using rule 251 (namedblock -> BEGIN COLON ID END .)
    ENDFUNCTION     reduce using rule 251 (namedblock -> BEGIN COLON ID END .)
    ENDTASK         reduce using rule 251 (namedblock -> BEGIN COLON ID END .)
    ENDCASE         reduce using rule 251 (namedblock -> BEGIN COLON ID END .)
    DEFAULT         reduce using rule 251 (namedblock -> BEGIN COLON ID END .)
    MINUS           reduce using rule 251 (namedblock -> BEGIN COLON ID END .)
    PLUS            reduce using rule 251 (namedblock -> BEGIN COLON ID END .)
    LNOT            reduce using rule 251 (namedblock -> BEGIN COLON ID END .)
    NOT             reduce using rule 251 (namedblock -> BEGIN COLON ID END .)
    AND             reduce using rule 251 (namedblock -> BEGIN COLON ID END .)
    NAND            reduce using rule 251 (namedblock -> BEGIN COLON ID END .)
    NOR             reduce using rule 251 (namedblock -> BEGIN COLON ID END .)
    OR              reduce using rule 251 (namedblock -> BEGIN COLON ID END .)
    XOR             reduce using rule 251 (namedblock -> BEGIN COLON ID END .)
    XNOR            reduce using rule 251 (namedblock -> BEGIN COLON ID END .)
    INTNUMBER_DEC   reduce using rule 251 (namedblock -> BEGIN COLON ID END .)
    SIGNED_INTNUMBER_DEC reduce using rule 251 (namedblock -> BEGIN COLON ID END .)
    INTNUMBER_BIN   reduce using rule 251 (namedblock -> BEGIN COLON ID END .)
    SIGNED_INTNUMBER_BIN reduce using rule 251 (namedblock -> BEGIN COLON ID END .)
    INTNUMBER_OCT   reduce using rule 251 (namedblock -> BEGIN COLON ID END .)
    SIGNED_INTNUMBER_OCT reduce using rule 251 (namedblock -> BEGIN COLON ID END .)
    INTNUMBER_HEX   reduce using rule 251 (namedblock -> BEGIN COLON ID END .)
    SIGNED_INTNUMBER_HEX reduce using rule 251 (namedblock -> BEGIN COLON ID END .)
    FLOATNUMBER     reduce using rule 251 (namedblock -> BEGIN COLON ID END .)
    STRING_LITERAL  reduce using rule 251 (namedblock -> BEGIN COLON ID END .)


state 601

    (253) namedblock_statements -> namedblock_statement .

    END             reduce using rule 253 (namedblock_statements -> namedblock_statement .)
    INTEGER         reduce using rule 253 (namedblock_statements -> namedblock_statement .)
    REAL            reduce using rule 253 (namedblock_statements -> namedblock_statement .)
    PARAMETER       reduce using rule 253 (namedblock_statements -> namedblock_statement .)
    LOCALPARAM      reduce using rule 253 (namedblock_statements -> namedblock_statement .)
    IF              reduce using rule 253 (namedblock_statements -> namedblock_statement .)
    CASE            reduce using rule 253 (namedblock_statements -> namedblock_statement .)
    CASEX           reduce using rule 253 (namedblock_statements -> namedblock_statement .)
    UNIQUE          reduce using rule 253 (namedblock_statements -> namedblock_statement .)
    FOR             reduce using rule 253 (namedblock_statements -> namedblock_statement .)
    WHILE           reduce using rule 253 (namedblock_statements -> namedblock_statement .)
    WAIT            reduce using rule 253 (namedblock_statements -> namedblock_statement .)
    FOREVER         reduce using rule 253 (namedblock_statements -> namedblock_statement .)
    BEGIN           reduce using rule 253 (namedblock_statements -> namedblock_statement .)
    FORK            reduce using rule 253 (namedblock_statements -> namedblock_statement .)
    DELAY           reduce using rule 253 (namedblock_statements -> namedblock_statement .)
    AT              reduce using rule 253 (namedblock_statements -> namedblock_statement .)
    DOLLER          reduce using rule 253 (namedblock_statements -> namedblock_statement .)
    DISABLE         reduce using rule 253 (namedblock_statements -> namedblock_statement .)
    INPUT           reduce using rule 253 (namedblock_statements -> namedblock_statement .)
    OUTPUT          reduce using rule 253 (namedblock_statements -> namedblock_statement .)
    INOUT           reduce using rule 253 (namedblock_statements -> namedblock_statement .)
    TRI             reduce using rule 253 (namedblock_statements -> namedblock_statement .)
    REG             reduce using rule 253 (namedblock_statements -> namedblock_statement .)
    LOGIC           reduce using rule 253 (namedblock_statements -> namedblock_statement .)
    WIRE            reduce using rule 253 (namedblock_statements -> namedblock_statement .)
    SIGNED          reduce using rule 253 (namedblock_statements -> namedblock_statement .)
    SUPPLY0         reduce using rule 253 (namedblock_statements -> namedblock_statement .)
    SUPPLY1         reduce using rule 253 (namedblock_statements -> namedblock_statement .)
    LBRACE          reduce using rule 253 (namedblock_statements -> namedblock_statement .)
    ID              reduce using rule 253 (namedblock_statements -> namedblock_statement .)
    SEMICOLON       reduce using rule 253 (namedblock_statements -> namedblock_statement .)


state 602

    (254) namedblock_statement -> basic_statement .

    END             reduce using rule 254 (namedblock_statement -> basic_statement .)
    INTEGER         reduce using rule 254 (namedblock_statement -> basic_statement .)
    REAL            reduce using rule 254 (namedblock_statement -> basic_statement .)
    PARAMETER       reduce using rule 254 (namedblock_statement -> basic_statement .)
    LOCALPARAM      reduce using rule 254 (namedblock_statement -> basic_statement .)
    IF              reduce using rule 254 (namedblock_statement -> basic_statement .)
    CASE            reduce using rule 254 (namedblock_statement -> basic_statement .)
    CASEX           reduce using rule 254 (namedblock_statement -> basic_statement .)
    UNIQUE          reduce using rule 254 (namedblock_statement -> basic_statement .)
    FOR             reduce using rule 254 (namedblock_statement -> basic_statement .)
    WHILE           reduce using rule 254 (namedblock_statement -> basic_statement .)
    WAIT            reduce using rule 254 (namedblock_statement -> basic_statement .)
    FOREVER         reduce using rule 254 (namedblock_statement -> basic_statement .)
    BEGIN           reduce using rule 254 (namedblock_statement -> basic_statement .)
    FORK            reduce using rule 254 (namedblock_statement -> basic_statement .)
    DELAY           reduce using rule 254 (namedblock_statement -> basic_statement .)
    AT              reduce using rule 254 (namedblock_statement -> basic_statement .)
    DOLLER          reduce using rule 254 (namedblock_statement -> basic_statement .)
    DISABLE         reduce using rule 254 (namedblock_statement -> basic_statement .)
    INPUT           reduce using rule 254 (namedblock_statement -> basic_statement .)
    OUTPUT          reduce using rule 254 (namedblock_statement -> basic_statement .)
    INOUT           reduce using rule 254 (namedblock_statement -> basic_statement .)
    TRI             reduce using rule 254 (namedblock_statement -> basic_statement .)
    REG             reduce using rule 254 (namedblock_statement -> basic_statement .)
    LOGIC           reduce using rule 254 (namedblock_statement -> basic_statement .)
    WIRE            reduce using rule 254 (namedblock_statement -> basic_statement .)
    SIGNED          reduce using rule 254 (namedblock_statement -> basic_statement .)
    SUPPLY0         reduce using rule 254 (namedblock_statement -> basic_statement .)
    SUPPLY1         reduce using rule 254 (namedblock_statement -> basic_statement .)
    LBRACE          reduce using rule 254 (namedblock_statement -> basic_statement .)
    ID              reduce using rule 254 (namedblock_statement -> basic_statement .)
    SEMICOLON       reduce using rule 254 (namedblock_statement -> basic_statement .)


state 603

    (255) namedblock_statement -> decl .

    END             reduce using rule 255 (namedblock_statement -> decl .)
    INTEGER         reduce using rule 255 (namedblock_statement -> decl .)
    REAL            reduce using rule 255 (namedblock_statement -> decl .)
    PARAMETER       reduce using rule 255 (namedblock_statement -> decl .)
    LOCALPARAM      reduce using rule 255 (namedblock_statement -> decl .)
    IF              reduce using rule 255 (namedblock_statement -> decl .)
    CASE            reduce using rule 255 (namedblock_statement -> decl .)
    CASEX           reduce using rule 255 (namedblock_statement -> decl .)
    UNIQUE          reduce using rule 255 (namedblock_statement -> decl .)
    FOR             reduce using rule 255 (namedblock_statement -> decl .)
    WHILE           reduce using rule 255 (namedblock_statement -> decl .)
    WAIT            reduce using rule 255 (namedblock_statement -> decl .)
    FOREVER         reduce using rule 255 (namedblock_statement -> decl .)
    BEGIN           reduce using rule 255 (namedblock_statement -> decl .)
    FORK            reduce using rule 255 (namedblock_statement -> decl .)
    DELAY           reduce using rule 255 (namedblock_statement -> decl .)
    AT              reduce using rule 255 (namedblock_statement -> decl .)
    DOLLER          reduce using rule 255 (namedblock_statement -> decl .)
    DISABLE         reduce using rule 255 (namedblock_statement -> decl .)
    INPUT           reduce using rule 255 (namedblock_statement -> decl .)
    OUTPUT          reduce using rule 255 (namedblock_statement -> decl .)
    INOUT           reduce using rule 255 (namedblock_statement -> decl .)
    TRI             reduce using rule 255 (namedblock_statement -> decl .)
    REG             reduce using rule 255 (namedblock_statement -> decl .)
    LOGIC           reduce using rule 255 (namedblock_statement -> decl .)
    WIRE            reduce using rule 255 (namedblock_statement -> decl .)
    SIGNED          reduce using rule 255 (namedblock_statement -> decl .)
    SUPPLY0         reduce using rule 255 (namedblock_statement -> decl .)
    SUPPLY1         reduce using rule 255 (namedblock_statement -> decl .)
    LBRACE          reduce using rule 255 (namedblock_statement -> decl .)
    ID              reduce using rule 255 (namedblock_statement -> decl .)
    SEMICOLON       reduce using rule 255 (namedblock_statement -> decl .)


state 604

    (256) namedblock_statement -> integerdecl .

    END             reduce using rule 256 (namedblock_statement -> integerdecl .)
    INTEGER         reduce using rule 256 (namedblock_statement -> integerdecl .)
    REAL            reduce using rule 256 (namedblock_statement -> integerdecl .)
    PARAMETER       reduce using rule 256 (namedblock_statement -> integerdecl .)
    LOCALPARAM      reduce using rule 256 (namedblock_statement -> integerdecl .)
    IF              reduce using rule 256 (namedblock_statement -> integerdecl .)
    CASE            reduce using rule 256 (namedblock_statement -> integerdecl .)
    CASEX           reduce using rule 256 (namedblock_statement -> integerdecl .)
    UNIQUE          reduce using rule 256 (namedblock_statement -> integerdecl .)
    FOR             reduce using rule 256 (namedblock_statement -> integerdecl .)
    WHILE           reduce using rule 256 (namedblock_statement -> integerdecl .)
    WAIT            reduce using rule 256 (namedblock_statement -> integerdecl .)
    FOREVER         reduce using rule 256 (namedblock_statement -> integerdecl .)
    BEGIN           reduce using rule 256 (namedblock_statement -> integerdecl .)
    FORK            reduce using rule 256 (namedblock_statement -> integerdecl .)
    DELAY           reduce using rule 256 (namedblock_statement -> integerdecl .)
    AT              reduce using rule 256 (namedblock_statement -> integerdecl .)
    DOLLER          reduce using rule 256 (namedblock_statement -> integerdecl .)
    DISABLE         reduce using rule 256 (namedblock_statement -> integerdecl .)
    INPUT           reduce using rule 256 (namedblock_statement -> integerdecl .)
    OUTPUT          reduce using rule 256 (namedblock_statement -> integerdecl .)
    INOUT           reduce using rule 256 (namedblock_statement -> integerdecl .)
    TRI             reduce using rule 256 (namedblock_statement -> integerdecl .)
    REG             reduce using rule 256 (namedblock_statement -> integerdecl .)
    LOGIC           reduce using rule 256 (namedblock_statement -> integerdecl .)
    WIRE            reduce using rule 256 (namedblock_statement -> integerdecl .)
    SIGNED          reduce using rule 256 (namedblock_statement -> integerdecl .)
    SUPPLY0         reduce using rule 256 (namedblock_statement -> integerdecl .)
    SUPPLY1         reduce using rule 256 (namedblock_statement -> integerdecl .)
    LBRACE          reduce using rule 256 (namedblock_statement -> integerdecl .)
    ID              reduce using rule 256 (namedblock_statement -> integerdecl .)
    SEMICOLON       reduce using rule 256 (namedblock_statement -> integerdecl .)


state 605

    (257) namedblock_statement -> realdecl .

    END             reduce using rule 257 (namedblock_statement -> realdecl .)
    INTEGER         reduce using rule 257 (namedblock_statement -> realdecl .)
    REAL            reduce using rule 257 (namedblock_statement -> realdecl .)
    PARAMETER       reduce using rule 257 (namedblock_statement -> realdecl .)
    LOCALPARAM      reduce using rule 257 (namedblock_statement -> realdecl .)
    IF              reduce using rule 257 (namedblock_statement -> realdecl .)
    CASE            reduce using rule 257 (namedblock_statement -> realdecl .)
    CASEX           reduce using rule 257 (namedblock_statement -> realdecl .)
    UNIQUE          reduce using rule 257 (namedblock_statement -> realdecl .)
    FOR             reduce using rule 257 (namedblock_statement -> realdecl .)
    WHILE           reduce using rule 257 (namedblock_statement -> realdecl .)
    WAIT            reduce using rule 257 (namedblock_statement -> realdecl .)
    FOREVER         reduce using rule 257 (namedblock_statement -> realdecl .)
    BEGIN           reduce using rule 257 (namedblock_statement -> realdecl .)
    FORK            reduce using rule 257 (namedblock_statement -> realdecl .)
    DELAY           reduce using rule 257 (namedblock_statement -> realdecl .)
    AT              reduce using rule 257 (namedblock_statement -> realdecl .)
    DOLLER          reduce using rule 257 (namedblock_statement -> realdecl .)
    DISABLE         reduce using rule 257 (namedblock_statement -> realdecl .)
    INPUT           reduce using rule 257 (namedblock_statement -> realdecl .)
    OUTPUT          reduce using rule 257 (namedblock_statement -> realdecl .)
    INOUT           reduce using rule 257 (namedblock_statement -> realdecl .)
    TRI             reduce using rule 257 (namedblock_statement -> realdecl .)
    REG             reduce using rule 257 (namedblock_statement -> realdecl .)
    LOGIC           reduce using rule 257 (namedblock_statement -> realdecl .)
    WIRE            reduce using rule 257 (namedblock_statement -> realdecl .)
    SIGNED          reduce using rule 257 (namedblock_statement -> realdecl .)
    SUPPLY0         reduce using rule 257 (namedblock_statement -> realdecl .)
    SUPPLY1         reduce using rule 257 (namedblock_statement -> realdecl .)
    LBRACE          reduce using rule 257 (namedblock_statement -> realdecl .)
    ID              reduce using rule 257 (namedblock_statement -> realdecl .)
    SEMICOLON       reduce using rule 257 (namedblock_statement -> realdecl .)


state 606

    (258) namedblock_statement -> parameterdecl .

    END             reduce using rule 258 (namedblock_statement -> parameterdecl .)
    INTEGER         reduce using rule 258 (namedblock_statement -> parameterdecl .)
    REAL            reduce using rule 258 (namedblock_statement -> parameterdecl .)
    PARAMETER       reduce using rule 258 (namedblock_statement -> parameterdecl .)
    LOCALPARAM      reduce using rule 258 (namedblock_statement -> parameterdecl .)
    IF              reduce using rule 258 (namedblock_statement -> parameterdecl .)
    CASE            reduce using rule 258 (namedblock_statement -> parameterdecl .)
    CASEX           reduce using rule 258 (namedblock_statement -> parameterdecl .)
    UNIQUE          reduce using rule 258 (namedblock_statement -> parameterdecl .)
    FOR             reduce using rule 258 (namedblock_statement -> parameterdecl .)
    WHILE           reduce using rule 258 (namedblock_statement -> parameterdecl .)
    WAIT            reduce using rule 258 (namedblock_statement -> parameterdecl .)
    FOREVER         reduce using rule 258 (namedblock_statement -> parameterdecl .)
    BEGIN           reduce using rule 258 (namedblock_statement -> parameterdecl .)
    FORK            reduce using rule 258 (namedblock_statement -> parameterdecl .)
    DELAY           reduce using rule 258 (namedblock_statement -> parameterdecl .)
    AT              reduce using rule 258 (namedblock_statement -> parameterdecl .)
    DOLLER          reduce using rule 258 (namedblock_statement -> parameterdecl .)
    DISABLE         reduce using rule 258 (namedblock_statement -> parameterdecl .)
    INPUT           reduce using rule 258 (namedblock_statement -> parameterdecl .)
    OUTPUT          reduce using rule 258 (namedblock_statement -> parameterdecl .)
    INOUT           reduce using rule 258 (namedblock_statement -> parameterdecl .)
    TRI             reduce using rule 258 (namedblock_statement -> parameterdecl .)
    REG             reduce using rule 258 (namedblock_statement -> parameterdecl .)
    LOGIC           reduce using rule 258 (namedblock_statement -> parameterdecl .)
    WIRE            reduce using rule 258 (namedblock_statement -> parameterdecl .)
    SIGNED          reduce using rule 258 (namedblock_statement -> parameterdecl .)
    SUPPLY0         reduce using rule 258 (namedblock_statement -> parameterdecl .)
    SUPPLY1         reduce using rule 258 (namedblock_statement -> parameterdecl .)
    LBRACE          reduce using rule 258 (namedblock_statement -> parameterdecl .)
    ID              reduce using rule 258 (namedblock_statement -> parameterdecl .)
    SEMICOLON       reduce using rule 258 (namedblock_statement -> parameterdecl .)


state 607

    (259) namedblock_statement -> localparamdecl .

    END             reduce using rule 259 (namedblock_statement -> localparamdecl .)
    INTEGER         reduce using rule 259 (namedblock_statement -> localparamdecl .)
    REAL            reduce using rule 259 (namedblock_statement -> localparamdecl .)
    PARAMETER       reduce using rule 259 (namedblock_statement -> localparamdecl .)
    LOCALPARAM      reduce using rule 259 (namedblock_statement -> localparamdecl .)
    IF              reduce using rule 259 (namedblock_statement -> localparamdecl .)
    CASE            reduce using rule 259 (namedblock_statement -> localparamdecl .)
    CASEX           reduce using rule 259 (namedblock_statement -> localparamdecl .)
    UNIQUE          reduce using rule 259 (namedblock_statement -> localparamdecl .)
    FOR             reduce using rule 259 (namedblock_statement -> localparamdecl .)
    WHILE           reduce using rule 259 (namedblock_statement -> localparamdecl .)
    WAIT            reduce using rule 259 (namedblock_statement -> localparamdecl .)
    FOREVER         reduce using rule 259 (namedblock_statement -> localparamdecl .)
    BEGIN           reduce using rule 259 (namedblock_statement -> localparamdecl .)
    FORK            reduce using rule 259 (namedblock_statement -> localparamdecl .)
    DELAY           reduce using rule 259 (namedblock_statement -> localparamdecl .)
    AT              reduce using rule 259 (namedblock_statement -> localparamdecl .)
    DOLLER          reduce using rule 259 (namedblock_statement -> localparamdecl .)
    DISABLE         reduce using rule 259 (namedblock_statement -> localparamdecl .)
    INPUT           reduce using rule 259 (namedblock_statement -> localparamdecl .)
    OUTPUT          reduce using rule 259 (namedblock_statement -> localparamdecl .)
    INOUT           reduce using rule 259 (namedblock_statement -> localparamdecl .)
    TRI             reduce using rule 259 (namedblock_statement -> localparamdecl .)
    REG             reduce using rule 259 (namedblock_statement -> localparamdecl .)
    LOGIC           reduce using rule 259 (namedblock_statement -> localparamdecl .)
    WIRE            reduce using rule 259 (namedblock_statement -> localparamdecl .)
    SIGNED          reduce using rule 259 (namedblock_statement -> localparamdecl .)
    SUPPLY0         reduce using rule 259 (namedblock_statement -> localparamdecl .)
    SUPPLY1         reduce using rule 259 (namedblock_statement -> localparamdecl .)
    LBRACE          reduce using rule 259 (namedblock_statement -> localparamdecl .)
    ID              reduce using rule 259 (namedblock_statement -> localparamdecl .)
    SEMICOLON       reduce using rule 259 (namedblock_statement -> localparamdecl .)


state 608

    (240) delays -> DELAY LPAREN expression RPAREN .
    (165) expression -> LPAREN expression RPAREN .

    IF              reduce using rule 240 (delays -> DELAY LPAREN expression RPAREN .)
    LBRACE          reduce using rule 240 (delays -> DELAY LPAREN expression RPAREN .)
    ID              reduce using rule 240 (delays -> DELAY LPAREN expression RPAREN .)
    SEMICOLON       reduce using rule 165 (expression -> LPAREN expression RPAREN .)
    POWER           reduce using rule 165 (expression -> LPAREN expression RPAREN .)
    TIMES           reduce using rule 165 (expression -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 165 (expression -> LPAREN expression RPAREN .)
    MOD             reduce using rule 165 (expression -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 165 (expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 165 (expression -> LPAREN expression RPAREN .)
    LSHIFT          reduce using rule 165 (expression -> LPAREN expression RPAREN .)
    RSHIFT          reduce using rule 165 (expression -> LPAREN expression RPAREN .)
    LSHIFTA         reduce using rule 165 (expression -> LPAREN expression RPAREN .)
    RSHIFTA         reduce using rule 165 (expression -> LPAREN expression RPAREN .)
    LT              reduce using rule 165 (expression -> LPAREN expression RPAREN .)
    GT              reduce using rule 165 (expression -> LPAREN expression RPAREN .)
    LE              reduce using rule 165 (expression -> LPAREN expression RPAREN .)
    GE              reduce using rule 165 (expression -> LPAREN expression RPAREN .)
    EQ              reduce using rule 165 (expression -> LPAREN expression RPAREN .)
    NE              reduce using rule 165 (expression -> LPAREN expression RPAREN .)
    EQL             reduce using rule 165 (expression -> LPAREN expression RPAREN .)
    NEL             reduce using rule 165 (expression -> LPAREN expression RPAREN .)
    AND             reduce using rule 165 (expression -> LPAREN expression RPAREN .)
    XOR             reduce using rule 165 (expression -> LPAREN expression RPAREN .)
    XNOR            reduce using rule 165 (expression -> LPAREN expression RPAREN .)
    OR              reduce using rule 165 (expression -> LPAREN expression RPAREN .)
    LAND            reduce using rule 165 (expression -> LPAREN expression RPAREN .)
    LOR             reduce using rule 165 (expression -> LPAREN expression RPAREN .)
    COND            reduce using rule 165 (expression -> LPAREN expression RPAREN .)


state 609

    (301) instance_body -> ID LPAREN instance_ports . RPAREN

    RPAREN          shift and go to state 701


state 610

    (302) instance_body -> ID width LPAREN . instance_ports RPAREN
    (318) instance_ports -> . instance_ports_list
    (319) instance_ports -> . instance_ports_arg
    (320) instance_ports_list -> . instance_ports_list COMMA instance_port_list
    (321) instance_ports_list -> . instance_port_list
    (322) instance_ports_list -> . empty
    (324) instance_ports_arg -> . instance_ports_arg COMMA instance_port_arg
    (325) instance_ports_arg -> . instance_port_arg
    (323) instance_port_list -> . expression
    (400) empty -> .
    (326) instance_port_arg -> . DOT ID LPAREN identifier RPAREN
    (327) instance_port_arg -> . DOT ID LPAREN expression RPAREN
    (328) instance_port_arg -> . DOT ID LPAREN RPAREN
    (130) expression -> . MINUS expression
    (131) expression -> . PLUS expression
    (132) expression -> . LNOT expression
    (133) expression -> . NOT expression
    (134) expression -> . AND expression
    (135) expression -> . NAND expression
    (136) expression -> . NOR expression
    (137) expression -> . OR expression
    (138) expression -> . XOR expression
    (139) expression -> . XNOR expression
    (140) expression -> . expression POWER expression
    (141) expression -> . expression TIMES expression
    (142) expression -> . expression DIVIDE expression
    (143) expression -> . expression MOD expression
    (144) expression -> . expression PLUS expression
    (145) expression -> . expression MINUS expression
    (146) expression -> . expression LSHIFT expression
    (147) expression -> . expression RSHIFT expression
    (148) expression -> . expression LSHIFTA expression
    (149) expression -> . expression RSHIFTA expression
    (150) expression -> . expression LT expression
    (151) expression -> . expression GT expression
    (152) expression -> . expression LE expression
    (153) expression -> . expression GE expression
    (154) expression -> . expression EQ expression
    (155) expression -> . expression NE expression
    (156) expression -> . expression EQL expression
    (157) expression -> . expression NEL expression
    (158) expression -> . expression AND expression
    (159) expression -> . expression XOR expression
    (160) expression -> . expression XNOR expression
    (161) expression -> . expression OR expression
    (162) expression -> . expression LAND expression
    (163) expression -> . expression LOR expression
    (164) expression -> . expression COND expression COLON expression
    (165) expression -> . LPAREN expression RPAREN
    (166) expression -> . concat
    (167) expression -> . repeat
    (168) expression -> . partselect
    (169) expression -> . pointer
    (170) expression -> . functioncall
    (171) expression -> . systemcall
    (172) expression -> . identifier
    (173) expression -> . const_expression
    (174) concat -> . LBRACE concatlist RBRACE
    (177) repeat -> . LBRACE expression concat RBRACE
    (178) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (179) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (180) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (181) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (182) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (183) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (184) pointer -> . identifier LBRACKET expression RBRACKET
    (185) pointer -> . pointer LBRACKET expression RBRACKET
    (373) functioncall -> . identifier LPAREN func_args RPAREN
    (351) systemcall -> . DOLLER ID
    (352) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (353) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (392) identifier -> . ID
    (393) identifier -> . scope ID
    (186) const_expression -> . intnumber
    (187) const_expression -> . floatnumber
    (188) const_expression -> . stringliteral
    (394) scope -> . identifier DOT
    (395) scope -> . pointer DOT
    (190) intnumber -> . INTNUMBER_DEC
    (191) intnumber -> . SIGNED_INTNUMBER_DEC
    (192) intnumber -> . INTNUMBER_BIN
    (193) intnumber -> . SIGNED_INTNUMBER_BIN
    (194) intnumber -> . INTNUMBER_OCT
    (195) intnumber -> . SIGNED_INTNUMBER_OCT
    (196) intnumber -> . INTNUMBER_HEX
    (197) intnumber -> . SIGNED_INTNUMBER_HEX
    (189) floatnumber -> . FLOATNUMBER
    (198) stringliteral -> . STRING_LITERAL

    COMMA           reduce using rule 400 (empty -> .)
    RPAREN          reduce using rule 400 (empty -> .)
    DOT             shift and go to state 379
    MINUS           shift and go to state 88
    PLUS            shift and go to state 89
    LNOT            shift and go to state 90
    NOT             shift and go to state 91
    AND             shift and go to state 92
    NAND            shift and go to state 93
    NOR             shift and go to state 94
    OR              shift and go to state 95
    XOR             shift and go to state 96
    XNOR            shift and go to state 97
    LPAREN          shift and go to state 85
    LBRACE          shift and go to state 106
    DOLLER          shift and go to state 107
    ID              shift and go to state 86
    INTNUMBER_DEC   shift and go to state 112
    SIGNED_INTNUMBER_DEC shift and go to state 113
    INTNUMBER_BIN   shift and go to state 114
    SIGNED_INTNUMBER_BIN shift and go to state 115
    INTNUMBER_OCT   shift and go to state 116
    SIGNED_INTNUMBER_OCT shift and go to state 117
    INTNUMBER_HEX   shift and go to state 118
    SIGNED_INTNUMBER_HEX shift and go to state 119
    FLOATNUMBER     shift and go to state 120
    STRING_LITERAL  shift and go to state 121

    instance_ports                 shift and go to state 702
    instance_ports_list            shift and go to state 373
    instance_ports_arg             shift and go to state 374
    instance_port_list             shift and go to state 375
    empty                          shift and go to state 376
    instance_port_arg              shift and go to state 377
    expression                     shift and go to state 378
    identifier                     shift and go to state 104
    concat                         shift and go to state 98
    repeat                         shift and go to state 99
    partselect                     shift and go to state 100
    pointer                        shift and go to state 101
    functioncall                   shift and go to state 102
    systemcall                     shift and go to state 103
    const_expression               shift and go to state 105
    scope                          shift and go to state 108
    intnumber                      shift and go to state 109
    floatnumber                    shift and go to state 110
    stringliteral                  shift and go to state 111

state 611

    (299) instance_bodylist -> instance_bodylist COMMA instance_body .

    SEMICOLON       reduce using rule 299 (instance_bodylist -> instance_bodylist COMMA instance_body .)
    COMMA           reduce using rule 299 (instance_bodylist -> instance_bodylist COMMA instance_body .)


state 612

    (308) parameterlist -> DELAY LPAREN param_args RPAREN .

    ID              reduce using rule 308 (parameterlist -> DELAY LPAREN param_args RPAREN .)


state 613

    (313) param_args -> param_args COMMA . param_arg
    (317) param_arg -> . DOT ID LPAREN expression RPAREN

    DOT             shift and go to state 510

    param_arg                      shift and go to state 703

state 614

    (309) parameterlist -> DELAY LPAREN param_args_noname RPAREN .

    ID              reduce using rule 309 (parameterlist -> DELAY LPAREN param_args_noname RPAREN .)


state 615

    (311) param_args_noname -> param_args_noname COMMA . param_arg_noname
    (316) param_arg_noname -> . expression
    (130) expression -> . MINUS expression
    (131) expression -> . PLUS expression
    (132) expression -> . LNOT expression
    (133) expression -> . NOT expression
    (134) expression -> . AND expression
    (135) expression -> . NAND expression
    (136) expression -> . NOR expression
    (137) expression -> . OR expression
    (138) expression -> . XOR expression
    (139) expression -> . XNOR expression
    (140) expression -> . expression POWER expression
    (141) expression -> . expression TIMES expression
    (142) expression -> . expression DIVIDE expression
    (143) expression -> . expression MOD expression
    (144) expression -> . expression PLUS expression
    (145) expression -> . expression MINUS expression
    (146) expression -> . expression LSHIFT expression
    (147) expression -> . expression RSHIFT expression
    (148) expression -> . expression LSHIFTA expression
    (149) expression -> . expression RSHIFTA expression
    (150) expression -> . expression LT expression
    (151) expression -> . expression GT expression
    (152) expression -> . expression LE expression
    (153) expression -> . expression GE expression
    (154) expression -> . expression EQ expression
    (155) expression -> . expression NE expression
    (156) expression -> . expression EQL expression
    (157) expression -> . expression NEL expression
    (158) expression -> . expression AND expression
    (159) expression -> . expression XOR expression
    (160) expression -> . expression XNOR expression
    (161) expression -> . expression OR expression
    (162) expression -> . expression LAND expression
    (163) expression -> . expression LOR expression
    (164) expression -> . expression COND expression COLON expression
    (165) expression -> . LPAREN expression RPAREN
    (166) expression -> . concat
    (167) expression -> . repeat
    (168) expression -> . partselect
    (169) expression -> . pointer
    (170) expression -> . functioncall
    (171) expression -> . systemcall
    (172) expression -> . identifier
    (173) expression -> . const_expression
    (174) concat -> . LBRACE concatlist RBRACE
    (177) repeat -> . LBRACE expression concat RBRACE
    (178) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (179) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (180) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (181) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (182) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (183) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (184) pointer -> . identifier LBRACKET expression RBRACKET
    (185) pointer -> . pointer LBRACKET expression RBRACKET
    (373) functioncall -> . identifier LPAREN func_args RPAREN
    (351) systemcall -> . DOLLER ID
    (352) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (353) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (392) identifier -> . ID
    (393) identifier -> . scope ID
    (186) const_expression -> . intnumber
    (187) const_expression -> . floatnumber
    (188) const_expression -> . stringliteral
    (394) scope -> . identifier DOT
    (395) scope -> . pointer DOT
    (190) intnumber -> . INTNUMBER_DEC
    (191) intnumber -> . SIGNED_INTNUMBER_DEC
    (192) intnumber -> . INTNUMBER_BIN
    (193) intnumber -> . SIGNED_INTNUMBER_BIN
    (194) intnumber -> . INTNUMBER_OCT
    (195) intnumber -> . SIGNED_INTNUMBER_OCT
    (196) intnumber -> . INTNUMBER_HEX
    (197) intnumber -> . SIGNED_INTNUMBER_HEX
    (189) floatnumber -> . FLOATNUMBER
    (198) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 88
    PLUS            shift and go to state 89
    LNOT            shift and go to state 90
    NOT             shift and go to state 91
    AND             shift and go to state 92
    NAND            shift and go to state 93
    NOR             shift and go to state 94
    OR              shift and go to state 95
    XOR             shift and go to state 96
    XNOR            shift and go to state 97
    LPAREN          shift and go to state 85
    LBRACE          shift and go to state 106
    DOLLER          shift and go to state 107
    ID              shift and go to state 86
    INTNUMBER_DEC   shift and go to state 112
    SIGNED_INTNUMBER_DEC shift and go to state 113
    INTNUMBER_BIN   shift and go to state 114
    SIGNED_INTNUMBER_BIN shift and go to state 115
    INTNUMBER_OCT   shift and go to state 116
    SIGNED_INTNUMBER_OCT shift and go to state 117
    INTNUMBER_HEX   shift and go to state 118
    SIGNED_INTNUMBER_HEX shift and go to state 119
    FLOATNUMBER     shift and go to state 120
    STRING_LITERAL  shift and go to state 121

    param_arg_noname               shift and go to state 704
    expression                     shift and go to state 511
    concat                         shift and go to state 98
    repeat                         shift and go to state 99
    partselect                     shift and go to state 100
    pointer                        shift and go to state 101
    functioncall                   shift and go to state 102
    systemcall                     shift and go to state 103
    identifier                     shift and go to state 104
    const_expression               shift and go to state 105
    scope                          shift and go to state 108
    intnumber                      shift and go to state 109
    floatnumber                    shift and go to state 110
    stringliteral                  shift and go to state 111

state 616

    (317) param_arg -> DOT ID . LPAREN expression RPAREN

    LPAREN          shift and go to state 705


state 617

    (320) instance_ports_list -> instance_ports_list COMMA instance_port_list .

    COMMA           reduce using rule 320 (instance_ports_list -> instance_ports_list COMMA instance_port_list .)
    RPAREN          reduce using rule 320 (instance_ports_list -> instance_ports_list COMMA instance_port_list .)


state 618

    (324) instance_ports_arg -> instance_ports_arg COMMA instance_port_arg .

    COMMA           reduce using rule 324 (instance_ports_arg -> instance_ports_arg COMMA instance_port_arg .)
    RPAREN          reduce using rule 324 (instance_ports_arg -> instance_ports_arg COMMA instance_port_arg .)


state 619

    (326) instance_port_arg -> DOT ID LPAREN . identifier RPAREN
    (327) instance_port_arg -> DOT ID LPAREN . expression RPAREN
    (328) instance_port_arg -> DOT ID LPAREN . RPAREN
    (392) identifier -> . ID
    (393) identifier -> . scope ID
    (130) expression -> . MINUS expression
    (131) expression -> . PLUS expression
    (132) expression -> . LNOT expression
    (133) expression -> . NOT expression
    (134) expression -> . AND expression
    (135) expression -> . NAND expression
    (136) expression -> . NOR expression
    (137) expression -> . OR expression
    (138) expression -> . XOR expression
    (139) expression -> . XNOR expression
    (140) expression -> . expression POWER expression
    (141) expression -> . expression TIMES expression
    (142) expression -> . expression DIVIDE expression
    (143) expression -> . expression MOD expression
    (144) expression -> . expression PLUS expression
    (145) expression -> . expression MINUS expression
    (146) expression -> . expression LSHIFT expression
    (147) expression -> . expression RSHIFT expression
    (148) expression -> . expression LSHIFTA expression
    (149) expression -> . expression RSHIFTA expression
    (150) expression -> . expression LT expression
    (151) expression -> . expression GT expression
    (152) expression -> . expression LE expression
    (153) expression -> . expression GE expression
    (154) expression -> . expression EQ expression
    (155) expression -> . expression NE expression
    (156) expression -> . expression EQL expression
    (157) expression -> . expression NEL expression
    (158) expression -> . expression AND expression
    (159) expression -> . expression XOR expression
    (160) expression -> . expression XNOR expression
    (161) expression -> . expression OR expression
    (162) expression -> . expression LAND expression
    (163) expression -> . expression LOR expression
    (164) expression -> . expression COND expression COLON expression
    (165) expression -> . LPAREN expression RPAREN
    (166) expression -> . concat
    (167) expression -> . repeat
    (168) expression -> . partselect
    (169) expression -> . pointer
    (170) expression -> . functioncall
    (171) expression -> . systemcall
    (172) expression -> . identifier
    (173) expression -> . const_expression
    (394) scope -> . identifier DOT
    (395) scope -> . pointer DOT
    (174) concat -> . LBRACE concatlist RBRACE
    (177) repeat -> . LBRACE expression concat RBRACE
    (178) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (179) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (180) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (181) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (182) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (183) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (184) pointer -> . identifier LBRACKET expression RBRACKET
    (185) pointer -> . pointer LBRACKET expression RBRACKET
    (373) functioncall -> . identifier LPAREN func_args RPAREN
    (351) systemcall -> . DOLLER ID
    (352) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (353) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (186) const_expression -> . intnumber
    (187) const_expression -> . floatnumber
    (188) const_expression -> . stringliteral
    (190) intnumber -> . INTNUMBER_DEC
    (191) intnumber -> . SIGNED_INTNUMBER_DEC
    (192) intnumber -> . INTNUMBER_BIN
    (193) intnumber -> . SIGNED_INTNUMBER_BIN
    (194) intnumber -> . INTNUMBER_OCT
    (195) intnumber -> . SIGNED_INTNUMBER_OCT
    (196) intnumber -> . INTNUMBER_HEX
    (197) intnumber -> . SIGNED_INTNUMBER_HEX
    (189) floatnumber -> . FLOATNUMBER
    (198) stringliteral -> . STRING_LITERAL

    RPAREN          shift and go to state 707
    ID              shift and go to state 86
    MINUS           shift and go to state 88
    PLUS            shift and go to state 89
    LNOT            shift and go to state 90
    NOT             shift and go to state 91
    AND             shift and go to state 92
    NAND            shift and go to state 93
    NOR             shift and go to state 94
    OR              shift and go to state 95
    XOR             shift and go to state 96
    XNOR            shift and go to state 97
    LPAREN          shift and go to state 85
    LBRACE          shift and go to state 106
    DOLLER          shift and go to state 107
    INTNUMBER_DEC   shift and go to state 112
    SIGNED_INTNUMBER_DEC shift and go to state 113
    INTNUMBER_BIN   shift and go to state 114
    SIGNED_INTNUMBER_BIN shift and go to state 115
    INTNUMBER_OCT   shift and go to state 116
    SIGNED_INTNUMBER_OCT shift and go to state 117
    INTNUMBER_HEX   shift and go to state 118
    SIGNED_INTNUMBER_HEX shift and go to state 119
    FLOATNUMBER     shift and go to state 120
    STRING_LITERAL  shift and go to state 121

    identifier                     shift and go to state 706
    expression                     shift and go to state 708
    scope                          shift and go to state 108
    concat                         shift and go to state 98
    repeat                         shift and go to state 99
    partselect                     shift and go to state 100
    pointer                        shift and go to state 709
    functioncall                   shift and go to state 102
    systemcall                     shift and go to state 103
    const_expression               shift and go to state 105
    intnumber                      shift and go to state 109
    floatnumber                    shift and go to state 110
    stringliteral                  shift and go to state 111

state 620

    (358) function -> FUNCTION width ID SEMICOLON function_statement . ENDFUNCTION

    ENDFUNCTION     shift and go to state 710


state 621

    (359) function -> FUNCTION ID SEMICOLON function_statement ENDFUNCTION .

    ENDMODULE       reduce using rule 359 (function -> FUNCTION ID SEMICOLON function_statement ENDFUNCTION .)
    GENERATE        reduce using rule 359 (function -> FUNCTION ID SEMICOLON function_statement ENDFUNCTION .)
    INTEGER         reduce using rule 359 (function -> FUNCTION ID SEMICOLON function_statement ENDFUNCTION .)
    REAL            reduce using rule 359 (function -> FUNCTION ID SEMICOLON function_statement ENDFUNCTION .)
    PARAMETER       reduce using rule 359 (function -> FUNCTION ID SEMICOLON function_statement ENDFUNCTION .)
    LOCALPARAM      reduce using rule 359 (function -> FUNCTION ID SEMICOLON function_statement ENDFUNCTION .)
    GENVAR          reduce using rule 359 (function -> FUNCTION ID SEMICOLON function_statement ENDFUNCTION .)
    ASSIGN          reduce using rule 359 (function -> FUNCTION ID SEMICOLON function_statement ENDFUNCTION .)
    ALWAYS          reduce using rule 359 (function -> FUNCTION ID SEMICOLON function_statement ENDFUNCTION .)
    ALWAYS_FF       reduce using rule 359 (function -> FUNCTION ID SEMICOLON function_statement ENDFUNCTION .)
    ALWAYS_COMB     reduce using rule 359 (function -> FUNCTION ID SEMICOLON function_statement ENDFUNCTION .)
    INITIAL         reduce using rule 359 (function -> FUNCTION ID SEMICOLON function_statement ENDFUNCTION .)
    ID              reduce using rule 359 (function -> FUNCTION ID SEMICOLON function_statement ENDFUNCTION .)
    SENS_OR         reduce using rule 359 (function -> FUNCTION ID SEMICOLON function_statement ENDFUNCTION .)
    FUNCTION        reduce using rule 359 (function -> FUNCTION ID SEMICOLON function_statement ENDFUNCTION .)
    TASK            reduce using rule 359 (function -> FUNCTION ID SEMICOLON function_statement ENDFUNCTION .)
    LPAREN          reduce using rule 359 (function -> FUNCTION ID SEMICOLON function_statement ENDFUNCTION .)
    INPUT           reduce using rule 359 (function -> FUNCTION ID SEMICOLON function_statement ENDFUNCTION .)
    OUTPUT          reduce using rule 359 (function -> FUNCTION ID SEMICOLON function_statement ENDFUNCTION .)
    INOUT           reduce using rule 359 (function -> FUNCTION ID SEMICOLON function_statement ENDFUNCTION .)
    TRI             reduce using rule 359 (function -> FUNCTION ID SEMICOLON function_statement ENDFUNCTION .)
    REG             reduce using rule 359 (function -> FUNCTION ID SEMICOLON function_statement ENDFUNCTION .)
    LOGIC           reduce using rule 359 (function -> FUNCTION ID SEMICOLON function_statement ENDFUNCTION .)
    WIRE            reduce using rule 359 (function -> FUNCTION ID SEMICOLON function_statement ENDFUNCTION .)
    SIGNED          reduce using rule 359 (function -> FUNCTION ID SEMICOLON function_statement ENDFUNCTION .)
    SUPPLY0         reduce using rule 359 (function -> FUNCTION ID SEMICOLON function_statement ENDFUNCTION .)
    SUPPLY1         reduce using rule 359 (function -> FUNCTION ID SEMICOLON function_statement ENDFUNCTION .)
    ENDGENERATE     reduce using rule 359 (function -> FUNCTION ID SEMICOLON function_statement ENDFUNCTION .)
    IF              reduce using rule 359 (function -> FUNCTION ID SEMICOLON function_statement ENDFUNCTION .)
    FOR             reduce using rule 359 (function -> FUNCTION ID SEMICOLON function_statement ENDFUNCTION .)
    ELSE            reduce using rule 359 (function -> FUNCTION ID SEMICOLON function_statement ENDFUNCTION .)
    END             reduce using rule 359 (function -> FUNCTION ID SEMICOLON function_statement ENDFUNCTION .)


state 622

    (360) function_statement -> funcvardecls function_calc .

    ENDFUNCTION     reduce using rule 360 (function_statement -> funcvardecls function_calc .)


state 623

    (361) funcvardecls -> funcvardecls funcvardecl .

    IF              reduce using rule 361 (funcvardecls -> funcvardecls funcvardecl .)
    FOR             reduce using rule 361 (funcvardecls -> funcvardecls funcvardecl .)
    WHILE           reduce using rule 361 (funcvardecls -> funcvardecls funcvardecl .)
    CASE            reduce using rule 361 (funcvardecls -> funcvardecls funcvardecl .)
    CASEX           reduce using rule 361 (funcvardecls -> funcvardecls funcvardecl .)
    BEGIN           reduce using rule 361 (funcvardecls -> funcvardecls funcvardecl .)
    INTEGER         reduce using rule 361 (funcvardecls -> funcvardecls funcvardecl .)
    DELAY           reduce using rule 361 (funcvardecls -> funcvardecls funcvardecl .)
    INPUT           reduce using rule 361 (funcvardecls -> funcvardecls funcvardecl .)
    OUTPUT          reduce using rule 361 (funcvardecls -> funcvardecls funcvardecl .)
    INOUT           reduce using rule 361 (funcvardecls -> funcvardecls funcvardecl .)
    TRI             reduce using rule 361 (funcvardecls -> funcvardecls funcvardecl .)
    REG             reduce using rule 361 (funcvardecls -> funcvardecls funcvardecl .)
    LOGIC           reduce using rule 361 (funcvardecls -> funcvardecls funcvardecl .)
    WIRE            reduce using rule 361 (funcvardecls -> funcvardecls funcvardecl .)
    SIGNED          reduce using rule 361 (funcvardecls -> funcvardecls funcvardecl .)
    SUPPLY0         reduce using rule 361 (funcvardecls -> funcvardecls funcvardecl .)
    SUPPLY1         reduce using rule 361 (funcvardecls -> funcvardecls funcvardecl .)
    LBRACE          reduce using rule 361 (funcvardecls -> funcvardecls funcvardecl .)
    ID              reduce using rule 361 (funcvardecls -> funcvardecls funcvardecl .)


state 624

    (365) function_calc -> blocking_substitution .

    ENDFUNCTION     reduce using rule 365 (function_calc -> blocking_substitution .)


state 625

    (366) function_calc -> if_statement .

    ENDFUNCTION     reduce using rule 366 (function_calc -> if_statement .)


state 626

    (367) function_calc -> for_statement .

    ENDFUNCTION     reduce using rule 367 (function_calc -> for_statement .)


state 627

    (368) function_calc -> while_statement .

    ENDFUNCTION     reduce using rule 368 (function_calc -> while_statement .)


state 628

    (369) function_calc -> case_statement .

    ENDFUNCTION     reduce using rule 369 (function_calc -> case_statement .)


state 629

    (370) function_calc -> casex_statement .

    ENDFUNCTION     reduce using rule 370 (function_calc -> casex_statement .)


state 630

    (371) function_calc -> block .

    ENDFUNCTION     reduce using rule 371 (function_calc -> block .)


state 631

    (372) function_calc -> namedblock .

    ENDFUNCTION     reduce using rule 372 (function_calc -> namedblock .)


state 632

    (237) blocking_substitution -> delays . lvalue EQUALS delays rvalue SEMICOLON
    (264) if_statement -> delays . IF LPAREN cond RPAREN true_statement ELSE else_statement
    (265) if_statement -> delays . IF LPAREN cond RPAREN true_statement
    (125) lvalue -> . lpartselect
    (126) lvalue -> . lpointer
    (127) lvalue -> . lconcat
    (128) lvalue -> . identifier
    (111) lpartselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (112) lpartselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (113) lpartselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (114) lpartselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (115) lpartselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (116) lpartselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (117) lpointer -> . pointer
    (118) lconcat -> . LBRACE lconcatlist RBRACE
    (392) identifier -> . ID
    (393) identifier -> . scope ID
    (184) pointer -> . identifier LBRACKET expression RBRACKET
    (185) pointer -> . pointer LBRACKET expression RBRACKET
    (394) scope -> . identifier DOT
    (395) scope -> . pointer DOT

    IF              shift and go to state 341
    LBRACE          shift and go to state 169
    ID              shift and go to state 86

    lvalue                         shift and go to state 559
    lpartselect                    shift and go to state 164
    lpointer                       shift and go to state 165
    lconcat                        shift and go to state 166
    identifier                     shift and go to state 167
    pointer                        shift and go to state 168
    scope                          shift and go to state 108

state 633

    (78) decl -> sigtypes width . declnamelist SEMICOLON
    (79) declnamelist -> . declnamelist COMMA declname
    (80) declnamelist -> . declname
    (81) declname -> . ID
    (82) declname -> . ID length

    ID              shift and go to state 443

    declnamelist                   shift and go to state 286
    declname                       shift and go to state 136

state 634

    (377) task -> TASK ID SEMICOLON task_statement ENDTASK .

    ENDMODULE       reduce using rule 377 (task -> TASK ID SEMICOLON task_statement ENDTASK .)
    GENERATE        reduce using rule 377 (task -> TASK ID SEMICOLON task_statement ENDTASK .)
    INTEGER         reduce using rule 377 (task -> TASK ID SEMICOLON task_statement ENDTASK .)
    REAL            reduce using rule 377 (task -> TASK ID SEMICOLON task_statement ENDTASK .)
    PARAMETER       reduce using rule 377 (task -> TASK ID SEMICOLON task_statement ENDTASK .)
    LOCALPARAM      reduce using rule 377 (task -> TASK ID SEMICOLON task_statement ENDTASK .)
    GENVAR          reduce using rule 377 (task -> TASK ID SEMICOLON task_statement ENDTASK .)
    ASSIGN          reduce using rule 377 (task -> TASK ID SEMICOLON task_statement ENDTASK .)
    ALWAYS          reduce using rule 377 (task -> TASK ID SEMICOLON task_statement ENDTASK .)
    ALWAYS_FF       reduce using rule 377 (task -> TASK ID SEMICOLON task_statement ENDTASK .)
    ALWAYS_COMB     reduce using rule 377 (task -> TASK ID SEMICOLON task_statement ENDTASK .)
    INITIAL         reduce using rule 377 (task -> TASK ID SEMICOLON task_statement ENDTASK .)
    ID              reduce using rule 377 (task -> TASK ID SEMICOLON task_statement ENDTASK .)
    SENS_OR         reduce using rule 377 (task -> TASK ID SEMICOLON task_statement ENDTASK .)
    FUNCTION        reduce using rule 377 (task -> TASK ID SEMICOLON task_statement ENDTASK .)
    TASK            reduce using rule 377 (task -> TASK ID SEMICOLON task_statement ENDTASK .)
    LPAREN          reduce using rule 377 (task -> TASK ID SEMICOLON task_statement ENDTASK .)
    INPUT           reduce using rule 377 (task -> TASK ID SEMICOLON task_statement ENDTASK .)
    OUTPUT          reduce using rule 377 (task -> TASK ID SEMICOLON task_statement ENDTASK .)
    INOUT           reduce using rule 377 (task -> TASK ID SEMICOLON task_statement ENDTASK .)
    TRI             reduce using rule 377 (task -> TASK ID SEMICOLON task_statement ENDTASK .)
    REG             reduce using rule 377 (task -> TASK ID SEMICOLON task_statement ENDTASK .)
    LOGIC           reduce using rule 377 (task -> TASK ID SEMICOLON task_statement ENDTASK .)
    WIRE            reduce using rule 377 (task -> TASK ID SEMICOLON task_statement ENDTASK .)
    SIGNED          reduce using rule 377 (task -> TASK ID SEMICOLON task_statement ENDTASK .)
    SUPPLY0         reduce using rule 377 (task -> TASK ID SEMICOLON task_statement ENDTASK .)
    SUPPLY1         reduce using rule 377 (task -> TASK ID SEMICOLON task_statement ENDTASK .)
    ENDGENERATE     reduce using rule 377 (task -> TASK ID SEMICOLON task_statement ENDTASK .)
    IF              reduce using rule 377 (task -> TASK ID SEMICOLON task_statement ENDTASK .)
    FOR             reduce using rule 377 (task -> TASK ID SEMICOLON task_statement ENDTASK .)
    ELSE            reduce using rule 377 (task -> TASK ID SEMICOLON task_statement ENDTASK .)
    END             reduce using rule 377 (task -> TASK ID SEMICOLON task_statement ENDTASK .)


state 635

    (378) task_statement -> taskvardecls task_calc .

    ENDTASK         reduce using rule 378 (task_statement -> taskvardecls task_calc .)


state 636

    (379) taskvardecls -> taskvardecls taskvardecl .

    IF              reduce using rule 379 (taskvardecls -> taskvardecls taskvardecl .)
    FOR             reduce using rule 379 (taskvardecls -> taskvardecls taskvardecl .)
    WHILE           reduce using rule 379 (taskvardecls -> taskvardecls taskvardecl .)
    CASE            reduce using rule 379 (taskvardecls -> taskvardecls taskvardecl .)
    CASEX           reduce using rule 379 (taskvardecls -> taskvardecls taskvardecl .)
    BEGIN           reduce using rule 379 (taskvardecls -> taskvardecls taskvardecl .)
    INTEGER         reduce using rule 379 (taskvardecls -> taskvardecls taskvardecl .)
    DELAY           reduce using rule 379 (taskvardecls -> taskvardecls taskvardecl .)
    INPUT           reduce using rule 379 (taskvardecls -> taskvardecls taskvardecl .)
    OUTPUT          reduce using rule 379 (taskvardecls -> taskvardecls taskvardecl .)
    INOUT           reduce using rule 379 (taskvardecls -> taskvardecls taskvardecl .)
    TRI             reduce using rule 379 (taskvardecls -> taskvardecls taskvardecl .)
    REG             reduce using rule 379 (taskvardecls -> taskvardecls taskvardecl .)
    LOGIC           reduce using rule 379 (taskvardecls -> taskvardecls taskvardecl .)
    WIRE            reduce using rule 379 (taskvardecls -> taskvardecls taskvardecl .)
    SIGNED          reduce using rule 379 (taskvardecls -> taskvardecls taskvardecl .)
    SUPPLY0         reduce using rule 379 (taskvardecls -> taskvardecls taskvardecl .)
    SUPPLY1         reduce using rule 379 (taskvardecls -> taskvardecls taskvardecl .)
    LBRACE          reduce using rule 379 (taskvardecls -> taskvardecls taskvardecl .)
    ID              reduce using rule 379 (taskvardecls -> taskvardecls taskvardecl .)


state 637

    (384) task_calc -> blocking_substitution .

    ENDTASK         reduce using rule 384 (task_calc -> blocking_substitution .)


state 638

    (385) task_calc -> if_statement .

    ENDTASK         reduce using rule 385 (task_calc -> if_statement .)


state 639

    (386) task_calc -> for_statement .

    ENDTASK         reduce using rule 386 (task_calc -> for_statement .)


state 640

    (387) task_calc -> while_statement .

    ENDTASK         reduce using rule 387 (task_calc -> while_statement .)


state 641

    (388) task_calc -> case_statement .

    ENDTASK         reduce using rule 388 (task_calc -> case_statement .)


state 642

    (389) task_calc -> casex_statement .

    ENDTASK         reduce using rule 389 (task_calc -> casex_statement .)


state 643

    (390) task_calc -> block .

    ENDTASK         reduce using rule 390 (task_calc -> block .)


state 644

    (391) task_calc -> namedblock .

    ENDTASK         reduce using rule 391 (task_calc -> namedblock .)


state 645

    (50) ioport -> sigtypes width portname .

    RPAREN          reduce using rule 50 (ioport -> sigtypes width portname .)
    COMMA           reduce using rule 50 (ioport -> sigtypes width portname .)


state 646

    (21) param -> PARAMETER SIGNED width param_substitution_list COMMA .
    (106) param_substitution_list -> param_substitution_list COMMA . param_substitution
    (108) param_substitution -> . ID EQUALS rvalue

    PARAMETER       reduce using rule 21 (param -> PARAMETER SIGNED width param_substitution_list COMMA .)
    ID              shift and go to state 154

    param_substitution             shift and go to state 457

state 647

    (164) expression -> expression COND expression COLON expression .
    (140) expression -> expression . POWER expression
    (141) expression -> expression . TIMES expression
    (142) expression -> expression . DIVIDE expression
    (143) expression -> expression . MOD expression
    (144) expression -> expression . PLUS expression
    (145) expression -> expression . MINUS expression
    (146) expression -> expression . LSHIFT expression
    (147) expression -> expression . RSHIFT expression
    (148) expression -> expression . LSHIFTA expression
    (149) expression -> expression . RSHIFTA expression
    (150) expression -> expression . LT expression
    (151) expression -> expression . GT expression
    (152) expression -> expression . LE expression
    (153) expression -> expression . GE expression
    (154) expression -> expression . EQ expression
    (155) expression -> expression . NE expression
    (156) expression -> expression . EQL expression
    (157) expression -> expression . NEL expression
    (158) expression -> expression . AND expression
    (159) expression -> expression . XOR expression
    (160) expression -> expression . XNOR expression
    (161) expression -> expression . OR expression
    (162) expression -> expression . LAND expression
    (163) expression -> expression . LOR expression
    (164) expression -> expression . COND expression COLON expression

  ! shift/reduce conflict for POWER resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for LSHIFT resolved as shift
  ! shift/reduce conflict for RSHIFT resolved as shift
  ! shift/reduce conflict for LSHIFTA resolved as shift
  ! shift/reduce conflict for RSHIFTA resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for EQL resolved as shift
  ! shift/reduce conflict for NEL resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for XOR resolved as shift
  ! shift/reduce conflict for XNOR resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for LAND resolved as shift
  ! shift/reduce conflict for LOR resolved as shift
  ! shift/reduce conflict for COND resolved as shift
    RPAREN          reduce using rule 164 (expression -> expression COND expression COLON expression .)
    LBRACE          reduce using rule 164 (expression -> expression COND expression COLON expression .)
    RBRACE          reduce using rule 164 (expression -> expression COND expression COLON expression .)
    COMMA           reduce using rule 164 (expression -> expression COND expression COLON expression .)
    COLON           reduce using rule 164 (expression -> expression COND expression COLON expression .)
    SEMICOLON       reduce using rule 164 (expression -> expression COND expression COLON expression .)
    PLUSCOLON       reduce using rule 164 (expression -> expression COND expression COLON expression .)
    MINUSCOLON      reduce using rule 164 (expression -> expression COND expression COLON expression .)
    RBRACKET        reduce using rule 164 (expression -> expression COND expression COLON expression .)
    POWER           shift and go to state 236
    TIMES           shift and go to state 398
    DIVIDE          shift and go to state 237
    MOD             shift and go to state 238
    PLUS            shift and go to state 239
    MINUS           shift and go to state 240
    LSHIFT          shift and go to state 241
    RSHIFT          shift and go to state 242
    LSHIFTA         shift and go to state 243
    RSHIFTA         shift and go to state 244
    LT              shift and go to state 245
    GT              shift and go to state 246
    LE              shift and go to state 247
    GE              shift and go to state 248
    EQ              shift and go to state 249
    NE              shift and go to state 250
    EQL             shift and go to state 251
    NEL             shift and go to state 252
    AND             shift and go to state 253
    XOR             shift and go to state 254
    XNOR            shift and go to state 255
    OR              shift and go to state 256
    LAND            shift and go to state 257
    LOR             shift and go to state 258
    COND            shift and go to state 259

  ! TIMES           [ reduce using rule 164 (expression -> expression COND expression COLON expression .) ]
  ! POWER           [ reduce using rule 164 (expression -> expression COND expression COLON expression .) ]
  ! DIVIDE          [ reduce using rule 164 (expression -> expression COND expression COLON expression .) ]
  ! MOD             [ reduce using rule 164 (expression -> expression COND expression COLON expression .) ]
  ! PLUS            [ reduce using rule 164 (expression -> expression COND expression COLON expression .) ]
  ! MINUS           [ reduce using rule 164 (expression -> expression COND expression COLON expression .) ]
  ! LSHIFT          [ reduce using rule 164 (expression -> expression COND expression COLON expression .) ]
  ! RSHIFT          [ reduce using rule 164 (expression -> expression COND expression COLON expression .) ]
  ! LSHIFTA         [ reduce using rule 164 (expression -> expression COND expression COLON expression .) ]
  ! RSHIFTA         [ reduce using rule 164 (expression -> expression COND expression COLON expression .) ]
  ! LT              [ reduce using rule 164 (expression -> expression COND expression COLON expression .) ]
  ! GT              [ reduce using rule 164 (expression -> expression COND expression COLON expression .) ]
  ! LE              [ reduce using rule 164 (expression -> expression COND expression COLON expression .) ]
  ! GE              [ reduce using rule 164 (expression -> expression COND expression COLON expression .) ]
  ! EQ              [ reduce using rule 164 (expression -> expression COND expression COLON expression .) ]
  ! NE              [ reduce using rule 164 (expression -> expression COND expression COLON expression .) ]
  ! EQL             [ reduce using rule 164 (expression -> expression COND expression COLON expression .) ]
  ! NEL             [ reduce using rule 164 (expression -> expression COND expression COLON expression .) ]
  ! AND             [ reduce using rule 164 (expression -> expression COND expression COLON expression .) ]
  ! XOR             [ reduce using rule 164 (expression -> expression COND expression COLON expression .) ]
  ! XNOR            [ reduce using rule 164 (expression -> expression COND expression COLON expression .) ]
  ! OR              [ reduce using rule 164 (expression -> expression COND expression COLON expression .) ]
  ! LAND            [ reduce using rule 164 (expression -> expression COND expression COLON expression .) ]
  ! LOR             [ reduce using rule 164 (expression -> expression COND expression COLON expression .) ]
  ! COND            [ reduce using rule 164 (expression -> expression COND expression COLON expression .) ]


state 648

    (181) partselect -> pointer LBRACKET expression COLON expression . RBRACKET
    (140) expression -> expression . POWER expression
    (141) expression -> expression . TIMES expression
    (142) expression -> expression . DIVIDE expression
    (143) expression -> expression . MOD expression
    (144) expression -> expression . PLUS expression
    (145) expression -> expression . MINUS expression
    (146) expression -> expression . LSHIFT expression
    (147) expression -> expression . RSHIFT expression
    (148) expression -> expression . LSHIFTA expression
    (149) expression -> expression . RSHIFTA expression
    (150) expression -> expression . LT expression
    (151) expression -> expression . GT expression
    (152) expression -> expression . LE expression
    (153) expression -> expression . GE expression
    (154) expression -> expression . EQ expression
    (155) expression -> expression . NE expression
    (156) expression -> expression . EQL expression
    (157) expression -> expression . NEL expression
    (158) expression -> expression . AND expression
    (159) expression -> expression . XOR expression
    (160) expression -> expression . XNOR expression
    (161) expression -> expression . OR expression
    (162) expression -> expression . LAND expression
    (163) expression -> expression . LOR expression
    (164) expression -> expression . COND expression COLON expression

    RBRACKET        shift and go to state 711
    POWER           shift and go to state 236
    TIMES           shift and go to state 398
    DIVIDE          shift and go to state 237
    MOD             shift and go to state 238
    PLUS            shift and go to state 239
    MINUS           shift and go to state 240
    LSHIFT          shift and go to state 241
    RSHIFT          shift and go to state 242
    LSHIFTA         shift and go to state 243
    RSHIFTA         shift and go to state 244
    LT              shift and go to state 245
    GT              shift and go to state 246
    LE              shift and go to state 247
    GE              shift and go to state 248
    EQ              shift and go to state 249
    NE              shift and go to state 250
    EQL             shift and go to state 251
    NEL             shift and go to state 252
    AND             shift and go to state 253
    XOR             shift and go to state 254
    XNOR            shift and go to state 255
    OR              shift and go to state 256
    LAND            shift and go to state 257
    LOR             shift and go to state 258
    COND            shift and go to state 259


state 649

    (182) partselect -> pointer LBRACKET expression PLUSCOLON expression . RBRACKET
    (140) expression -> expression . POWER expression
    (141) expression -> expression . TIMES expression
    (142) expression -> expression . DIVIDE expression
    (143) expression -> expression . MOD expression
    (144) expression -> expression . PLUS expression
    (145) expression -> expression . MINUS expression
    (146) expression -> expression . LSHIFT expression
    (147) expression -> expression . RSHIFT expression
    (148) expression -> expression . LSHIFTA expression
    (149) expression -> expression . RSHIFTA expression
    (150) expression -> expression . LT expression
    (151) expression -> expression . GT expression
    (152) expression -> expression . LE expression
    (153) expression -> expression . GE expression
    (154) expression -> expression . EQ expression
    (155) expression -> expression . NE expression
    (156) expression -> expression . EQL expression
    (157) expression -> expression . NEL expression
    (158) expression -> expression . AND expression
    (159) expression -> expression . XOR expression
    (160) expression -> expression . XNOR expression
    (161) expression -> expression . OR expression
    (162) expression -> expression . LAND expression
    (163) expression -> expression . LOR expression
    (164) expression -> expression . COND expression COLON expression

    RBRACKET        shift and go to state 712
    POWER           shift and go to state 236
    TIMES           shift and go to state 398
    DIVIDE          shift and go to state 237
    MOD             shift and go to state 238
    PLUS            shift and go to state 239
    MINUS           shift and go to state 240
    LSHIFT          shift and go to state 241
    RSHIFT          shift and go to state 242
    LSHIFTA         shift and go to state 243
    RSHIFTA         shift and go to state 244
    LT              shift and go to state 245
    GT              shift and go to state 246
    LE              shift and go to state 247
    GE              shift and go to state 248
    EQ              shift and go to state 249
    NE              shift and go to state 250
    EQL             shift and go to state 251
    NEL             shift and go to state 252
    AND             shift and go to state 253
    XOR             shift and go to state 254
    XNOR            shift and go to state 255
    OR              shift and go to state 256
    LAND            shift and go to state 257
    LOR             shift and go to state 258
    COND            shift and go to state 259


state 650

    (183) partselect -> pointer LBRACKET expression MINUSCOLON expression . RBRACKET
    (140) expression -> expression . POWER expression
    (141) expression -> expression . TIMES expression
    (142) expression -> expression . DIVIDE expression
    (143) expression -> expression . MOD expression
    (144) expression -> expression . PLUS expression
    (145) expression -> expression . MINUS expression
    (146) expression -> expression . LSHIFT expression
    (147) expression -> expression . RSHIFT expression
    (148) expression -> expression . LSHIFTA expression
    (149) expression -> expression . RSHIFTA expression
    (150) expression -> expression . LT expression
    (151) expression -> expression . GT expression
    (152) expression -> expression . LE expression
    (153) expression -> expression . GE expression
    (154) expression -> expression . EQ expression
    (155) expression -> expression . NE expression
    (156) expression -> expression . EQL expression
    (157) expression -> expression . NEL expression
    (158) expression -> expression . AND expression
    (159) expression -> expression . XOR expression
    (160) expression -> expression . XNOR expression
    (161) expression -> expression . OR expression
    (162) expression -> expression . LAND expression
    (163) expression -> expression . LOR expression
    (164) expression -> expression . COND expression COLON expression

    RBRACKET        shift and go to state 713
    POWER           shift and go to state 236
    TIMES           shift and go to state 398
    DIVIDE          shift and go to state 237
    MOD             shift and go to state 238
    PLUS            shift and go to state 239
    MINUS           shift and go to state 240
    LSHIFT          shift and go to state 241
    RSHIFT          shift and go to state 242
    LSHIFTA         shift and go to state 243
    RSHIFTA         shift and go to state 244
    LT              shift and go to state 245
    GT              shift and go to state 246
    LE              shift and go to state 247
    GE              shift and go to state 248
    EQ              shift and go to state 249
    NE              shift and go to state 250
    EQL             shift and go to state 251
    NEL             shift and go to state 252
    AND             shift and go to state 253
    XOR             shift and go to state 254
    XNOR            shift and go to state 255
    OR              shift and go to state 256
    LAND            shift and go to state 257
    LOR             shift and go to state 258
    COND            shift and go to state 259


state 651

    (178) partselect -> identifier LBRACKET expression COLON expression . RBRACKET
    (140) expression -> expression . POWER expression
    (141) expression -> expression . TIMES expression
    (142) expression -> expression . DIVIDE expression
    (143) expression -> expression . MOD expression
    (144) expression -> expression . PLUS expression
    (145) expression -> expression . MINUS expression
    (146) expression -> expression . LSHIFT expression
    (147) expression -> expression . RSHIFT expression
    (148) expression -> expression . LSHIFTA expression
    (149) expression -> expression . RSHIFTA expression
    (150) expression -> expression . LT expression
    (151) expression -> expression . GT expression
    (152) expression -> expression . LE expression
    (153) expression -> expression . GE expression
    (154) expression -> expression . EQ expression
    (155) expression -> expression . NE expression
    (156) expression -> expression . EQL expression
    (157) expression -> expression . NEL expression
    (158) expression -> expression . AND expression
    (159) expression -> expression . XOR expression
    (160) expression -> expression . XNOR expression
    (161) expression -> expression . OR expression
    (162) expression -> expression . LAND expression
    (163) expression -> expression . LOR expression
    (164) expression -> expression . COND expression COLON expression

    RBRACKET        shift and go to state 714
    POWER           shift and go to state 236
    TIMES           shift and go to state 398
    DIVIDE          shift and go to state 237
    MOD             shift and go to state 238
    PLUS            shift and go to state 239
    MINUS           shift and go to state 240
    LSHIFT          shift and go to state 241
    RSHIFT          shift and go to state 242
    LSHIFTA         shift and go to state 243
    RSHIFTA         shift and go to state 244
    LT              shift and go to state 245
    GT              shift and go to state 246
    LE              shift and go to state 247
    GE              shift and go to state 248
    EQ              shift and go to state 249
    NE              shift and go to state 250
    EQL             shift and go to state 251
    NEL             shift and go to state 252
    AND             shift and go to state 253
    XOR             shift and go to state 254
    XNOR            shift and go to state 255
    OR              shift and go to state 256
    LAND            shift and go to state 257
    LOR             shift and go to state 258
    COND            shift and go to state 259


state 652

    (179) partselect -> identifier LBRACKET expression PLUSCOLON expression . RBRACKET
    (140) expression -> expression . POWER expression
    (141) expression -> expression . TIMES expression
    (142) expression -> expression . DIVIDE expression
    (143) expression -> expression . MOD expression
    (144) expression -> expression . PLUS expression
    (145) expression -> expression . MINUS expression
    (146) expression -> expression . LSHIFT expression
    (147) expression -> expression . RSHIFT expression
    (148) expression -> expression . LSHIFTA expression
    (149) expression -> expression . RSHIFTA expression
    (150) expression -> expression . LT expression
    (151) expression -> expression . GT expression
    (152) expression -> expression . LE expression
    (153) expression -> expression . GE expression
    (154) expression -> expression . EQ expression
    (155) expression -> expression . NE expression
    (156) expression -> expression . EQL expression
    (157) expression -> expression . NEL expression
    (158) expression -> expression . AND expression
    (159) expression -> expression . XOR expression
    (160) expression -> expression . XNOR expression
    (161) expression -> expression . OR expression
    (162) expression -> expression . LAND expression
    (163) expression -> expression . LOR expression
    (164) expression -> expression . COND expression COLON expression

    RBRACKET        shift and go to state 715
    POWER           shift and go to state 236
    TIMES           shift and go to state 398
    DIVIDE          shift and go to state 237
    MOD             shift and go to state 238
    PLUS            shift and go to state 239
    MINUS           shift and go to state 240
    LSHIFT          shift and go to state 241
    RSHIFT          shift and go to state 242
    LSHIFTA         shift and go to state 243
    RSHIFTA         shift and go to state 244
    LT              shift and go to state 245
    GT              shift and go to state 246
    LE              shift and go to state 247
    GE              shift and go to state 248
    EQ              shift and go to state 249
    NE              shift and go to state 250
    EQL             shift and go to state 251
    NEL             shift and go to state 252
    AND             shift and go to state 253
    XOR             shift and go to state 254
    XNOR            shift and go to state 255
    OR              shift and go to state 256
    LAND            shift and go to state 257
    LOR             shift and go to state 258
    COND            shift and go to state 259


state 653

    (180) partselect -> identifier LBRACKET expression MINUSCOLON expression . RBRACKET
    (140) expression -> expression . POWER expression
    (141) expression -> expression . TIMES expression
    (142) expression -> expression . DIVIDE expression
    (143) expression -> expression . MOD expression
    (144) expression -> expression . PLUS expression
    (145) expression -> expression . MINUS expression
    (146) expression -> expression . LSHIFT expression
    (147) expression -> expression . RSHIFT expression
    (148) expression -> expression . LSHIFTA expression
    (149) expression -> expression . RSHIFTA expression
    (150) expression -> expression . LT expression
    (151) expression -> expression . GT expression
    (152) expression -> expression . LE expression
    (153) expression -> expression . GE expression
    (154) expression -> expression . EQ expression
    (155) expression -> expression . NE expression
    (156) expression -> expression . EQL expression
    (157) expression -> expression . NEL expression
    (158) expression -> expression . AND expression
    (159) expression -> expression . XOR expression
    (160) expression -> expression . XNOR expression
    (161) expression -> expression . OR expression
    (162) expression -> expression . LAND expression
    (163) expression -> expression . LOR expression
    (164) expression -> expression . COND expression COLON expression

    RBRACKET        shift and go to state 716
    POWER           shift and go to state 236
    TIMES           shift and go to state 398
    DIVIDE          shift and go to state 237
    MOD             shift and go to state 238
    PLUS            shift and go to state 239
    MINUS           shift and go to state 240
    LSHIFT          shift and go to state 241
    RSHIFT          shift and go to state 242
    LSHIFTA         shift and go to state 243
    RSHIFTA         shift and go to state 244
    LT              shift and go to state 245
    GT              shift and go to state 246
    LE              shift and go to state 247
    GE              shift and go to state 248
    EQ              shift and go to state 249
    NE              shift and go to state 250
    EQL             shift and go to state 251
    NEL             shift and go to state 252
    AND             shift and go to state 253
    XOR             shift and go to state 254
    XNOR            shift and go to state 255
    OR              shift and go to state 256
    LAND            shift and go to state 257
    LOR             shift and go to state 258
    COND            shift and go to state 259


state 654

    (374) func_args -> func_args COMMA expression .
    (140) expression -> expression . POWER expression
    (141) expression -> expression . TIMES expression
    (142) expression -> expression . DIVIDE expression
    (143) expression -> expression . MOD expression
    (144) expression -> expression . PLUS expression
    (145) expression -> expression . MINUS expression
    (146) expression -> expression . LSHIFT expression
    (147) expression -> expression . RSHIFT expression
    (148) expression -> expression . LSHIFTA expression
    (149) expression -> expression . RSHIFTA expression
    (150) expression -> expression . LT expression
    (151) expression -> expression . GT expression
    (152) expression -> expression . LE expression
    (153) expression -> expression . GE expression
    (154) expression -> expression . EQ expression
    (155) expression -> expression . NE expression
    (156) expression -> expression . EQL expression
    (157) expression -> expression . NEL expression
    (158) expression -> expression . AND expression
    (159) expression -> expression . XOR expression
    (160) expression -> expression . XNOR expression
    (161) expression -> expression . OR expression
    (162) expression -> expression . LAND expression
    (163) expression -> expression . LOR expression
    (164) expression -> expression . COND expression COLON expression

    RPAREN          reduce using rule 374 (func_args -> func_args COMMA expression .)
    COMMA           reduce using rule 374 (func_args -> func_args COMMA expression .)
    POWER           shift and go to state 236
    TIMES           shift and go to state 398
    DIVIDE          shift and go to state 237
    MOD             shift and go to state 238
    PLUS            shift and go to state 239
    MINUS           shift and go to state 240
    LSHIFT          shift and go to state 241
    RSHIFT          shift and go to state 242
    LSHIFTA         shift and go to state 243
    RSHIFTA         shift and go to state 244
    LT              shift and go to state 245
    GT              shift and go to state 246
    LE              shift and go to state 247
    GE              shift and go to state 248
    EQ              shift and go to state 249
    NE              shift and go to state 250
    EQL             shift and go to state 251
    NEL             shift and go to state 252
    AND             shift and go to state 253
    XOR             shift and go to state 254
    XNOR            shift and go to state 255
    OR              shift and go to state 256
    LAND            shift and go to state 257
    LOR             shift and go to state 258
    COND            shift and go to state 259


state 655

    (352) systemcall -> DOLLER ID LPAREN sysargs RPAREN .

    TIMES           reduce using rule 352 (systemcall -> DOLLER ID LPAREN sysargs RPAREN .)
    POWER           reduce using rule 352 (systemcall -> DOLLER ID LPAREN sysargs RPAREN .)
    DIVIDE          reduce using rule 352 (systemcall -> DOLLER ID LPAREN sysargs RPAREN .)
    MOD             reduce using rule 352 (systemcall -> DOLLER ID LPAREN sysargs RPAREN .)
    PLUS            reduce using rule 352 (systemcall -> DOLLER ID LPAREN sysargs RPAREN .)
    MINUS           reduce using rule 352 (systemcall -> DOLLER ID LPAREN sysargs RPAREN .)
    LSHIFT          reduce using rule 352 (systemcall -> DOLLER ID LPAREN sysargs RPAREN .)
    RSHIFT          reduce using rule 352 (systemcall -> DOLLER ID LPAREN sysargs RPAREN .)
    LSHIFTA         reduce using rule 352 (systemcall -> DOLLER ID LPAREN sysargs RPAREN .)
    RSHIFTA         reduce using rule 352 (systemcall -> DOLLER ID LPAREN sysargs RPAREN .)
    LT              reduce using rule 352 (systemcall -> DOLLER ID LPAREN sysargs RPAREN .)
    GT              reduce using rule 352 (systemcall -> DOLLER ID LPAREN sysargs RPAREN .)
    LE              reduce using rule 352 (systemcall -> DOLLER ID LPAREN sysargs RPAREN .)
    GE              reduce using rule 352 (systemcall -> DOLLER ID LPAREN sysargs RPAREN .)
    EQ              reduce using rule 352 (systemcall -> DOLLER ID LPAREN sysargs RPAREN .)
    NE              reduce using rule 352 (systemcall -> DOLLER ID LPAREN sysargs RPAREN .)
    EQL             reduce using rule 352 (systemcall -> DOLLER ID LPAREN sysargs RPAREN .)
    NEL             reduce using rule 352 (systemcall -> DOLLER ID LPAREN sysargs RPAREN .)
    AND             reduce using rule 352 (systemcall -> DOLLER ID LPAREN sysargs RPAREN .)
    XOR             reduce using rule 352 (systemcall -> DOLLER ID LPAREN sysargs RPAREN .)
    XNOR            reduce using rule 352 (systemcall -> DOLLER ID LPAREN sysargs RPAREN .)
    OR              reduce using rule 352 (systemcall -> DOLLER ID LPAREN sysargs RPAREN .)
    LAND            reduce using rule 352 (systemcall -> DOLLER ID LPAREN sysargs RPAREN .)
    LOR             reduce using rule 352 (systemcall -> DOLLER ID LPAREN sysargs RPAREN .)
    COND            reduce using rule 352 (systemcall -> DOLLER ID LPAREN sysargs RPAREN .)
    SEMICOLON       reduce using rule 352 (systemcall -> DOLLER ID LPAREN sysargs RPAREN .)
    RPAREN          reduce using rule 352 (systemcall -> DOLLER ID LPAREN sysargs RPAREN .)
    LBRACE          reduce using rule 352 (systemcall -> DOLLER ID LPAREN sysargs RPAREN .)
    RBRACE          reduce using rule 352 (systemcall -> DOLLER ID LPAREN sysargs RPAREN .)
    COMMA           reduce using rule 352 (systemcall -> DOLLER ID LPAREN sysargs RPAREN .)
    COLON           reduce using rule 352 (systemcall -> DOLLER ID LPAREN sysargs RPAREN .)
    PLUSCOLON       reduce using rule 352 (systemcall -> DOLLER ID LPAREN sysargs RPAREN .)
    MINUSCOLON      reduce using rule 352 (systemcall -> DOLLER ID LPAREN sysargs RPAREN .)
    RBRACKET        reduce using rule 352 (systemcall -> DOLLER ID LPAREN sysargs RPAREN .)


state 656

    (354) sysargs -> sysargs COMMA . sysarg
    (357) sysarg -> . expression
    (130) expression -> . MINUS expression
    (131) expression -> . PLUS expression
    (132) expression -> . LNOT expression
    (133) expression -> . NOT expression
    (134) expression -> . AND expression
    (135) expression -> . NAND expression
    (136) expression -> . NOR expression
    (137) expression -> . OR expression
    (138) expression -> . XOR expression
    (139) expression -> . XNOR expression
    (140) expression -> . expression POWER expression
    (141) expression -> . expression TIMES expression
    (142) expression -> . expression DIVIDE expression
    (143) expression -> . expression MOD expression
    (144) expression -> . expression PLUS expression
    (145) expression -> . expression MINUS expression
    (146) expression -> . expression LSHIFT expression
    (147) expression -> . expression RSHIFT expression
    (148) expression -> . expression LSHIFTA expression
    (149) expression -> . expression RSHIFTA expression
    (150) expression -> . expression LT expression
    (151) expression -> . expression GT expression
    (152) expression -> . expression LE expression
    (153) expression -> . expression GE expression
    (154) expression -> . expression EQ expression
    (155) expression -> . expression NE expression
    (156) expression -> . expression EQL expression
    (157) expression -> . expression NEL expression
    (158) expression -> . expression AND expression
    (159) expression -> . expression XOR expression
    (160) expression -> . expression XNOR expression
    (161) expression -> . expression OR expression
    (162) expression -> . expression LAND expression
    (163) expression -> . expression LOR expression
    (164) expression -> . expression COND expression COLON expression
    (165) expression -> . LPAREN expression RPAREN
    (166) expression -> . concat
    (167) expression -> . repeat
    (168) expression -> . partselect
    (169) expression -> . pointer
    (170) expression -> . functioncall
    (171) expression -> . systemcall
    (172) expression -> . identifier
    (173) expression -> . const_expression
    (174) concat -> . LBRACE concatlist RBRACE
    (177) repeat -> . LBRACE expression concat RBRACE
    (178) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (179) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (180) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (181) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (182) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (183) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (184) pointer -> . identifier LBRACKET expression RBRACKET
    (185) pointer -> . pointer LBRACKET expression RBRACKET
    (373) functioncall -> . identifier LPAREN func_args RPAREN
    (351) systemcall -> . DOLLER ID
    (352) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (353) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (392) identifier -> . ID
    (393) identifier -> . scope ID
    (186) const_expression -> . intnumber
    (187) const_expression -> . floatnumber
    (188) const_expression -> . stringliteral
    (394) scope -> . identifier DOT
    (395) scope -> . pointer DOT
    (190) intnumber -> . INTNUMBER_DEC
    (191) intnumber -> . SIGNED_INTNUMBER_DEC
    (192) intnumber -> . INTNUMBER_BIN
    (193) intnumber -> . SIGNED_INTNUMBER_BIN
    (194) intnumber -> . INTNUMBER_OCT
    (195) intnumber -> . SIGNED_INTNUMBER_OCT
    (196) intnumber -> . INTNUMBER_HEX
    (197) intnumber -> . SIGNED_INTNUMBER_HEX
    (189) floatnumber -> . FLOATNUMBER
    (198) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 88
    PLUS            shift and go to state 89
    LNOT            shift and go to state 90
    NOT             shift and go to state 91
    AND             shift and go to state 92
    NAND            shift and go to state 93
    NOR             shift and go to state 94
    OR              shift and go to state 95
    XOR             shift and go to state 96
    XNOR            shift and go to state 97
    LPAREN          shift and go to state 85
    LBRACE          shift and go to state 106
    DOLLER          shift and go to state 107
    ID              shift and go to state 86
    INTNUMBER_DEC   shift and go to state 112
    SIGNED_INTNUMBER_DEC shift and go to state 113
    INTNUMBER_BIN   shift and go to state 114
    SIGNED_INTNUMBER_BIN shift and go to state 115
    INTNUMBER_OCT   shift and go to state 116
    SIGNED_INTNUMBER_OCT shift and go to state 117
    INTNUMBER_HEX   shift and go to state 118
    SIGNED_INTNUMBER_HEX shift and go to state 119
    FLOATNUMBER     shift and go to state 120
    STRING_LITERAL  shift and go to state 121

    sysarg                         shift and go to state 717
    expression                     shift and go to state 553
    concat                         shift and go to state 98
    repeat                         shift and go to state 99
    partselect                     shift and go to state 100
    pointer                        shift and go to state 101
    functioncall                   shift and go to state 102
    systemcall                     shift and go to state 103
    identifier                     shift and go to state 104
    const_expression               shift and go to state 105
    scope                          shift and go to state 108
    intnumber                      shift and go to state 109
    floatnumber                    shift and go to state 110
    stringliteral                  shift and go to state 111

state 657

    (353) systemcall -> DOLLER SIGNED LPAREN sysargs RPAREN .

    TIMES           reduce using rule 353 (systemcall -> DOLLER SIGNED LPAREN sysargs RPAREN .)
    POWER           reduce using rule 353 (systemcall -> DOLLER SIGNED LPAREN sysargs RPAREN .)
    DIVIDE          reduce using rule 353 (systemcall -> DOLLER SIGNED LPAREN sysargs RPAREN .)
    MOD             reduce using rule 353 (systemcall -> DOLLER SIGNED LPAREN sysargs RPAREN .)
    PLUS            reduce using rule 353 (systemcall -> DOLLER SIGNED LPAREN sysargs RPAREN .)
    MINUS           reduce using rule 353 (systemcall -> DOLLER SIGNED LPAREN sysargs RPAREN .)
    LSHIFT          reduce using rule 353 (systemcall -> DOLLER SIGNED LPAREN sysargs RPAREN .)
    RSHIFT          reduce using rule 353 (systemcall -> DOLLER SIGNED LPAREN sysargs RPAREN .)
    LSHIFTA         reduce using rule 353 (systemcall -> DOLLER SIGNED LPAREN sysargs RPAREN .)
    RSHIFTA         reduce using rule 353 (systemcall -> DOLLER SIGNED LPAREN sysargs RPAREN .)
    LT              reduce using rule 353 (systemcall -> DOLLER SIGNED LPAREN sysargs RPAREN .)
    GT              reduce using rule 353 (systemcall -> DOLLER SIGNED LPAREN sysargs RPAREN .)
    LE              reduce using rule 353 (systemcall -> DOLLER SIGNED LPAREN sysargs RPAREN .)
    GE              reduce using rule 353 (systemcall -> DOLLER SIGNED LPAREN sysargs RPAREN .)
    EQ              reduce using rule 353 (systemcall -> DOLLER SIGNED LPAREN sysargs RPAREN .)
    NE              reduce using rule 353 (systemcall -> DOLLER SIGNED LPAREN sysargs RPAREN .)
    EQL             reduce using rule 353 (systemcall -> DOLLER SIGNED LPAREN sysargs RPAREN .)
    NEL             reduce using rule 353 (systemcall -> DOLLER SIGNED LPAREN sysargs RPAREN .)
    AND             reduce using rule 353 (systemcall -> DOLLER SIGNED LPAREN sysargs RPAREN .)
    XOR             reduce using rule 353 (systemcall -> DOLLER SIGNED LPAREN sysargs RPAREN .)
    XNOR            reduce using rule 353 (systemcall -> DOLLER SIGNED LPAREN sysargs RPAREN .)
    OR              reduce using rule 353 (systemcall -> DOLLER SIGNED LPAREN sysargs RPAREN .)
    LAND            reduce using rule 353 (systemcall -> DOLLER SIGNED LPAREN sysargs RPAREN .)
    LOR             reduce using rule 353 (systemcall -> DOLLER SIGNED LPAREN sysargs RPAREN .)
    COND            reduce using rule 353 (systemcall -> DOLLER SIGNED LPAREN sysargs RPAREN .)
    SEMICOLON       reduce using rule 353 (systemcall -> DOLLER SIGNED LPAREN sysargs RPAREN .)
    RPAREN          reduce using rule 353 (systemcall -> DOLLER SIGNED LPAREN sysargs RPAREN .)
    LBRACE          reduce using rule 353 (systemcall -> DOLLER SIGNED LPAREN sysargs RPAREN .)
    RBRACE          reduce using rule 353 (systemcall -> DOLLER SIGNED LPAREN sysargs RPAREN .)
    COMMA           reduce using rule 353 (systemcall -> DOLLER SIGNED LPAREN sysargs RPAREN .)
    COLON           reduce using rule 353 (systemcall -> DOLLER SIGNED LPAREN sysargs RPAREN .)
    PLUSCOLON       reduce using rule 353 (systemcall -> DOLLER SIGNED LPAREN sysargs RPAREN .)
    MINUSCOLON      reduce using rule 353 (systemcall -> DOLLER SIGNED LPAREN sysargs RPAREN .)
    RBRACKET        reduce using rule 353 (systemcall -> DOLLER SIGNED LPAREN sysargs RPAREN .)


state 658

    (342) generate_if -> IF LPAREN cond RPAREN gif_true_item . ELSE gif_false_item
    (343) generate_if -> IF LPAREN cond RPAREN gif_true_item .

  ! shift/reduce conflict for ELSE resolved as shift
    ELSE            shift and go to state 718
    ENDGENERATE     reduce using rule 343 (generate_if -> IF LPAREN cond RPAREN gif_true_item .)
    IF              reduce using rule 343 (generate_if -> IF LPAREN cond RPAREN gif_true_item .)
    FOR             reduce using rule 343 (generate_if -> IF LPAREN cond RPAREN gif_true_item .)
    INTEGER         reduce using rule 343 (generate_if -> IF LPAREN cond RPAREN gif_true_item .)
    REAL            reduce using rule 343 (generate_if -> IF LPAREN cond RPAREN gif_true_item .)
    PARAMETER       reduce using rule 343 (generate_if -> IF LPAREN cond RPAREN gif_true_item .)
    LOCALPARAM      reduce using rule 343 (generate_if -> IF LPAREN cond RPAREN gif_true_item .)
    GENVAR          reduce using rule 343 (generate_if -> IF LPAREN cond RPAREN gif_true_item .)
    ASSIGN          reduce using rule 343 (generate_if -> IF LPAREN cond RPAREN gif_true_item .)
    ALWAYS          reduce using rule 343 (generate_if -> IF LPAREN cond RPAREN gif_true_item .)
    ALWAYS_FF       reduce using rule 343 (generate_if -> IF LPAREN cond RPAREN gif_true_item .)
    ALWAYS_COMB     reduce using rule 343 (generate_if -> IF LPAREN cond RPAREN gif_true_item .)
    INITIAL         reduce using rule 343 (generate_if -> IF LPAREN cond RPAREN gif_true_item .)
    ID              reduce using rule 343 (generate_if -> IF LPAREN cond RPAREN gif_true_item .)
    SENS_OR         reduce using rule 343 (generate_if -> IF LPAREN cond RPAREN gif_true_item .)
    FUNCTION        reduce using rule 343 (generate_if -> IF LPAREN cond RPAREN gif_true_item .)
    TASK            reduce using rule 343 (generate_if -> IF LPAREN cond RPAREN gif_true_item .)
    LPAREN          reduce using rule 343 (generate_if -> IF LPAREN cond RPAREN gif_true_item .)
    INPUT           reduce using rule 343 (generate_if -> IF LPAREN cond RPAREN gif_true_item .)
    OUTPUT          reduce using rule 343 (generate_if -> IF LPAREN cond RPAREN gif_true_item .)
    INOUT           reduce using rule 343 (generate_if -> IF LPAREN cond RPAREN gif_true_item .)
    TRI             reduce using rule 343 (generate_if -> IF LPAREN cond RPAREN gif_true_item .)
    REG             reduce using rule 343 (generate_if -> IF LPAREN cond RPAREN gif_true_item .)
    LOGIC           reduce using rule 343 (generate_if -> IF LPAREN cond RPAREN gif_true_item .)
    WIRE            reduce using rule 343 (generate_if -> IF LPAREN cond RPAREN gif_true_item .)
    SIGNED          reduce using rule 343 (generate_if -> IF LPAREN cond RPAREN gif_true_item .)
    SUPPLY0         reduce using rule 343 (generate_if -> IF LPAREN cond RPAREN gif_true_item .)
    SUPPLY1         reduce using rule 343 (generate_if -> IF LPAREN cond RPAREN gif_true_item .)
    END             reduce using rule 343 (generate_if -> IF LPAREN cond RPAREN gif_true_item .)

  ! ELSE            [ reduce using rule 343 (generate_if -> IF LPAREN cond RPAREN gif_true_item .) ]


state 659

    (344) gif_true_item -> generate_item .

    ELSE            reduce using rule 344 (gif_true_item -> generate_item .)
    ENDGENERATE     reduce using rule 344 (gif_true_item -> generate_item .)
    IF              reduce using rule 344 (gif_true_item -> generate_item .)
    FOR             reduce using rule 344 (gif_true_item -> generate_item .)
    INTEGER         reduce using rule 344 (gif_true_item -> generate_item .)
    REAL            reduce using rule 344 (gif_true_item -> generate_item .)
    PARAMETER       reduce using rule 344 (gif_true_item -> generate_item .)
    LOCALPARAM      reduce using rule 344 (gif_true_item -> generate_item .)
    GENVAR          reduce using rule 344 (gif_true_item -> generate_item .)
    ASSIGN          reduce using rule 344 (gif_true_item -> generate_item .)
    ALWAYS          reduce using rule 344 (gif_true_item -> generate_item .)
    ALWAYS_FF       reduce using rule 344 (gif_true_item -> generate_item .)
    ALWAYS_COMB     reduce using rule 344 (gif_true_item -> generate_item .)
    INITIAL         reduce using rule 344 (gif_true_item -> generate_item .)
    ID              reduce using rule 344 (gif_true_item -> generate_item .)
    SENS_OR         reduce using rule 344 (gif_true_item -> generate_item .)
    FUNCTION        reduce using rule 344 (gif_true_item -> generate_item .)
    TASK            reduce using rule 344 (gif_true_item -> generate_item .)
    LPAREN          reduce using rule 344 (gif_true_item -> generate_item .)
    INPUT           reduce using rule 344 (gif_true_item -> generate_item .)
    OUTPUT          reduce using rule 344 (gif_true_item -> generate_item .)
    INOUT           reduce using rule 344 (gif_true_item -> generate_item .)
    TRI             reduce using rule 344 (gif_true_item -> generate_item .)
    REG             reduce using rule 344 (gif_true_item -> generate_item .)
    LOGIC           reduce using rule 344 (gif_true_item -> generate_item .)
    WIRE            reduce using rule 344 (gif_true_item -> generate_item .)
    SIGNED          reduce using rule 344 (gif_true_item -> generate_item .)
    SUPPLY0         reduce using rule 344 (gif_true_item -> generate_item .)
    SUPPLY1         reduce using rule 344 (gif_true_item -> generate_item .)
    END             reduce using rule 344 (gif_true_item -> generate_item .)


state 660

    (345) gif_true_item -> generate_block .

    ELSE            reduce using rule 345 (gif_true_item -> generate_block .)
    ENDGENERATE     reduce using rule 345 (gif_true_item -> generate_block .)
    IF              reduce using rule 345 (gif_true_item -> generate_block .)
    FOR             reduce using rule 345 (gif_true_item -> generate_block .)
    INTEGER         reduce using rule 345 (gif_true_item -> generate_block .)
    REAL            reduce using rule 345 (gif_true_item -> generate_block .)
    PARAMETER       reduce using rule 345 (gif_true_item -> generate_block .)
    LOCALPARAM      reduce using rule 345 (gif_true_item -> generate_block .)
    GENVAR          reduce using rule 345 (gif_true_item -> generate_block .)
    ASSIGN          reduce using rule 345 (gif_true_item -> generate_block .)
    ALWAYS          reduce using rule 345 (gif_true_item -> generate_block .)
    ALWAYS_FF       reduce using rule 345 (gif_true_item -> generate_block .)
    ALWAYS_COMB     reduce using rule 345 (gif_true_item -> generate_block .)
    INITIAL         reduce using rule 345 (gif_true_item -> generate_block .)
    ID              reduce using rule 345 (gif_true_item -> generate_block .)
    SENS_OR         reduce using rule 345 (gif_true_item -> generate_block .)
    FUNCTION        reduce using rule 345 (gif_true_item -> generate_block .)
    TASK            reduce using rule 345 (gif_true_item -> generate_block .)
    LPAREN          reduce using rule 345 (gif_true_item -> generate_block .)
    INPUT           reduce using rule 345 (gif_true_item -> generate_block .)
    OUTPUT          reduce using rule 345 (gif_true_item -> generate_block .)
    INOUT           reduce using rule 345 (gif_true_item -> generate_block .)
    TRI             reduce using rule 345 (gif_true_item -> generate_block .)
    REG             reduce using rule 345 (gif_true_item -> generate_block .)
    LOGIC           reduce using rule 345 (gif_true_item -> generate_block .)
    WIRE            reduce using rule 345 (gif_true_item -> generate_block .)
    SIGNED          reduce using rule 345 (gif_true_item -> generate_block .)
    SUPPLY0         reduce using rule 345 (gif_true_item -> generate_block .)
    SUPPLY1         reduce using rule 345 (gif_true_item -> generate_block .)
    END             reduce using rule 345 (gif_true_item -> generate_block .)


state 661

    (340) generate_block -> BEGIN . generate_items END
    (341) generate_block -> BEGIN . COLON ID generate_items END
    (334) generate_items -> . empty
    (335) generate_items -> . generate_items generate_item
    (336) generate_items -> . generate_item
    (400) empty -> .
    (337) generate_item -> . standard_item
    (338) generate_item -> . generate_if
    (339) generate_item -> . generate_for
    (61) standard_item -> . decl
    (62) standard_item -> . integerdecl
    (63) standard_item -> . realdecl
    (64) standard_item -> . declassign
    (65) standard_item -> . parameterdecl
    (66) standard_item -> . localparamdecl
    (67) standard_item -> . genvardecl
    (68) standard_item -> . assignment
    (69) standard_item -> . always
    (70) standard_item -> . always_ff
    (71) standard_item -> . always_comb
    (72) standard_item -> . initial
    (73) standard_item -> . instance
    (74) standard_item -> . function
    (75) standard_item -> . task
    (76) standard_item -> . pragma
    (342) generate_if -> . IF LPAREN cond RPAREN gif_true_item ELSE gif_false_item
    (343) generate_if -> . IF LPAREN cond RPAREN gif_true_item
    (348) generate_for -> . FOR LPAREN forpre forcond forpost RPAREN generate_forcontent
    (77) decl -> . sigtypes declnamelist SEMICOLON
    (78) decl -> . sigtypes width declnamelist SEMICOLON
    (87) integerdecl -> . INTEGER integernamelist SEMICOLON
    (88) integerdecl -> . INTEGER SIGNED integernamelist SEMICOLON
    (92) realdecl -> . REAL realnamelist SEMICOLON
    (83) declassign -> . sigtypes declassign_element SEMICOLON
    (84) declassign -> . sigtypes width declassign_element SEMICOLON
    (96) parameterdecl -> . PARAMETER param_substitution_list SEMICOLON
    (97) parameterdecl -> . PARAMETER SIGNED param_substitution_list SEMICOLON
    (98) parameterdecl -> . PARAMETER width param_substitution_list SEMICOLON
    (99) parameterdecl -> . PARAMETER SIGNED width param_substitution_list SEMICOLON
    (100) parameterdecl -> . PARAMETER INTEGER param_substitution_list SEMICOLON
    (101) localparamdecl -> . LOCALPARAM param_substitution_list SEMICOLON
    (102) localparamdecl -> . LOCALPARAM SIGNED param_substitution_list SEMICOLON
    (103) localparamdecl -> . LOCALPARAM width param_substitution_list SEMICOLON
    (104) localparamdecl -> . LOCALPARAM SIGNED width param_substitution_list SEMICOLON
    (105) localparamdecl -> . LOCALPARAM INTEGER param_substitution_list SEMICOLON
    (329) genvardecl -> . GENVAR genvarlist SEMICOLON
    (109) assignment -> . ASSIGN lvalue EQUALS rvalue SEMICOLON
    (110) assignment -> . ASSIGN delays lvalue EQUALS delays rvalue SEMICOLON
    (199) always -> . ALWAYS senslist always_statement
    (200) always_ff -> . ALWAYS_FF senslist always_statement
    (201) always_comb -> . ALWAYS_COMB senslist always_statement
    (290) initial -> . INITIAL initial_statement
    (297) instance -> . ID parameterlist instance_bodylist SEMICOLON
    (298) instance -> . SENS_OR parameterlist instance_bodylist SEMICOLON
    (303) instance -> . ID instance_bodylist_noname SEMICOLON
    (304) instance -> . SENS_OR instance_bodylist_noname SEMICOLON
    (358) function -> . FUNCTION width ID SEMICOLON function_statement ENDFUNCTION
    (359) function -> . FUNCTION ID SEMICOLON function_statement ENDFUNCTION
    (377) task -> . TASK ID SEMICOLON task_statement ENDTASK
    (7) pragma -> . LPAREN TIMES ID EQUALS expression TIMES RPAREN
    (8) pragma -> . LPAREN TIMES ID TIMES RPAREN
    (35) sigtypes -> . sigtypes sigtype
    (36) sigtypes -> . sigtype
    (37) sigtype -> . INPUT
    (38) sigtype -> . OUTPUT
    (39) sigtype -> . INOUT
    (40) sigtype -> . TRI
    (41) sigtype -> . REG
    (42) sigtype -> . LOGIC
    (43) sigtype -> . WIRE
    (44) sigtype -> . SIGNED
    (45) sigtype -> . SUPPLY0
    (46) sigtype -> . SUPPLY1

  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for REAL resolved as shift
  ! shift/reduce conflict for PARAMETER resolved as shift
  ! shift/reduce conflict for LOCALPARAM resolved as shift
  ! shift/reduce conflict for GENVAR resolved as shift
  ! shift/reduce conflict for ASSIGN resolved as shift
  ! shift/reduce conflict for ALWAYS resolved as shift
  ! shift/reduce conflict for ALWAYS_FF resolved as shift
  ! shift/reduce conflict for ALWAYS_COMB resolved as shift
  ! shift/reduce conflict for INITIAL resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for SENS_OR resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for TASK resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for INPUT resolved as shift
  ! shift/reduce conflict for OUTPUT resolved as shift
  ! shift/reduce conflict for INOUT resolved as shift
  ! shift/reduce conflict for TRI resolved as shift
  ! shift/reduce conflict for REG resolved as shift
  ! shift/reduce conflict for LOGIC resolved as shift
  ! shift/reduce conflict for WIRE resolved as shift
  ! shift/reduce conflict for SIGNED resolved as shift
  ! shift/reduce conflict for SUPPLY0 resolved as shift
  ! shift/reduce conflict for SUPPLY1 resolved as shift
    COLON           shift and go to state 720
    END             reduce using rule 400 (empty -> .)
    IF              shift and go to state 130
    FOR             shift and go to state 131
    INTEGER         shift and go to state 47
    REAL            shift and go to state 49
    PARAMETER       shift and go to state 50
    LOCALPARAM      shift and go to state 51
    GENVAR          shift and go to state 52
    ASSIGN          shift and go to state 53
    ALWAYS          shift and go to state 54
    ALWAYS_FF       shift and go to state 55
    ALWAYS_COMB     shift and go to state 56
    INITIAL         shift and go to state 57
    ID              shift and go to state 58
    SENS_OR         shift and go to state 59
    FUNCTION        shift and go to state 60
    TASK            shift and go to state 61
    LPAREN          shift and go to state 8
    INPUT           shift and go to state 63
    OUTPUT          shift and go to state 64
    INOUT           shift and go to state 65
    TRI             shift and go to state 66
    REG             shift and go to state 67
    LOGIC           shift and go to state 68
    WIRE            shift and go to state 69
    SIGNED          shift and go to state 48
    SUPPLY0         shift and go to state 70
    SUPPLY1         shift and go to state 71

  ! IF              [ reduce using rule 400 (empty -> .) ]
  ! FOR             [ reduce using rule 400 (empty -> .) ]
  ! INTEGER         [ reduce using rule 400 (empty -> .) ]
  ! REAL            [ reduce using rule 400 (empty -> .) ]
  ! PARAMETER       [ reduce using rule 400 (empty -> .) ]
  ! LOCALPARAM      [ reduce using rule 400 (empty -> .) ]
  ! GENVAR          [ reduce using rule 400 (empty -> .) ]
  ! ASSIGN          [ reduce using rule 400 (empty -> .) ]
  ! ALWAYS          [ reduce using rule 400 (empty -> .) ]
  ! ALWAYS_FF       [ reduce using rule 400 (empty -> .) ]
  ! ALWAYS_COMB     [ reduce using rule 400 (empty -> .) ]
  ! INITIAL         [ reduce using rule 400 (empty -> .) ]
  ! ID              [ reduce using rule 400 (empty -> .) ]
  ! SENS_OR         [ reduce using rule 400 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 400 (empty -> .) ]
  ! TASK            [ reduce using rule 400 (empty -> .) ]
  ! LPAREN          [ reduce using rule 400 (empty -> .) ]
  ! INPUT           [ reduce using rule 400 (empty -> .) ]
  ! OUTPUT          [ reduce using rule 400 (empty -> .) ]
  ! INOUT           [ reduce using rule 400 (empty -> .) ]
  ! TRI             [ reduce using rule 400 (empty -> .) ]
  ! REG             [ reduce using rule 400 (empty -> .) ]
  ! LOGIC           [ reduce using rule 400 (empty -> .) ]
  ! WIRE            [ reduce using rule 400 (empty -> .) ]
  ! SIGNED          [ reduce using rule 400 (empty -> .) ]
  ! SUPPLY0         [ reduce using rule 400 (empty -> .) ]
  ! SUPPLY1         [ reduce using rule 400 (empty -> .) ]

    generate_items                 shift and go to state 719
    empty                          shift and go to state 125
    generate_item                  shift and go to state 126
    standard_item                  shift and go to state 127
    generate_if                    shift and go to state 128
    generate_for                   shift and go to state 129
    decl                           shift and go to state 29
    integerdecl                    shift and go to state 30
    realdecl                       shift and go to state 31
    declassign                     shift and go to state 32
    parameterdecl                  shift and go to state 33
    localparamdecl                 shift and go to state 34
    genvardecl                     shift and go to state 35
    assignment                     shift and go to state 36
    always                         shift and go to state 37
    always_ff                      shift and go to state 38
    always_comb                    shift and go to state 39
    initial                        shift and go to state 40
    instance                       shift and go to state 41
    function                       shift and go to state 42
    task                           shift and go to state 43
    pragma                         shift and go to state 44
    sigtypes                       shift and go to state 46
    sigtype                        shift and go to state 62

state 662

    (348) generate_for -> FOR LPAREN forpre forcond forpost . RPAREN generate_forcontent

    RPAREN          shift and go to state 721


state 663

    (275) forpost -> blocking_substitution_base .

    RPAREN          reduce using rule 275 (forpost -> blocking_substitution_base .)


state 664

    (276) forpost -> empty .
    (244) delays -> empty .

    RPAREN          reduce using rule 276 (forpost -> empty .)
    LBRACE          reduce using rule 244 (delays -> empty .)
    ID              reduce using rule 244 (delays -> empty .)


state 665

    (238) blocking_substitution_base -> delays . lvalue EQUALS delays rvalue
    (125) lvalue -> . lpartselect
    (126) lvalue -> . lpointer
    (127) lvalue -> . lconcat
    (128) lvalue -> . identifier
    (111) lpartselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (112) lpartselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (113) lpartselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (114) lpartselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (115) lpartselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (116) lpartselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (117) lpointer -> . pointer
    (118) lconcat -> . LBRACE lconcatlist RBRACE
    (392) identifier -> . ID
    (393) identifier -> . scope ID
    (184) pointer -> . identifier LBRACKET expression RBRACKET
    (185) pointer -> . pointer LBRACKET expression RBRACKET
    (394) scope -> . identifier DOT
    (395) scope -> . pointer DOT

    LBRACE          shift and go to state 169
    ID              shift and go to state 86

    lvalue                         shift and go to state 722
    lpartselect                    shift and go to state 164
    lpointer                       shift and go to state 165
    lconcat                        shift and go to state 166
    identifier                     shift and go to state 167
    pointer                        shift and go to state 168
    scope                          shift and go to state 108

state 666

    (273) forcond -> cond SEMICOLON .

    DELAY           reduce using rule 273 (forcond -> cond SEMICOLON .)
    RPAREN          reduce using rule 273 (forcond -> cond SEMICOLON .)
    LBRACE          reduce using rule 273 (forcond -> cond SEMICOLON .)
    ID              reduce using rule 273 (forcond -> cond SEMICOLON .)


state 667

    (54) width -> LBRACKET expression COLON expression RBRACKET .

    ID              reduce using rule 54 (width -> LBRACKET expression COLON expression RBRACKET .)
    DELAY           reduce using rule 54 (width -> LBRACKET expression COLON expression RBRACKET .)
    LPAREN          reduce using rule 54 (width -> LBRACKET expression COLON expression RBRACKET .)


state 668

    (55) length -> LBRACKET expression COLON expression . RBRACKET
    (140) expression -> expression . POWER expression
    (141) expression -> expression . TIMES expression
    (142) expression -> expression . DIVIDE expression
    (143) expression -> expression . MOD expression
    (144) expression -> expression . PLUS expression
    (145) expression -> expression . MINUS expression
    (146) expression -> expression . LSHIFT expression
    (147) expression -> expression . RSHIFT expression
    (148) expression -> expression . LSHIFTA expression
    (149) expression -> expression . RSHIFTA expression
    (150) expression -> expression . LT expression
    (151) expression -> expression . GT expression
    (152) expression -> expression . LE expression
    (153) expression -> expression . GE expression
    (154) expression -> expression . EQ expression
    (155) expression -> expression . NE expression
    (156) expression -> expression . EQL expression
    (157) expression -> expression . NEL expression
    (158) expression -> expression . AND expression
    (159) expression -> expression . XOR expression
    (160) expression -> expression . XNOR expression
    (161) expression -> expression . OR expression
    (162) expression -> expression . LAND expression
    (163) expression -> expression . LOR expression
    (164) expression -> expression . COND expression COLON expression

    RBRACKET        shift and go to state 723
    POWER           shift and go to state 236
    TIMES           shift and go to state 398
    DIVIDE          shift and go to state 237
    MOD             shift and go to state 238
    PLUS            shift and go to state 239
    MINUS           shift and go to state 240
    LSHIFT          shift and go to state 241
    RSHIFT          shift and go to state 242
    LSHIFTA         shift and go to state 243
    RSHIFTA         shift and go to state 244
    LT              shift and go to state 245
    GT              shift and go to state 246
    LE              shift and go to state 247
    GE              shift and go to state 248
    EQ              shift and go to state 249
    NE              shift and go to state 250
    EQL             shift and go to state 251
    NEL             shift and go to state 252
    AND             shift and go to state 253
    XOR             shift and go to state 254
    XNOR            shift and go to state 255
    OR              shift and go to state 256
    LAND            shift and go to state 257
    LOR             shift and go to state 258
    COND            shift and go to state 259


state 669

    (86) declassign_element -> delays ID EQUALS delays rvalue .

    SEMICOLON       reduce using rule 86 (declassign_element -> delays ID EQUALS delays rvalue .)


state 670

    (110) assignment -> ASSIGN delays lvalue EQUALS delays rvalue . SEMICOLON

    SEMICOLON       shift and go to state 724


state 671

    (114) lpartselect -> identifier LBRACKET expression COLON expression . RBRACKET
    (140) expression -> expression . POWER expression
    (141) expression -> expression . TIMES expression
    (142) expression -> expression . DIVIDE expression
    (143) expression -> expression . MOD expression
    (144) expression -> expression . PLUS expression
    (145) expression -> expression . MINUS expression
    (146) expression -> expression . LSHIFT expression
    (147) expression -> expression . RSHIFT expression
    (148) expression -> expression . LSHIFTA expression
    (149) expression -> expression . RSHIFTA expression
    (150) expression -> expression . LT expression
    (151) expression -> expression . GT expression
    (152) expression -> expression . LE expression
    (153) expression -> expression . GE expression
    (154) expression -> expression . EQ expression
    (155) expression -> expression . NE expression
    (156) expression -> expression . EQL expression
    (157) expression -> expression . NEL expression
    (158) expression -> expression . AND expression
    (159) expression -> expression . XOR expression
    (160) expression -> expression . XNOR expression
    (161) expression -> expression . OR expression
    (162) expression -> expression . LAND expression
    (163) expression -> expression . LOR expression
    (164) expression -> expression . COND expression COLON expression

    RBRACKET        shift and go to state 725
    POWER           shift and go to state 236
    TIMES           shift and go to state 398
    DIVIDE          shift and go to state 237
    MOD             shift and go to state 238
    PLUS            shift and go to state 239
    MINUS           shift and go to state 240
    LSHIFT          shift and go to state 241
    RSHIFT          shift and go to state 242
    LSHIFTA         shift and go to state 243
    RSHIFTA         shift and go to state 244
    LT              shift and go to state 245
    GT              shift and go to state 246
    LE              shift and go to state 247
    GE              shift and go to state 248
    EQ              shift and go to state 249
    NE              shift and go to state 250
    EQL             shift and go to state 251
    NEL             shift and go to state 252
    AND             shift and go to state 253
    XOR             shift and go to state 254
    XNOR            shift and go to state 255
    OR              shift and go to state 256
    LAND            shift and go to state 257
    LOR             shift and go to state 258
    COND            shift and go to state 259


state 672

    (115) lpartselect -> identifier LBRACKET expression PLUSCOLON expression . RBRACKET
    (140) expression -> expression . POWER expression
    (141) expression -> expression . TIMES expression
    (142) expression -> expression . DIVIDE expression
    (143) expression -> expression . MOD expression
    (144) expression -> expression . PLUS expression
    (145) expression -> expression . MINUS expression
    (146) expression -> expression . LSHIFT expression
    (147) expression -> expression . RSHIFT expression
    (148) expression -> expression . LSHIFTA expression
    (149) expression -> expression . RSHIFTA expression
    (150) expression -> expression . LT expression
    (151) expression -> expression . GT expression
    (152) expression -> expression . LE expression
    (153) expression -> expression . GE expression
    (154) expression -> expression . EQ expression
    (155) expression -> expression . NE expression
    (156) expression -> expression . EQL expression
    (157) expression -> expression . NEL expression
    (158) expression -> expression . AND expression
    (159) expression -> expression . XOR expression
    (160) expression -> expression . XNOR expression
    (161) expression -> expression . OR expression
    (162) expression -> expression . LAND expression
    (163) expression -> expression . LOR expression
    (164) expression -> expression . COND expression COLON expression

    RBRACKET        shift and go to state 726
    POWER           shift and go to state 236
    TIMES           shift and go to state 398
    DIVIDE          shift and go to state 237
    MOD             shift and go to state 238
    PLUS            shift and go to state 239
    MINUS           shift and go to state 240
    LSHIFT          shift and go to state 241
    RSHIFT          shift and go to state 242
    LSHIFTA         shift and go to state 243
    RSHIFTA         shift and go to state 244
    LT              shift and go to state 245
    GT              shift and go to state 246
    LE              shift and go to state 247
    GE              shift and go to state 248
    EQ              shift and go to state 249
    NE              shift and go to state 250
    EQL             shift and go to state 251
    NEL             shift and go to state 252
    AND             shift and go to state 253
    XOR             shift and go to state 254
    XNOR            shift and go to state 255
    OR              shift and go to state 256
    LAND            shift and go to state 257
    LOR             shift and go to state 258
    COND            shift and go to state 259


state 673

    (116) lpartselect -> identifier LBRACKET expression MINUSCOLON expression . RBRACKET
    (140) expression -> expression . POWER expression
    (141) expression -> expression . TIMES expression
    (142) expression -> expression . DIVIDE expression
    (143) expression -> expression . MOD expression
    (144) expression -> expression . PLUS expression
    (145) expression -> expression . MINUS expression
    (146) expression -> expression . LSHIFT expression
    (147) expression -> expression . RSHIFT expression
    (148) expression -> expression . LSHIFTA expression
    (149) expression -> expression . RSHIFTA expression
    (150) expression -> expression . LT expression
    (151) expression -> expression . GT expression
    (152) expression -> expression . LE expression
    (153) expression -> expression . GE expression
    (154) expression -> expression . EQ expression
    (155) expression -> expression . NE expression
    (156) expression -> expression . EQL expression
    (157) expression -> expression . NEL expression
    (158) expression -> expression . AND expression
    (159) expression -> expression . XOR expression
    (160) expression -> expression . XNOR expression
    (161) expression -> expression . OR expression
    (162) expression -> expression . LAND expression
    (163) expression -> expression . LOR expression
    (164) expression -> expression . COND expression COLON expression

    RBRACKET        shift and go to state 727
    POWER           shift and go to state 236
    TIMES           shift and go to state 398
    DIVIDE          shift and go to state 237
    MOD             shift and go to state 238
    PLUS            shift and go to state 239
    MINUS           shift and go to state 240
    LSHIFT          shift and go to state 241
    RSHIFT          shift and go to state 242
    LSHIFTA         shift and go to state 243
    RSHIFTA         shift and go to state 244
    LT              shift and go to state 245
    GT              shift and go to state 246
    LE              shift and go to state 247
    GE              shift and go to state 248
    EQ              shift and go to state 249
    NE              shift and go to state 250
    EQL             shift and go to state 251
    NEL             shift and go to state 252
    AND             shift and go to state 253
    XOR             shift and go to state 254
    XNOR            shift and go to state 255
    OR              shift and go to state 256
    LAND            shift and go to state 257
    LOR             shift and go to state 258
    COND            shift and go to state 259


state 674

    (111) lpartselect -> pointer LBRACKET expression COLON expression . RBRACKET
    (140) expression -> expression . POWER expression
    (141) expression -> expression . TIMES expression
    (142) expression -> expression . DIVIDE expression
    (143) expression -> expression . MOD expression
    (144) expression -> expression . PLUS expression
    (145) expression -> expression . MINUS expression
    (146) expression -> expression . LSHIFT expression
    (147) expression -> expression . RSHIFT expression
    (148) expression -> expression . LSHIFTA expression
    (149) expression -> expression . RSHIFTA expression
    (150) expression -> expression . LT expression
    (151) expression -> expression . GT expression
    (152) expression -> expression . LE expression
    (153) expression -> expression . GE expression
    (154) expression -> expression . EQ expression
    (155) expression -> expression . NE expression
    (156) expression -> expression . EQL expression
    (157) expression -> expression . NEL expression
    (158) expression -> expression . AND expression
    (159) expression -> expression . XOR expression
    (160) expression -> expression . XNOR expression
    (161) expression -> expression . OR expression
    (162) expression -> expression . LAND expression
    (163) expression -> expression . LOR expression
    (164) expression -> expression . COND expression COLON expression

    RBRACKET        shift and go to state 728
    POWER           shift and go to state 236
    TIMES           shift and go to state 398
    DIVIDE          shift and go to state 237
    MOD             shift and go to state 238
    PLUS            shift and go to state 239
    MINUS           shift and go to state 240
    LSHIFT          shift and go to state 241
    RSHIFT          shift and go to state 242
    LSHIFTA         shift and go to state 243
    RSHIFTA         shift and go to state 244
    LT              shift and go to state 245
    GT              shift and go to state 246
    LE              shift and go to state 247
    GE              shift and go to state 248
    EQ              shift and go to state 249
    NE              shift and go to state 250
    EQL             shift and go to state 251
    NEL             shift and go to state 252
    AND             shift and go to state 253
    XOR             shift and go to state 254
    XNOR            shift and go to state 255
    OR              shift and go to state 256
    LAND            shift and go to state 257
    LOR             shift and go to state 258
    COND            shift and go to state 259


state 675

    (112) lpartselect -> pointer LBRACKET expression PLUSCOLON expression . RBRACKET
    (140) expression -> expression . POWER expression
    (141) expression -> expression . TIMES expression
    (142) expression -> expression . DIVIDE expression
    (143) expression -> expression . MOD expression
    (144) expression -> expression . PLUS expression
    (145) expression -> expression . MINUS expression
    (146) expression -> expression . LSHIFT expression
    (147) expression -> expression . RSHIFT expression
    (148) expression -> expression . LSHIFTA expression
    (149) expression -> expression . RSHIFTA expression
    (150) expression -> expression . LT expression
    (151) expression -> expression . GT expression
    (152) expression -> expression . LE expression
    (153) expression -> expression . GE expression
    (154) expression -> expression . EQ expression
    (155) expression -> expression . NE expression
    (156) expression -> expression . EQL expression
    (157) expression -> expression . NEL expression
    (158) expression -> expression . AND expression
    (159) expression -> expression . XOR expression
    (160) expression -> expression . XNOR expression
    (161) expression -> expression . OR expression
    (162) expression -> expression . LAND expression
    (163) expression -> expression . LOR expression
    (164) expression -> expression . COND expression COLON expression

    RBRACKET        shift and go to state 729
    POWER           shift and go to state 236
    TIMES           shift and go to state 398
    DIVIDE          shift and go to state 237
    MOD             shift and go to state 238
    PLUS            shift and go to state 239
    MINUS           shift and go to state 240
    LSHIFT          shift and go to state 241
    RSHIFT          shift and go to state 242
    LSHIFTA         shift and go to state 243
    RSHIFTA         shift and go to state 244
    LT              shift and go to state 245
    GT              shift and go to state 246
    LE              shift and go to state 247
    GE              shift and go to state 248
    EQ              shift and go to state 249
    NE              shift and go to state 250
    EQL             shift and go to state 251
    NEL             shift and go to state 252
    AND             shift and go to state 253
    XOR             shift and go to state 254
    XNOR            shift and go to state 255
    OR              shift and go to state 256
    LAND            shift and go to state 257
    LOR             shift and go to state 258
    COND            shift and go to state 259


state 676

    (113) lpartselect -> pointer LBRACKET expression MINUSCOLON expression . RBRACKET
    (140) expression -> expression . POWER expression
    (141) expression -> expression . TIMES expression
    (142) expression -> expression . DIVIDE expression
    (143) expression -> expression . MOD expression
    (144) expression -> expression . PLUS expression
    (145) expression -> expression . MINUS expression
    (146) expression -> expression . LSHIFT expression
    (147) expression -> expression . RSHIFT expression
    (148) expression -> expression . LSHIFTA expression
    (149) expression -> expression . RSHIFTA expression
    (150) expression -> expression . LT expression
    (151) expression -> expression . GT expression
    (152) expression -> expression . LE expression
    (153) expression -> expression . GE expression
    (154) expression -> expression . EQ expression
    (155) expression -> expression . NE expression
    (156) expression -> expression . EQL expression
    (157) expression -> expression . NEL expression
    (158) expression -> expression . AND expression
    (159) expression -> expression . XOR expression
    (160) expression -> expression . XNOR expression
    (161) expression -> expression . OR expression
    (162) expression -> expression . LAND expression
    (163) expression -> expression . LOR expression
    (164) expression -> expression . COND expression COLON expression

    RBRACKET        shift and go to state 730
    POWER           shift and go to state 236
    TIMES           shift and go to state 398
    DIVIDE          shift and go to state 237
    MOD             shift and go to state 238
    PLUS            shift and go to state 239
    MINUS           shift and go to state 240
    LSHIFT          shift and go to state 241
    RSHIFT          shift and go to state 242
    LSHIFTA         shift and go to state 243
    RSHIFTA         shift and go to state 244
    LT              shift and go to state 245
    GT              shift and go to state 246
    LE              shift and go to state 247
    GE              shift and go to state 248
    EQ              shift and go to state 249
    NE              shift and go to state 250
    EQL             shift and go to state 251
    NEL             shift and go to state 252
    AND             shift and go to state 253
    XOR             shift and go to state 254
    XNOR            shift and go to state 255
    OR              shift and go to state 256
    LAND            shift and go to state 257
    LOR             shift and go to state 258
    COND            shift and go to state 259


state 677

    (207) edgesigs -> edgesigs SENS_OR edgesig .

    RPAREN          reduce using rule 207 (edgesigs -> edgesigs SENS_OR edgesig .)
    SENS_OR         reduce using rule 207 (edgesigs -> edgesigs SENS_OR edgesig .)


state 678

    (216) levelsigs -> levelsigs SENS_OR levelsig .

    RPAREN          reduce using rule 216 (levelsigs -> levelsigs SENS_OR levelsig .)
    SENS_OR         reduce using rule 216 (levelsigs -> levelsigs SENS_OR levelsig .)
    COMMA           reduce using rule 216 (levelsigs -> levelsigs SENS_OR levelsig .)


state 679

    (217) levelsigs -> levelsigs COMMA levelsig .

    RPAREN          reduce using rule 217 (levelsigs -> levelsigs COMMA levelsig .)
    SENS_OR         reduce using rule 217 (levelsigs -> levelsigs COMMA levelsig .)
    COMMA           reduce using rule 217 (levelsigs -> levelsigs COMMA levelsig .)


state 680

    (262) if_statement -> IF LPAREN cond RPAREN true_statement . ELSE else_statement
    (263) if_statement -> IF LPAREN cond RPAREN true_statement .

  ! shift/reduce conflict for ELSE resolved as shift
    ELSE            shift and go to state 731
    ENDMODULE       reduce using rule 263 (if_statement -> IF LPAREN cond RPAREN true_statement .)
    GENERATE        reduce using rule 263 (if_statement -> IF LPAREN cond RPAREN true_statement .)
    INTEGER         reduce using rule 263 (if_statement -> IF LPAREN cond RPAREN true_statement .)
    REAL            reduce using rule 263 (if_statement -> IF LPAREN cond RPAREN true_statement .)
    PARAMETER       reduce using rule 263 (if_statement -> IF LPAREN cond RPAREN true_statement .)
    LOCALPARAM      reduce using rule 263 (if_statement -> IF LPAREN cond RPAREN true_statement .)
    GENVAR          reduce using rule 263 (if_statement -> IF LPAREN cond RPAREN true_statement .)
    ASSIGN          reduce using rule 263 (if_statement -> IF LPAREN cond RPAREN true_statement .)
    ALWAYS          reduce using rule 263 (if_statement -> IF LPAREN cond RPAREN true_statement .)
    ALWAYS_FF       reduce using rule 263 (if_statement -> IF LPAREN cond RPAREN true_statement .)
    ALWAYS_COMB     reduce using rule 263 (if_statement -> IF LPAREN cond RPAREN true_statement .)
    INITIAL         reduce using rule 263 (if_statement -> IF LPAREN cond RPAREN true_statement .)
    ID              reduce using rule 263 (if_statement -> IF LPAREN cond RPAREN true_statement .)
    SENS_OR         reduce using rule 263 (if_statement -> IF LPAREN cond RPAREN true_statement .)
    FUNCTION        reduce using rule 263 (if_statement -> IF LPAREN cond RPAREN true_statement .)
    TASK            reduce using rule 263 (if_statement -> IF LPAREN cond RPAREN true_statement .)
    LPAREN          reduce using rule 263 (if_statement -> IF LPAREN cond RPAREN true_statement .)
    INPUT           reduce using rule 263 (if_statement -> IF LPAREN cond RPAREN true_statement .)
    OUTPUT          reduce using rule 263 (if_statement -> IF LPAREN cond RPAREN true_statement .)
    INOUT           reduce using rule 263 (if_statement -> IF LPAREN cond RPAREN true_statement .)
    TRI             reduce using rule 263 (if_statement -> IF LPAREN cond RPAREN true_statement .)
    REG             reduce using rule 263 (if_statement -> IF LPAREN cond RPAREN true_statement .)
    LOGIC           reduce using rule 263 (if_statement -> IF LPAREN cond RPAREN true_statement .)
    WIRE            reduce using rule 263 (if_statement -> IF LPAREN cond RPAREN true_statement .)
    SIGNED          reduce using rule 263 (if_statement -> IF LPAREN cond RPAREN true_statement .)
    SUPPLY0         reduce using rule 263 (if_statement -> IF LPAREN cond RPAREN true_statement .)
    SUPPLY1         reduce using rule 263 (if_statement -> IF LPAREN cond RPAREN true_statement .)
    ENDGENERATE     reduce using rule 263 (if_statement -> IF LPAREN cond RPAREN true_statement .)
    IF              reduce using rule 263 (if_statement -> IF LPAREN cond RPAREN true_statement .)
    FOR             reduce using rule 263 (if_statement -> IF LPAREN cond RPAREN true_statement .)
    END             reduce using rule 263 (if_statement -> IF LPAREN cond RPAREN true_statement .)
    CASE            reduce using rule 263 (if_statement -> IF LPAREN cond RPAREN true_statement .)
    CASEX           reduce using rule 263 (if_statement -> IF LPAREN cond RPAREN true_statement .)
    UNIQUE          reduce using rule 263 (if_statement -> IF LPAREN cond RPAREN true_statement .)
    WHILE           reduce using rule 263 (if_statement -> IF LPAREN cond RPAREN true_statement .)
    WAIT            reduce using rule 263 (if_statement -> IF LPAREN cond RPAREN true_statement .)
    FOREVER         reduce using rule 263 (if_statement -> IF LPAREN cond RPAREN true_statement .)
    BEGIN           reduce using rule 263 (if_statement -> IF LPAREN cond RPAREN true_statement .)
    FORK            reduce using rule 263 (if_statement -> IF LPAREN cond RPAREN true_statement .)
    DELAY           reduce using rule 263 (if_statement -> IF LPAREN cond RPAREN true_statement .)
    AT              reduce using rule 263 (if_statement -> IF LPAREN cond RPAREN true_statement .)
    DOLLER          reduce using rule 263 (if_statement -> IF LPAREN cond RPAREN true_statement .)
    DISABLE         reduce using rule 263 (if_statement -> IF LPAREN cond RPAREN true_statement .)
    LBRACE          reduce using rule 263 (if_statement -> IF LPAREN cond RPAREN true_statement .)
    SEMICOLON       reduce using rule 263 (if_statement -> IF LPAREN cond RPAREN true_statement .)
    JOIN            reduce using rule 263 (if_statement -> IF LPAREN cond RPAREN true_statement .)
    ENDFUNCTION     reduce using rule 263 (if_statement -> IF LPAREN cond RPAREN true_statement .)
    ENDTASK         reduce using rule 263 (if_statement -> IF LPAREN cond RPAREN true_statement .)
    ENDCASE         reduce using rule 263 (if_statement -> IF LPAREN cond RPAREN true_statement .)
    DEFAULT         reduce using rule 263 (if_statement -> IF LPAREN cond RPAREN true_statement .)
    MINUS           reduce using rule 263 (if_statement -> IF LPAREN cond RPAREN true_statement .)
    PLUS            reduce using rule 263 (if_statement -> IF LPAREN cond RPAREN true_statement .)
    LNOT            reduce using rule 263 (if_statement -> IF LPAREN cond RPAREN true_statement .)
    NOT             reduce using rule 263 (if_statement -> IF LPAREN cond RPAREN true_statement .)
    AND             reduce using rule 263 (if_statement -> IF LPAREN cond RPAREN true_statement .)
    NAND            reduce using rule 263 (if_statement -> IF LPAREN cond RPAREN true_statement .)
    NOR             reduce using rule 263 (if_statement -> IF LPAREN cond RPAREN true_statement .)
    OR              reduce using rule 263 (if_statement -> IF LPAREN cond RPAREN true_statement .)
    XOR             reduce using rule 263 (if_statement -> IF LPAREN cond RPAREN true_statement .)
    XNOR            reduce using rule 263 (if_statement -> IF LPAREN cond RPAREN true_statement .)
    INTNUMBER_DEC   reduce using rule 263 (if_statement -> IF LPAREN cond RPAREN true_statement .)
    SIGNED_INTNUMBER_DEC reduce using rule 263 (if_statement -> IF LPAREN cond RPAREN true_statement .)
    INTNUMBER_BIN   reduce using rule 263 (if_statement -> IF LPAREN cond RPAREN true_statement .)
    SIGNED_INTNUMBER_BIN reduce using rule 263 (if_statement -> IF LPAREN cond RPAREN true_statement .)
    INTNUMBER_OCT   reduce using rule 263 (if_statement -> IF LPAREN cond RPAREN true_statement .)
    SIGNED_INTNUMBER_OCT reduce using rule 263 (if_statement -> IF LPAREN cond RPAREN true_statement .)
    INTNUMBER_HEX   reduce using rule 263 (if_statement -> IF LPAREN cond RPAREN true_statement .)
    SIGNED_INTNUMBER_HEX reduce using rule 263 (if_statement -> IF LPAREN cond RPAREN true_statement .)
    FLOATNUMBER     reduce using rule 263 (if_statement -> IF LPAREN cond RPAREN true_statement .)
    STRING_LITERAL  reduce using rule 263 (if_statement -> IF LPAREN cond RPAREN true_statement .)

  ! ELSE            [ reduce using rule 263 (if_statement -> IF LPAREN cond RPAREN true_statement .) ]


state 681

    (268) true_statement -> ifcontent_statement .

    ENDMODULE       reduce using rule 268 (true_statement -> ifcontent_statement .)
    GENERATE        reduce using rule 268 (true_statement -> ifcontent_statement .)
    INTEGER         reduce using rule 268 (true_statement -> ifcontent_statement .)
    REAL            reduce using rule 268 (true_statement -> ifcontent_statement .)
    PARAMETER       reduce using rule 268 (true_statement -> ifcontent_statement .)
    LOCALPARAM      reduce using rule 268 (true_statement -> ifcontent_statement .)
    GENVAR          reduce using rule 268 (true_statement -> ifcontent_statement .)
    ASSIGN          reduce using rule 268 (true_statement -> ifcontent_statement .)
    ALWAYS          reduce using rule 268 (true_statement -> ifcontent_statement .)
    ALWAYS_FF       reduce using rule 268 (true_statement -> ifcontent_statement .)
    ALWAYS_COMB     reduce using rule 268 (true_statement -> ifcontent_statement .)
    INITIAL         reduce using rule 268 (true_statement -> ifcontent_statement .)
    ID              reduce using rule 268 (true_statement -> ifcontent_statement .)
    SENS_OR         reduce using rule 268 (true_statement -> ifcontent_statement .)
    FUNCTION        reduce using rule 268 (true_statement -> ifcontent_statement .)
    TASK            reduce using rule 268 (true_statement -> ifcontent_statement .)
    LPAREN          reduce using rule 268 (true_statement -> ifcontent_statement .)
    INPUT           reduce using rule 268 (true_statement -> ifcontent_statement .)
    OUTPUT          reduce using rule 268 (true_statement -> ifcontent_statement .)
    INOUT           reduce using rule 268 (true_statement -> ifcontent_statement .)
    TRI             reduce using rule 268 (true_statement -> ifcontent_statement .)
    REG             reduce using rule 268 (true_statement -> ifcontent_statement .)
    LOGIC           reduce using rule 268 (true_statement -> ifcontent_statement .)
    WIRE            reduce using rule 268 (true_statement -> ifcontent_statement .)
    SIGNED          reduce using rule 268 (true_statement -> ifcontent_statement .)
    SUPPLY0         reduce using rule 268 (true_statement -> ifcontent_statement .)
    SUPPLY1         reduce using rule 268 (true_statement -> ifcontent_statement .)
    ENDGENERATE     reduce using rule 268 (true_statement -> ifcontent_statement .)
    IF              reduce using rule 268 (true_statement -> ifcontent_statement .)
    FOR             reduce using rule 268 (true_statement -> ifcontent_statement .)
    ELSE            reduce using rule 268 (true_statement -> ifcontent_statement .)
    END             reduce using rule 268 (true_statement -> ifcontent_statement .)
    CASE            reduce using rule 268 (true_statement -> ifcontent_statement .)
    CASEX           reduce using rule 268 (true_statement -> ifcontent_statement .)
    UNIQUE          reduce using rule 268 (true_statement -> ifcontent_statement .)
    WHILE           reduce using rule 268 (true_statement -> ifcontent_statement .)
    WAIT            reduce using rule 268 (true_statement -> ifcontent_statement .)
    FOREVER         reduce using rule 268 (true_statement -> ifcontent_statement .)
    BEGIN           reduce using rule 268 (true_statement -> ifcontent_statement .)
    FORK            reduce using rule 268 (true_statement -> ifcontent_statement .)
    DELAY           reduce using rule 268 (true_statement -> ifcontent_statement .)
    AT              reduce using rule 268 (true_statement -> ifcontent_statement .)
    DOLLER          reduce using rule 268 (true_statement -> ifcontent_statement .)
    DISABLE         reduce using rule 268 (true_statement -> ifcontent_statement .)
    LBRACE          reduce using rule 268 (true_statement -> ifcontent_statement .)
    SEMICOLON       reduce using rule 268 (true_statement -> ifcontent_statement .)
    JOIN            reduce using rule 268 (true_statement -> ifcontent_statement .)
    ENDFUNCTION     reduce using rule 268 (true_statement -> ifcontent_statement .)
    ENDTASK         reduce using rule 268 (true_statement -> ifcontent_statement .)
    ENDCASE         reduce using rule 268 (true_statement -> ifcontent_statement .)
    DEFAULT         reduce using rule 268 (true_statement -> ifcontent_statement .)
    MINUS           reduce using rule 268 (true_statement -> ifcontent_statement .)
    PLUS            reduce using rule 268 (true_statement -> ifcontent_statement .)
    LNOT            reduce using rule 268 (true_statement -> ifcontent_statement .)
    NOT             reduce using rule 268 (true_statement -> ifcontent_statement .)
    AND             reduce using rule 268 (true_statement -> ifcontent_statement .)
    NAND            reduce using rule 268 (true_statement -> ifcontent_statement .)
    NOR             reduce using rule 268 (true_statement -> ifcontent_statement .)
    OR              reduce using rule 268 (true_statement -> ifcontent_statement .)
    XOR             reduce using rule 268 (true_statement -> ifcontent_statement .)
    XNOR            reduce using rule 268 (true_statement -> ifcontent_statement .)
    INTNUMBER_DEC   reduce using rule 268 (true_statement -> ifcontent_statement .)
    SIGNED_INTNUMBER_DEC reduce using rule 268 (true_statement -> ifcontent_statement .)
    INTNUMBER_BIN   reduce using rule 268 (true_statement -> ifcontent_statement .)
    SIGNED_INTNUMBER_BIN reduce using rule 268 (true_statement -> ifcontent_statement .)
    INTNUMBER_OCT   reduce using rule 268 (true_statement -> ifcontent_statement .)
    SIGNED_INTNUMBER_OCT reduce using rule 268 (true_statement -> ifcontent_statement .)
    INTNUMBER_HEX   reduce using rule 268 (true_statement -> ifcontent_statement .)
    SIGNED_INTNUMBER_HEX reduce using rule 268 (true_statement -> ifcontent_statement .)
    FLOATNUMBER     reduce using rule 268 (true_statement -> ifcontent_statement .)
    STRING_LITERAL  reduce using rule 268 (true_statement -> ifcontent_statement .)


state 682

    (267) ifcontent_statement -> basic_statement .

    ENDMODULE       reduce using rule 267 (ifcontent_statement -> basic_statement .)
    GENERATE        reduce using rule 267 (ifcontent_statement -> basic_statement .)
    INTEGER         reduce using rule 267 (ifcontent_statement -> basic_statement .)
    REAL            reduce using rule 267 (ifcontent_statement -> basic_statement .)
    PARAMETER       reduce using rule 267 (ifcontent_statement -> basic_statement .)
    LOCALPARAM      reduce using rule 267 (ifcontent_statement -> basic_statement .)
    GENVAR          reduce using rule 267 (ifcontent_statement -> basic_statement .)
    ASSIGN          reduce using rule 267 (ifcontent_statement -> basic_statement .)
    ALWAYS          reduce using rule 267 (ifcontent_statement -> basic_statement .)
    ALWAYS_FF       reduce using rule 267 (ifcontent_statement -> basic_statement .)
    ALWAYS_COMB     reduce using rule 267 (ifcontent_statement -> basic_statement .)
    INITIAL         reduce using rule 267 (ifcontent_statement -> basic_statement .)
    ID              reduce using rule 267 (ifcontent_statement -> basic_statement .)
    SENS_OR         reduce using rule 267 (ifcontent_statement -> basic_statement .)
    FUNCTION        reduce using rule 267 (ifcontent_statement -> basic_statement .)
    TASK            reduce using rule 267 (ifcontent_statement -> basic_statement .)
    LPAREN          reduce using rule 267 (ifcontent_statement -> basic_statement .)
    INPUT           reduce using rule 267 (ifcontent_statement -> basic_statement .)
    OUTPUT          reduce using rule 267 (ifcontent_statement -> basic_statement .)
    INOUT           reduce using rule 267 (ifcontent_statement -> basic_statement .)
    TRI             reduce using rule 267 (ifcontent_statement -> basic_statement .)
    REG             reduce using rule 267 (ifcontent_statement -> basic_statement .)
    LOGIC           reduce using rule 267 (ifcontent_statement -> basic_statement .)
    WIRE            reduce using rule 267 (ifcontent_statement -> basic_statement .)
    SIGNED          reduce using rule 267 (ifcontent_statement -> basic_statement .)
    SUPPLY0         reduce using rule 267 (ifcontent_statement -> basic_statement .)
    SUPPLY1         reduce using rule 267 (ifcontent_statement -> basic_statement .)
    ENDGENERATE     reduce using rule 267 (ifcontent_statement -> basic_statement .)
    IF              reduce using rule 267 (ifcontent_statement -> basic_statement .)
    FOR             reduce using rule 267 (ifcontent_statement -> basic_statement .)
    ELSE            reduce using rule 267 (ifcontent_statement -> basic_statement .)
    END             reduce using rule 267 (ifcontent_statement -> basic_statement .)
    CASE            reduce using rule 267 (ifcontent_statement -> basic_statement .)
    CASEX           reduce using rule 267 (ifcontent_statement -> basic_statement .)
    UNIQUE          reduce using rule 267 (ifcontent_statement -> basic_statement .)
    WHILE           reduce using rule 267 (ifcontent_statement -> basic_statement .)
    WAIT            reduce using rule 267 (ifcontent_statement -> basic_statement .)
    FOREVER         reduce using rule 267 (ifcontent_statement -> basic_statement .)
    BEGIN           reduce using rule 267 (ifcontent_statement -> basic_statement .)
    FORK            reduce using rule 267 (ifcontent_statement -> basic_statement .)
    DELAY           reduce using rule 267 (ifcontent_statement -> basic_statement .)
    AT              reduce using rule 267 (ifcontent_statement -> basic_statement .)
    DOLLER          reduce using rule 267 (ifcontent_statement -> basic_statement .)
    DISABLE         reduce using rule 267 (ifcontent_statement -> basic_statement .)
    LBRACE          reduce using rule 267 (ifcontent_statement -> basic_statement .)
    SEMICOLON       reduce using rule 267 (ifcontent_statement -> basic_statement .)
    JOIN            reduce using rule 267 (ifcontent_statement -> basic_statement .)
    ENDFUNCTION     reduce using rule 267 (ifcontent_statement -> basic_statement .)
    ENDTASK         reduce using rule 267 (ifcontent_statement -> basic_statement .)
    ENDCASE         reduce using rule 267 (ifcontent_statement -> basic_statement .)
    DEFAULT         reduce using rule 267 (ifcontent_statement -> basic_statement .)
    MINUS           reduce using rule 267 (ifcontent_statement -> basic_statement .)
    PLUS            reduce using rule 267 (ifcontent_statement -> basic_statement .)
    LNOT            reduce using rule 267 (ifcontent_statement -> basic_statement .)
    NOT             reduce using rule 267 (ifcontent_statement -> basic_statement .)
    AND             reduce using rule 267 (ifcontent_statement -> basic_statement .)
    NAND            reduce using rule 267 (ifcontent_statement -> basic_statement .)
    NOR             reduce using rule 267 (ifcontent_statement -> basic_statement .)
    OR              reduce using rule 267 (ifcontent_statement -> basic_statement .)
    XOR             reduce using rule 267 (ifcontent_statement -> basic_statement .)
    XNOR            reduce using rule 267 (ifcontent_statement -> basic_statement .)
    INTNUMBER_DEC   reduce using rule 267 (ifcontent_statement -> basic_statement .)
    SIGNED_INTNUMBER_DEC reduce using rule 267 (ifcontent_statement -> basic_statement .)
    INTNUMBER_BIN   reduce using rule 267 (ifcontent_statement -> basic_statement .)
    SIGNED_INTNUMBER_BIN reduce using rule 267 (ifcontent_statement -> basic_statement .)
    INTNUMBER_OCT   reduce using rule 267 (ifcontent_statement -> basic_statement .)
    SIGNED_INTNUMBER_OCT reduce using rule 267 (ifcontent_statement -> basic_statement .)
    INTNUMBER_HEX   reduce using rule 267 (ifcontent_statement -> basic_statement .)
    SIGNED_INTNUMBER_HEX reduce using rule 267 (ifcontent_statement -> basic_statement .)
    FLOATNUMBER     reduce using rule 267 (ifcontent_statement -> basic_statement .)
    STRING_LITERAL  reduce using rule 267 (ifcontent_statement -> basic_statement .)


state 683

    (264) if_statement -> delays IF LPAREN cond RPAREN . true_statement ELSE else_statement
    (265) if_statement -> delays IF LPAREN cond RPAREN . true_statement
    (268) true_statement -> . ifcontent_statement
    (267) ifcontent_statement -> . basic_statement
    (221) basic_statement -> . if_statement
    (222) basic_statement -> . case_statement
    (223) basic_statement -> . casex_statement
    (224) basic_statement -> . unique_case_statement
    (225) basic_statement -> . for_statement
    (226) basic_statement -> . while_statement
    (227) basic_statement -> . event_statement
    (228) basic_statement -> . wait_statement
    (229) basic_statement -> . forever_statement
    (230) basic_statement -> . block
    (231) basic_statement -> . namedblock
    (232) basic_statement -> . parallelblock
    (233) basic_statement -> . blocking_substitution
    (234) basic_statement -> . nonblocking_substitution
    (235) basic_statement -> . single_statement
    (262) if_statement -> . IF LPAREN cond RPAREN true_statement ELSE else_statement
    (263) if_statement -> . IF LPAREN cond RPAREN true_statement
    (264) if_statement -> . delays IF LPAREN cond RPAREN true_statement ELSE else_statement
    (265) if_statement -> . delays IF LPAREN cond RPAREN true_statement
    (280) case_statement -> . CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE
    (281) casex_statement -> . CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE
    (282) unique_case_statement -> . UNIQUE CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE
    (270) for_statement -> . FOR LPAREN forpre forcond forpost RPAREN forcontent_statement
    (278) while_statement -> . WHILE LPAREN cond RPAREN whilecontent_statement
    (292) event_statement -> . senslist SEMICOLON
    (293) wait_statement -> . WAIT LPAREN cond RPAREN waitcontent_statement
    (296) forever_statement -> . FOREVER basic_statement
    (245) block -> . BEGIN block_statements END
    (246) block -> . BEGIN END
    (250) namedblock -> . BEGIN COLON ID namedblock_statements END
    (251) namedblock -> . BEGIN COLON ID END
    (260) parallelblock -> . FORK block_statements JOIN
    (261) parallelblock -> . FORK JOIN
    (237) blocking_substitution -> . delays lvalue EQUALS delays rvalue SEMICOLON
    (239) nonblocking_substitution -> . delays lvalue LE delays rvalue SEMICOLON
    (397) single_statement -> . DELAY expression SEMICOLON
    (398) single_statement -> . systemcall SEMICOLON
    (399) single_statement -> . disable SEMICOLON
    (240) delays -> . DELAY LPAREN expression RPAREN
    (241) delays -> . DELAY identifier
    (242) delays -> . DELAY intnumber
    (243) delays -> . DELAY floatnumber
    (244) delays -> . empty
    (202) senslist -> . AT LPAREN edgesigs RPAREN
    (209) senslist -> . empty
    (210) senslist -> . AT levelsig
    (211) senslist -> . AT LPAREN levelsigs RPAREN
    (219) senslist -> . AT TIMES
    (220) senslist -> . AT LPAREN TIMES RPAREN
    (351) systemcall -> . DOLLER ID
    (352) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (353) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (396) disable -> . DISABLE ID
    (400) empty -> .

  ! shift/reduce conflict for IF resolved as shift
    IF              shift and go to state 192
    CASE            shift and go to state 194
    CASEX           shift and go to state 195
    UNIQUE          shift and go to state 196
    FOR             shift and go to state 197
    WHILE           shift and go to state 198
    WAIT            shift and go to state 200
    FOREVER         shift and go to state 201
    BEGIN           shift and go to state 202
    FORK            shift and go to state 203
    DELAY           shift and go to state 204
    AT              shift and go to state 171
    DOLLER          shift and go to state 107
    DISABLE         shift and go to state 208
    LBRACE          reduce using rule 400 (empty -> .)
    ID              reduce using rule 400 (empty -> .)
    SEMICOLON       reduce using rule 400 (empty -> .)

  ! IF              [ reduce using rule 400 (empty -> .) ]

    delays                         shift and go to state 193
    true_statement                 shift and go to state 732
    ifcontent_statement            shift and go to state 681
    basic_statement                shift and go to state 682
    if_statement                   shift and go to state 177
    case_statement                 shift and go to state 178
    casex_statement                shift and go to state 179
    unique_case_statement          shift and go to state 180
    for_statement                  shift and go to state 181
    while_statement                shift and go to state 182
    event_statement                shift and go to state 183
    wait_statement                 shift and go to state 184
    forever_statement              shift and go to state 185
    block                          shift and go to state 186
    namedblock                     shift and go to state 187
    parallelblock                  shift and go to state 188
    blocking_substitution          shift and go to state 189
    nonblocking_substitution       shift and go to state 190
    single_statement               shift and go to state 191
    senslist                       shift and go to state 199
    systemcall                     shift and go to state 205
    disable                        shift and go to state 206
    empty                          shift and go to state 207

state 684

    (237) blocking_substitution -> delays lvalue EQUALS delays rvalue . SEMICOLON

    SEMICOLON       shift and go to state 733


state 685

    (239) nonblocking_substitution -> delays lvalue LE delays rvalue . SEMICOLON

    SEMICOLON       shift and go to state 734


state 686

    (280) case_statement -> CASE LPAREN case_comp RPAREN casecontent_statements . ENDCASE
    (284) casecontent_statements -> casecontent_statements . casecontent_statement
    (286) casecontent_statement -> . casecontent_condition COLON basic_statement
    (289) casecontent_statement -> . DEFAULT COLON basic_statement
    (287) casecontent_condition -> . casecontent_condition COMMA expression
    (288) casecontent_condition -> . expression
    (130) expression -> . MINUS expression
    (131) expression -> . PLUS expression
    (132) expression -> . LNOT expression
    (133) expression -> . NOT expression
    (134) expression -> . AND expression
    (135) expression -> . NAND expression
    (136) expression -> . NOR expression
    (137) expression -> . OR expression
    (138) expression -> . XOR expression
    (139) expression -> . XNOR expression
    (140) expression -> . expression POWER expression
    (141) expression -> . expression TIMES expression
    (142) expression -> . expression DIVIDE expression
    (143) expression -> . expression MOD expression
    (144) expression -> . expression PLUS expression
    (145) expression -> . expression MINUS expression
    (146) expression -> . expression LSHIFT expression
    (147) expression -> . expression RSHIFT expression
    (148) expression -> . expression LSHIFTA expression
    (149) expression -> . expression RSHIFTA expression
    (150) expression -> . expression LT expression
    (151) expression -> . expression GT expression
    (152) expression -> . expression LE expression
    (153) expression -> . expression GE expression
    (154) expression -> . expression EQ expression
    (155) expression -> . expression NE expression
    (156) expression -> . expression EQL expression
    (157) expression -> . expression NEL expression
    (158) expression -> . expression AND expression
    (159) expression -> . expression XOR expression
    (160) expression -> . expression XNOR expression
    (161) expression -> . expression OR expression
    (162) expression -> . expression LAND expression
    (163) expression -> . expression LOR expression
    (164) expression -> . expression COND expression COLON expression
    (165) expression -> . LPAREN expression RPAREN
    (166) expression -> . concat
    (167) expression -> . repeat
    (168) expression -> . partselect
    (169) expression -> . pointer
    (170) expression -> . functioncall
    (171) expression -> . systemcall
    (172) expression -> . identifier
    (173) expression -> . const_expression
    (174) concat -> . LBRACE concatlist RBRACE
    (177) repeat -> . LBRACE expression concat RBRACE
    (178) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (179) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (180) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (181) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (182) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (183) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (184) pointer -> . identifier LBRACKET expression RBRACKET
    (185) pointer -> . pointer LBRACKET expression RBRACKET
    (373) functioncall -> . identifier LPAREN func_args RPAREN
    (351) systemcall -> . DOLLER ID
    (352) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (353) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (392) identifier -> . ID
    (393) identifier -> . scope ID
    (186) const_expression -> . intnumber
    (187) const_expression -> . floatnumber
    (188) const_expression -> . stringliteral
    (394) scope -> . identifier DOT
    (395) scope -> . pointer DOT
    (190) intnumber -> . INTNUMBER_DEC
    (191) intnumber -> . SIGNED_INTNUMBER_DEC
    (192) intnumber -> . INTNUMBER_BIN
    (193) intnumber -> . SIGNED_INTNUMBER_BIN
    (194) intnumber -> . INTNUMBER_OCT
    (195) intnumber -> . SIGNED_INTNUMBER_OCT
    (196) intnumber -> . INTNUMBER_HEX
    (197) intnumber -> . SIGNED_INTNUMBER_HEX
    (189) floatnumber -> . FLOATNUMBER
    (198) stringliteral -> . STRING_LITERAL

    ENDCASE         shift and go to state 735
    DEFAULT         shift and go to state 689
    MINUS           shift and go to state 88
    PLUS            shift and go to state 89
    LNOT            shift and go to state 90
    NOT             shift and go to state 91
    AND             shift and go to state 92
    NAND            shift and go to state 93
    NOR             shift and go to state 94
    OR              shift and go to state 95
    XOR             shift and go to state 96
    XNOR            shift and go to state 97
    LPAREN          shift and go to state 85
    LBRACE          shift and go to state 106
    DOLLER          shift and go to state 107
    ID              shift and go to state 86
    INTNUMBER_DEC   shift and go to state 112
    SIGNED_INTNUMBER_DEC shift and go to state 113
    INTNUMBER_BIN   shift and go to state 114
    SIGNED_INTNUMBER_BIN shift and go to state 115
    INTNUMBER_OCT   shift and go to state 116
    SIGNED_INTNUMBER_OCT shift and go to state 117
    INTNUMBER_HEX   shift and go to state 118
    SIGNED_INTNUMBER_HEX shift and go to state 119
    FLOATNUMBER     shift and go to state 120
    STRING_LITERAL  shift and go to state 121

    casecontent_statement          shift and go to state 736
    casecontent_condition          shift and go to state 688
    expression                     shift and go to state 690
    concat                         shift and go to state 98
    repeat                         shift and go to state 99
    partselect                     shift and go to state 100
    pointer                        shift and go to state 101
    functioncall                   shift and go to state 102
    systemcall                     shift and go to state 103
    identifier                     shift and go to state 104
    const_expression               shift and go to state 105
    scope                          shift and go to state 108
    intnumber                      shift and go to state 109
    floatnumber                    shift and go to state 110
    stringliteral                  shift and go to state 111

state 687

    (285) casecontent_statements -> casecontent_statement .

    ENDCASE         reduce using rule 285 (casecontent_statements -> casecontent_statement .)
    DEFAULT         reduce using rule 285 (casecontent_statements -> casecontent_statement .)
    MINUS           reduce using rule 285 (casecontent_statements -> casecontent_statement .)
    PLUS            reduce using rule 285 (casecontent_statements -> casecontent_statement .)
    LNOT            reduce using rule 285 (casecontent_statements -> casecontent_statement .)
    NOT             reduce using rule 285 (casecontent_statements -> casecontent_statement .)
    AND             reduce using rule 285 (casecontent_statements -> casecontent_statement .)
    NAND            reduce using rule 285 (casecontent_statements -> casecontent_statement .)
    NOR             reduce using rule 285 (casecontent_statements -> casecontent_statement .)
    OR              reduce using rule 285 (casecontent_statements -> casecontent_statement .)
    XOR             reduce using rule 285 (casecontent_statements -> casecontent_statement .)
    XNOR            reduce using rule 285 (casecontent_statements -> casecontent_statement .)
    LPAREN          reduce using rule 285 (casecontent_statements -> casecontent_statement .)
    LBRACE          reduce using rule 285 (casecontent_statements -> casecontent_statement .)
    DOLLER          reduce using rule 285 (casecontent_statements -> casecontent_statement .)
    ID              reduce using rule 285 (casecontent_statements -> casecontent_statement .)
    INTNUMBER_DEC   reduce using rule 285 (casecontent_statements -> casecontent_statement .)
    SIGNED_INTNUMBER_DEC reduce using rule 285 (casecontent_statements -> casecontent_statement .)
    INTNUMBER_BIN   reduce using rule 285 (casecontent_statements -> casecontent_statement .)
    SIGNED_INTNUMBER_BIN reduce using rule 285 (casecontent_statements -> casecontent_statement .)
    INTNUMBER_OCT   reduce using rule 285 (casecontent_statements -> casecontent_statement .)
    SIGNED_INTNUMBER_OCT reduce using rule 285 (casecontent_statements -> casecontent_statement .)
    INTNUMBER_HEX   reduce using rule 285 (casecontent_statements -> casecontent_statement .)
    SIGNED_INTNUMBER_HEX reduce using rule 285 (casecontent_statements -> casecontent_statement .)
    FLOATNUMBER     reduce using rule 285 (casecontent_statements -> casecontent_statement .)
    STRING_LITERAL  reduce using rule 285 (casecontent_statements -> casecontent_statement .)


state 688

    (286) casecontent_statement -> casecontent_condition . COLON basic_statement
    (287) casecontent_condition -> casecontent_condition . COMMA expression

    COLON           shift and go to state 737
    COMMA           shift and go to state 738


state 689

    (289) casecontent_statement -> DEFAULT . COLON basic_statement

    COLON           shift and go to state 739


state 690

    (288) casecontent_condition -> expression .
    (140) expression -> expression . POWER expression
    (141) expression -> expression . TIMES expression
    (142) expression -> expression . DIVIDE expression
    (143) expression -> expression . MOD expression
    (144) expression -> expression . PLUS expression
    (145) expression -> expression . MINUS expression
    (146) expression -> expression . LSHIFT expression
    (147) expression -> expression . RSHIFT expression
    (148) expression -> expression . LSHIFTA expression
    (149) expression -> expression . RSHIFTA expression
    (150) expression -> expression . LT expression
    (151) expression -> expression . GT expression
    (152) expression -> expression . LE expression
    (153) expression -> expression . GE expression
    (154) expression -> expression . EQ expression
    (155) expression -> expression . NE expression
    (156) expression -> expression . EQL expression
    (157) expression -> expression . NEL expression
    (158) expression -> expression . AND expression
    (159) expression -> expression . XOR expression
    (160) expression -> expression . XNOR expression
    (161) expression -> expression . OR expression
    (162) expression -> expression . LAND expression
    (163) expression -> expression . LOR expression
    (164) expression -> expression . COND expression COLON expression

    COLON           reduce using rule 288 (casecontent_condition -> expression .)
    COMMA           reduce using rule 288 (casecontent_condition -> expression .)
    POWER           shift and go to state 236
    TIMES           shift and go to state 398
    DIVIDE          shift and go to state 237
    MOD             shift and go to state 238
    PLUS            shift and go to state 239
    MINUS           shift and go to state 240
    LSHIFT          shift and go to state 241
    RSHIFT          shift and go to state 242
    LSHIFTA         shift and go to state 243
    RSHIFTA         shift and go to state 244
    LT              shift and go to state 245
    GT              shift and go to state 246
    LE              shift and go to state 247
    GE              shift and go to state 248
    EQ              shift and go to state 249
    NE              shift and go to state 250
    EQL             shift and go to state 251
    NEL             shift and go to state 252
    AND             shift and go to state 253
    XOR             shift and go to state 254
    XNOR            shift and go to state 255
    OR              shift and go to state 256
    LAND            shift and go to state 257
    LOR             shift and go to state 258
    COND            shift and go to state 259


state 691

    (281) casex_statement -> CASEX LPAREN case_comp RPAREN casecontent_statements . ENDCASE
    (284) casecontent_statements -> casecontent_statements . casecontent_statement
    (286) casecontent_statement -> . casecontent_condition COLON basic_statement
    (289) casecontent_statement -> . DEFAULT COLON basic_statement
    (287) casecontent_condition -> . casecontent_condition COMMA expression
    (288) casecontent_condition -> . expression
    (130) expression -> . MINUS expression
    (131) expression -> . PLUS expression
    (132) expression -> . LNOT expression
    (133) expression -> . NOT expression
    (134) expression -> . AND expression
    (135) expression -> . NAND expression
    (136) expression -> . NOR expression
    (137) expression -> . OR expression
    (138) expression -> . XOR expression
    (139) expression -> . XNOR expression
    (140) expression -> . expression POWER expression
    (141) expression -> . expression TIMES expression
    (142) expression -> . expression DIVIDE expression
    (143) expression -> . expression MOD expression
    (144) expression -> . expression PLUS expression
    (145) expression -> . expression MINUS expression
    (146) expression -> . expression LSHIFT expression
    (147) expression -> . expression RSHIFT expression
    (148) expression -> . expression LSHIFTA expression
    (149) expression -> . expression RSHIFTA expression
    (150) expression -> . expression LT expression
    (151) expression -> . expression GT expression
    (152) expression -> . expression LE expression
    (153) expression -> . expression GE expression
    (154) expression -> . expression EQ expression
    (155) expression -> . expression NE expression
    (156) expression -> . expression EQL expression
    (157) expression -> . expression NEL expression
    (158) expression -> . expression AND expression
    (159) expression -> . expression XOR expression
    (160) expression -> . expression XNOR expression
    (161) expression -> . expression OR expression
    (162) expression -> . expression LAND expression
    (163) expression -> . expression LOR expression
    (164) expression -> . expression COND expression COLON expression
    (165) expression -> . LPAREN expression RPAREN
    (166) expression -> . concat
    (167) expression -> . repeat
    (168) expression -> . partselect
    (169) expression -> . pointer
    (170) expression -> . functioncall
    (171) expression -> . systemcall
    (172) expression -> . identifier
    (173) expression -> . const_expression
    (174) concat -> . LBRACE concatlist RBRACE
    (177) repeat -> . LBRACE expression concat RBRACE
    (178) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (179) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (180) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (181) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (182) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (183) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (184) pointer -> . identifier LBRACKET expression RBRACKET
    (185) pointer -> . pointer LBRACKET expression RBRACKET
    (373) functioncall -> . identifier LPAREN func_args RPAREN
    (351) systemcall -> . DOLLER ID
    (352) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (353) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (392) identifier -> . ID
    (393) identifier -> . scope ID
    (186) const_expression -> . intnumber
    (187) const_expression -> . floatnumber
    (188) const_expression -> . stringliteral
    (394) scope -> . identifier DOT
    (395) scope -> . pointer DOT
    (190) intnumber -> . INTNUMBER_DEC
    (191) intnumber -> . SIGNED_INTNUMBER_DEC
    (192) intnumber -> . INTNUMBER_BIN
    (193) intnumber -> . SIGNED_INTNUMBER_BIN
    (194) intnumber -> . INTNUMBER_OCT
    (195) intnumber -> . SIGNED_INTNUMBER_OCT
    (196) intnumber -> . INTNUMBER_HEX
    (197) intnumber -> . SIGNED_INTNUMBER_HEX
    (189) floatnumber -> . FLOATNUMBER
    (198) stringliteral -> . STRING_LITERAL

    ENDCASE         shift and go to state 740
    DEFAULT         shift and go to state 689
    MINUS           shift and go to state 88
    PLUS            shift and go to state 89
    LNOT            shift and go to state 90
    NOT             shift and go to state 91
    AND             shift and go to state 92
    NAND            shift and go to state 93
    NOR             shift and go to state 94
    OR              shift and go to state 95
    XOR             shift and go to state 96
    XNOR            shift and go to state 97
    LPAREN          shift and go to state 85
    LBRACE          shift and go to state 106
    DOLLER          shift and go to state 107
    ID              shift and go to state 86
    INTNUMBER_DEC   shift and go to state 112
    SIGNED_INTNUMBER_DEC shift and go to state 113
    INTNUMBER_BIN   shift and go to state 114
    SIGNED_INTNUMBER_BIN shift and go to state 115
    INTNUMBER_OCT   shift and go to state 116
    SIGNED_INTNUMBER_OCT shift and go to state 117
    INTNUMBER_HEX   shift and go to state 118
    SIGNED_INTNUMBER_HEX shift and go to state 119
    FLOATNUMBER     shift and go to state 120
    STRING_LITERAL  shift and go to state 121

    casecontent_statement          shift and go to state 736
    casecontent_condition          shift and go to state 688
    expression                     shift and go to state 690
    concat                         shift and go to state 98
    repeat                         shift and go to state 99
    partselect                     shift and go to state 100
    pointer                        shift and go to state 101
    functioncall                   shift and go to state 102
    systemcall                     shift and go to state 103
    identifier                     shift and go to state 104
    const_expression               shift and go to state 105
    scope                          shift and go to state 108
    intnumber                      shift and go to state 109
    floatnumber                    shift and go to state 110
    stringliteral                  shift and go to state 111

state 692

    (282) unique_case_statement -> UNIQUE CASE LPAREN case_comp RPAREN . casecontent_statements ENDCASE
    (284) casecontent_statements -> . casecontent_statements casecontent_statement
    (285) casecontent_statements -> . casecontent_statement
    (286) casecontent_statement -> . casecontent_condition COLON basic_statement
    (289) casecontent_statement -> . DEFAULT COLON basic_statement
    (287) casecontent_condition -> . casecontent_condition COMMA expression
    (288) casecontent_condition -> . expression
    (130) expression -> . MINUS expression
    (131) expression -> . PLUS expression
    (132) expression -> . LNOT expression
    (133) expression -> . NOT expression
    (134) expression -> . AND expression
    (135) expression -> . NAND expression
    (136) expression -> . NOR expression
    (137) expression -> . OR expression
    (138) expression -> . XOR expression
    (139) expression -> . XNOR expression
    (140) expression -> . expression POWER expression
    (141) expression -> . expression TIMES expression
    (142) expression -> . expression DIVIDE expression
    (143) expression -> . expression MOD expression
    (144) expression -> . expression PLUS expression
    (145) expression -> . expression MINUS expression
    (146) expression -> . expression LSHIFT expression
    (147) expression -> . expression RSHIFT expression
    (148) expression -> . expression LSHIFTA expression
    (149) expression -> . expression RSHIFTA expression
    (150) expression -> . expression LT expression
    (151) expression -> . expression GT expression
    (152) expression -> . expression LE expression
    (153) expression -> . expression GE expression
    (154) expression -> . expression EQ expression
    (155) expression -> . expression NE expression
    (156) expression -> . expression EQL expression
    (157) expression -> . expression NEL expression
    (158) expression -> . expression AND expression
    (159) expression -> . expression XOR expression
    (160) expression -> . expression XNOR expression
    (161) expression -> . expression OR expression
    (162) expression -> . expression LAND expression
    (163) expression -> . expression LOR expression
    (164) expression -> . expression COND expression COLON expression
    (165) expression -> . LPAREN expression RPAREN
    (166) expression -> . concat
    (167) expression -> . repeat
    (168) expression -> . partselect
    (169) expression -> . pointer
    (170) expression -> . functioncall
    (171) expression -> . systemcall
    (172) expression -> . identifier
    (173) expression -> . const_expression
    (174) concat -> . LBRACE concatlist RBRACE
    (177) repeat -> . LBRACE expression concat RBRACE
    (178) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (179) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (180) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (181) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (182) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (183) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (184) pointer -> . identifier LBRACKET expression RBRACKET
    (185) pointer -> . pointer LBRACKET expression RBRACKET
    (373) functioncall -> . identifier LPAREN func_args RPAREN
    (351) systemcall -> . DOLLER ID
    (352) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (353) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (392) identifier -> . ID
    (393) identifier -> . scope ID
    (186) const_expression -> . intnumber
    (187) const_expression -> . floatnumber
    (188) const_expression -> . stringliteral
    (394) scope -> . identifier DOT
    (395) scope -> . pointer DOT
    (190) intnumber -> . INTNUMBER_DEC
    (191) intnumber -> . SIGNED_INTNUMBER_DEC
    (192) intnumber -> . INTNUMBER_BIN
    (193) intnumber -> . SIGNED_INTNUMBER_BIN
    (194) intnumber -> . INTNUMBER_OCT
    (195) intnumber -> . SIGNED_INTNUMBER_OCT
    (196) intnumber -> . INTNUMBER_HEX
    (197) intnumber -> . SIGNED_INTNUMBER_HEX
    (189) floatnumber -> . FLOATNUMBER
    (198) stringliteral -> . STRING_LITERAL

    DEFAULT         shift and go to state 689
    MINUS           shift and go to state 88
    PLUS            shift and go to state 89
    LNOT            shift and go to state 90
    NOT             shift and go to state 91
    AND             shift and go to state 92
    NAND            shift and go to state 93
    NOR             shift and go to state 94
    OR              shift and go to state 95
    XOR             shift and go to state 96
    XNOR            shift and go to state 97
    LPAREN          shift and go to state 85
    LBRACE          shift and go to state 106
    DOLLER          shift and go to state 107
    ID              shift and go to state 86
    INTNUMBER_DEC   shift and go to state 112
    SIGNED_INTNUMBER_DEC shift and go to state 113
    INTNUMBER_BIN   shift and go to state 114
    SIGNED_INTNUMBER_BIN shift and go to state 115
    INTNUMBER_OCT   shift and go to state 116
    SIGNED_INTNUMBER_OCT shift and go to state 117
    INTNUMBER_HEX   shift and go to state 118
    SIGNED_INTNUMBER_HEX shift and go to state 119
    FLOATNUMBER     shift and go to state 120
    STRING_LITERAL  shift and go to state 121

    casecontent_statements         shift and go to state 741
    casecontent_statement          shift and go to state 687
    casecontent_condition          shift and go to state 688
    expression                     shift and go to state 690
    concat                         shift and go to state 98
    repeat                         shift and go to state 99
    partselect                     shift and go to state 100
    pointer                        shift and go to state 101
    functioncall                   shift and go to state 102
    systemcall                     shift and go to state 103
    identifier                     shift and go to state 104
    const_expression               shift and go to state 105
    scope                          shift and go to state 108
    intnumber                      shift and go to state 109
    floatnumber                    shift and go to state 110
    stringliteral                  shift and go to state 111

state 693

    (270) for_statement -> FOR LPAREN forpre forcond forpost . RPAREN forcontent_statement

    RPAREN          shift and go to state 742


state 694

    (278) while_statement -> WHILE LPAREN cond RPAREN whilecontent_statement .

    ENDMODULE       reduce using rule 278 (while_statement -> WHILE LPAREN cond RPAREN whilecontent_statement .)
    GENERATE        reduce using rule 278 (while_statement -> WHILE LPAREN cond RPAREN whilecontent_statement .)
    INTEGER         reduce using rule 278 (while_statement -> WHILE LPAREN cond RPAREN whilecontent_statement .)
    REAL            reduce using rule 278 (while_statement -> WHILE LPAREN cond RPAREN whilecontent_statement .)
    PARAMETER       reduce using rule 278 (while_statement -> WHILE LPAREN cond RPAREN whilecontent_statement .)
    LOCALPARAM      reduce using rule 278 (while_statement -> WHILE LPAREN cond RPAREN whilecontent_statement .)
    GENVAR          reduce using rule 278 (while_statement -> WHILE LPAREN cond RPAREN whilecontent_statement .)
    ASSIGN          reduce using rule 278 (while_statement -> WHILE LPAREN cond RPAREN whilecontent_statement .)
    ALWAYS          reduce using rule 278 (while_statement -> WHILE LPAREN cond RPAREN whilecontent_statement .)
    ALWAYS_FF       reduce using rule 278 (while_statement -> WHILE LPAREN cond RPAREN whilecontent_statement .)
    ALWAYS_COMB     reduce using rule 278 (while_statement -> WHILE LPAREN cond RPAREN whilecontent_statement .)
    INITIAL         reduce using rule 278 (while_statement -> WHILE LPAREN cond RPAREN whilecontent_statement .)
    ID              reduce using rule 278 (while_statement -> WHILE LPAREN cond RPAREN whilecontent_statement .)
    SENS_OR         reduce using rule 278 (while_statement -> WHILE LPAREN cond RPAREN whilecontent_statement .)
    FUNCTION        reduce using rule 278 (while_statement -> WHILE LPAREN cond RPAREN whilecontent_statement .)
    TASK            reduce using rule 278 (while_statement -> WHILE LPAREN cond RPAREN whilecontent_statement .)
    LPAREN          reduce using rule 278 (while_statement -> WHILE LPAREN cond RPAREN whilecontent_statement .)
    INPUT           reduce using rule 278 (while_statement -> WHILE LPAREN cond RPAREN whilecontent_statement .)
    OUTPUT          reduce using rule 278 (while_statement -> WHILE LPAREN cond RPAREN whilecontent_statement .)
    INOUT           reduce using rule 278 (while_statement -> WHILE LPAREN cond RPAREN whilecontent_statement .)
    TRI             reduce using rule 278 (while_statement -> WHILE LPAREN cond RPAREN whilecontent_statement .)
    REG             reduce using rule 278 (while_statement -> WHILE LPAREN cond RPAREN whilecontent_statement .)
    LOGIC           reduce using rule 278 (while_statement -> WHILE LPAREN cond RPAREN whilecontent_statement .)
    WIRE            reduce using rule 278 (while_statement -> WHILE LPAREN cond RPAREN whilecontent_statement .)
    SIGNED          reduce using rule 278 (while_statement -> WHILE LPAREN cond RPAREN whilecontent_statement .)
    SUPPLY0         reduce using rule 278 (while_statement -> WHILE LPAREN cond RPAREN whilecontent_statement .)
    SUPPLY1         reduce using rule 278 (while_statement -> WHILE LPAREN cond RPAREN whilecontent_statement .)
    ENDGENERATE     reduce using rule 278 (while_statement -> WHILE LPAREN cond RPAREN whilecontent_statement .)
    IF              reduce using rule 278 (while_statement -> WHILE LPAREN cond RPAREN whilecontent_statement .)
    FOR             reduce using rule 278 (while_statement -> WHILE LPAREN cond RPAREN whilecontent_statement .)
    ELSE            reduce using rule 278 (while_statement -> WHILE LPAREN cond RPAREN whilecontent_statement .)
    END             reduce using rule 278 (while_statement -> WHILE LPAREN cond RPAREN whilecontent_statement .)
    CASE            reduce using rule 278 (while_statement -> WHILE LPAREN cond RPAREN whilecontent_statement .)
    CASEX           reduce using rule 278 (while_statement -> WHILE LPAREN cond RPAREN whilecontent_statement .)
    UNIQUE          reduce using rule 278 (while_statement -> WHILE LPAREN cond RPAREN whilecontent_statement .)
    WHILE           reduce using rule 278 (while_statement -> WHILE LPAREN cond RPAREN whilecontent_statement .)
    WAIT            reduce using rule 278 (while_statement -> WHILE LPAREN cond RPAREN whilecontent_statement .)
    FOREVER         reduce using rule 278 (while_statement -> WHILE LPAREN cond RPAREN whilecontent_statement .)
    BEGIN           reduce using rule 278 (while_statement -> WHILE LPAREN cond RPAREN whilecontent_statement .)
    FORK            reduce using rule 278 (while_statement -> WHILE LPAREN cond RPAREN whilecontent_statement .)
    DELAY           reduce using rule 278 (while_statement -> WHILE LPAREN cond RPAREN whilecontent_statement .)
    AT              reduce using rule 278 (while_statement -> WHILE LPAREN cond RPAREN whilecontent_statement .)
    DOLLER          reduce using rule 278 (while_statement -> WHILE LPAREN cond RPAREN whilecontent_statement .)
    DISABLE         reduce using rule 278 (while_statement -> WHILE LPAREN cond RPAREN whilecontent_statement .)
    LBRACE          reduce using rule 278 (while_statement -> WHILE LPAREN cond RPAREN whilecontent_statement .)
    SEMICOLON       reduce using rule 278 (while_statement -> WHILE LPAREN cond RPAREN whilecontent_statement .)
    JOIN            reduce using rule 278 (while_statement -> WHILE LPAREN cond RPAREN whilecontent_statement .)
    ENDFUNCTION     reduce using rule 278 (while_statement -> WHILE LPAREN cond RPAREN whilecontent_statement .)
    ENDTASK         reduce using rule 278 (while_statement -> WHILE LPAREN cond RPAREN whilecontent_statement .)
    ENDCASE         reduce using rule 278 (while_statement -> WHILE LPAREN cond RPAREN whilecontent_statement .)
    DEFAULT         reduce using rule 278 (while_statement -> WHILE LPAREN cond RPAREN whilecontent_statement .)
    MINUS           reduce using rule 278 (while_statement -> WHILE LPAREN cond RPAREN whilecontent_statement .)
    PLUS            reduce using rule 278 (while_statement -> WHILE LPAREN cond RPAREN whilecontent_statement .)
    LNOT            reduce using rule 278 (while_statement -> WHILE LPAREN cond RPAREN whilecontent_statement .)
    NOT             reduce using rule 278 (while_statement -> WHILE LPAREN cond RPAREN whilecontent_statement .)
    AND             reduce using rule 278 (while_statement -> WHILE LPAREN cond RPAREN whilecontent_statement .)
    NAND            reduce using rule 278 (while_statement -> WHILE LPAREN cond RPAREN whilecontent_statement .)
    NOR             reduce using rule 278 (while_statement -> WHILE LPAREN cond RPAREN whilecontent_statement .)
    OR              reduce using rule 278 (while_statement -> WHILE LPAREN cond RPAREN whilecontent_statement .)
    XOR             reduce using rule 278 (while_statement -> WHILE LPAREN cond RPAREN whilecontent_statement .)
    XNOR            reduce using rule 278 (while_statement -> WHILE LPAREN cond RPAREN whilecontent_statement .)
    INTNUMBER_DEC   reduce using rule 278 (while_statement -> WHILE LPAREN cond RPAREN whilecontent_statement .)
    SIGNED_INTNUMBER_DEC reduce using rule 278 (while_statement -> WHILE LPAREN cond RPAREN whilecontent_statement .)
    INTNUMBER_BIN   reduce using rule 278 (while_statement -> WHILE LPAREN cond RPAREN whilecontent_statement .)
    SIGNED_INTNUMBER_BIN reduce using rule 278 (while_statement -> WHILE LPAREN cond RPAREN whilecontent_statement .)
    INTNUMBER_OCT   reduce using rule 278 (while_statement -> WHILE LPAREN cond RPAREN whilecontent_statement .)
    SIGNED_INTNUMBER_OCT reduce using rule 278 (while_statement -> WHILE LPAREN cond RPAREN whilecontent_statement .)
    INTNUMBER_HEX   reduce using rule 278 (while_statement -> WHILE LPAREN cond RPAREN whilecontent_statement .)
    SIGNED_INTNUMBER_HEX reduce using rule 278 (while_statement -> WHILE LPAREN cond RPAREN whilecontent_statement .)
    FLOATNUMBER     reduce using rule 278 (while_statement -> WHILE LPAREN cond RPAREN whilecontent_statement .)
    STRING_LITERAL  reduce using rule 278 (while_statement -> WHILE LPAREN cond RPAREN whilecontent_statement .)


state 695

    (279) whilecontent_statement -> basic_statement .

    ENDMODULE       reduce using rule 279 (whilecontent_statement -> basic_statement .)
    GENERATE        reduce using rule 279 (whilecontent_statement -> basic_statement .)
    INTEGER         reduce using rule 279 (whilecontent_statement -> basic_statement .)
    REAL            reduce using rule 279 (whilecontent_statement -> basic_statement .)
    PARAMETER       reduce using rule 279 (whilecontent_statement -> basic_statement .)
    LOCALPARAM      reduce using rule 279 (whilecontent_statement -> basic_statement .)
    GENVAR          reduce using rule 279 (whilecontent_statement -> basic_statement .)
    ASSIGN          reduce using rule 279 (whilecontent_statement -> basic_statement .)
    ALWAYS          reduce using rule 279 (whilecontent_statement -> basic_statement .)
    ALWAYS_FF       reduce using rule 279 (whilecontent_statement -> basic_statement .)
    ALWAYS_COMB     reduce using rule 279 (whilecontent_statement -> basic_statement .)
    INITIAL         reduce using rule 279 (whilecontent_statement -> basic_statement .)
    ID              reduce using rule 279 (whilecontent_statement -> basic_statement .)
    SENS_OR         reduce using rule 279 (whilecontent_statement -> basic_statement .)
    FUNCTION        reduce using rule 279 (whilecontent_statement -> basic_statement .)
    TASK            reduce using rule 279 (whilecontent_statement -> basic_statement .)
    LPAREN          reduce using rule 279 (whilecontent_statement -> basic_statement .)
    INPUT           reduce using rule 279 (whilecontent_statement -> basic_statement .)
    OUTPUT          reduce using rule 279 (whilecontent_statement -> basic_statement .)
    INOUT           reduce using rule 279 (whilecontent_statement -> basic_statement .)
    TRI             reduce using rule 279 (whilecontent_statement -> basic_statement .)
    REG             reduce using rule 279 (whilecontent_statement -> basic_statement .)
    LOGIC           reduce using rule 279 (whilecontent_statement -> basic_statement .)
    WIRE            reduce using rule 279 (whilecontent_statement -> basic_statement .)
    SIGNED          reduce using rule 279 (whilecontent_statement -> basic_statement .)
    SUPPLY0         reduce using rule 279 (whilecontent_statement -> basic_statement .)
    SUPPLY1         reduce using rule 279 (whilecontent_statement -> basic_statement .)
    ENDGENERATE     reduce using rule 279 (whilecontent_statement -> basic_statement .)
    IF              reduce using rule 279 (whilecontent_statement -> basic_statement .)
    FOR             reduce using rule 279 (whilecontent_statement -> basic_statement .)
    ELSE            reduce using rule 279 (whilecontent_statement -> basic_statement .)
    END             reduce using rule 279 (whilecontent_statement -> basic_statement .)
    CASE            reduce using rule 279 (whilecontent_statement -> basic_statement .)
    CASEX           reduce using rule 279 (whilecontent_statement -> basic_statement .)
    UNIQUE          reduce using rule 279 (whilecontent_statement -> basic_statement .)
    WHILE           reduce using rule 279 (whilecontent_statement -> basic_statement .)
    WAIT            reduce using rule 279 (whilecontent_statement -> basic_statement .)
    FOREVER         reduce using rule 279 (whilecontent_statement -> basic_statement .)
    BEGIN           reduce using rule 279 (whilecontent_statement -> basic_statement .)
    FORK            reduce using rule 279 (whilecontent_statement -> basic_statement .)
    DELAY           reduce using rule 279 (whilecontent_statement -> basic_statement .)
    AT              reduce using rule 279 (whilecontent_statement -> basic_statement .)
    DOLLER          reduce using rule 279 (whilecontent_statement -> basic_statement .)
    DISABLE         reduce using rule 279 (whilecontent_statement -> basic_statement .)
    LBRACE          reduce using rule 279 (whilecontent_statement -> basic_statement .)
    SEMICOLON       reduce using rule 279 (whilecontent_statement -> basic_statement .)
    JOIN            reduce using rule 279 (whilecontent_statement -> basic_statement .)
    ENDFUNCTION     reduce using rule 279 (whilecontent_statement -> basic_statement .)
    ENDTASK         reduce using rule 279 (whilecontent_statement -> basic_statement .)
    ENDCASE         reduce using rule 279 (whilecontent_statement -> basic_statement .)
    DEFAULT         reduce using rule 279 (whilecontent_statement -> basic_statement .)
    MINUS           reduce using rule 279 (whilecontent_statement -> basic_statement .)
    PLUS            reduce using rule 279 (whilecontent_statement -> basic_statement .)
    LNOT            reduce using rule 279 (whilecontent_statement -> basic_statement .)
    NOT             reduce using rule 279 (whilecontent_statement -> basic_statement .)
    AND             reduce using rule 279 (whilecontent_statement -> basic_statement .)
    NAND            reduce using rule 279 (whilecontent_statement -> basic_statement .)
    NOR             reduce using rule 279 (whilecontent_statement -> basic_statement .)
    OR              reduce using rule 279 (whilecontent_statement -> basic_statement .)
    XOR             reduce using rule 279 (whilecontent_statement -> basic_statement .)
    XNOR            reduce using rule 279 (whilecontent_statement -> basic_statement .)
    INTNUMBER_DEC   reduce using rule 279 (whilecontent_statement -> basic_statement .)
    SIGNED_INTNUMBER_DEC reduce using rule 279 (whilecontent_statement -> basic_statement .)
    INTNUMBER_BIN   reduce using rule 279 (whilecontent_statement -> basic_statement .)
    SIGNED_INTNUMBER_BIN reduce using rule 279 (whilecontent_statement -> basic_statement .)
    INTNUMBER_OCT   reduce using rule 279 (whilecontent_statement -> basic_statement .)
    SIGNED_INTNUMBER_OCT reduce using rule 279 (whilecontent_statement -> basic_statement .)
    INTNUMBER_HEX   reduce using rule 279 (whilecontent_statement -> basic_statement .)
    SIGNED_INTNUMBER_HEX reduce using rule 279 (whilecontent_statement -> basic_statement .)
    FLOATNUMBER     reduce using rule 279 (whilecontent_statement -> basic_statement .)
    STRING_LITERAL  reduce using rule 279 (whilecontent_statement -> basic_statement .)


state 696

    (293) wait_statement -> WAIT LPAREN cond RPAREN waitcontent_statement .

    ENDMODULE       reduce using rule 293 (wait_statement -> WAIT LPAREN cond RPAREN waitcontent_statement .)
    GENERATE        reduce using rule 293 (wait_statement -> WAIT LPAREN cond RPAREN waitcontent_statement .)
    INTEGER         reduce using rule 293 (wait_statement -> WAIT LPAREN cond RPAREN waitcontent_statement .)
    REAL            reduce using rule 293 (wait_statement -> WAIT LPAREN cond RPAREN waitcontent_statement .)
    PARAMETER       reduce using rule 293 (wait_statement -> WAIT LPAREN cond RPAREN waitcontent_statement .)
    LOCALPARAM      reduce using rule 293 (wait_statement -> WAIT LPAREN cond RPAREN waitcontent_statement .)
    GENVAR          reduce using rule 293 (wait_statement -> WAIT LPAREN cond RPAREN waitcontent_statement .)
    ASSIGN          reduce using rule 293 (wait_statement -> WAIT LPAREN cond RPAREN waitcontent_statement .)
    ALWAYS          reduce using rule 293 (wait_statement -> WAIT LPAREN cond RPAREN waitcontent_statement .)
    ALWAYS_FF       reduce using rule 293 (wait_statement -> WAIT LPAREN cond RPAREN waitcontent_statement .)
    ALWAYS_COMB     reduce using rule 293 (wait_statement -> WAIT LPAREN cond RPAREN waitcontent_statement .)
    INITIAL         reduce using rule 293 (wait_statement -> WAIT LPAREN cond RPAREN waitcontent_statement .)
    ID              reduce using rule 293 (wait_statement -> WAIT LPAREN cond RPAREN waitcontent_statement .)
    SENS_OR         reduce using rule 293 (wait_statement -> WAIT LPAREN cond RPAREN waitcontent_statement .)
    FUNCTION        reduce using rule 293 (wait_statement -> WAIT LPAREN cond RPAREN waitcontent_statement .)
    TASK            reduce using rule 293 (wait_statement -> WAIT LPAREN cond RPAREN waitcontent_statement .)
    LPAREN          reduce using rule 293 (wait_statement -> WAIT LPAREN cond RPAREN waitcontent_statement .)
    INPUT           reduce using rule 293 (wait_statement -> WAIT LPAREN cond RPAREN waitcontent_statement .)
    OUTPUT          reduce using rule 293 (wait_statement -> WAIT LPAREN cond RPAREN waitcontent_statement .)
    INOUT           reduce using rule 293 (wait_statement -> WAIT LPAREN cond RPAREN waitcontent_statement .)
    TRI             reduce using rule 293 (wait_statement -> WAIT LPAREN cond RPAREN waitcontent_statement .)
    REG             reduce using rule 293 (wait_statement -> WAIT LPAREN cond RPAREN waitcontent_statement .)
    LOGIC           reduce using rule 293 (wait_statement -> WAIT LPAREN cond RPAREN waitcontent_statement .)
    WIRE            reduce using rule 293 (wait_statement -> WAIT LPAREN cond RPAREN waitcontent_statement .)
    SIGNED          reduce using rule 293 (wait_statement -> WAIT LPAREN cond RPAREN waitcontent_statement .)
    SUPPLY0         reduce using rule 293 (wait_statement -> WAIT LPAREN cond RPAREN waitcontent_statement .)
    SUPPLY1         reduce using rule 293 (wait_statement -> WAIT LPAREN cond RPAREN waitcontent_statement .)
    ENDGENERATE     reduce using rule 293 (wait_statement -> WAIT LPAREN cond RPAREN waitcontent_statement .)
    IF              reduce using rule 293 (wait_statement -> WAIT LPAREN cond RPAREN waitcontent_statement .)
    FOR             reduce using rule 293 (wait_statement -> WAIT LPAREN cond RPAREN waitcontent_statement .)
    ELSE            reduce using rule 293 (wait_statement -> WAIT LPAREN cond RPAREN waitcontent_statement .)
    END             reduce using rule 293 (wait_statement -> WAIT LPAREN cond RPAREN waitcontent_statement .)
    CASE            reduce using rule 293 (wait_statement -> WAIT LPAREN cond RPAREN waitcontent_statement .)
    CASEX           reduce using rule 293 (wait_statement -> WAIT LPAREN cond RPAREN waitcontent_statement .)
    UNIQUE          reduce using rule 293 (wait_statement -> WAIT LPAREN cond RPAREN waitcontent_statement .)
    WHILE           reduce using rule 293 (wait_statement -> WAIT LPAREN cond RPAREN waitcontent_statement .)
    WAIT            reduce using rule 293 (wait_statement -> WAIT LPAREN cond RPAREN waitcontent_statement .)
    FOREVER         reduce using rule 293 (wait_statement -> WAIT LPAREN cond RPAREN waitcontent_statement .)
    BEGIN           reduce using rule 293 (wait_statement -> WAIT LPAREN cond RPAREN waitcontent_statement .)
    FORK            reduce using rule 293 (wait_statement -> WAIT LPAREN cond RPAREN waitcontent_statement .)
    DELAY           reduce using rule 293 (wait_statement -> WAIT LPAREN cond RPAREN waitcontent_statement .)
    AT              reduce using rule 293 (wait_statement -> WAIT LPAREN cond RPAREN waitcontent_statement .)
    DOLLER          reduce using rule 293 (wait_statement -> WAIT LPAREN cond RPAREN waitcontent_statement .)
    DISABLE         reduce using rule 293 (wait_statement -> WAIT LPAREN cond RPAREN waitcontent_statement .)
    LBRACE          reduce using rule 293 (wait_statement -> WAIT LPAREN cond RPAREN waitcontent_statement .)
    SEMICOLON       reduce using rule 293 (wait_statement -> WAIT LPAREN cond RPAREN waitcontent_statement .)
    JOIN            reduce using rule 293 (wait_statement -> WAIT LPAREN cond RPAREN waitcontent_statement .)
    ENDFUNCTION     reduce using rule 293 (wait_statement -> WAIT LPAREN cond RPAREN waitcontent_statement .)
    ENDTASK         reduce using rule 293 (wait_statement -> WAIT LPAREN cond RPAREN waitcontent_statement .)
    ENDCASE         reduce using rule 293 (wait_statement -> WAIT LPAREN cond RPAREN waitcontent_statement .)
    DEFAULT         reduce using rule 293 (wait_statement -> WAIT LPAREN cond RPAREN waitcontent_statement .)
    MINUS           reduce using rule 293 (wait_statement -> WAIT LPAREN cond RPAREN waitcontent_statement .)
    PLUS            reduce using rule 293 (wait_statement -> WAIT LPAREN cond RPAREN waitcontent_statement .)
    LNOT            reduce using rule 293 (wait_statement -> WAIT LPAREN cond RPAREN waitcontent_statement .)
    NOT             reduce using rule 293 (wait_statement -> WAIT LPAREN cond RPAREN waitcontent_statement .)
    AND             reduce using rule 293 (wait_statement -> WAIT LPAREN cond RPAREN waitcontent_statement .)
    NAND            reduce using rule 293 (wait_statement -> WAIT LPAREN cond RPAREN waitcontent_statement .)
    NOR             reduce using rule 293 (wait_statement -> WAIT LPAREN cond RPAREN waitcontent_statement .)
    OR              reduce using rule 293 (wait_statement -> WAIT LPAREN cond RPAREN waitcontent_statement .)
    XOR             reduce using rule 293 (wait_statement -> WAIT LPAREN cond RPAREN waitcontent_statement .)
    XNOR            reduce using rule 293 (wait_statement -> WAIT LPAREN cond RPAREN waitcontent_statement .)
    INTNUMBER_DEC   reduce using rule 293 (wait_statement -> WAIT LPAREN cond RPAREN waitcontent_statement .)
    SIGNED_INTNUMBER_DEC reduce using rule 293 (wait_statement -> WAIT LPAREN cond RPAREN waitcontent_statement .)
    INTNUMBER_BIN   reduce using rule 293 (wait_statement -> WAIT LPAREN cond RPAREN waitcontent_statement .)
    SIGNED_INTNUMBER_BIN reduce using rule 293 (wait_statement -> WAIT LPAREN cond RPAREN waitcontent_statement .)
    INTNUMBER_OCT   reduce using rule 293 (wait_statement -> WAIT LPAREN cond RPAREN waitcontent_statement .)
    SIGNED_INTNUMBER_OCT reduce using rule 293 (wait_statement -> WAIT LPAREN cond RPAREN waitcontent_statement .)
    INTNUMBER_HEX   reduce using rule 293 (wait_statement -> WAIT LPAREN cond RPAREN waitcontent_statement .)
    SIGNED_INTNUMBER_HEX reduce using rule 293 (wait_statement -> WAIT LPAREN cond RPAREN waitcontent_statement .)
    FLOATNUMBER     reduce using rule 293 (wait_statement -> WAIT LPAREN cond RPAREN waitcontent_statement .)
    STRING_LITERAL  reduce using rule 293 (wait_statement -> WAIT LPAREN cond RPAREN waitcontent_statement .)


state 697

    (294) waitcontent_statement -> basic_statement .

    ENDMODULE       reduce using rule 294 (waitcontent_statement -> basic_statement .)
    GENERATE        reduce using rule 294 (waitcontent_statement -> basic_statement .)
    INTEGER         reduce using rule 294 (waitcontent_statement -> basic_statement .)
    REAL            reduce using rule 294 (waitcontent_statement -> basic_statement .)
    PARAMETER       reduce using rule 294 (waitcontent_statement -> basic_statement .)
    LOCALPARAM      reduce using rule 294 (waitcontent_statement -> basic_statement .)
    GENVAR          reduce using rule 294 (waitcontent_statement -> basic_statement .)
    ASSIGN          reduce using rule 294 (waitcontent_statement -> basic_statement .)
    ALWAYS          reduce using rule 294 (waitcontent_statement -> basic_statement .)
    ALWAYS_FF       reduce using rule 294 (waitcontent_statement -> basic_statement .)
    ALWAYS_COMB     reduce using rule 294 (waitcontent_statement -> basic_statement .)
    INITIAL         reduce using rule 294 (waitcontent_statement -> basic_statement .)
    ID              reduce using rule 294 (waitcontent_statement -> basic_statement .)
    SENS_OR         reduce using rule 294 (waitcontent_statement -> basic_statement .)
    FUNCTION        reduce using rule 294 (waitcontent_statement -> basic_statement .)
    TASK            reduce using rule 294 (waitcontent_statement -> basic_statement .)
    LPAREN          reduce using rule 294 (waitcontent_statement -> basic_statement .)
    INPUT           reduce using rule 294 (waitcontent_statement -> basic_statement .)
    OUTPUT          reduce using rule 294 (waitcontent_statement -> basic_statement .)
    INOUT           reduce using rule 294 (waitcontent_statement -> basic_statement .)
    TRI             reduce using rule 294 (waitcontent_statement -> basic_statement .)
    REG             reduce using rule 294 (waitcontent_statement -> basic_statement .)
    LOGIC           reduce using rule 294 (waitcontent_statement -> basic_statement .)
    WIRE            reduce using rule 294 (waitcontent_statement -> basic_statement .)
    SIGNED          reduce using rule 294 (waitcontent_statement -> basic_statement .)
    SUPPLY0         reduce using rule 294 (waitcontent_statement -> basic_statement .)
    SUPPLY1         reduce using rule 294 (waitcontent_statement -> basic_statement .)
    ENDGENERATE     reduce using rule 294 (waitcontent_statement -> basic_statement .)
    IF              reduce using rule 294 (waitcontent_statement -> basic_statement .)
    FOR             reduce using rule 294 (waitcontent_statement -> basic_statement .)
    ELSE            reduce using rule 294 (waitcontent_statement -> basic_statement .)
    END             reduce using rule 294 (waitcontent_statement -> basic_statement .)
    CASE            reduce using rule 294 (waitcontent_statement -> basic_statement .)
    CASEX           reduce using rule 294 (waitcontent_statement -> basic_statement .)
    UNIQUE          reduce using rule 294 (waitcontent_statement -> basic_statement .)
    WHILE           reduce using rule 294 (waitcontent_statement -> basic_statement .)
    WAIT            reduce using rule 294 (waitcontent_statement -> basic_statement .)
    FOREVER         reduce using rule 294 (waitcontent_statement -> basic_statement .)
    BEGIN           reduce using rule 294 (waitcontent_statement -> basic_statement .)
    FORK            reduce using rule 294 (waitcontent_statement -> basic_statement .)
    DELAY           reduce using rule 294 (waitcontent_statement -> basic_statement .)
    AT              reduce using rule 294 (waitcontent_statement -> basic_statement .)
    DOLLER          reduce using rule 294 (waitcontent_statement -> basic_statement .)
    DISABLE         reduce using rule 294 (waitcontent_statement -> basic_statement .)
    LBRACE          reduce using rule 294 (waitcontent_statement -> basic_statement .)
    SEMICOLON       reduce using rule 294 (waitcontent_statement -> basic_statement .)
    JOIN            reduce using rule 294 (waitcontent_statement -> basic_statement .)
    ENDFUNCTION     reduce using rule 294 (waitcontent_statement -> basic_statement .)
    ENDTASK         reduce using rule 294 (waitcontent_statement -> basic_statement .)
    ENDCASE         reduce using rule 294 (waitcontent_statement -> basic_statement .)
    DEFAULT         reduce using rule 294 (waitcontent_statement -> basic_statement .)
    MINUS           reduce using rule 294 (waitcontent_statement -> basic_statement .)
    PLUS            reduce using rule 294 (waitcontent_statement -> basic_statement .)
    LNOT            reduce using rule 294 (waitcontent_statement -> basic_statement .)
    NOT             reduce using rule 294 (waitcontent_statement -> basic_statement .)
    AND             reduce using rule 294 (waitcontent_statement -> basic_statement .)
    NAND            reduce using rule 294 (waitcontent_statement -> basic_statement .)
    NOR             reduce using rule 294 (waitcontent_statement -> basic_statement .)
    OR              reduce using rule 294 (waitcontent_statement -> basic_statement .)
    XOR             reduce using rule 294 (waitcontent_statement -> basic_statement .)
    XNOR            reduce using rule 294 (waitcontent_statement -> basic_statement .)
    INTNUMBER_DEC   reduce using rule 294 (waitcontent_statement -> basic_statement .)
    SIGNED_INTNUMBER_DEC reduce using rule 294 (waitcontent_statement -> basic_statement .)
    INTNUMBER_BIN   reduce using rule 294 (waitcontent_statement -> basic_statement .)
    SIGNED_INTNUMBER_BIN reduce using rule 294 (waitcontent_statement -> basic_statement .)
    INTNUMBER_OCT   reduce using rule 294 (waitcontent_statement -> basic_statement .)
    SIGNED_INTNUMBER_OCT reduce using rule 294 (waitcontent_statement -> basic_statement .)
    INTNUMBER_HEX   reduce using rule 294 (waitcontent_statement -> basic_statement .)
    SIGNED_INTNUMBER_HEX reduce using rule 294 (waitcontent_statement -> basic_statement .)
    FLOATNUMBER     reduce using rule 294 (waitcontent_statement -> basic_statement .)
    STRING_LITERAL  reduce using rule 294 (waitcontent_statement -> basic_statement .)


state 698

    (295) waitcontent_statement -> SEMICOLON .

    ENDMODULE       reduce using rule 295 (waitcontent_statement -> SEMICOLON .)
    GENERATE        reduce using rule 295 (waitcontent_statement -> SEMICOLON .)
    INTEGER         reduce using rule 295 (waitcontent_statement -> SEMICOLON .)
    REAL            reduce using rule 295 (waitcontent_statement -> SEMICOLON .)
    PARAMETER       reduce using rule 295 (waitcontent_statement -> SEMICOLON .)
    LOCALPARAM      reduce using rule 295 (waitcontent_statement -> SEMICOLON .)
    GENVAR          reduce using rule 295 (waitcontent_statement -> SEMICOLON .)
    ASSIGN          reduce using rule 295 (waitcontent_statement -> SEMICOLON .)
    ALWAYS          reduce using rule 295 (waitcontent_statement -> SEMICOLON .)
    ALWAYS_FF       reduce using rule 295 (waitcontent_statement -> SEMICOLON .)
    ALWAYS_COMB     reduce using rule 295 (waitcontent_statement -> SEMICOLON .)
    INITIAL         reduce using rule 295 (waitcontent_statement -> SEMICOLON .)
    ID              reduce using rule 295 (waitcontent_statement -> SEMICOLON .)
    SENS_OR         reduce using rule 295 (waitcontent_statement -> SEMICOLON .)
    FUNCTION        reduce using rule 295 (waitcontent_statement -> SEMICOLON .)
    TASK            reduce using rule 295 (waitcontent_statement -> SEMICOLON .)
    LPAREN          reduce using rule 295 (waitcontent_statement -> SEMICOLON .)
    INPUT           reduce using rule 295 (waitcontent_statement -> SEMICOLON .)
    OUTPUT          reduce using rule 295 (waitcontent_statement -> SEMICOLON .)
    INOUT           reduce using rule 295 (waitcontent_statement -> SEMICOLON .)
    TRI             reduce using rule 295 (waitcontent_statement -> SEMICOLON .)
    REG             reduce using rule 295 (waitcontent_statement -> SEMICOLON .)
    LOGIC           reduce using rule 295 (waitcontent_statement -> SEMICOLON .)
    WIRE            reduce using rule 295 (waitcontent_statement -> SEMICOLON .)
    SIGNED          reduce using rule 295 (waitcontent_statement -> SEMICOLON .)
    SUPPLY0         reduce using rule 295 (waitcontent_statement -> SEMICOLON .)
    SUPPLY1         reduce using rule 295 (waitcontent_statement -> SEMICOLON .)
    ENDGENERATE     reduce using rule 295 (waitcontent_statement -> SEMICOLON .)
    IF              reduce using rule 295 (waitcontent_statement -> SEMICOLON .)
    FOR             reduce using rule 295 (waitcontent_statement -> SEMICOLON .)
    ELSE            reduce using rule 295 (waitcontent_statement -> SEMICOLON .)
    END             reduce using rule 295 (waitcontent_statement -> SEMICOLON .)
    CASE            reduce using rule 295 (waitcontent_statement -> SEMICOLON .)
    CASEX           reduce using rule 295 (waitcontent_statement -> SEMICOLON .)
    UNIQUE          reduce using rule 295 (waitcontent_statement -> SEMICOLON .)
    WHILE           reduce using rule 295 (waitcontent_statement -> SEMICOLON .)
    WAIT            reduce using rule 295 (waitcontent_statement -> SEMICOLON .)
    FOREVER         reduce using rule 295 (waitcontent_statement -> SEMICOLON .)
    BEGIN           reduce using rule 295 (waitcontent_statement -> SEMICOLON .)
    FORK            reduce using rule 295 (waitcontent_statement -> SEMICOLON .)
    DELAY           reduce using rule 295 (waitcontent_statement -> SEMICOLON .)
    AT              reduce using rule 295 (waitcontent_statement -> SEMICOLON .)
    DOLLER          reduce using rule 295 (waitcontent_statement -> SEMICOLON .)
    DISABLE         reduce using rule 295 (waitcontent_statement -> SEMICOLON .)
    LBRACE          reduce using rule 295 (waitcontent_statement -> SEMICOLON .)
    SEMICOLON       reduce using rule 295 (waitcontent_statement -> SEMICOLON .)
    JOIN            reduce using rule 295 (waitcontent_statement -> SEMICOLON .)
    ENDFUNCTION     reduce using rule 295 (waitcontent_statement -> SEMICOLON .)
    ENDTASK         reduce using rule 295 (waitcontent_statement -> SEMICOLON .)
    ENDCASE         reduce using rule 295 (waitcontent_statement -> SEMICOLON .)
    DEFAULT         reduce using rule 295 (waitcontent_statement -> SEMICOLON .)
    MINUS           reduce using rule 295 (waitcontent_statement -> SEMICOLON .)
    PLUS            reduce using rule 295 (waitcontent_statement -> SEMICOLON .)
    LNOT            reduce using rule 295 (waitcontent_statement -> SEMICOLON .)
    NOT             reduce using rule 295 (waitcontent_statement -> SEMICOLON .)
    AND             reduce using rule 295 (waitcontent_statement -> SEMICOLON .)
    NAND            reduce using rule 295 (waitcontent_statement -> SEMICOLON .)
    NOR             reduce using rule 295 (waitcontent_statement -> SEMICOLON .)
    OR              reduce using rule 295 (waitcontent_statement -> SEMICOLON .)
    XOR             reduce using rule 295 (waitcontent_statement -> SEMICOLON .)
    XNOR            reduce using rule 295 (waitcontent_statement -> SEMICOLON .)
    INTNUMBER_DEC   reduce using rule 295 (waitcontent_statement -> SEMICOLON .)
    SIGNED_INTNUMBER_DEC reduce using rule 295 (waitcontent_statement -> SEMICOLON .)
    INTNUMBER_BIN   reduce using rule 295 (waitcontent_statement -> SEMICOLON .)
    SIGNED_INTNUMBER_BIN reduce using rule 295 (waitcontent_statement -> SEMICOLON .)
    INTNUMBER_OCT   reduce using rule 295 (waitcontent_statement -> SEMICOLON .)
    SIGNED_INTNUMBER_OCT reduce using rule 295 (waitcontent_statement -> SEMICOLON .)
    INTNUMBER_HEX   reduce using rule 295 (waitcontent_statement -> SEMICOLON .)
    SIGNED_INTNUMBER_HEX reduce using rule 295 (waitcontent_statement -> SEMICOLON .)
    FLOATNUMBER     reduce using rule 295 (waitcontent_statement -> SEMICOLON .)
    STRING_LITERAL  reduce using rule 295 (waitcontent_statement -> SEMICOLON .)


state 699

    (250) namedblock -> BEGIN COLON ID namedblock_statements END .

    ENDMODULE       reduce using rule 250 (namedblock -> BEGIN COLON ID namedblock_statements END .)
    GENERATE        reduce using rule 250 (namedblock -> BEGIN COLON ID namedblock_statements END .)
    INTEGER         reduce using rule 250 (namedblock -> BEGIN COLON ID namedblock_statements END .)
    REAL            reduce using rule 250 (namedblock -> BEGIN COLON ID namedblock_statements END .)
    PARAMETER       reduce using rule 250 (namedblock -> BEGIN COLON ID namedblock_statements END .)
    LOCALPARAM      reduce using rule 250 (namedblock -> BEGIN COLON ID namedblock_statements END .)
    GENVAR          reduce using rule 250 (namedblock -> BEGIN COLON ID namedblock_statements END .)
    ASSIGN          reduce using rule 250 (namedblock -> BEGIN COLON ID namedblock_statements END .)
    ALWAYS          reduce using rule 250 (namedblock -> BEGIN COLON ID namedblock_statements END .)
    ALWAYS_FF       reduce using rule 250 (namedblock -> BEGIN COLON ID namedblock_statements END .)
    ALWAYS_COMB     reduce using rule 250 (namedblock -> BEGIN COLON ID namedblock_statements END .)
    INITIAL         reduce using rule 250 (namedblock -> BEGIN COLON ID namedblock_statements END .)
    ID              reduce using rule 250 (namedblock -> BEGIN COLON ID namedblock_statements END .)
    SENS_OR         reduce using rule 250 (namedblock -> BEGIN COLON ID namedblock_statements END .)
    FUNCTION        reduce using rule 250 (namedblock -> BEGIN COLON ID namedblock_statements END .)
    TASK            reduce using rule 250 (namedblock -> BEGIN COLON ID namedblock_statements END .)
    LPAREN          reduce using rule 250 (namedblock -> BEGIN COLON ID namedblock_statements END .)
    INPUT           reduce using rule 250 (namedblock -> BEGIN COLON ID namedblock_statements END .)
    OUTPUT          reduce using rule 250 (namedblock -> BEGIN COLON ID namedblock_statements END .)
    INOUT           reduce using rule 250 (namedblock -> BEGIN COLON ID namedblock_statements END .)
    TRI             reduce using rule 250 (namedblock -> BEGIN COLON ID namedblock_statements END .)
    REG             reduce using rule 250 (namedblock -> BEGIN COLON ID namedblock_statements END .)
    LOGIC           reduce using rule 250 (namedblock -> BEGIN COLON ID namedblock_statements END .)
    WIRE            reduce using rule 250 (namedblock -> BEGIN COLON ID namedblock_statements END .)
    SIGNED          reduce using rule 250 (namedblock -> BEGIN COLON ID namedblock_statements END .)
    SUPPLY0         reduce using rule 250 (namedblock -> BEGIN COLON ID namedblock_statements END .)
    SUPPLY1         reduce using rule 250 (namedblock -> BEGIN COLON ID namedblock_statements END .)
    ENDGENERATE     reduce using rule 250 (namedblock -> BEGIN COLON ID namedblock_statements END .)
    IF              reduce using rule 250 (namedblock -> BEGIN COLON ID namedblock_statements END .)
    FOR             reduce using rule 250 (namedblock -> BEGIN COLON ID namedblock_statements END .)
    ELSE            reduce using rule 250 (namedblock -> BEGIN COLON ID namedblock_statements END .)
    END             reduce using rule 250 (namedblock -> BEGIN COLON ID namedblock_statements END .)
    CASE            reduce using rule 250 (namedblock -> BEGIN COLON ID namedblock_statements END .)
    CASEX           reduce using rule 250 (namedblock -> BEGIN COLON ID namedblock_statements END .)
    UNIQUE          reduce using rule 250 (namedblock -> BEGIN COLON ID namedblock_statements END .)
    WHILE           reduce using rule 250 (namedblock -> BEGIN COLON ID namedblock_statements END .)
    WAIT            reduce using rule 250 (namedblock -> BEGIN COLON ID namedblock_statements END .)
    FOREVER         reduce using rule 250 (namedblock -> BEGIN COLON ID namedblock_statements END .)
    BEGIN           reduce using rule 250 (namedblock -> BEGIN COLON ID namedblock_statements END .)
    FORK            reduce using rule 250 (namedblock -> BEGIN COLON ID namedblock_statements END .)
    DELAY           reduce using rule 250 (namedblock -> BEGIN COLON ID namedblock_statements END .)
    AT              reduce using rule 250 (namedblock -> BEGIN COLON ID namedblock_statements END .)
    DOLLER          reduce using rule 250 (namedblock -> BEGIN COLON ID namedblock_statements END .)
    DISABLE         reduce using rule 250 (namedblock -> BEGIN COLON ID namedblock_statements END .)
    LBRACE          reduce using rule 250 (namedblock -> BEGIN COLON ID namedblock_statements END .)
    SEMICOLON       reduce using rule 250 (namedblock -> BEGIN COLON ID namedblock_statements END .)
    JOIN            reduce using rule 250 (namedblock -> BEGIN COLON ID namedblock_statements END .)
    ENDFUNCTION     reduce using rule 250 (namedblock -> BEGIN COLON ID namedblock_statements END .)
    ENDTASK         reduce using rule 250 (namedblock -> BEGIN COLON ID namedblock_statements END .)
    ENDCASE         reduce using rule 250 (namedblock -> BEGIN COLON ID namedblock_statements END .)
    DEFAULT         reduce using rule 250 (namedblock -> BEGIN COLON ID namedblock_statements END .)
    MINUS           reduce using rule 250 (namedblock -> BEGIN COLON ID namedblock_statements END .)
    PLUS            reduce using rule 250 (namedblock -> BEGIN COLON ID namedblock_statements END .)
    LNOT            reduce using rule 250 (namedblock -> BEGIN COLON ID namedblock_statements END .)
    NOT             reduce using rule 250 (namedblock -> BEGIN COLON ID namedblock_statements END .)
    AND             reduce using rule 250 (namedblock -> BEGIN COLON ID namedblock_statements END .)
    NAND            reduce using rule 250 (namedblock -> BEGIN COLON ID namedblock_statements END .)
    NOR             reduce using rule 250 (namedblock -> BEGIN COLON ID namedblock_statements END .)
    OR              reduce using rule 250 (namedblock -> BEGIN COLON ID namedblock_statements END .)
    XOR             reduce using rule 250 (namedblock -> BEGIN COLON ID namedblock_statements END .)
    XNOR            reduce using rule 250 (namedblock -> BEGIN COLON ID namedblock_statements END .)
    INTNUMBER_DEC   reduce using rule 250 (namedblock -> BEGIN COLON ID namedblock_statements END .)
    SIGNED_INTNUMBER_DEC reduce using rule 250 (namedblock -> BEGIN COLON ID namedblock_statements END .)
    INTNUMBER_BIN   reduce using rule 250 (namedblock -> BEGIN COLON ID namedblock_statements END .)
    SIGNED_INTNUMBER_BIN reduce using rule 250 (namedblock -> BEGIN COLON ID namedblock_statements END .)
    INTNUMBER_OCT   reduce using rule 250 (namedblock -> BEGIN COLON ID namedblock_statements END .)
    SIGNED_INTNUMBER_OCT reduce using rule 250 (namedblock -> BEGIN COLON ID namedblock_statements END .)
    INTNUMBER_HEX   reduce using rule 250 (namedblock -> BEGIN COLON ID namedblock_statements END .)
    SIGNED_INTNUMBER_HEX reduce using rule 250 (namedblock -> BEGIN COLON ID namedblock_statements END .)
    FLOATNUMBER     reduce using rule 250 (namedblock -> BEGIN COLON ID namedblock_statements END .)
    STRING_LITERAL  reduce using rule 250 (namedblock -> BEGIN COLON ID namedblock_statements END .)


state 700

    (252) namedblock_statements -> namedblock_statements namedblock_statement .

    END             reduce using rule 252 (namedblock_statements -> namedblock_statements namedblock_statement .)
    INTEGER         reduce using rule 252 (namedblock_statements -> namedblock_statements namedblock_statement .)
    REAL            reduce using rule 252 (namedblock_statements -> namedblock_statements namedblock_statement .)
    PARAMETER       reduce using rule 252 (namedblock_statements -> namedblock_statements namedblock_statement .)
    LOCALPARAM      reduce using rule 252 (namedblock_statements -> namedblock_statements namedblock_statement .)
    IF              reduce using rule 252 (namedblock_statements -> namedblock_statements namedblock_statement .)
    CASE            reduce using rule 252 (namedblock_statements -> namedblock_statements namedblock_statement .)
    CASEX           reduce using rule 252 (namedblock_statements -> namedblock_statements namedblock_statement .)
    UNIQUE          reduce using rule 252 (namedblock_statements -> namedblock_statements namedblock_statement .)
    FOR             reduce using rule 252 (namedblock_statements -> namedblock_statements namedblock_statement .)
    WHILE           reduce using rule 252 (namedblock_statements -> namedblock_statements namedblock_statement .)
    WAIT            reduce using rule 252 (namedblock_statements -> namedblock_statements namedblock_statement .)
    FOREVER         reduce using rule 252 (namedblock_statements -> namedblock_statements namedblock_statement .)
    BEGIN           reduce using rule 252 (namedblock_statements -> namedblock_statements namedblock_statement .)
    FORK            reduce using rule 252 (namedblock_statements -> namedblock_statements namedblock_statement .)
    DELAY           reduce using rule 252 (namedblock_statements -> namedblock_statements namedblock_statement .)
    AT              reduce using rule 252 (namedblock_statements -> namedblock_statements namedblock_statement .)
    DOLLER          reduce using rule 252 (namedblock_statements -> namedblock_statements namedblock_statement .)
    DISABLE         reduce using rule 252 (namedblock_statements -> namedblock_statements namedblock_statement .)
    INPUT           reduce using rule 252 (namedblock_statements -> namedblock_statements namedblock_statement .)
    OUTPUT          reduce using rule 252 (namedblock_statements -> namedblock_statements namedblock_statement .)
    INOUT           reduce using rule 252 (namedblock_statements -> namedblock_statements namedblock_statement .)
    TRI             reduce using rule 252 (namedblock_statements -> namedblock_statements namedblock_statement .)
    REG             reduce using rule 252 (namedblock_statements -> namedblock_statements namedblock_statement .)
    LOGIC           reduce using rule 252 (namedblock_statements -> namedblock_statements namedblock_statement .)
    WIRE            reduce using rule 252 (namedblock_statements -> namedblock_statements namedblock_statement .)
    SIGNED          reduce using rule 252 (namedblock_statements -> namedblock_statements namedblock_statement .)
    SUPPLY0         reduce using rule 252 (namedblock_statements -> namedblock_statements namedblock_statement .)
    SUPPLY1         reduce using rule 252 (namedblock_statements -> namedblock_statements namedblock_statement .)
    LBRACE          reduce using rule 252 (namedblock_statements -> namedblock_statements namedblock_statement .)
    ID              reduce using rule 252 (namedblock_statements -> namedblock_statements namedblock_statement .)
    SEMICOLON       reduce using rule 252 (namedblock_statements -> namedblock_statements namedblock_statement .)


state 701

    (301) instance_body -> ID LPAREN instance_ports RPAREN .

    SEMICOLON       reduce using rule 301 (instance_body -> ID LPAREN instance_ports RPAREN .)
    COMMA           reduce using rule 301 (instance_body -> ID LPAREN instance_ports RPAREN .)


state 702

    (302) instance_body -> ID width LPAREN instance_ports . RPAREN

    RPAREN          shift and go to state 743


state 703

    (313) param_args -> param_args COMMA param_arg .

    RPAREN          reduce using rule 313 (param_args -> param_args COMMA param_arg .)
    COMMA           reduce using rule 313 (param_args -> param_args COMMA param_arg .)


state 704

    (311) param_args_noname -> param_args_noname COMMA param_arg_noname .

    RPAREN          reduce using rule 311 (param_args_noname -> param_args_noname COMMA param_arg_noname .)
    COMMA           reduce using rule 311 (param_args_noname -> param_args_noname COMMA param_arg_noname .)


state 705

    (317) param_arg -> DOT ID LPAREN . expression RPAREN
    (130) expression -> . MINUS expression
    (131) expression -> . PLUS expression
    (132) expression -> . LNOT expression
    (133) expression -> . NOT expression
    (134) expression -> . AND expression
    (135) expression -> . NAND expression
    (136) expression -> . NOR expression
    (137) expression -> . OR expression
    (138) expression -> . XOR expression
    (139) expression -> . XNOR expression
    (140) expression -> . expression POWER expression
    (141) expression -> . expression TIMES expression
    (142) expression -> . expression DIVIDE expression
    (143) expression -> . expression MOD expression
    (144) expression -> . expression PLUS expression
    (145) expression -> . expression MINUS expression
    (146) expression -> . expression LSHIFT expression
    (147) expression -> . expression RSHIFT expression
    (148) expression -> . expression LSHIFTA expression
    (149) expression -> . expression RSHIFTA expression
    (150) expression -> . expression LT expression
    (151) expression -> . expression GT expression
    (152) expression -> . expression LE expression
    (153) expression -> . expression GE expression
    (154) expression -> . expression EQ expression
    (155) expression -> . expression NE expression
    (156) expression -> . expression EQL expression
    (157) expression -> . expression NEL expression
    (158) expression -> . expression AND expression
    (159) expression -> . expression XOR expression
    (160) expression -> . expression XNOR expression
    (161) expression -> . expression OR expression
    (162) expression -> . expression LAND expression
    (163) expression -> . expression LOR expression
    (164) expression -> . expression COND expression COLON expression
    (165) expression -> . LPAREN expression RPAREN
    (166) expression -> . concat
    (167) expression -> . repeat
    (168) expression -> . partselect
    (169) expression -> . pointer
    (170) expression -> . functioncall
    (171) expression -> . systemcall
    (172) expression -> . identifier
    (173) expression -> . const_expression
    (174) concat -> . LBRACE concatlist RBRACE
    (177) repeat -> . LBRACE expression concat RBRACE
    (178) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (179) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (180) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (181) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (182) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (183) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (184) pointer -> . identifier LBRACKET expression RBRACKET
    (185) pointer -> . pointer LBRACKET expression RBRACKET
    (373) functioncall -> . identifier LPAREN func_args RPAREN
    (351) systemcall -> . DOLLER ID
    (352) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (353) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (392) identifier -> . ID
    (393) identifier -> . scope ID
    (186) const_expression -> . intnumber
    (187) const_expression -> . floatnumber
    (188) const_expression -> . stringliteral
    (394) scope -> . identifier DOT
    (395) scope -> . pointer DOT
    (190) intnumber -> . INTNUMBER_DEC
    (191) intnumber -> . SIGNED_INTNUMBER_DEC
    (192) intnumber -> . INTNUMBER_BIN
    (193) intnumber -> . SIGNED_INTNUMBER_BIN
    (194) intnumber -> . INTNUMBER_OCT
    (195) intnumber -> . SIGNED_INTNUMBER_OCT
    (196) intnumber -> . INTNUMBER_HEX
    (197) intnumber -> . SIGNED_INTNUMBER_HEX
    (189) floatnumber -> . FLOATNUMBER
    (198) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 88
    PLUS            shift and go to state 89
    LNOT            shift and go to state 90
    NOT             shift and go to state 91
    AND             shift and go to state 92
    NAND            shift and go to state 93
    NOR             shift and go to state 94
    OR              shift and go to state 95
    XOR             shift and go to state 96
    XNOR            shift and go to state 97
    LPAREN          shift and go to state 85
    LBRACE          shift and go to state 106
    DOLLER          shift and go to state 107
    ID              shift and go to state 86
    INTNUMBER_DEC   shift and go to state 112
    SIGNED_INTNUMBER_DEC shift and go to state 113
    INTNUMBER_BIN   shift and go to state 114
    SIGNED_INTNUMBER_BIN shift and go to state 115
    INTNUMBER_OCT   shift and go to state 116
    SIGNED_INTNUMBER_OCT shift and go to state 117
    INTNUMBER_HEX   shift and go to state 118
    SIGNED_INTNUMBER_HEX shift and go to state 119
    FLOATNUMBER     shift and go to state 120
    STRING_LITERAL  shift and go to state 121

    expression                     shift and go to state 744
    concat                         shift and go to state 98
    repeat                         shift and go to state 99
    partselect                     shift and go to state 100
    pointer                        shift and go to state 101
    functioncall                   shift and go to state 102
    systemcall                     shift and go to state 103
    identifier                     shift and go to state 104
    const_expression               shift and go to state 105
    scope                          shift and go to state 108
    intnumber                      shift and go to state 109
    floatnumber                    shift and go to state 110
    stringliteral                  shift and go to state 111

state 706

    (326) instance_port_arg -> DOT ID LPAREN identifier . RPAREN
    (172) expression -> identifier .
    (394) scope -> identifier . DOT
    (178) partselect -> identifier . LBRACKET expression COLON expression RBRACKET
    (179) partselect -> identifier . LBRACKET expression PLUSCOLON expression RBRACKET
    (180) partselect -> identifier . LBRACKET expression MINUSCOLON expression RBRACKET
    (184) pointer -> identifier . LBRACKET expression RBRACKET
    (373) functioncall -> identifier . LPAREN func_args RPAREN

  ! shift/reduce conflict for RPAREN resolved as shift
    RPAREN          shift and go to state 745
    POWER           reduce using rule 172 (expression -> identifier .)
    TIMES           reduce using rule 172 (expression -> identifier .)
    DIVIDE          reduce using rule 172 (expression -> identifier .)
    MOD             reduce using rule 172 (expression -> identifier .)
    PLUS            reduce using rule 172 (expression -> identifier .)
    MINUS           reduce using rule 172 (expression -> identifier .)
    LSHIFT          reduce using rule 172 (expression -> identifier .)
    RSHIFT          reduce using rule 172 (expression -> identifier .)
    LSHIFTA         reduce using rule 172 (expression -> identifier .)
    RSHIFTA         reduce using rule 172 (expression -> identifier .)
    LT              reduce using rule 172 (expression -> identifier .)
    GT              reduce using rule 172 (expression -> identifier .)
    LE              reduce using rule 172 (expression -> identifier .)
    GE              reduce using rule 172 (expression -> identifier .)
    EQ              reduce using rule 172 (expression -> identifier .)
    NE              reduce using rule 172 (expression -> identifier .)
    EQL             reduce using rule 172 (expression -> identifier .)
    NEL             reduce using rule 172 (expression -> identifier .)
    AND             reduce using rule 172 (expression -> identifier .)
    XOR             reduce using rule 172 (expression -> identifier .)
    XNOR            reduce using rule 172 (expression -> identifier .)
    OR              reduce using rule 172 (expression -> identifier .)
    LAND            reduce using rule 172 (expression -> identifier .)
    LOR             reduce using rule 172 (expression -> identifier .)
    COND            reduce using rule 172 (expression -> identifier .)
    DOT             shift and go to state 274
    LBRACKET        shift and go to state 272
    LPAREN          shift and go to state 273

  ! RPAREN          [ reduce using rule 172 (expression -> identifier .) ]


state 707

    (328) instance_port_arg -> DOT ID LPAREN RPAREN .

    COMMA           reduce using rule 328 (instance_port_arg -> DOT ID LPAREN RPAREN .)
    RPAREN          reduce using rule 328 (instance_port_arg -> DOT ID LPAREN RPAREN .)


state 708

    (327) instance_port_arg -> DOT ID LPAREN expression . RPAREN
    (140) expression -> expression . POWER expression
    (141) expression -> expression . TIMES expression
    (142) expression -> expression . DIVIDE expression
    (143) expression -> expression . MOD expression
    (144) expression -> expression . PLUS expression
    (145) expression -> expression . MINUS expression
    (146) expression -> expression . LSHIFT expression
    (147) expression -> expression . RSHIFT expression
    (148) expression -> expression . LSHIFTA expression
    (149) expression -> expression . RSHIFTA expression
    (150) expression -> expression . LT expression
    (151) expression -> expression . GT expression
    (152) expression -> expression . LE expression
    (153) expression -> expression . GE expression
    (154) expression -> expression . EQ expression
    (155) expression -> expression . NE expression
    (156) expression -> expression . EQL expression
    (157) expression -> expression . NEL expression
    (158) expression -> expression . AND expression
    (159) expression -> expression . XOR expression
    (160) expression -> expression . XNOR expression
    (161) expression -> expression . OR expression
    (162) expression -> expression . LAND expression
    (163) expression -> expression . LOR expression
    (164) expression -> expression . COND expression COLON expression

    RPAREN          shift and go to state 746
    POWER           shift and go to state 236
    TIMES           shift and go to state 398
    DIVIDE          shift and go to state 237
    MOD             shift and go to state 238
    PLUS            shift and go to state 239
    MINUS           shift and go to state 240
    LSHIFT          shift and go to state 241
    RSHIFT          shift and go to state 242
    LSHIFTA         shift and go to state 243
    RSHIFTA         shift and go to state 244
    LT              shift and go to state 245
    GT              shift and go to state 246
    LE              shift and go to state 247
    GE              shift and go to state 248
    EQ              shift and go to state 249
    NE              shift and go to state 250
    EQL             shift and go to state 251
    NEL             shift and go to state 252
    AND             shift and go to state 253
    XOR             shift and go to state 254
    XNOR            shift and go to state 255
    OR              shift and go to state 256
    LAND            shift and go to state 257
    LOR             shift and go to state 258
    COND            shift and go to state 259


state 709

    (169) expression -> pointer .
    (395) scope -> pointer . DOT
    (181) partselect -> pointer . LBRACKET expression COLON expression RBRACKET
    (182) partselect -> pointer . LBRACKET expression PLUSCOLON expression RBRACKET
    (183) partselect -> pointer . LBRACKET expression MINUSCOLON expression RBRACKET
    (185) pointer -> pointer . LBRACKET expression RBRACKET

    RPAREN          reduce using rule 169 (expression -> pointer .)
    POWER           reduce using rule 169 (expression -> pointer .)
    TIMES           reduce using rule 169 (expression -> pointer .)
    DIVIDE          reduce using rule 169 (expression -> pointer .)
    MOD             reduce using rule 169 (expression -> pointer .)
    PLUS            reduce using rule 169 (expression -> pointer .)
    MINUS           reduce using rule 169 (expression -> pointer .)
    LSHIFT          reduce using rule 169 (expression -> pointer .)
    RSHIFT          reduce using rule 169 (expression -> pointer .)
    LSHIFTA         reduce using rule 169 (expression -> pointer .)
    RSHIFTA         reduce using rule 169 (expression -> pointer .)
    LT              reduce using rule 169 (expression -> pointer .)
    GT              reduce using rule 169 (expression -> pointer .)
    LE              reduce using rule 169 (expression -> pointer .)
    GE              reduce using rule 169 (expression -> pointer .)
    EQ              reduce using rule 169 (expression -> pointer .)
    NE              reduce using rule 169 (expression -> pointer .)
    EQL             reduce using rule 169 (expression -> pointer .)
    NEL             reduce using rule 169 (expression -> pointer .)
    AND             reduce using rule 169 (expression -> pointer .)
    XOR             reduce using rule 169 (expression -> pointer .)
    XNOR            reduce using rule 169 (expression -> pointer .)
    OR              reduce using rule 169 (expression -> pointer .)
    LAND            reduce using rule 169 (expression -> pointer .)
    LOR             reduce using rule 169 (expression -> pointer .)
    COND            reduce using rule 169 (expression -> pointer .)
    DOT             shift and go to state 271
    LBRACKET        shift and go to state 270


state 710

    (358) function -> FUNCTION width ID SEMICOLON function_statement ENDFUNCTION .

    ENDMODULE       reduce using rule 358 (function -> FUNCTION width ID SEMICOLON function_statement ENDFUNCTION .)
    GENERATE        reduce using rule 358 (function -> FUNCTION width ID SEMICOLON function_statement ENDFUNCTION .)
    INTEGER         reduce using rule 358 (function -> FUNCTION width ID SEMICOLON function_statement ENDFUNCTION .)
    REAL            reduce using rule 358 (function -> FUNCTION width ID SEMICOLON function_statement ENDFUNCTION .)
    PARAMETER       reduce using rule 358 (function -> FUNCTION width ID SEMICOLON function_statement ENDFUNCTION .)
    LOCALPARAM      reduce using rule 358 (function -> FUNCTION width ID SEMICOLON function_statement ENDFUNCTION .)
    GENVAR          reduce using rule 358 (function -> FUNCTION width ID SEMICOLON function_statement ENDFUNCTION .)
    ASSIGN          reduce using rule 358 (function -> FUNCTION width ID SEMICOLON function_statement ENDFUNCTION .)
    ALWAYS          reduce using rule 358 (function -> FUNCTION width ID SEMICOLON function_statement ENDFUNCTION .)
    ALWAYS_FF       reduce using rule 358 (function -> FUNCTION width ID SEMICOLON function_statement ENDFUNCTION .)
    ALWAYS_COMB     reduce using rule 358 (function -> FUNCTION width ID SEMICOLON function_statement ENDFUNCTION .)
    INITIAL         reduce using rule 358 (function -> FUNCTION width ID SEMICOLON function_statement ENDFUNCTION .)
    ID              reduce using rule 358 (function -> FUNCTION width ID SEMICOLON function_statement ENDFUNCTION .)
    SENS_OR         reduce using rule 358 (function -> FUNCTION width ID SEMICOLON function_statement ENDFUNCTION .)
    FUNCTION        reduce using rule 358 (function -> FUNCTION width ID SEMICOLON function_statement ENDFUNCTION .)
    TASK            reduce using rule 358 (function -> FUNCTION width ID SEMICOLON function_statement ENDFUNCTION .)
    LPAREN          reduce using rule 358 (function -> FUNCTION width ID SEMICOLON function_statement ENDFUNCTION .)
    INPUT           reduce using rule 358 (function -> FUNCTION width ID SEMICOLON function_statement ENDFUNCTION .)
    OUTPUT          reduce using rule 358 (function -> FUNCTION width ID SEMICOLON function_statement ENDFUNCTION .)
    INOUT           reduce using rule 358 (function -> FUNCTION width ID SEMICOLON function_statement ENDFUNCTION .)
    TRI             reduce using rule 358 (function -> FUNCTION width ID SEMICOLON function_statement ENDFUNCTION .)
    REG             reduce using rule 358 (function -> FUNCTION width ID SEMICOLON function_statement ENDFUNCTION .)
    LOGIC           reduce using rule 358 (function -> FUNCTION width ID SEMICOLON function_statement ENDFUNCTION .)
    WIRE            reduce using rule 358 (function -> FUNCTION width ID SEMICOLON function_statement ENDFUNCTION .)
    SIGNED          reduce using rule 358 (function -> FUNCTION width ID SEMICOLON function_statement ENDFUNCTION .)
    SUPPLY0         reduce using rule 358 (function -> FUNCTION width ID SEMICOLON function_statement ENDFUNCTION .)
    SUPPLY1         reduce using rule 358 (function -> FUNCTION width ID SEMICOLON function_statement ENDFUNCTION .)
    ENDGENERATE     reduce using rule 358 (function -> FUNCTION width ID SEMICOLON function_statement ENDFUNCTION .)
    IF              reduce using rule 358 (function -> FUNCTION width ID SEMICOLON function_statement ENDFUNCTION .)
    FOR             reduce using rule 358 (function -> FUNCTION width ID SEMICOLON function_statement ENDFUNCTION .)
    ELSE            reduce using rule 358 (function -> FUNCTION width ID SEMICOLON function_statement ENDFUNCTION .)
    END             reduce using rule 358 (function -> FUNCTION width ID SEMICOLON function_statement ENDFUNCTION .)


state 711

    (181) partselect -> pointer LBRACKET expression COLON expression RBRACKET .

    TIMES           reduce using rule 181 (partselect -> pointer LBRACKET expression COLON expression RBRACKET .)
    POWER           reduce using rule 181 (partselect -> pointer LBRACKET expression COLON expression RBRACKET .)
    DIVIDE          reduce using rule 181 (partselect -> pointer LBRACKET expression COLON expression RBRACKET .)
    MOD             reduce using rule 181 (partselect -> pointer LBRACKET expression COLON expression RBRACKET .)
    PLUS            reduce using rule 181 (partselect -> pointer LBRACKET expression COLON expression RBRACKET .)
    MINUS           reduce using rule 181 (partselect -> pointer LBRACKET expression COLON expression RBRACKET .)
    LSHIFT          reduce using rule 181 (partselect -> pointer LBRACKET expression COLON expression RBRACKET .)
    RSHIFT          reduce using rule 181 (partselect -> pointer LBRACKET expression COLON expression RBRACKET .)
    LSHIFTA         reduce using rule 181 (partselect -> pointer LBRACKET expression COLON expression RBRACKET .)
    RSHIFTA         reduce using rule 181 (partselect -> pointer LBRACKET expression COLON expression RBRACKET .)
    LT              reduce using rule 181 (partselect -> pointer LBRACKET expression COLON expression RBRACKET .)
    GT              reduce using rule 181 (partselect -> pointer LBRACKET expression COLON expression RBRACKET .)
    LE              reduce using rule 181 (partselect -> pointer LBRACKET expression COLON expression RBRACKET .)
    GE              reduce using rule 181 (partselect -> pointer LBRACKET expression COLON expression RBRACKET .)
    EQ              reduce using rule 181 (partselect -> pointer LBRACKET expression COLON expression RBRACKET .)
    NE              reduce using rule 181 (partselect -> pointer LBRACKET expression COLON expression RBRACKET .)
    EQL             reduce using rule 181 (partselect -> pointer LBRACKET expression COLON expression RBRACKET .)
    NEL             reduce using rule 181 (partselect -> pointer LBRACKET expression COLON expression RBRACKET .)
    AND             reduce using rule 181 (partselect -> pointer LBRACKET expression COLON expression RBRACKET .)
    XOR             reduce using rule 181 (partselect -> pointer LBRACKET expression COLON expression RBRACKET .)
    XNOR            reduce using rule 181 (partselect -> pointer LBRACKET expression COLON expression RBRACKET .)
    OR              reduce using rule 181 (partselect -> pointer LBRACKET expression COLON expression RBRACKET .)
    LAND            reduce using rule 181 (partselect -> pointer LBRACKET expression COLON expression RBRACKET .)
    LOR             reduce using rule 181 (partselect -> pointer LBRACKET expression COLON expression RBRACKET .)
    COND            reduce using rule 181 (partselect -> pointer LBRACKET expression COLON expression RBRACKET .)
    RPAREN          reduce using rule 181 (partselect -> pointer LBRACKET expression COLON expression RBRACKET .)
    LBRACE          reduce using rule 181 (partselect -> pointer LBRACKET expression COLON expression RBRACKET .)
    RBRACE          reduce using rule 181 (partselect -> pointer LBRACKET expression COLON expression RBRACKET .)
    COMMA           reduce using rule 181 (partselect -> pointer LBRACKET expression COLON expression RBRACKET .)
    COLON           reduce using rule 181 (partselect -> pointer LBRACKET expression COLON expression RBRACKET .)
    SEMICOLON       reduce using rule 181 (partselect -> pointer LBRACKET expression COLON expression RBRACKET .)
    PLUSCOLON       reduce using rule 181 (partselect -> pointer LBRACKET expression COLON expression RBRACKET .)
    MINUSCOLON      reduce using rule 181 (partselect -> pointer LBRACKET expression COLON expression RBRACKET .)
    RBRACKET        reduce using rule 181 (partselect -> pointer LBRACKET expression COLON expression RBRACKET .)
    IF              reduce using rule 181 (partselect -> pointer LBRACKET expression COLON expression RBRACKET .)
    CASE            reduce using rule 181 (partselect -> pointer LBRACKET expression COLON expression RBRACKET .)
    CASEX           reduce using rule 181 (partselect -> pointer LBRACKET expression COLON expression RBRACKET .)
    UNIQUE          reduce using rule 181 (partselect -> pointer LBRACKET expression COLON expression RBRACKET .)
    FOR             reduce using rule 181 (partselect -> pointer LBRACKET expression COLON expression RBRACKET .)
    WHILE           reduce using rule 181 (partselect -> pointer LBRACKET expression COLON expression RBRACKET .)
    WAIT            reduce using rule 181 (partselect -> pointer LBRACKET expression COLON expression RBRACKET .)
    FOREVER         reduce using rule 181 (partselect -> pointer LBRACKET expression COLON expression RBRACKET .)
    BEGIN           reduce using rule 181 (partselect -> pointer LBRACKET expression COLON expression RBRACKET .)
    FORK            reduce using rule 181 (partselect -> pointer LBRACKET expression COLON expression RBRACKET .)
    DELAY           reduce using rule 181 (partselect -> pointer LBRACKET expression COLON expression RBRACKET .)
    AT              reduce using rule 181 (partselect -> pointer LBRACKET expression COLON expression RBRACKET .)
    DOLLER          reduce using rule 181 (partselect -> pointer LBRACKET expression COLON expression RBRACKET .)
    DISABLE         reduce using rule 181 (partselect -> pointer LBRACKET expression COLON expression RBRACKET .)
    ID              reduce using rule 181 (partselect -> pointer LBRACKET expression COLON expression RBRACKET .)
    SENS_OR         reduce using rule 181 (partselect -> pointer LBRACKET expression COLON expression RBRACKET .)


state 712

    (182) partselect -> pointer LBRACKET expression PLUSCOLON expression RBRACKET .

    TIMES           reduce using rule 182 (partselect -> pointer LBRACKET expression PLUSCOLON expression RBRACKET .)
    POWER           reduce using rule 182 (partselect -> pointer LBRACKET expression PLUSCOLON expression RBRACKET .)
    DIVIDE          reduce using rule 182 (partselect -> pointer LBRACKET expression PLUSCOLON expression RBRACKET .)
    MOD             reduce using rule 182 (partselect -> pointer LBRACKET expression PLUSCOLON expression RBRACKET .)
    PLUS            reduce using rule 182 (partselect -> pointer LBRACKET expression PLUSCOLON expression RBRACKET .)
    MINUS           reduce using rule 182 (partselect -> pointer LBRACKET expression PLUSCOLON expression RBRACKET .)
    LSHIFT          reduce using rule 182 (partselect -> pointer LBRACKET expression PLUSCOLON expression RBRACKET .)
    RSHIFT          reduce using rule 182 (partselect -> pointer LBRACKET expression PLUSCOLON expression RBRACKET .)
    LSHIFTA         reduce using rule 182 (partselect -> pointer LBRACKET expression PLUSCOLON expression RBRACKET .)
    RSHIFTA         reduce using rule 182 (partselect -> pointer LBRACKET expression PLUSCOLON expression RBRACKET .)
    LT              reduce using rule 182 (partselect -> pointer LBRACKET expression PLUSCOLON expression RBRACKET .)
    GT              reduce using rule 182 (partselect -> pointer LBRACKET expression PLUSCOLON expression RBRACKET .)
    LE              reduce using rule 182 (partselect -> pointer LBRACKET expression PLUSCOLON expression RBRACKET .)
    GE              reduce using rule 182 (partselect -> pointer LBRACKET expression PLUSCOLON expression RBRACKET .)
    EQ              reduce using rule 182 (partselect -> pointer LBRACKET expression PLUSCOLON expression RBRACKET .)
    NE              reduce using rule 182 (partselect -> pointer LBRACKET expression PLUSCOLON expression RBRACKET .)
    EQL             reduce using rule 182 (partselect -> pointer LBRACKET expression PLUSCOLON expression RBRACKET .)
    NEL             reduce using rule 182 (partselect -> pointer LBRACKET expression PLUSCOLON expression RBRACKET .)
    AND             reduce using rule 182 (partselect -> pointer LBRACKET expression PLUSCOLON expression RBRACKET .)
    XOR             reduce using rule 182 (partselect -> pointer LBRACKET expression PLUSCOLON expression RBRACKET .)
    XNOR            reduce using rule 182 (partselect -> pointer LBRACKET expression PLUSCOLON expression RBRACKET .)
    OR              reduce using rule 182 (partselect -> pointer LBRACKET expression PLUSCOLON expression RBRACKET .)
    LAND            reduce using rule 182 (partselect -> pointer LBRACKET expression PLUSCOLON expression RBRACKET .)
    LOR             reduce using rule 182 (partselect -> pointer LBRACKET expression PLUSCOLON expression RBRACKET .)
    COND            reduce using rule 182 (partselect -> pointer LBRACKET expression PLUSCOLON expression RBRACKET .)
    RPAREN          reduce using rule 182 (partselect -> pointer LBRACKET expression PLUSCOLON expression RBRACKET .)
    LBRACE          reduce using rule 182 (partselect -> pointer LBRACKET expression PLUSCOLON expression RBRACKET .)
    RBRACE          reduce using rule 182 (partselect -> pointer LBRACKET expression PLUSCOLON expression RBRACKET .)
    COMMA           reduce using rule 182 (partselect -> pointer LBRACKET expression PLUSCOLON expression RBRACKET .)
    COLON           reduce using rule 182 (partselect -> pointer LBRACKET expression PLUSCOLON expression RBRACKET .)
    SEMICOLON       reduce using rule 182 (partselect -> pointer LBRACKET expression PLUSCOLON expression RBRACKET .)
    PLUSCOLON       reduce using rule 182 (partselect -> pointer LBRACKET expression PLUSCOLON expression RBRACKET .)
    MINUSCOLON      reduce using rule 182 (partselect -> pointer LBRACKET expression PLUSCOLON expression RBRACKET .)
    RBRACKET        reduce using rule 182 (partselect -> pointer LBRACKET expression PLUSCOLON expression RBRACKET .)
    IF              reduce using rule 182 (partselect -> pointer LBRACKET expression PLUSCOLON expression RBRACKET .)
    CASE            reduce using rule 182 (partselect -> pointer LBRACKET expression PLUSCOLON expression RBRACKET .)
    CASEX           reduce using rule 182 (partselect -> pointer LBRACKET expression PLUSCOLON expression RBRACKET .)
    UNIQUE          reduce using rule 182 (partselect -> pointer LBRACKET expression PLUSCOLON expression RBRACKET .)
    FOR             reduce using rule 182 (partselect -> pointer LBRACKET expression PLUSCOLON expression RBRACKET .)
    WHILE           reduce using rule 182 (partselect -> pointer LBRACKET expression PLUSCOLON expression RBRACKET .)
    WAIT            reduce using rule 182 (partselect -> pointer LBRACKET expression PLUSCOLON expression RBRACKET .)
    FOREVER         reduce using rule 182 (partselect -> pointer LBRACKET expression PLUSCOLON expression RBRACKET .)
    BEGIN           reduce using rule 182 (partselect -> pointer LBRACKET expression PLUSCOLON expression RBRACKET .)
    FORK            reduce using rule 182 (partselect -> pointer LBRACKET expression PLUSCOLON expression RBRACKET .)
    DELAY           reduce using rule 182 (partselect -> pointer LBRACKET expression PLUSCOLON expression RBRACKET .)
    AT              reduce using rule 182 (partselect -> pointer LBRACKET expression PLUSCOLON expression RBRACKET .)
    DOLLER          reduce using rule 182 (partselect -> pointer LBRACKET expression PLUSCOLON expression RBRACKET .)
    DISABLE         reduce using rule 182 (partselect -> pointer LBRACKET expression PLUSCOLON expression RBRACKET .)
    ID              reduce using rule 182 (partselect -> pointer LBRACKET expression PLUSCOLON expression RBRACKET .)
    SENS_OR         reduce using rule 182 (partselect -> pointer LBRACKET expression PLUSCOLON expression RBRACKET .)


state 713

    (183) partselect -> pointer LBRACKET expression MINUSCOLON expression RBRACKET .

    TIMES           reduce using rule 183 (partselect -> pointer LBRACKET expression MINUSCOLON expression RBRACKET .)
    POWER           reduce using rule 183 (partselect -> pointer LBRACKET expression MINUSCOLON expression RBRACKET .)
    DIVIDE          reduce using rule 183 (partselect -> pointer LBRACKET expression MINUSCOLON expression RBRACKET .)
    MOD             reduce using rule 183 (partselect -> pointer LBRACKET expression MINUSCOLON expression RBRACKET .)
    PLUS            reduce using rule 183 (partselect -> pointer LBRACKET expression MINUSCOLON expression RBRACKET .)
    MINUS           reduce using rule 183 (partselect -> pointer LBRACKET expression MINUSCOLON expression RBRACKET .)
    LSHIFT          reduce using rule 183 (partselect -> pointer LBRACKET expression MINUSCOLON expression RBRACKET .)
    RSHIFT          reduce using rule 183 (partselect -> pointer LBRACKET expression MINUSCOLON expression RBRACKET .)
    LSHIFTA         reduce using rule 183 (partselect -> pointer LBRACKET expression MINUSCOLON expression RBRACKET .)
    RSHIFTA         reduce using rule 183 (partselect -> pointer LBRACKET expression MINUSCOLON expression RBRACKET .)
    LT              reduce using rule 183 (partselect -> pointer LBRACKET expression MINUSCOLON expression RBRACKET .)
    GT              reduce using rule 183 (partselect -> pointer LBRACKET expression MINUSCOLON expression RBRACKET .)
    LE              reduce using rule 183 (partselect -> pointer LBRACKET expression MINUSCOLON expression RBRACKET .)
    GE              reduce using rule 183 (partselect -> pointer LBRACKET expression MINUSCOLON expression RBRACKET .)
    EQ              reduce using rule 183 (partselect -> pointer LBRACKET expression MINUSCOLON expression RBRACKET .)
    NE              reduce using rule 183 (partselect -> pointer LBRACKET expression MINUSCOLON expression RBRACKET .)
    EQL             reduce using rule 183 (partselect -> pointer LBRACKET expression MINUSCOLON expression RBRACKET .)
    NEL             reduce using rule 183 (partselect -> pointer LBRACKET expression MINUSCOLON expression RBRACKET .)
    AND             reduce using rule 183 (partselect -> pointer LBRACKET expression MINUSCOLON expression RBRACKET .)
    XOR             reduce using rule 183 (partselect -> pointer LBRACKET expression MINUSCOLON expression RBRACKET .)
    XNOR            reduce using rule 183 (partselect -> pointer LBRACKET expression MINUSCOLON expression RBRACKET .)
    OR              reduce using rule 183 (partselect -> pointer LBRACKET expression MINUSCOLON expression RBRACKET .)
    LAND            reduce using rule 183 (partselect -> pointer LBRACKET expression MINUSCOLON expression RBRACKET .)
    LOR             reduce using rule 183 (partselect -> pointer LBRACKET expression MINUSCOLON expression RBRACKET .)
    COND            reduce using rule 183 (partselect -> pointer LBRACKET expression MINUSCOLON expression RBRACKET .)
    RPAREN          reduce using rule 183 (partselect -> pointer LBRACKET expression MINUSCOLON expression RBRACKET .)
    LBRACE          reduce using rule 183 (partselect -> pointer LBRACKET expression MINUSCOLON expression RBRACKET .)
    RBRACE          reduce using rule 183 (partselect -> pointer LBRACKET expression MINUSCOLON expression RBRACKET .)
    COMMA           reduce using rule 183 (partselect -> pointer LBRACKET expression MINUSCOLON expression RBRACKET .)
    COLON           reduce using rule 183 (partselect -> pointer LBRACKET expression MINUSCOLON expression RBRACKET .)
    SEMICOLON       reduce using rule 183 (partselect -> pointer LBRACKET expression MINUSCOLON expression RBRACKET .)
    PLUSCOLON       reduce using rule 183 (partselect -> pointer LBRACKET expression MINUSCOLON expression RBRACKET .)
    MINUSCOLON      reduce using rule 183 (partselect -> pointer LBRACKET expression MINUSCOLON expression RBRACKET .)
    RBRACKET        reduce using rule 183 (partselect -> pointer LBRACKET expression MINUSCOLON expression RBRACKET .)
    IF              reduce using rule 183 (partselect -> pointer LBRACKET expression MINUSCOLON expression RBRACKET .)
    CASE            reduce using rule 183 (partselect -> pointer LBRACKET expression MINUSCOLON expression RBRACKET .)
    CASEX           reduce using rule 183 (partselect -> pointer LBRACKET expression MINUSCOLON expression RBRACKET .)
    UNIQUE          reduce using rule 183 (partselect -> pointer LBRACKET expression MINUSCOLON expression RBRACKET .)
    FOR             reduce using rule 183 (partselect -> pointer LBRACKET expression MINUSCOLON expression RBRACKET .)
    WHILE           reduce using rule 183 (partselect -> pointer LBRACKET expression MINUSCOLON expression RBRACKET .)
    WAIT            reduce using rule 183 (partselect -> pointer LBRACKET expression MINUSCOLON expression RBRACKET .)
    FOREVER         reduce using rule 183 (partselect -> pointer LBRACKET expression MINUSCOLON expression RBRACKET .)
    BEGIN           reduce using rule 183 (partselect -> pointer LBRACKET expression MINUSCOLON expression RBRACKET .)
    FORK            reduce using rule 183 (partselect -> pointer LBRACKET expression MINUSCOLON expression RBRACKET .)
    DELAY           reduce using rule 183 (partselect -> pointer LBRACKET expression MINUSCOLON expression RBRACKET .)
    AT              reduce using rule 183 (partselect -> pointer LBRACKET expression MINUSCOLON expression RBRACKET .)
    DOLLER          reduce using rule 183 (partselect -> pointer LBRACKET expression MINUSCOLON expression RBRACKET .)
    DISABLE         reduce using rule 183 (partselect -> pointer LBRACKET expression MINUSCOLON expression RBRACKET .)
    ID              reduce using rule 183 (partselect -> pointer LBRACKET expression MINUSCOLON expression RBRACKET .)
    SENS_OR         reduce using rule 183 (partselect -> pointer LBRACKET expression MINUSCOLON expression RBRACKET .)


state 714

    (178) partselect -> identifier LBRACKET expression COLON expression RBRACKET .

    TIMES           reduce using rule 178 (partselect -> identifier LBRACKET expression COLON expression RBRACKET .)
    POWER           reduce using rule 178 (partselect -> identifier LBRACKET expression COLON expression RBRACKET .)
    DIVIDE          reduce using rule 178 (partselect -> identifier LBRACKET expression COLON expression RBRACKET .)
    MOD             reduce using rule 178 (partselect -> identifier LBRACKET expression COLON expression RBRACKET .)
    PLUS            reduce using rule 178 (partselect -> identifier LBRACKET expression COLON expression RBRACKET .)
    MINUS           reduce using rule 178 (partselect -> identifier LBRACKET expression COLON expression RBRACKET .)
    LSHIFT          reduce using rule 178 (partselect -> identifier LBRACKET expression COLON expression RBRACKET .)
    RSHIFT          reduce using rule 178 (partselect -> identifier LBRACKET expression COLON expression RBRACKET .)
    LSHIFTA         reduce using rule 178 (partselect -> identifier LBRACKET expression COLON expression RBRACKET .)
    RSHIFTA         reduce using rule 178 (partselect -> identifier LBRACKET expression COLON expression RBRACKET .)
    LT              reduce using rule 178 (partselect -> identifier LBRACKET expression COLON expression RBRACKET .)
    GT              reduce using rule 178 (partselect -> identifier LBRACKET expression COLON expression RBRACKET .)
    LE              reduce using rule 178 (partselect -> identifier LBRACKET expression COLON expression RBRACKET .)
    GE              reduce using rule 178 (partselect -> identifier LBRACKET expression COLON expression RBRACKET .)
    EQ              reduce using rule 178 (partselect -> identifier LBRACKET expression COLON expression RBRACKET .)
    NE              reduce using rule 178 (partselect -> identifier LBRACKET expression COLON expression RBRACKET .)
    EQL             reduce using rule 178 (partselect -> identifier LBRACKET expression COLON expression RBRACKET .)
    NEL             reduce using rule 178 (partselect -> identifier LBRACKET expression COLON expression RBRACKET .)
    AND             reduce using rule 178 (partselect -> identifier LBRACKET expression COLON expression RBRACKET .)
    XOR             reduce using rule 178 (partselect -> identifier LBRACKET expression COLON expression RBRACKET .)
    XNOR            reduce using rule 178 (partselect -> identifier LBRACKET expression COLON expression RBRACKET .)
    OR              reduce using rule 178 (partselect -> identifier LBRACKET expression COLON expression RBRACKET .)
    LAND            reduce using rule 178 (partselect -> identifier LBRACKET expression COLON expression RBRACKET .)
    LOR             reduce using rule 178 (partselect -> identifier LBRACKET expression COLON expression RBRACKET .)
    COND            reduce using rule 178 (partselect -> identifier LBRACKET expression COLON expression RBRACKET .)
    RPAREN          reduce using rule 178 (partselect -> identifier LBRACKET expression COLON expression RBRACKET .)
    LBRACE          reduce using rule 178 (partselect -> identifier LBRACKET expression COLON expression RBRACKET .)
    RBRACE          reduce using rule 178 (partselect -> identifier LBRACKET expression COLON expression RBRACKET .)
    COMMA           reduce using rule 178 (partselect -> identifier LBRACKET expression COLON expression RBRACKET .)
    COLON           reduce using rule 178 (partselect -> identifier LBRACKET expression COLON expression RBRACKET .)
    SEMICOLON       reduce using rule 178 (partselect -> identifier LBRACKET expression COLON expression RBRACKET .)
    PLUSCOLON       reduce using rule 178 (partselect -> identifier LBRACKET expression COLON expression RBRACKET .)
    MINUSCOLON      reduce using rule 178 (partselect -> identifier LBRACKET expression COLON expression RBRACKET .)
    RBRACKET        reduce using rule 178 (partselect -> identifier LBRACKET expression COLON expression RBRACKET .)
    IF              reduce using rule 178 (partselect -> identifier LBRACKET expression COLON expression RBRACKET .)
    CASE            reduce using rule 178 (partselect -> identifier LBRACKET expression COLON expression RBRACKET .)
    CASEX           reduce using rule 178 (partselect -> identifier LBRACKET expression COLON expression RBRACKET .)
    UNIQUE          reduce using rule 178 (partselect -> identifier LBRACKET expression COLON expression RBRACKET .)
    FOR             reduce using rule 178 (partselect -> identifier LBRACKET expression COLON expression RBRACKET .)
    WHILE           reduce using rule 178 (partselect -> identifier LBRACKET expression COLON expression RBRACKET .)
    WAIT            reduce using rule 178 (partselect -> identifier LBRACKET expression COLON expression RBRACKET .)
    FOREVER         reduce using rule 178 (partselect -> identifier LBRACKET expression COLON expression RBRACKET .)
    BEGIN           reduce using rule 178 (partselect -> identifier LBRACKET expression COLON expression RBRACKET .)
    FORK            reduce using rule 178 (partselect -> identifier LBRACKET expression COLON expression RBRACKET .)
    DELAY           reduce using rule 178 (partselect -> identifier LBRACKET expression COLON expression RBRACKET .)
    AT              reduce using rule 178 (partselect -> identifier LBRACKET expression COLON expression RBRACKET .)
    DOLLER          reduce using rule 178 (partselect -> identifier LBRACKET expression COLON expression RBRACKET .)
    DISABLE         reduce using rule 178 (partselect -> identifier LBRACKET expression COLON expression RBRACKET .)
    ID              reduce using rule 178 (partselect -> identifier LBRACKET expression COLON expression RBRACKET .)
    SENS_OR         reduce using rule 178 (partselect -> identifier LBRACKET expression COLON expression RBRACKET .)


state 715

    (179) partselect -> identifier LBRACKET expression PLUSCOLON expression RBRACKET .

    TIMES           reduce using rule 179 (partselect -> identifier LBRACKET expression PLUSCOLON expression RBRACKET .)
    POWER           reduce using rule 179 (partselect -> identifier LBRACKET expression PLUSCOLON expression RBRACKET .)
    DIVIDE          reduce using rule 179 (partselect -> identifier LBRACKET expression PLUSCOLON expression RBRACKET .)
    MOD             reduce using rule 179 (partselect -> identifier LBRACKET expression PLUSCOLON expression RBRACKET .)
    PLUS            reduce using rule 179 (partselect -> identifier LBRACKET expression PLUSCOLON expression RBRACKET .)
    MINUS           reduce using rule 179 (partselect -> identifier LBRACKET expression PLUSCOLON expression RBRACKET .)
    LSHIFT          reduce using rule 179 (partselect -> identifier LBRACKET expression PLUSCOLON expression RBRACKET .)
    RSHIFT          reduce using rule 179 (partselect -> identifier LBRACKET expression PLUSCOLON expression RBRACKET .)
    LSHIFTA         reduce using rule 179 (partselect -> identifier LBRACKET expression PLUSCOLON expression RBRACKET .)
    RSHIFTA         reduce using rule 179 (partselect -> identifier LBRACKET expression PLUSCOLON expression RBRACKET .)
    LT              reduce using rule 179 (partselect -> identifier LBRACKET expression PLUSCOLON expression RBRACKET .)
    GT              reduce using rule 179 (partselect -> identifier LBRACKET expression PLUSCOLON expression RBRACKET .)
    LE              reduce using rule 179 (partselect -> identifier LBRACKET expression PLUSCOLON expression RBRACKET .)
    GE              reduce using rule 179 (partselect -> identifier LBRACKET expression PLUSCOLON expression RBRACKET .)
    EQ              reduce using rule 179 (partselect -> identifier LBRACKET expression PLUSCOLON expression RBRACKET .)
    NE              reduce using rule 179 (partselect -> identifier LBRACKET expression PLUSCOLON expression RBRACKET .)
    EQL             reduce using rule 179 (partselect -> identifier LBRACKET expression PLUSCOLON expression RBRACKET .)
    NEL             reduce using rule 179 (partselect -> identifier LBRACKET expression PLUSCOLON expression RBRACKET .)
    AND             reduce using rule 179 (partselect -> identifier LBRACKET expression PLUSCOLON expression RBRACKET .)
    XOR             reduce using rule 179 (partselect -> identifier LBRACKET expression PLUSCOLON expression RBRACKET .)
    XNOR            reduce using rule 179 (partselect -> identifier LBRACKET expression PLUSCOLON expression RBRACKET .)
    OR              reduce using rule 179 (partselect -> identifier LBRACKET expression PLUSCOLON expression RBRACKET .)
    LAND            reduce using rule 179 (partselect -> identifier LBRACKET expression PLUSCOLON expression RBRACKET .)
    LOR             reduce using rule 179 (partselect -> identifier LBRACKET expression PLUSCOLON expression RBRACKET .)
    COND            reduce using rule 179 (partselect -> identifier LBRACKET expression PLUSCOLON expression RBRACKET .)
    RPAREN          reduce using rule 179 (partselect -> identifier LBRACKET expression PLUSCOLON expression RBRACKET .)
    LBRACE          reduce using rule 179 (partselect -> identifier LBRACKET expression PLUSCOLON expression RBRACKET .)
    RBRACE          reduce using rule 179 (partselect -> identifier LBRACKET expression PLUSCOLON expression RBRACKET .)
    COMMA           reduce using rule 179 (partselect -> identifier LBRACKET expression PLUSCOLON expression RBRACKET .)
    COLON           reduce using rule 179 (partselect -> identifier LBRACKET expression PLUSCOLON expression RBRACKET .)
    SEMICOLON       reduce using rule 179 (partselect -> identifier LBRACKET expression PLUSCOLON expression RBRACKET .)
    PLUSCOLON       reduce using rule 179 (partselect -> identifier LBRACKET expression PLUSCOLON expression RBRACKET .)
    MINUSCOLON      reduce using rule 179 (partselect -> identifier LBRACKET expression PLUSCOLON expression RBRACKET .)
    RBRACKET        reduce using rule 179 (partselect -> identifier LBRACKET expression PLUSCOLON expression RBRACKET .)
    IF              reduce using rule 179 (partselect -> identifier LBRACKET expression PLUSCOLON expression RBRACKET .)
    CASE            reduce using rule 179 (partselect -> identifier LBRACKET expression PLUSCOLON expression RBRACKET .)
    CASEX           reduce using rule 179 (partselect -> identifier LBRACKET expression PLUSCOLON expression RBRACKET .)
    UNIQUE          reduce using rule 179 (partselect -> identifier LBRACKET expression PLUSCOLON expression RBRACKET .)
    FOR             reduce using rule 179 (partselect -> identifier LBRACKET expression PLUSCOLON expression RBRACKET .)
    WHILE           reduce using rule 179 (partselect -> identifier LBRACKET expression PLUSCOLON expression RBRACKET .)
    WAIT            reduce using rule 179 (partselect -> identifier LBRACKET expression PLUSCOLON expression RBRACKET .)
    FOREVER         reduce using rule 179 (partselect -> identifier LBRACKET expression PLUSCOLON expression RBRACKET .)
    BEGIN           reduce using rule 179 (partselect -> identifier LBRACKET expression PLUSCOLON expression RBRACKET .)
    FORK            reduce using rule 179 (partselect -> identifier LBRACKET expression PLUSCOLON expression RBRACKET .)
    DELAY           reduce using rule 179 (partselect -> identifier LBRACKET expression PLUSCOLON expression RBRACKET .)
    AT              reduce using rule 179 (partselect -> identifier LBRACKET expression PLUSCOLON expression RBRACKET .)
    DOLLER          reduce using rule 179 (partselect -> identifier LBRACKET expression PLUSCOLON expression RBRACKET .)
    DISABLE         reduce using rule 179 (partselect -> identifier LBRACKET expression PLUSCOLON expression RBRACKET .)
    ID              reduce using rule 179 (partselect -> identifier LBRACKET expression PLUSCOLON expression RBRACKET .)
    SENS_OR         reduce using rule 179 (partselect -> identifier LBRACKET expression PLUSCOLON expression RBRACKET .)


state 716

    (180) partselect -> identifier LBRACKET expression MINUSCOLON expression RBRACKET .

    TIMES           reduce using rule 180 (partselect -> identifier LBRACKET expression MINUSCOLON expression RBRACKET .)
    POWER           reduce using rule 180 (partselect -> identifier LBRACKET expression MINUSCOLON expression RBRACKET .)
    DIVIDE          reduce using rule 180 (partselect -> identifier LBRACKET expression MINUSCOLON expression RBRACKET .)
    MOD             reduce using rule 180 (partselect -> identifier LBRACKET expression MINUSCOLON expression RBRACKET .)
    PLUS            reduce using rule 180 (partselect -> identifier LBRACKET expression MINUSCOLON expression RBRACKET .)
    MINUS           reduce using rule 180 (partselect -> identifier LBRACKET expression MINUSCOLON expression RBRACKET .)
    LSHIFT          reduce using rule 180 (partselect -> identifier LBRACKET expression MINUSCOLON expression RBRACKET .)
    RSHIFT          reduce using rule 180 (partselect -> identifier LBRACKET expression MINUSCOLON expression RBRACKET .)
    LSHIFTA         reduce using rule 180 (partselect -> identifier LBRACKET expression MINUSCOLON expression RBRACKET .)
    RSHIFTA         reduce using rule 180 (partselect -> identifier LBRACKET expression MINUSCOLON expression RBRACKET .)
    LT              reduce using rule 180 (partselect -> identifier LBRACKET expression MINUSCOLON expression RBRACKET .)
    GT              reduce using rule 180 (partselect -> identifier LBRACKET expression MINUSCOLON expression RBRACKET .)
    LE              reduce using rule 180 (partselect -> identifier LBRACKET expression MINUSCOLON expression RBRACKET .)
    GE              reduce using rule 180 (partselect -> identifier LBRACKET expression MINUSCOLON expression RBRACKET .)
    EQ              reduce using rule 180 (partselect -> identifier LBRACKET expression MINUSCOLON expression RBRACKET .)
    NE              reduce using rule 180 (partselect -> identifier LBRACKET expression MINUSCOLON expression RBRACKET .)
    EQL             reduce using rule 180 (partselect -> identifier LBRACKET expression MINUSCOLON expression RBRACKET .)
    NEL             reduce using rule 180 (partselect -> identifier LBRACKET expression MINUSCOLON expression RBRACKET .)
    AND             reduce using rule 180 (partselect -> identifier LBRACKET expression MINUSCOLON expression RBRACKET .)
    XOR             reduce using rule 180 (partselect -> identifier LBRACKET expression MINUSCOLON expression RBRACKET .)
    XNOR            reduce using rule 180 (partselect -> identifier LBRACKET expression MINUSCOLON expression RBRACKET .)
    OR              reduce using rule 180 (partselect -> identifier LBRACKET expression MINUSCOLON expression RBRACKET .)
    LAND            reduce using rule 180 (partselect -> identifier LBRACKET expression MINUSCOLON expression RBRACKET .)
    LOR             reduce using rule 180 (partselect -> identifier LBRACKET expression MINUSCOLON expression RBRACKET .)
    COND            reduce using rule 180 (partselect -> identifier LBRACKET expression MINUSCOLON expression RBRACKET .)
    RPAREN          reduce using rule 180 (partselect -> identifier LBRACKET expression MINUSCOLON expression RBRACKET .)
    LBRACE          reduce using rule 180 (partselect -> identifier LBRACKET expression MINUSCOLON expression RBRACKET .)
    RBRACE          reduce using rule 180 (partselect -> identifier LBRACKET expression MINUSCOLON expression RBRACKET .)
    COMMA           reduce using rule 180 (partselect -> identifier LBRACKET expression MINUSCOLON expression RBRACKET .)
    COLON           reduce using rule 180 (partselect -> identifier LBRACKET expression MINUSCOLON expression RBRACKET .)
    SEMICOLON       reduce using rule 180 (partselect -> identifier LBRACKET expression MINUSCOLON expression RBRACKET .)
    PLUSCOLON       reduce using rule 180 (partselect -> identifier LBRACKET expression MINUSCOLON expression RBRACKET .)
    MINUSCOLON      reduce using rule 180 (partselect -> identifier LBRACKET expression MINUSCOLON expression RBRACKET .)
    RBRACKET        reduce using rule 180 (partselect -> identifier LBRACKET expression MINUSCOLON expression RBRACKET .)
    IF              reduce using rule 180 (partselect -> identifier LBRACKET expression MINUSCOLON expression RBRACKET .)
    CASE            reduce using rule 180 (partselect -> identifier LBRACKET expression MINUSCOLON expression RBRACKET .)
    CASEX           reduce using rule 180 (partselect -> identifier LBRACKET expression MINUSCOLON expression RBRACKET .)
    UNIQUE          reduce using rule 180 (partselect -> identifier LBRACKET expression MINUSCOLON expression RBRACKET .)
    FOR             reduce using rule 180 (partselect -> identifier LBRACKET expression MINUSCOLON expression RBRACKET .)
    WHILE           reduce using rule 180 (partselect -> identifier LBRACKET expression MINUSCOLON expression RBRACKET .)
    WAIT            reduce using rule 180 (partselect -> identifier LBRACKET expression MINUSCOLON expression RBRACKET .)
    FOREVER         reduce using rule 180 (partselect -> identifier LBRACKET expression MINUSCOLON expression RBRACKET .)
    BEGIN           reduce using rule 180 (partselect -> identifier LBRACKET expression MINUSCOLON expression RBRACKET .)
    FORK            reduce using rule 180 (partselect -> identifier LBRACKET expression MINUSCOLON expression RBRACKET .)
    DELAY           reduce using rule 180 (partselect -> identifier LBRACKET expression MINUSCOLON expression RBRACKET .)
    AT              reduce using rule 180 (partselect -> identifier LBRACKET expression MINUSCOLON expression RBRACKET .)
    DOLLER          reduce using rule 180 (partselect -> identifier LBRACKET expression MINUSCOLON expression RBRACKET .)
    DISABLE         reduce using rule 180 (partselect -> identifier LBRACKET expression MINUSCOLON expression RBRACKET .)
    ID              reduce using rule 180 (partselect -> identifier LBRACKET expression MINUSCOLON expression RBRACKET .)
    SENS_OR         reduce using rule 180 (partselect -> identifier LBRACKET expression MINUSCOLON expression RBRACKET .)


state 717

    (354) sysargs -> sysargs COMMA sysarg .

    RPAREN          reduce using rule 354 (sysargs -> sysargs COMMA sysarg .)
    COMMA           reduce using rule 354 (sysargs -> sysargs COMMA sysarg .)


state 718

    (342) generate_if -> IF LPAREN cond RPAREN gif_true_item ELSE . gif_false_item
    (346) gif_false_item -> . generate_item
    (347) gif_false_item -> . generate_block
    (337) generate_item -> . standard_item
    (338) generate_item -> . generate_if
    (339) generate_item -> . generate_for
    (340) generate_block -> . BEGIN generate_items END
    (341) generate_block -> . BEGIN COLON ID generate_items END
    (61) standard_item -> . decl
    (62) standard_item -> . integerdecl
    (63) standard_item -> . realdecl
    (64) standard_item -> . declassign
    (65) standard_item -> . parameterdecl
    (66) standard_item -> . localparamdecl
    (67) standard_item -> . genvardecl
    (68) standard_item -> . assignment
    (69) standard_item -> . always
    (70) standard_item -> . always_ff
    (71) standard_item -> . always_comb
    (72) standard_item -> . initial
    (73) standard_item -> . instance
    (74) standard_item -> . function
    (75) standard_item -> . task
    (76) standard_item -> . pragma
    (342) generate_if -> . IF LPAREN cond RPAREN gif_true_item ELSE gif_false_item
    (343) generate_if -> . IF LPAREN cond RPAREN gif_true_item
    (348) generate_for -> . FOR LPAREN forpre forcond forpost RPAREN generate_forcontent
    (77) decl -> . sigtypes declnamelist SEMICOLON
    (78) decl -> . sigtypes width declnamelist SEMICOLON
    (87) integerdecl -> . INTEGER integernamelist SEMICOLON
    (88) integerdecl -> . INTEGER SIGNED integernamelist SEMICOLON
    (92) realdecl -> . REAL realnamelist SEMICOLON
    (83) declassign -> . sigtypes declassign_element SEMICOLON
    (84) declassign -> . sigtypes width declassign_element SEMICOLON
    (96) parameterdecl -> . PARAMETER param_substitution_list SEMICOLON
    (97) parameterdecl -> . PARAMETER SIGNED param_substitution_list SEMICOLON
    (98) parameterdecl -> . PARAMETER width param_substitution_list SEMICOLON
    (99) parameterdecl -> . PARAMETER SIGNED width param_substitution_list SEMICOLON
    (100) parameterdecl -> . PARAMETER INTEGER param_substitution_list SEMICOLON
    (101) localparamdecl -> . LOCALPARAM param_substitution_list SEMICOLON
    (102) localparamdecl -> . LOCALPARAM SIGNED param_substitution_list SEMICOLON
    (103) localparamdecl -> . LOCALPARAM width param_substitution_list SEMICOLON
    (104) localparamdecl -> . LOCALPARAM SIGNED width param_substitution_list SEMICOLON
    (105) localparamdecl -> . LOCALPARAM INTEGER param_substitution_list SEMICOLON
    (329) genvardecl -> . GENVAR genvarlist SEMICOLON
    (109) assignment -> . ASSIGN lvalue EQUALS rvalue SEMICOLON
    (110) assignment -> . ASSIGN delays lvalue EQUALS delays rvalue SEMICOLON
    (199) always -> . ALWAYS senslist always_statement
    (200) always_ff -> . ALWAYS_FF senslist always_statement
    (201) always_comb -> . ALWAYS_COMB senslist always_statement
    (290) initial -> . INITIAL initial_statement
    (297) instance -> . ID parameterlist instance_bodylist SEMICOLON
    (298) instance -> . SENS_OR parameterlist instance_bodylist SEMICOLON
    (303) instance -> . ID instance_bodylist_noname SEMICOLON
    (304) instance -> . SENS_OR instance_bodylist_noname SEMICOLON
    (358) function -> . FUNCTION width ID SEMICOLON function_statement ENDFUNCTION
    (359) function -> . FUNCTION ID SEMICOLON function_statement ENDFUNCTION
    (377) task -> . TASK ID SEMICOLON task_statement ENDTASK
    (7) pragma -> . LPAREN TIMES ID EQUALS expression TIMES RPAREN
    (8) pragma -> . LPAREN TIMES ID TIMES RPAREN
    (35) sigtypes -> . sigtypes sigtype
    (36) sigtypes -> . sigtype
    (37) sigtype -> . INPUT
    (38) sigtype -> . OUTPUT
    (39) sigtype -> . INOUT
    (40) sigtype -> . TRI
    (41) sigtype -> . REG
    (42) sigtype -> . LOGIC
    (43) sigtype -> . WIRE
    (44) sigtype -> . SIGNED
    (45) sigtype -> . SUPPLY0
    (46) sigtype -> . SUPPLY1

    BEGIN           shift and go to state 661
    IF              shift and go to state 130
    FOR             shift and go to state 131
    INTEGER         shift and go to state 47
    REAL            shift and go to state 49
    PARAMETER       shift and go to state 50
    LOCALPARAM      shift and go to state 51
    GENVAR          shift and go to state 52
    ASSIGN          shift and go to state 53
    ALWAYS          shift and go to state 54
    ALWAYS_FF       shift and go to state 55
    ALWAYS_COMB     shift and go to state 56
    INITIAL         shift and go to state 57
    ID              shift and go to state 58
    SENS_OR         shift and go to state 59
    FUNCTION        shift and go to state 60
    TASK            shift and go to state 61
    LPAREN          shift and go to state 8
    INPUT           shift and go to state 63
    OUTPUT          shift and go to state 64
    INOUT           shift and go to state 65
    TRI             shift and go to state 66
    REG             shift and go to state 67
    LOGIC           shift and go to state 68
    WIRE            shift and go to state 69
    SIGNED          shift and go to state 48
    SUPPLY0         shift and go to state 70
    SUPPLY1         shift and go to state 71

    gif_false_item                 shift and go to state 747
    generate_item                  shift and go to state 748
    generate_block                 shift and go to state 749
    standard_item                  shift and go to state 127
    generate_if                    shift and go to state 128
    generate_for                   shift and go to state 129
    decl                           shift and go to state 29
    integerdecl                    shift and go to state 30
    realdecl                       shift and go to state 31
    declassign                     shift and go to state 32
    parameterdecl                  shift and go to state 33
    localparamdecl                 shift and go to state 34
    genvardecl                     shift and go to state 35
    assignment                     shift and go to state 36
    always                         shift and go to state 37
    always_ff                      shift and go to state 38
    always_comb                    shift and go to state 39
    initial                        shift and go to state 40
    instance                       shift and go to state 41
    function                       shift and go to state 42
    task                           shift and go to state 43
    pragma                         shift and go to state 44
    sigtypes                       shift and go to state 46
    sigtype                        shift and go to state 62

state 719

    (340) generate_block -> BEGIN generate_items . END
    (335) generate_items -> generate_items . generate_item
    (337) generate_item -> . standard_item
    (338) generate_item -> . generate_if
    (339) generate_item -> . generate_for
    (61) standard_item -> . decl
    (62) standard_item -> . integerdecl
    (63) standard_item -> . realdecl
    (64) standard_item -> . declassign
    (65) standard_item -> . parameterdecl
    (66) standard_item -> . localparamdecl
    (67) standard_item -> . genvardecl
    (68) standard_item -> . assignment
    (69) standard_item -> . always
    (70) standard_item -> . always_ff
    (71) standard_item -> . always_comb
    (72) standard_item -> . initial
    (73) standard_item -> . instance
    (74) standard_item -> . function
    (75) standard_item -> . task
    (76) standard_item -> . pragma
    (342) generate_if -> . IF LPAREN cond RPAREN gif_true_item ELSE gif_false_item
    (343) generate_if -> . IF LPAREN cond RPAREN gif_true_item
    (348) generate_for -> . FOR LPAREN forpre forcond forpost RPAREN generate_forcontent
    (77) decl -> . sigtypes declnamelist SEMICOLON
    (78) decl -> . sigtypes width declnamelist SEMICOLON
    (87) integerdecl -> . INTEGER integernamelist SEMICOLON
    (88) integerdecl -> . INTEGER SIGNED integernamelist SEMICOLON
    (92) realdecl -> . REAL realnamelist SEMICOLON
    (83) declassign -> . sigtypes declassign_element SEMICOLON
    (84) declassign -> . sigtypes width declassign_element SEMICOLON
    (96) parameterdecl -> . PARAMETER param_substitution_list SEMICOLON
    (97) parameterdecl -> . PARAMETER SIGNED param_substitution_list SEMICOLON
    (98) parameterdecl -> . PARAMETER width param_substitution_list SEMICOLON
    (99) parameterdecl -> . PARAMETER SIGNED width param_substitution_list SEMICOLON
    (100) parameterdecl -> . PARAMETER INTEGER param_substitution_list SEMICOLON
    (101) localparamdecl -> . LOCALPARAM param_substitution_list SEMICOLON
    (102) localparamdecl -> . LOCALPARAM SIGNED param_substitution_list SEMICOLON
    (103) localparamdecl -> . LOCALPARAM width param_substitution_list SEMICOLON
    (104) localparamdecl -> . LOCALPARAM SIGNED width param_substitution_list SEMICOLON
    (105) localparamdecl -> . LOCALPARAM INTEGER param_substitution_list SEMICOLON
    (329) genvardecl -> . GENVAR genvarlist SEMICOLON
    (109) assignment -> . ASSIGN lvalue EQUALS rvalue SEMICOLON
    (110) assignment -> . ASSIGN delays lvalue EQUALS delays rvalue SEMICOLON
    (199) always -> . ALWAYS senslist always_statement
    (200) always_ff -> . ALWAYS_FF senslist always_statement
    (201) always_comb -> . ALWAYS_COMB senslist always_statement
    (290) initial -> . INITIAL initial_statement
    (297) instance -> . ID parameterlist instance_bodylist SEMICOLON
    (298) instance -> . SENS_OR parameterlist instance_bodylist SEMICOLON
    (303) instance -> . ID instance_bodylist_noname SEMICOLON
    (304) instance -> . SENS_OR instance_bodylist_noname SEMICOLON
    (358) function -> . FUNCTION width ID SEMICOLON function_statement ENDFUNCTION
    (359) function -> . FUNCTION ID SEMICOLON function_statement ENDFUNCTION
    (377) task -> . TASK ID SEMICOLON task_statement ENDTASK
    (7) pragma -> . LPAREN TIMES ID EQUALS expression TIMES RPAREN
    (8) pragma -> . LPAREN TIMES ID TIMES RPAREN
    (35) sigtypes -> . sigtypes sigtype
    (36) sigtypes -> . sigtype
    (37) sigtype -> . INPUT
    (38) sigtype -> . OUTPUT
    (39) sigtype -> . INOUT
    (40) sigtype -> . TRI
    (41) sigtype -> . REG
    (42) sigtype -> . LOGIC
    (43) sigtype -> . WIRE
    (44) sigtype -> . SIGNED
    (45) sigtype -> . SUPPLY0
    (46) sigtype -> . SUPPLY1

    END             shift and go to state 750
    IF              shift and go to state 130
    FOR             shift and go to state 131
    INTEGER         shift and go to state 47
    REAL            shift and go to state 49
    PARAMETER       shift and go to state 50
    LOCALPARAM      shift and go to state 51
    GENVAR          shift and go to state 52
    ASSIGN          shift and go to state 53
    ALWAYS          shift and go to state 54
    ALWAYS_FF       shift and go to state 55
    ALWAYS_COMB     shift and go to state 56
    INITIAL         shift and go to state 57
    ID              shift and go to state 58
    SENS_OR         shift and go to state 59
    FUNCTION        shift and go to state 60
    TASK            shift and go to state 61
    LPAREN          shift and go to state 8
    INPUT           shift and go to state 63
    OUTPUT          shift and go to state 64
    INOUT           shift and go to state 65
    TRI             shift and go to state 66
    REG             shift and go to state 67
    LOGIC           shift and go to state 68
    WIRE            shift and go to state 69
    SIGNED          shift and go to state 48
    SUPPLY0         shift and go to state 70
    SUPPLY1         shift and go to state 71

    generate_item                  shift and go to state 281
    standard_item                  shift and go to state 127
    generate_if                    shift and go to state 128
    generate_for                   shift and go to state 129
    decl                           shift and go to state 29
    integerdecl                    shift and go to state 30
    realdecl                       shift and go to state 31
    declassign                     shift and go to state 32
    parameterdecl                  shift and go to state 33
    localparamdecl                 shift and go to state 34
    genvardecl                     shift and go to state 35
    assignment                     shift and go to state 36
    always                         shift and go to state 37
    always_ff                      shift and go to state 38
    always_comb                    shift and go to state 39
    initial                        shift and go to state 40
    instance                       shift and go to state 41
    function                       shift and go to state 42
    task                           shift and go to state 43
    pragma                         shift and go to state 44
    sigtypes                       shift and go to state 46
    sigtype                        shift and go to state 62

state 720

    (341) generate_block -> BEGIN COLON . ID generate_items END

    ID              shift and go to state 751


state 721

    (348) generate_for -> FOR LPAREN forpre forcond forpost RPAREN . generate_forcontent
    (349) generate_forcontent -> . generate_item
    (350) generate_forcontent -> . generate_block
    (337) generate_item -> . standard_item
    (338) generate_item -> . generate_if
    (339) generate_item -> . generate_for
    (340) generate_block -> . BEGIN generate_items END
    (341) generate_block -> . BEGIN COLON ID generate_items END
    (61) standard_item -> . decl
    (62) standard_item -> . integerdecl
    (63) standard_item -> . realdecl
    (64) standard_item -> . declassign
    (65) standard_item -> . parameterdecl
    (66) standard_item -> . localparamdecl
    (67) standard_item -> . genvardecl
    (68) standard_item -> . assignment
    (69) standard_item -> . always
    (70) standard_item -> . always_ff
    (71) standard_item -> . always_comb
    (72) standard_item -> . initial
    (73) standard_item -> . instance
    (74) standard_item -> . function
    (75) standard_item -> . task
    (76) standard_item -> . pragma
    (342) generate_if -> . IF LPAREN cond RPAREN gif_true_item ELSE gif_false_item
    (343) generate_if -> . IF LPAREN cond RPAREN gif_true_item
    (348) generate_for -> . FOR LPAREN forpre forcond forpost RPAREN generate_forcontent
    (77) decl -> . sigtypes declnamelist SEMICOLON
    (78) decl -> . sigtypes width declnamelist SEMICOLON
    (87) integerdecl -> . INTEGER integernamelist SEMICOLON
    (88) integerdecl -> . INTEGER SIGNED integernamelist SEMICOLON
    (92) realdecl -> . REAL realnamelist SEMICOLON
    (83) declassign -> . sigtypes declassign_element SEMICOLON
    (84) declassign -> . sigtypes width declassign_element SEMICOLON
    (96) parameterdecl -> . PARAMETER param_substitution_list SEMICOLON
    (97) parameterdecl -> . PARAMETER SIGNED param_substitution_list SEMICOLON
    (98) parameterdecl -> . PARAMETER width param_substitution_list SEMICOLON
    (99) parameterdecl -> . PARAMETER SIGNED width param_substitution_list SEMICOLON
    (100) parameterdecl -> . PARAMETER INTEGER param_substitution_list SEMICOLON
    (101) localparamdecl -> . LOCALPARAM param_substitution_list SEMICOLON
    (102) localparamdecl -> . LOCALPARAM SIGNED param_substitution_list SEMICOLON
    (103) localparamdecl -> . LOCALPARAM width param_substitution_list SEMICOLON
    (104) localparamdecl -> . LOCALPARAM SIGNED width param_substitution_list SEMICOLON
    (105) localparamdecl -> . LOCALPARAM INTEGER param_substitution_list SEMICOLON
    (329) genvardecl -> . GENVAR genvarlist SEMICOLON
    (109) assignment -> . ASSIGN lvalue EQUALS rvalue SEMICOLON
    (110) assignment -> . ASSIGN delays lvalue EQUALS delays rvalue SEMICOLON
    (199) always -> . ALWAYS senslist always_statement
    (200) always_ff -> . ALWAYS_FF senslist always_statement
    (201) always_comb -> . ALWAYS_COMB senslist always_statement
    (290) initial -> . INITIAL initial_statement
    (297) instance -> . ID parameterlist instance_bodylist SEMICOLON
    (298) instance -> . SENS_OR parameterlist instance_bodylist SEMICOLON
    (303) instance -> . ID instance_bodylist_noname SEMICOLON
    (304) instance -> . SENS_OR instance_bodylist_noname SEMICOLON
    (358) function -> . FUNCTION width ID SEMICOLON function_statement ENDFUNCTION
    (359) function -> . FUNCTION ID SEMICOLON function_statement ENDFUNCTION
    (377) task -> . TASK ID SEMICOLON task_statement ENDTASK
    (7) pragma -> . LPAREN TIMES ID EQUALS expression TIMES RPAREN
    (8) pragma -> . LPAREN TIMES ID TIMES RPAREN
    (35) sigtypes -> . sigtypes sigtype
    (36) sigtypes -> . sigtype
    (37) sigtype -> . INPUT
    (38) sigtype -> . OUTPUT
    (39) sigtype -> . INOUT
    (40) sigtype -> . TRI
    (41) sigtype -> . REG
    (42) sigtype -> . LOGIC
    (43) sigtype -> . WIRE
    (44) sigtype -> . SIGNED
    (45) sigtype -> . SUPPLY0
    (46) sigtype -> . SUPPLY1

    BEGIN           shift and go to state 661
    IF              shift and go to state 130
    FOR             shift and go to state 131
    INTEGER         shift and go to state 47
    REAL            shift and go to state 49
    PARAMETER       shift and go to state 50
    LOCALPARAM      shift and go to state 51
    GENVAR          shift and go to state 52
    ASSIGN          shift and go to state 53
    ALWAYS          shift and go to state 54
    ALWAYS_FF       shift and go to state 55
    ALWAYS_COMB     shift and go to state 56
    INITIAL         shift and go to state 57
    ID              shift and go to state 58
    SENS_OR         shift and go to state 59
    FUNCTION        shift and go to state 60
    TASK            shift and go to state 61
    LPAREN          shift and go to state 8
    INPUT           shift and go to state 63
    OUTPUT          shift and go to state 64
    INOUT           shift and go to state 65
    TRI             shift and go to state 66
    REG             shift and go to state 67
    LOGIC           shift and go to state 68
    WIRE            shift and go to state 69
    SIGNED          shift and go to state 48
    SUPPLY0         shift and go to state 70
    SUPPLY1         shift and go to state 71

    generate_forcontent            shift and go to state 752
    generate_item                  shift and go to state 753
    generate_block                 shift and go to state 754
    standard_item                  shift and go to state 127
    generate_if                    shift and go to state 128
    generate_for                   shift and go to state 129
    decl                           shift and go to state 29
    integerdecl                    shift and go to state 30
    realdecl                       shift and go to state 31
    declassign                     shift and go to state 32
    parameterdecl                  shift and go to state 33
    localparamdecl                 shift and go to state 34
    genvardecl                     shift and go to state 35
    assignment                     shift and go to state 36
    always                         shift and go to state 37
    always_ff                      shift and go to state 38
    always_comb                    shift and go to state 39
    initial                        shift and go to state 40
    instance                       shift and go to state 41
    function                       shift and go to state 42
    task                           shift and go to state 43
    pragma                         shift and go to state 44
    sigtypes                       shift and go to state 46
    sigtype                        shift and go to state 62

state 722

    (238) blocking_substitution_base -> delays lvalue . EQUALS delays rvalue

    EQUALS          shift and go to state 755


state 723

    (55) length -> LBRACKET expression COLON expression RBRACKET .

    SEMICOLON       reduce using rule 55 (length -> LBRACKET expression COLON expression RBRACKET .)
    COMMA           reduce using rule 55 (length -> LBRACKET expression COLON expression RBRACKET .)


state 724

    (110) assignment -> ASSIGN delays lvalue EQUALS delays rvalue SEMICOLON .

    ENDMODULE       reduce using rule 110 (assignment -> ASSIGN delays lvalue EQUALS delays rvalue SEMICOLON .)
    GENERATE        reduce using rule 110 (assignment -> ASSIGN delays lvalue EQUALS delays rvalue SEMICOLON .)
    INTEGER         reduce using rule 110 (assignment -> ASSIGN delays lvalue EQUALS delays rvalue SEMICOLON .)
    REAL            reduce using rule 110 (assignment -> ASSIGN delays lvalue EQUALS delays rvalue SEMICOLON .)
    PARAMETER       reduce using rule 110 (assignment -> ASSIGN delays lvalue EQUALS delays rvalue SEMICOLON .)
    LOCALPARAM      reduce using rule 110 (assignment -> ASSIGN delays lvalue EQUALS delays rvalue SEMICOLON .)
    GENVAR          reduce using rule 110 (assignment -> ASSIGN delays lvalue EQUALS delays rvalue SEMICOLON .)
    ASSIGN          reduce using rule 110 (assignment -> ASSIGN delays lvalue EQUALS delays rvalue SEMICOLON .)
    ALWAYS          reduce using rule 110 (assignment -> ASSIGN delays lvalue EQUALS delays rvalue SEMICOLON .)
    ALWAYS_FF       reduce using rule 110 (assignment -> ASSIGN delays lvalue EQUALS delays rvalue SEMICOLON .)
    ALWAYS_COMB     reduce using rule 110 (assignment -> ASSIGN delays lvalue EQUALS delays rvalue SEMICOLON .)
    INITIAL         reduce using rule 110 (assignment -> ASSIGN delays lvalue EQUALS delays rvalue SEMICOLON .)
    ID              reduce using rule 110 (assignment -> ASSIGN delays lvalue EQUALS delays rvalue SEMICOLON .)
    SENS_OR         reduce using rule 110 (assignment -> ASSIGN delays lvalue EQUALS delays rvalue SEMICOLON .)
    FUNCTION        reduce using rule 110 (assignment -> ASSIGN delays lvalue EQUALS delays rvalue SEMICOLON .)
    TASK            reduce using rule 110 (assignment -> ASSIGN delays lvalue EQUALS delays rvalue SEMICOLON .)
    LPAREN          reduce using rule 110 (assignment -> ASSIGN delays lvalue EQUALS delays rvalue SEMICOLON .)
    INPUT           reduce using rule 110 (assignment -> ASSIGN delays lvalue EQUALS delays rvalue SEMICOLON .)
    OUTPUT          reduce using rule 110 (assignment -> ASSIGN delays lvalue EQUALS delays rvalue SEMICOLON .)
    INOUT           reduce using rule 110 (assignment -> ASSIGN delays lvalue EQUALS delays rvalue SEMICOLON .)
    TRI             reduce using rule 110 (assignment -> ASSIGN delays lvalue EQUALS delays rvalue SEMICOLON .)
    REG             reduce using rule 110 (assignment -> ASSIGN delays lvalue EQUALS delays rvalue SEMICOLON .)
    LOGIC           reduce using rule 110 (assignment -> ASSIGN delays lvalue EQUALS delays rvalue SEMICOLON .)
    WIRE            reduce using rule 110 (assignment -> ASSIGN delays lvalue EQUALS delays rvalue SEMICOLON .)
    SIGNED          reduce using rule 110 (assignment -> ASSIGN delays lvalue EQUALS delays rvalue SEMICOLON .)
    SUPPLY0         reduce using rule 110 (assignment -> ASSIGN delays lvalue EQUALS delays rvalue SEMICOLON .)
    SUPPLY1         reduce using rule 110 (assignment -> ASSIGN delays lvalue EQUALS delays rvalue SEMICOLON .)
    ENDGENERATE     reduce using rule 110 (assignment -> ASSIGN delays lvalue EQUALS delays rvalue SEMICOLON .)
    IF              reduce using rule 110 (assignment -> ASSIGN delays lvalue EQUALS delays rvalue SEMICOLON .)
    FOR             reduce using rule 110 (assignment -> ASSIGN delays lvalue EQUALS delays rvalue SEMICOLON .)
    ELSE            reduce using rule 110 (assignment -> ASSIGN delays lvalue EQUALS delays rvalue SEMICOLON .)
    END             reduce using rule 110 (assignment -> ASSIGN delays lvalue EQUALS delays rvalue SEMICOLON .)


state 725

    (114) lpartselect -> identifier LBRACKET expression COLON expression RBRACKET .

    EQUALS          reduce using rule 114 (lpartselect -> identifier LBRACKET expression COLON expression RBRACKET .)
    RBRACE          reduce using rule 114 (lpartselect -> identifier LBRACKET expression COLON expression RBRACKET .)
    COMMA           reduce using rule 114 (lpartselect -> identifier LBRACKET expression COLON expression RBRACKET .)
    LE              reduce using rule 114 (lpartselect -> identifier LBRACKET expression COLON expression RBRACKET .)


state 726

    (115) lpartselect -> identifier LBRACKET expression PLUSCOLON expression RBRACKET .

    EQUALS          reduce using rule 115 (lpartselect -> identifier LBRACKET expression PLUSCOLON expression RBRACKET .)
    RBRACE          reduce using rule 115 (lpartselect -> identifier LBRACKET expression PLUSCOLON expression RBRACKET .)
    COMMA           reduce using rule 115 (lpartselect -> identifier LBRACKET expression PLUSCOLON expression RBRACKET .)
    LE              reduce using rule 115 (lpartselect -> identifier LBRACKET expression PLUSCOLON expression RBRACKET .)


state 727

    (116) lpartselect -> identifier LBRACKET expression MINUSCOLON expression RBRACKET .

    EQUALS          reduce using rule 116 (lpartselect -> identifier LBRACKET expression MINUSCOLON expression RBRACKET .)
    RBRACE          reduce using rule 116 (lpartselect -> identifier LBRACKET expression MINUSCOLON expression RBRACKET .)
    COMMA           reduce using rule 116 (lpartselect -> identifier LBRACKET expression MINUSCOLON expression RBRACKET .)
    LE              reduce using rule 116 (lpartselect -> identifier LBRACKET expression MINUSCOLON expression RBRACKET .)


state 728

    (111) lpartselect -> pointer LBRACKET expression COLON expression RBRACKET .

    EQUALS          reduce using rule 111 (lpartselect -> pointer LBRACKET expression COLON expression RBRACKET .)
    RBRACE          reduce using rule 111 (lpartselect -> pointer LBRACKET expression COLON expression RBRACKET .)
    COMMA           reduce using rule 111 (lpartselect -> pointer LBRACKET expression COLON expression RBRACKET .)
    LE              reduce using rule 111 (lpartselect -> pointer LBRACKET expression COLON expression RBRACKET .)


state 729

    (112) lpartselect -> pointer LBRACKET expression PLUSCOLON expression RBRACKET .

    EQUALS          reduce using rule 112 (lpartselect -> pointer LBRACKET expression PLUSCOLON expression RBRACKET .)
    RBRACE          reduce using rule 112 (lpartselect -> pointer LBRACKET expression PLUSCOLON expression RBRACKET .)
    COMMA           reduce using rule 112 (lpartselect -> pointer LBRACKET expression PLUSCOLON expression RBRACKET .)
    LE              reduce using rule 112 (lpartselect -> pointer LBRACKET expression PLUSCOLON expression RBRACKET .)


state 730

    (113) lpartselect -> pointer LBRACKET expression MINUSCOLON expression RBRACKET .

    EQUALS          reduce using rule 113 (lpartselect -> pointer LBRACKET expression MINUSCOLON expression RBRACKET .)
    RBRACE          reduce using rule 113 (lpartselect -> pointer LBRACKET expression MINUSCOLON expression RBRACKET .)
    COMMA           reduce using rule 113 (lpartselect -> pointer LBRACKET expression MINUSCOLON expression RBRACKET .)
    LE              reduce using rule 113 (lpartselect -> pointer LBRACKET expression MINUSCOLON expression RBRACKET .)


state 731

    (262) if_statement -> IF LPAREN cond RPAREN true_statement ELSE . else_statement
    (269) else_statement -> . ifcontent_statement
    (267) ifcontent_statement -> . basic_statement
    (221) basic_statement -> . if_statement
    (222) basic_statement -> . case_statement
    (223) basic_statement -> . casex_statement
    (224) basic_statement -> . unique_case_statement
    (225) basic_statement -> . for_statement
    (226) basic_statement -> . while_statement
    (227) basic_statement -> . event_statement
    (228) basic_statement -> . wait_statement
    (229) basic_statement -> . forever_statement
    (230) basic_statement -> . block
    (231) basic_statement -> . namedblock
    (232) basic_statement -> . parallelblock
    (233) basic_statement -> . blocking_substitution
    (234) basic_statement -> . nonblocking_substitution
    (235) basic_statement -> . single_statement
    (262) if_statement -> . IF LPAREN cond RPAREN true_statement ELSE else_statement
    (263) if_statement -> . IF LPAREN cond RPAREN true_statement
    (264) if_statement -> . delays IF LPAREN cond RPAREN true_statement ELSE else_statement
    (265) if_statement -> . delays IF LPAREN cond RPAREN true_statement
    (280) case_statement -> . CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE
    (281) casex_statement -> . CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE
    (282) unique_case_statement -> . UNIQUE CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE
    (270) for_statement -> . FOR LPAREN forpre forcond forpost RPAREN forcontent_statement
    (278) while_statement -> . WHILE LPAREN cond RPAREN whilecontent_statement
    (292) event_statement -> . senslist SEMICOLON
    (293) wait_statement -> . WAIT LPAREN cond RPAREN waitcontent_statement
    (296) forever_statement -> . FOREVER basic_statement
    (245) block -> . BEGIN block_statements END
    (246) block -> . BEGIN END
    (250) namedblock -> . BEGIN COLON ID namedblock_statements END
    (251) namedblock -> . BEGIN COLON ID END
    (260) parallelblock -> . FORK block_statements JOIN
    (261) parallelblock -> . FORK JOIN
    (237) blocking_substitution -> . delays lvalue EQUALS delays rvalue SEMICOLON
    (239) nonblocking_substitution -> . delays lvalue LE delays rvalue SEMICOLON
    (397) single_statement -> . DELAY expression SEMICOLON
    (398) single_statement -> . systemcall SEMICOLON
    (399) single_statement -> . disable SEMICOLON
    (240) delays -> . DELAY LPAREN expression RPAREN
    (241) delays -> . DELAY identifier
    (242) delays -> . DELAY intnumber
    (243) delays -> . DELAY floatnumber
    (244) delays -> . empty
    (202) senslist -> . AT LPAREN edgesigs RPAREN
    (209) senslist -> . empty
    (210) senslist -> . AT levelsig
    (211) senslist -> . AT LPAREN levelsigs RPAREN
    (219) senslist -> . AT TIMES
    (220) senslist -> . AT LPAREN TIMES RPAREN
    (351) systemcall -> . DOLLER ID
    (352) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (353) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (396) disable -> . DISABLE ID
    (400) empty -> .

  ! shift/reduce conflict for IF resolved as shift
    IF              shift and go to state 192
    CASE            shift and go to state 194
    CASEX           shift and go to state 195
    UNIQUE          shift and go to state 196
    FOR             shift and go to state 197
    WHILE           shift and go to state 198
    WAIT            shift and go to state 200
    FOREVER         shift and go to state 201
    BEGIN           shift and go to state 202
    FORK            shift and go to state 203
    DELAY           shift and go to state 204
    AT              shift and go to state 171
    DOLLER          shift and go to state 107
    DISABLE         shift and go to state 208
    LBRACE          reduce using rule 400 (empty -> .)
    ID              reduce using rule 400 (empty -> .)
    SEMICOLON       reduce using rule 400 (empty -> .)

  ! IF              [ reduce using rule 400 (empty -> .) ]

    else_statement                 shift and go to state 756
    ifcontent_statement            shift and go to state 757
    basic_statement                shift and go to state 682
    if_statement                   shift and go to state 177
    case_statement                 shift and go to state 178
    casex_statement                shift and go to state 179
    unique_case_statement          shift and go to state 180
    for_statement                  shift and go to state 181
    while_statement                shift and go to state 182
    event_statement                shift and go to state 183
    wait_statement                 shift and go to state 184
    forever_statement              shift and go to state 185
    block                          shift and go to state 186
    namedblock                     shift and go to state 187
    parallelblock                  shift and go to state 188
    blocking_substitution          shift and go to state 189
    nonblocking_substitution       shift and go to state 190
    single_statement               shift and go to state 191
    delays                         shift and go to state 193
    senslist                       shift and go to state 199
    systemcall                     shift and go to state 205
    disable                        shift and go to state 206
    empty                          shift and go to state 207

state 732

    (264) if_statement -> delays IF LPAREN cond RPAREN true_statement . ELSE else_statement
    (265) if_statement -> delays IF LPAREN cond RPAREN true_statement .

  ! shift/reduce conflict for ELSE resolved as shift
    ELSE            shift and go to state 758
    ENDMODULE       reduce using rule 265 (if_statement -> delays IF LPAREN cond RPAREN true_statement .)
    GENERATE        reduce using rule 265 (if_statement -> delays IF LPAREN cond RPAREN true_statement .)
    INTEGER         reduce using rule 265 (if_statement -> delays IF LPAREN cond RPAREN true_statement .)
    REAL            reduce using rule 265 (if_statement -> delays IF LPAREN cond RPAREN true_statement .)
    PARAMETER       reduce using rule 265 (if_statement -> delays IF LPAREN cond RPAREN true_statement .)
    LOCALPARAM      reduce using rule 265 (if_statement -> delays IF LPAREN cond RPAREN true_statement .)
    GENVAR          reduce using rule 265 (if_statement -> delays IF LPAREN cond RPAREN true_statement .)
    ASSIGN          reduce using rule 265 (if_statement -> delays IF LPAREN cond RPAREN true_statement .)
    ALWAYS          reduce using rule 265 (if_statement -> delays IF LPAREN cond RPAREN true_statement .)
    ALWAYS_FF       reduce using rule 265 (if_statement -> delays IF LPAREN cond RPAREN true_statement .)
    ALWAYS_COMB     reduce using rule 265 (if_statement -> delays IF LPAREN cond RPAREN true_statement .)
    INITIAL         reduce using rule 265 (if_statement -> delays IF LPAREN cond RPAREN true_statement .)
    ID              reduce using rule 265 (if_statement -> delays IF LPAREN cond RPAREN true_statement .)
    SENS_OR         reduce using rule 265 (if_statement -> delays IF LPAREN cond RPAREN true_statement .)
    FUNCTION        reduce using rule 265 (if_statement -> delays IF LPAREN cond RPAREN true_statement .)
    TASK            reduce using rule 265 (if_statement -> delays IF LPAREN cond RPAREN true_statement .)
    LPAREN          reduce using rule 265 (if_statement -> delays IF LPAREN cond RPAREN true_statement .)
    INPUT           reduce using rule 265 (if_statement -> delays IF LPAREN cond RPAREN true_statement .)
    OUTPUT          reduce using rule 265 (if_statement -> delays IF LPAREN cond RPAREN true_statement .)
    INOUT           reduce using rule 265 (if_statement -> delays IF LPAREN cond RPAREN true_statement .)
    TRI             reduce using rule 265 (if_statement -> delays IF LPAREN cond RPAREN true_statement .)
    REG             reduce using rule 265 (if_statement -> delays IF LPAREN cond RPAREN true_statement .)
    LOGIC           reduce using rule 265 (if_statement -> delays IF LPAREN cond RPAREN true_statement .)
    WIRE            reduce using rule 265 (if_statement -> delays IF LPAREN cond RPAREN true_statement .)
    SIGNED          reduce using rule 265 (if_statement -> delays IF LPAREN cond RPAREN true_statement .)
    SUPPLY0         reduce using rule 265 (if_statement -> delays IF LPAREN cond RPAREN true_statement .)
    SUPPLY1         reduce using rule 265 (if_statement -> delays IF LPAREN cond RPAREN true_statement .)
    ENDGENERATE     reduce using rule 265 (if_statement -> delays IF LPAREN cond RPAREN true_statement .)
    IF              reduce using rule 265 (if_statement -> delays IF LPAREN cond RPAREN true_statement .)
    FOR             reduce using rule 265 (if_statement -> delays IF LPAREN cond RPAREN true_statement .)
    END             reduce using rule 265 (if_statement -> delays IF LPAREN cond RPAREN true_statement .)
    CASE            reduce using rule 265 (if_statement -> delays IF LPAREN cond RPAREN true_statement .)
    CASEX           reduce using rule 265 (if_statement -> delays IF LPAREN cond RPAREN true_statement .)
    UNIQUE          reduce using rule 265 (if_statement -> delays IF LPAREN cond RPAREN true_statement .)
    WHILE           reduce using rule 265 (if_statement -> delays IF LPAREN cond RPAREN true_statement .)
    WAIT            reduce using rule 265 (if_statement -> delays IF LPAREN cond RPAREN true_statement .)
    FOREVER         reduce using rule 265 (if_statement -> delays IF LPAREN cond RPAREN true_statement .)
    BEGIN           reduce using rule 265 (if_statement -> delays IF LPAREN cond RPAREN true_statement .)
    FORK            reduce using rule 265 (if_statement -> delays IF LPAREN cond RPAREN true_statement .)
    DELAY           reduce using rule 265 (if_statement -> delays IF LPAREN cond RPAREN true_statement .)
    AT              reduce using rule 265 (if_statement -> delays IF LPAREN cond RPAREN true_statement .)
    DOLLER          reduce using rule 265 (if_statement -> delays IF LPAREN cond RPAREN true_statement .)
    DISABLE         reduce using rule 265 (if_statement -> delays IF LPAREN cond RPAREN true_statement .)
    LBRACE          reduce using rule 265 (if_statement -> delays IF LPAREN cond RPAREN true_statement .)
    SEMICOLON       reduce using rule 265 (if_statement -> delays IF LPAREN cond RPAREN true_statement .)
    JOIN            reduce using rule 265 (if_statement -> delays IF LPAREN cond RPAREN true_statement .)
    ENDFUNCTION     reduce using rule 265 (if_statement -> delays IF LPAREN cond RPAREN true_statement .)
    ENDTASK         reduce using rule 265 (if_statement -> delays IF LPAREN cond RPAREN true_statement .)
    ENDCASE         reduce using rule 265 (if_statement -> delays IF LPAREN cond RPAREN true_statement .)
    DEFAULT         reduce using rule 265 (if_statement -> delays IF LPAREN cond RPAREN true_statement .)
    MINUS           reduce using rule 265 (if_statement -> delays IF LPAREN cond RPAREN true_statement .)
    PLUS            reduce using rule 265 (if_statement -> delays IF LPAREN cond RPAREN true_statement .)
    LNOT            reduce using rule 265 (if_statement -> delays IF LPAREN cond RPAREN true_statement .)
    NOT             reduce using rule 265 (if_statement -> delays IF LPAREN cond RPAREN true_statement .)
    AND             reduce using rule 265 (if_statement -> delays IF LPAREN cond RPAREN true_statement .)
    NAND            reduce using rule 265 (if_statement -> delays IF LPAREN cond RPAREN true_statement .)
    NOR             reduce using rule 265 (if_statement -> delays IF LPAREN cond RPAREN true_statement .)
    OR              reduce using rule 265 (if_statement -> delays IF LPAREN cond RPAREN true_statement .)
    XOR             reduce using rule 265 (if_statement -> delays IF LPAREN cond RPAREN true_statement .)
    XNOR            reduce using rule 265 (if_statement -> delays IF LPAREN cond RPAREN true_statement .)
    INTNUMBER_DEC   reduce using rule 265 (if_statement -> delays IF LPAREN cond RPAREN true_statement .)
    SIGNED_INTNUMBER_DEC reduce using rule 265 (if_statement -> delays IF LPAREN cond RPAREN true_statement .)
    INTNUMBER_BIN   reduce using rule 265 (if_statement -> delays IF LPAREN cond RPAREN true_statement .)
    SIGNED_INTNUMBER_BIN reduce using rule 265 (if_statement -> delays IF LPAREN cond RPAREN true_statement .)
    INTNUMBER_OCT   reduce using rule 265 (if_statement -> delays IF LPAREN cond RPAREN true_statement .)
    SIGNED_INTNUMBER_OCT reduce using rule 265 (if_statement -> delays IF LPAREN cond RPAREN true_statement .)
    INTNUMBER_HEX   reduce using rule 265 (if_statement -> delays IF LPAREN cond RPAREN true_statement .)
    SIGNED_INTNUMBER_HEX reduce using rule 265 (if_statement -> delays IF LPAREN cond RPAREN true_statement .)
    FLOATNUMBER     reduce using rule 265 (if_statement -> delays IF LPAREN cond RPAREN true_statement .)
    STRING_LITERAL  reduce using rule 265 (if_statement -> delays IF LPAREN cond RPAREN true_statement .)

  ! ELSE            [ reduce using rule 265 (if_statement -> delays IF LPAREN cond RPAREN true_statement .) ]


state 733

    (237) blocking_substitution -> delays lvalue EQUALS delays rvalue SEMICOLON .

    ENDMODULE       reduce using rule 237 (blocking_substitution -> delays lvalue EQUALS delays rvalue SEMICOLON .)
    GENERATE        reduce using rule 237 (blocking_substitution -> delays lvalue EQUALS delays rvalue SEMICOLON .)
    INTEGER         reduce using rule 237 (blocking_substitution -> delays lvalue EQUALS delays rvalue SEMICOLON .)
    REAL            reduce using rule 237 (blocking_substitution -> delays lvalue EQUALS delays rvalue SEMICOLON .)
    PARAMETER       reduce using rule 237 (blocking_substitution -> delays lvalue EQUALS delays rvalue SEMICOLON .)
    LOCALPARAM      reduce using rule 237 (blocking_substitution -> delays lvalue EQUALS delays rvalue SEMICOLON .)
    GENVAR          reduce using rule 237 (blocking_substitution -> delays lvalue EQUALS delays rvalue SEMICOLON .)
    ASSIGN          reduce using rule 237 (blocking_substitution -> delays lvalue EQUALS delays rvalue SEMICOLON .)
    ALWAYS          reduce using rule 237 (blocking_substitution -> delays lvalue EQUALS delays rvalue SEMICOLON .)
    ALWAYS_FF       reduce using rule 237 (blocking_substitution -> delays lvalue EQUALS delays rvalue SEMICOLON .)
    ALWAYS_COMB     reduce using rule 237 (blocking_substitution -> delays lvalue EQUALS delays rvalue SEMICOLON .)
    INITIAL         reduce using rule 237 (blocking_substitution -> delays lvalue EQUALS delays rvalue SEMICOLON .)
    ID              reduce using rule 237 (blocking_substitution -> delays lvalue EQUALS delays rvalue SEMICOLON .)
    SENS_OR         reduce using rule 237 (blocking_substitution -> delays lvalue EQUALS delays rvalue SEMICOLON .)
    FUNCTION        reduce using rule 237 (blocking_substitution -> delays lvalue EQUALS delays rvalue SEMICOLON .)
    TASK            reduce using rule 237 (blocking_substitution -> delays lvalue EQUALS delays rvalue SEMICOLON .)
    LPAREN          reduce using rule 237 (blocking_substitution -> delays lvalue EQUALS delays rvalue SEMICOLON .)
    INPUT           reduce using rule 237 (blocking_substitution -> delays lvalue EQUALS delays rvalue SEMICOLON .)
    OUTPUT          reduce using rule 237 (blocking_substitution -> delays lvalue EQUALS delays rvalue SEMICOLON .)
    INOUT           reduce using rule 237 (blocking_substitution -> delays lvalue EQUALS delays rvalue SEMICOLON .)
    TRI             reduce using rule 237 (blocking_substitution -> delays lvalue EQUALS delays rvalue SEMICOLON .)
    REG             reduce using rule 237 (blocking_substitution -> delays lvalue EQUALS delays rvalue SEMICOLON .)
    LOGIC           reduce using rule 237 (blocking_substitution -> delays lvalue EQUALS delays rvalue SEMICOLON .)
    WIRE            reduce using rule 237 (blocking_substitution -> delays lvalue EQUALS delays rvalue SEMICOLON .)
    SIGNED          reduce using rule 237 (blocking_substitution -> delays lvalue EQUALS delays rvalue SEMICOLON .)
    SUPPLY0         reduce using rule 237 (blocking_substitution -> delays lvalue EQUALS delays rvalue SEMICOLON .)
    SUPPLY1         reduce using rule 237 (blocking_substitution -> delays lvalue EQUALS delays rvalue SEMICOLON .)
    ENDGENERATE     reduce using rule 237 (blocking_substitution -> delays lvalue EQUALS delays rvalue SEMICOLON .)
    IF              reduce using rule 237 (blocking_substitution -> delays lvalue EQUALS delays rvalue SEMICOLON .)
    FOR             reduce using rule 237 (blocking_substitution -> delays lvalue EQUALS delays rvalue SEMICOLON .)
    ELSE            reduce using rule 237 (blocking_substitution -> delays lvalue EQUALS delays rvalue SEMICOLON .)
    END             reduce using rule 237 (blocking_substitution -> delays lvalue EQUALS delays rvalue SEMICOLON .)
    CASE            reduce using rule 237 (blocking_substitution -> delays lvalue EQUALS delays rvalue SEMICOLON .)
    CASEX           reduce using rule 237 (blocking_substitution -> delays lvalue EQUALS delays rvalue SEMICOLON .)
    UNIQUE          reduce using rule 237 (blocking_substitution -> delays lvalue EQUALS delays rvalue SEMICOLON .)
    WHILE           reduce using rule 237 (blocking_substitution -> delays lvalue EQUALS delays rvalue SEMICOLON .)
    WAIT            reduce using rule 237 (blocking_substitution -> delays lvalue EQUALS delays rvalue SEMICOLON .)
    FOREVER         reduce using rule 237 (blocking_substitution -> delays lvalue EQUALS delays rvalue SEMICOLON .)
    BEGIN           reduce using rule 237 (blocking_substitution -> delays lvalue EQUALS delays rvalue SEMICOLON .)
    FORK            reduce using rule 237 (blocking_substitution -> delays lvalue EQUALS delays rvalue SEMICOLON .)
    DELAY           reduce using rule 237 (blocking_substitution -> delays lvalue EQUALS delays rvalue SEMICOLON .)
    AT              reduce using rule 237 (blocking_substitution -> delays lvalue EQUALS delays rvalue SEMICOLON .)
    DOLLER          reduce using rule 237 (blocking_substitution -> delays lvalue EQUALS delays rvalue SEMICOLON .)
    DISABLE         reduce using rule 237 (blocking_substitution -> delays lvalue EQUALS delays rvalue SEMICOLON .)
    LBRACE          reduce using rule 237 (blocking_substitution -> delays lvalue EQUALS delays rvalue SEMICOLON .)
    SEMICOLON       reduce using rule 237 (blocking_substitution -> delays lvalue EQUALS delays rvalue SEMICOLON .)
    JOIN            reduce using rule 237 (blocking_substitution -> delays lvalue EQUALS delays rvalue SEMICOLON .)
    ENDFUNCTION     reduce using rule 237 (blocking_substitution -> delays lvalue EQUALS delays rvalue SEMICOLON .)
    ENDTASK         reduce using rule 237 (blocking_substitution -> delays lvalue EQUALS delays rvalue SEMICOLON .)
    ENDCASE         reduce using rule 237 (blocking_substitution -> delays lvalue EQUALS delays rvalue SEMICOLON .)
    DEFAULT         reduce using rule 237 (blocking_substitution -> delays lvalue EQUALS delays rvalue SEMICOLON .)
    MINUS           reduce using rule 237 (blocking_substitution -> delays lvalue EQUALS delays rvalue SEMICOLON .)
    PLUS            reduce using rule 237 (blocking_substitution -> delays lvalue EQUALS delays rvalue SEMICOLON .)
    LNOT            reduce using rule 237 (blocking_substitution -> delays lvalue EQUALS delays rvalue SEMICOLON .)
    NOT             reduce using rule 237 (blocking_substitution -> delays lvalue EQUALS delays rvalue SEMICOLON .)
    AND             reduce using rule 237 (blocking_substitution -> delays lvalue EQUALS delays rvalue SEMICOLON .)
    NAND            reduce using rule 237 (blocking_substitution -> delays lvalue EQUALS delays rvalue SEMICOLON .)
    NOR             reduce using rule 237 (blocking_substitution -> delays lvalue EQUALS delays rvalue SEMICOLON .)
    OR              reduce using rule 237 (blocking_substitution -> delays lvalue EQUALS delays rvalue SEMICOLON .)
    XOR             reduce using rule 237 (blocking_substitution -> delays lvalue EQUALS delays rvalue SEMICOLON .)
    XNOR            reduce using rule 237 (blocking_substitution -> delays lvalue EQUALS delays rvalue SEMICOLON .)
    INTNUMBER_DEC   reduce using rule 237 (blocking_substitution -> delays lvalue EQUALS delays rvalue SEMICOLON .)
    SIGNED_INTNUMBER_DEC reduce using rule 237 (blocking_substitution -> delays lvalue EQUALS delays rvalue SEMICOLON .)
    INTNUMBER_BIN   reduce using rule 237 (blocking_substitution -> delays lvalue EQUALS delays rvalue SEMICOLON .)
    SIGNED_INTNUMBER_BIN reduce using rule 237 (blocking_substitution -> delays lvalue EQUALS delays rvalue SEMICOLON .)
    INTNUMBER_OCT   reduce using rule 237 (blocking_substitution -> delays lvalue EQUALS delays rvalue SEMICOLON .)
    SIGNED_INTNUMBER_OCT reduce using rule 237 (blocking_substitution -> delays lvalue EQUALS delays rvalue SEMICOLON .)
    INTNUMBER_HEX   reduce using rule 237 (blocking_substitution -> delays lvalue EQUALS delays rvalue SEMICOLON .)
    SIGNED_INTNUMBER_HEX reduce using rule 237 (blocking_substitution -> delays lvalue EQUALS delays rvalue SEMICOLON .)
    FLOATNUMBER     reduce using rule 237 (blocking_substitution -> delays lvalue EQUALS delays rvalue SEMICOLON .)
    STRING_LITERAL  reduce using rule 237 (blocking_substitution -> delays lvalue EQUALS delays rvalue SEMICOLON .)


state 734

    (239) nonblocking_substitution -> delays lvalue LE delays rvalue SEMICOLON .

    ENDMODULE       reduce using rule 239 (nonblocking_substitution -> delays lvalue LE delays rvalue SEMICOLON .)
    GENERATE        reduce using rule 239 (nonblocking_substitution -> delays lvalue LE delays rvalue SEMICOLON .)
    INTEGER         reduce using rule 239 (nonblocking_substitution -> delays lvalue LE delays rvalue SEMICOLON .)
    REAL            reduce using rule 239 (nonblocking_substitution -> delays lvalue LE delays rvalue SEMICOLON .)
    PARAMETER       reduce using rule 239 (nonblocking_substitution -> delays lvalue LE delays rvalue SEMICOLON .)
    LOCALPARAM      reduce using rule 239 (nonblocking_substitution -> delays lvalue LE delays rvalue SEMICOLON .)
    GENVAR          reduce using rule 239 (nonblocking_substitution -> delays lvalue LE delays rvalue SEMICOLON .)
    ASSIGN          reduce using rule 239 (nonblocking_substitution -> delays lvalue LE delays rvalue SEMICOLON .)
    ALWAYS          reduce using rule 239 (nonblocking_substitution -> delays lvalue LE delays rvalue SEMICOLON .)
    ALWAYS_FF       reduce using rule 239 (nonblocking_substitution -> delays lvalue LE delays rvalue SEMICOLON .)
    ALWAYS_COMB     reduce using rule 239 (nonblocking_substitution -> delays lvalue LE delays rvalue SEMICOLON .)
    INITIAL         reduce using rule 239 (nonblocking_substitution -> delays lvalue LE delays rvalue SEMICOLON .)
    ID              reduce using rule 239 (nonblocking_substitution -> delays lvalue LE delays rvalue SEMICOLON .)
    SENS_OR         reduce using rule 239 (nonblocking_substitution -> delays lvalue LE delays rvalue SEMICOLON .)
    FUNCTION        reduce using rule 239 (nonblocking_substitution -> delays lvalue LE delays rvalue SEMICOLON .)
    TASK            reduce using rule 239 (nonblocking_substitution -> delays lvalue LE delays rvalue SEMICOLON .)
    LPAREN          reduce using rule 239 (nonblocking_substitution -> delays lvalue LE delays rvalue SEMICOLON .)
    INPUT           reduce using rule 239 (nonblocking_substitution -> delays lvalue LE delays rvalue SEMICOLON .)
    OUTPUT          reduce using rule 239 (nonblocking_substitution -> delays lvalue LE delays rvalue SEMICOLON .)
    INOUT           reduce using rule 239 (nonblocking_substitution -> delays lvalue LE delays rvalue SEMICOLON .)
    TRI             reduce using rule 239 (nonblocking_substitution -> delays lvalue LE delays rvalue SEMICOLON .)
    REG             reduce using rule 239 (nonblocking_substitution -> delays lvalue LE delays rvalue SEMICOLON .)
    LOGIC           reduce using rule 239 (nonblocking_substitution -> delays lvalue LE delays rvalue SEMICOLON .)
    WIRE            reduce using rule 239 (nonblocking_substitution -> delays lvalue LE delays rvalue SEMICOLON .)
    SIGNED          reduce using rule 239 (nonblocking_substitution -> delays lvalue LE delays rvalue SEMICOLON .)
    SUPPLY0         reduce using rule 239 (nonblocking_substitution -> delays lvalue LE delays rvalue SEMICOLON .)
    SUPPLY1         reduce using rule 239 (nonblocking_substitution -> delays lvalue LE delays rvalue SEMICOLON .)
    ENDGENERATE     reduce using rule 239 (nonblocking_substitution -> delays lvalue LE delays rvalue SEMICOLON .)
    IF              reduce using rule 239 (nonblocking_substitution -> delays lvalue LE delays rvalue SEMICOLON .)
    FOR             reduce using rule 239 (nonblocking_substitution -> delays lvalue LE delays rvalue SEMICOLON .)
    ELSE            reduce using rule 239 (nonblocking_substitution -> delays lvalue LE delays rvalue SEMICOLON .)
    END             reduce using rule 239 (nonblocking_substitution -> delays lvalue LE delays rvalue SEMICOLON .)
    CASE            reduce using rule 239 (nonblocking_substitution -> delays lvalue LE delays rvalue SEMICOLON .)
    CASEX           reduce using rule 239 (nonblocking_substitution -> delays lvalue LE delays rvalue SEMICOLON .)
    UNIQUE          reduce using rule 239 (nonblocking_substitution -> delays lvalue LE delays rvalue SEMICOLON .)
    WHILE           reduce using rule 239 (nonblocking_substitution -> delays lvalue LE delays rvalue SEMICOLON .)
    WAIT            reduce using rule 239 (nonblocking_substitution -> delays lvalue LE delays rvalue SEMICOLON .)
    FOREVER         reduce using rule 239 (nonblocking_substitution -> delays lvalue LE delays rvalue SEMICOLON .)
    BEGIN           reduce using rule 239 (nonblocking_substitution -> delays lvalue LE delays rvalue SEMICOLON .)
    FORK            reduce using rule 239 (nonblocking_substitution -> delays lvalue LE delays rvalue SEMICOLON .)
    DELAY           reduce using rule 239 (nonblocking_substitution -> delays lvalue LE delays rvalue SEMICOLON .)
    AT              reduce using rule 239 (nonblocking_substitution -> delays lvalue LE delays rvalue SEMICOLON .)
    DOLLER          reduce using rule 239 (nonblocking_substitution -> delays lvalue LE delays rvalue SEMICOLON .)
    DISABLE         reduce using rule 239 (nonblocking_substitution -> delays lvalue LE delays rvalue SEMICOLON .)
    LBRACE          reduce using rule 239 (nonblocking_substitution -> delays lvalue LE delays rvalue SEMICOLON .)
    SEMICOLON       reduce using rule 239 (nonblocking_substitution -> delays lvalue LE delays rvalue SEMICOLON .)
    JOIN            reduce using rule 239 (nonblocking_substitution -> delays lvalue LE delays rvalue SEMICOLON .)
    ENDFUNCTION     reduce using rule 239 (nonblocking_substitution -> delays lvalue LE delays rvalue SEMICOLON .)
    ENDTASK         reduce using rule 239 (nonblocking_substitution -> delays lvalue LE delays rvalue SEMICOLON .)
    ENDCASE         reduce using rule 239 (nonblocking_substitution -> delays lvalue LE delays rvalue SEMICOLON .)
    DEFAULT         reduce using rule 239 (nonblocking_substitution -> delays lvalue LE delays rvalue SEMICOLON .)
    MINUS           reduce using rule 239 (nonblocking_substitution -> delays lvalue LE delays rvalue SEMICOLON .)
    PLUS            reduce using rule 239 (nonblocking_substitution -> delays lvalue LE delays rvalue SEMICOLON .)
    LNOT            reduce using rule 239 (nonblocking_substitution -> delays lvalue LE delays rvalue SEMICOLON .)
    NOT             reduce using rule 239 (nonblocking_substitution -> delays lvalue LE delays rvalue SEMICOLON .)
    AND             reduce using rule 239 (nonblocking_substitution -> delays lvalue LE delays rvalue SEMICOLON .)
    NAND            reduce using rule 239 (nonblocking_substitution -> delays lvalue LE delays rvalue SEMICOLON .)
    NOR             reduce using rule 239 (nonblocking_substitution -> delays lvalue LE delays rvalue SEMICOLON .)
    OR              reduce using rule 239 (nonblocking_substitution -> delays lvalue LE delays rvalue SEMICOLON .)
    XOR             reduce using rule 239 (nonblocking_substitution -> delays lvalue LE delays rvalue SEMICOLON .)
    XNOR            reduce using rule 239 (nonblocking_substitution -> delays lvalue LE delays rvalue SEMICOLON .)
    INTNUMBER_DEC   reduce using rule 239 (nonblocking_substitution -> delays lvalue LE delays rvalue SEMICOLON .)
    SIGNED_INTNUMBER_DEC reduce using rule 239 (nonblocking_substitution -> delays lvalue LE delays rvalue SEMICOLON .)
    INTNUMBER_BIN   reduce using rule 239 (nonblocking_substitution -> delays lvalue LE delays rvalue SEMICOLON .)
    SIGNED_INTNUMBER_BIN reduce using rule 239 (nonblocking_substitution -> delays lvalue LE delays rvalue SEMICOLON .)
    INTNUMBER_OCT   reduce using rule 239 (nonblocking_substitution -> delays lvalue LE delays rvalue SEMICOLON .)
    SIGNED_INTNUMBER_OCT reduce using rule 239 (nonblocking_substitution -> delays lvalue LE delays rvalue SEMICOLON .)
    INTNUMBER_HEX   reduce using rule 239 (nonblocking_substitution -> delays lvalue LE delays rvalue SEMICOLON .)
    SIGNED_INTNUMBER_HEX reduce using rule 239 (nonblocking_substitution -> delays lvalue LE delays rvalue SEMICOLON .)
    FLOATNUMBER     reduce using rule 239 (nonblocking_substitution -> delays lvalue LE delays rvalue SEMICOLON .)
    STRING_LITERAL  reduce using rule 239 (nonblocking_substitution -> delays lvalue LE delays rvalue SEMICOLON .)


state 735

    (280) case_statement -> CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .

    ENDMODULE       reduce using rule 280 (case_statement -> CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    GENERATE        reduce using rule 280 (case_statement -> CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    INTEGER         reduce using rule 280 (case_statement -> CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    REAL            reduce using rule 280 (case_statement -> CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    PARAMETER       reduce using rule 280 (case_statement -> CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    LOCALPARAM      reduce using rule 280 (case_statement -> CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    GENVAR          reduce using rule 280 (case_statement -> CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    ASSIGN          reduce using rule 280 (case_statement -> CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    ALWAYS          reduce using rule 280 (case_statement -> CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    ALWAYS_FF       reduce using rule 280 (case_statement -> CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    ALWAYS_COMB     reduce using rule 280 (case_statement -> CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    INITIAL         reduce using rule 280 (case_statement -> CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    ID              reduce using rule 280 (case_statement -> CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    SENS_OR         reduce using rule 280 (case_statement -> CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    FUNCTION        reduce using rule 280 (case_statement -> CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    TASK            reduce using rule 280 (case_statement -> CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    LPAREN          reduce using rule 280 (case_statement -> CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    INPUT           reduce using rule 280 (case_statement -> CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    OUTPUT          reduce using rule 280 (case_statement -> CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    INOUT           reduce using rule 280 (case_statement -> CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    TRI             reduce using rule 280 (case_statement -> CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    REG             reduce using rule 280 (case_statement -> CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    LOGIC           reduce using rule 280 (case_statement -> CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    WIRE            reduce using rule 280 (case_statement -> CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    SIGNED          reduce using rule 280 (case_statement -> CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    SUPPLY0         reduce using rule 280 (case_statement -> CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    SUPPLY1         reduce using rule 280 (case_statement -> CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    ENDGENERATE     reduce using rule 280 (case_statement -> CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    IF              reduce using rule 280 (case_statement -> CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    FOR             reduce using rule 280 (case_statement -> CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    ELSE            reduce using rule 280 (case_statement -> CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    END             reduce using rule 280 (case_statement -> CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    CASE            reduce using rule 280 (case_statement -> CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    CASEX           reduce using rule 280 (case_statement -> CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    UNIQUE          reduce using rule 280 (case_statement -> CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    WHILE           reduce using rule 280 (case_statement -> CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    WAIT            reduce using rule 280 (case_statement -> CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    FOREVER         reduce using rule 280 (case_statement -> CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    BEGIN           reduce using rule 280 (case_statement -> CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    FORK            reduce using rule 280 (case_statement -> CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    DELAY           reduce using rule 280 (case_statement -> CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    AT              reduce using rule 280 (case_statement -> CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    DOLLER          reduce using rule 280 (case_statement -> CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    DISABLE         reduce using rule 280 (case_statement -> CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    LBRACE          reduce using rule 280 (case_statement -> CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    SEMICOLON       reduce using rule 280 (case_statement -> CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    JOIN            reduce using rule 280 (case_statement -> CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    ENDFUNCTION     reduce using rule 280 (case_statement -> CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    ENDTASK         reduce using rule 280 (case_statement -> CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    ENDCASE         reduce using rule 280 (case_statement -> CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    DEFAULT         reduce using rule 280 (case_statement -> CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    MINUS           reduce using rule 280 (case_statement -> CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    PLUS            reduce using rule 280 (case_statement -> CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    LNOT            reduce using rule 280 (case_statement -> CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    NOT             reduce using rule 280 (case_statement -> CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    AND             reduce using rule 280 (case_statement -> CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    NAND            reduce using rule 280 (case_statement -> CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    NOR             reduce using rule 280 (case_statement -> CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    OR              reduce using rule 280 (case_statement -> CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    XOR             reduce using rule 280 (case_statement -> CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    XNOR            reduce using rule 280 (case_statement -> CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    INTNUMBER_DEC   reduce using rule 280 (case_statement -> CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    SIGNED_INTNUMBER_DEC reduce using rule 280 (case_statement -> CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    INTNUMBER_BIN   reduce using rule 280 (case_statement -> CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    SIGNED_INTNUMBER_BIN reduce using rule 280 (case_statement -> CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    INTNUMBER_OCT   reduce using rule 280 (case_statement -> CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    SIGNED_INTNUMBER_OCT reduce using rule 280 (case_statement -> CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    INTNUMBER_HEX   reduce using rule 280 (case_statement -> CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    SIGNED_INTNUMBER_HEX reduce using rule 280 (case_statement -> CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    FLOATNUMBER     reduce using rule 280 (case_statement -> CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    STRING_LITERAL  reduce using rule 280 (case_statement -> CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)


state 736

    (284) casecontent_statements -> casecontent_statements casecontent_statement .

    ENDCASE         reduce using rule 284 (casecontent_statements -> casecontent_statements casecontent_statement .)
    DEFAULT         reduce using rule 284 (casecontent_statements -> casecontent_statements casecontent_statement .)
    MINUS           reduce using rule 284 (casecontent_statements -> casecontent_statements casecontent_statement .)
    PLUS            reduce using rule 284 (casecontent_statements -> casecontent_statements casecontent_statement .)
    LNOT            reduce using rule 284 (casecontent_statements -> casecontent_statements casecontent_statement .)
    NOT             reduce using rule 284 (casecontent_statements -> casecontent_statements casecontent_statement .)
    AND             reduce using rule 284 (casecontent_statements -> casecontent_statements casecontent_statement .)
    NAND            reduce using rule 284 (casecontent_statements -> casecontent_statements casecontent_statement .)
    NOR             reduce using rule 284 (casecontent_statements -> casecontent_statements casecontent_statement .)
    OR              reduce using rule 284 (casecontent_statements -> casecontent_statements casecontent_statement .)
    XOR             reduce using rule 284 (casecontent_statements -> casecontent_statements casecontent_statement .)
    XNOR            reduce using rule 284 (casecontent_statements -> casecontent_statements casecontent_statement .)
    LPAREN          reduce using rule 284 (casecontent_statements -> casecontent_statements casecontent_statement .)
    LBRACE          reduce using rule 284 (casecontent_statements -> casecontent_statements casecontent_statement .)
    DOLLER          reduce using rule 284 (casecontent_statements -> casecontent_statements casecontent_statement .)
    ID              reduce using rule 284 (casecontent_statements -> casecontent_statements casecontent_statement .)
    INTNUMBER_DEC   reduce using rule 284 (casecontent_statements -> casecontent_statements casecontent_statement .)
    SIGNED_INTNUMBER_DEC reduce using rule 284 (casecontent_statements -> casecontent_statements casecontent_statement .)
    INTNUMBER_BIN   reduce using rule 284 (casecontent_statements -> casecontent_statements casecontent_statement .)
    SIGNED_INTNUMBER_BIN reduce using rule 284 (casecontent_statements -> casecontent_statements casecontent_statement .)
    INTNUMBER_OCT   reduce using rule 284 (casecontent_statements -> casecontent_statements casecontent_statement .)
    SIGNED_INTNUMBER_OCT reduce using rule 284 (casecontent_statements -> casecontent_statements casecontent_statement .)
    INTNUMBER_HEX   reduce using rule 284 (casecontent_statements -> casecontent_statements casecontent_statement .)
    SIGNED_INTNUMBER_HEX reduce using rule 284 (casecontent_statements -> casecontent_statements casecontent_statement .)
    FLOATNUMBER     reduce using rule 284 (casecontent_statements -> casecontent_statements casecontent_statement .)
    STRING_LITERAL  reduce using rule 284 (casecontent_statements -> casecontent_statements casecontent_statement .)


state 737

    (286) casecontent_statement -> casecontent_condition COLON . basic_statement
    (221) basic_statement -> . if_statement
    (222) basic_statement -> . case_statement
    (223) basic_statement -> . casex_statement
    (224) basic_statement -> . unique_case_statement
    (225) basic_statement -> . for_statement
    (226) basic_statement -> . while_statement
    (227) basic_statement -> . event_statement
    (228) basic_statement -> . wait_statement
    (229) basic_statement -> . forever_statement
    (230) basic_statement -> . block
    (231) basic_statement -> . namedblock
    (232) basic_statement -> . parallelblock
    (233) basic_statement -> . blocking_substitution
    (234) basic_statement -> . nonblocking_substitution
    (235) basic_statement -> . single_statement
    (262) if_statement -> . IF LPAREN cond RPAREN true_statement ELSE else_statement
    (263) if_statement -> . IF LPAREN cond RPAREN true_statement
    (264) if_statement -> . delays IF LPAREN cond RPAREN true_statement ELSE else_statement
    (265) if_statement -> . delays IF LPAREN cond RPAREN true_statement
    (280) case_statement -> . CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE
    (281) casex_statement -> . CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE
    (282) unique_case_statement -> . UNIQUE CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE
    (270) for_statement -> . FOR LPAREN forpre forcond forpost RPAREN forcontent_statement
    (278) while_statement -> . WHILE LPAREN cond RPAREN whilecontent_statement
    (292) event_statement -> . senslist SEMICOLON
    (293) wait_statement -> . WAIT LPAREN cond RPAREN waitcontent_statement
    (296) forever_statement -> . FOREVER basic_statement
    (245) block -> . BEGIN block_statements END
    (246) block -> . BEGIN END
    (250) namedblock -> . BEGIN COLON ID namedblock_statements END
    (251) namedblock -> . BEGIN COLON ID END
    (260) parallelblock -> . FORK block_statements JOIN
    (261) parallelblock -> . FORK JOIN
    (237) blocking_substitution -> . delays lvalue EQUALS delays rvalue SEMICOLON
    (239) nonblocking_substitution -> . delays lvalue LE delays rvalue SEMICOLON
    (397) single_statement -> . DELAY expression SEMICOLON
    (398) single_statement -> . systemcall SEMICOLON
    (399) single_statement -> . disable SEMICOLON
    (240) delays -> . DELAY LPAREN expression RPAREN
    (241) delays -> . DELAY identifier
    (242) delays -> . DELAY intnumber
    (243) delays -> . DELAY floatnumber
    (244) delays -> . empty
    (202) senslist -> . AT LPAREN edgesigs RPAREN
    (209) senslist -> . empty
    (210) senslist -> . AT levelsig
    (211) senslist -> . AT LPAREN levelsigs RPAREN
    (219) senslist -> . AT TIMES
    (220) senslist -> . AT LPAREN TIMES RPAREN
    (351) systemcall -> . DOLLER ID
    (352) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (353) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (396) disable -> . DISABLE ID
    (400) empty -> .

  ! shift/reduce conflict for IF resolved as shift
    IF              shift and go to state 192
    CASE            shift and go to state 194
    CASEX           shift and go to state 195
    UNIQUE          shift and go to state 196
    FOR             shift and go to state 197
    WHILE           shift and go to state 198
    WAIT            shift and go to state 200
    FOREVER         shift and go to state 201
    BEGIN           shift and go to state 202
    FORK            shift and go to state 203
    DELAY           shift and go to state 204
    AT              shift and go to state 171
    DOLLER          shift and go to state 107
    DISABLE         shift and go to state 208
    LBRACE          reduce using rule 400 (empty -> .)
    ID              reduce using rule 400 (empty -> .)
    SEMICOLON       reduce using rule 400 (empty -> .)

  ! IF              [ reduce using rule 400 (empty -> .) ]

    basic_statement                shift and go to state 759
    if_statement                   shift and go to state 177
    case_statement                 shift and go to state 178
    casex_statement                shift and go to state 179
    unique_case_statement          shift and go to state 180
    for_statement                  shift and go to state 181
    while_statement                shift and go to state 182
    event_statement                shift and go to state 183
    wait_statement                 shift and go to state 184
    forever_statement              shift and go to state 185
    block                          shift and go to state 186
    namedblock                     shift and go to state 187
    parallelblock                  shift and go to state 188
    blocking_substitution          shift and go to state 189
    nonblocking_substitution       shift and go to state 190
    single_statement               shift and go to state 191
    delays                         shift and go to state 193
    senslist                       shift and go to state 199
    systemcall                     shift and go to state 205
    disable                        shift and go to state 206
    empty                          shift and go to state 207

state 738

    (287) casecontent_condition -> casecontent_condition COMMA . expression
    (130) expression -> . MINUS expression
    (131) expression -> . PLUS expression
    (132) expression -> . LNOT expression
    (133) expression -> . NOT expression
    (134) expression -> . AND expression
    (135) expression -> . NAND expression
    (136) expression -> . NOR expression
    (137) expression -> . OR expression
    (138) expression -> . XOR expression
    (139) expression -> . XNOR expression
    (140) expression -> . expression POWER expression
    (141) expression -> . expression TIMES expression
    (142) expression -> . expression DIVIDE expression
    (143) expression -> . expression MOD expression
    (144) expression -> . expression PLUS expression
    (145) expression -> . expression MINUS expression
    (146) expression -> . expression LSHIFT expression
    (147) expression -> . expression RSHIFT expression
    (148) expression -> . expression LSHIFTA expression
    (149) expression -> . expression RSHIFTA expression
    (150) expression -> . expression LT expression
    (151) expression -> . expression GT expression
    (152) expression -> . expression LE expression
    (153) expression -> . expression GE expression
    (154) expression -> . expression EQ expression
    (155) expression -> . expression NE expression
    (156) expression -> . expression EQL expression
    (157) expression -> . expression NEL expression
    (158) expression -> . expression AND expression
    (159) expression -> . expression XOR expression
    (160) expression -> . expression XNOR expression
    (161) expression -> . expression OR expression
    (162) expression -> . expression LAND expression
    (163) expression -> . expression LOR expression
    (164) expression -> . expression COND expression COLON expression
    (165) expression -> . LPAREN expression RPAREN
    (166) expression -> . concat
    (167) expression -> . repeat
    (168) expression -> . partselect
    (169) expression -> . pointer
    (170) expression -> . functioncall
    (171) expression -> . systemcall
    (172) expression -> . identifier
    (173) expression -> . const_expression
    (174) concat -> . LBRACE concatlist RBRACE
    (177) repeat -> . LBRACE expression concat RBRACE
    (178) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (179) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (180) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (181) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (182) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (183) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (184) pointer -> . identifier LBRACKET expression RBRACKET
    (185) pointer -> . pointer LBRACKET expression RBRACKET
    (373) functioncall -> . identifier LPAREN func_args RPAREN
    (351) systemcall -> . DOLLER ID
    (352) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (353) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (392) identifier -> . ID
    (393) identifier -> . scope ID
    (186) const_expression -> . intnumber
    (187) const_expression -> . floatnumber
    (188) const_expression -> . stringliteral
    (394) scope -> . identifier DOT
    (395) scope -> . pointer DOT
    (190) intnumber -> . INTNUMBER_DEC
    (191) intnumber -> . SIGNED_INTNUMBER_DEC
    (192) intnumber -> . INTNUMBER_BIN
    (193) intnumber -> . SIGNED_INTNUMBER_BIN
    (194) intnumber -> . INTNUMBER_OCT
    (195) intnumber -> . SIGNED_INTNUMBER_OCT
    (196) intnumber -> . INTNUMBER_HEX
    (197) intnumber -> . SIGNED_INTNUMBER_HEX
    (189) floatnumber -> . FLOATNUMBER
    (198) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 88
    PLUS            shift and go to state 89
    LNOT            shift and go to state 90
    NOT             shift and go to state 91
    AND             shift and go to state 92
    NAND            shift and go to state 93
    NOR             shift and go to state 94
    OR              shift and go to state 95
    XOR             shift and go to state 96
    XNOR            shift and go to state 97
    LPAREN          shift and go to state 85
    LBRACE          shift and go to state 106
    DOLLER          shift and go to state 107
    ID              shift and go to state 86
    INTNUMBER_DEC   shift and go to state 112
    SIGNED_INTNUMBER_DEC shift and go to state 113
    INTNUMBER_BIN   shift and go to state 114
    SIGNED_INTNUMBER_BIN shift and go to state 115
    INTNUMBER_OCT   shift and go to state 116
    SIGNED_INTNUMBER_OCT shift and go to state 117
    INTNUMBER_HEX   shift and go to state 118
    SIGNED_INTNUMBER_HEX shift and go to state 119
    FLOATNUMBER     shift and go to state 120
    STRING_LITERAL  shift and go to state 121

    expression                     shift and go to state 760
    concat                         shift and go to state 98
    repeat                         shift and go to state 99
    partselect                     shift and go to state 100
    pointer                        shift and go to state 101
    functioncall                   shift and go to state 102
    systemcall                     shift and go to state 103
    identifier                     shift and go to state 104
    const_expression               shift and go to state 105
    scope                          shift and go to state 108
    intnumber                      shift and go to state 109
    floatnumber                    shift and go to state 110
    stringliteral                  shift and go to state 111

state 739

    (289) casecontent_statement -> DEFAULT COLON . basic_statement
    (221) basic_statement -> . if_statement
    (222) basic_statement -> . case_statement
    (223) basic_statement -> . casex_statement
    (224) basic_statement -> . unique_case_statement
    (225) basic_statement -> . for_statement
    (226) basic_statement -> . while_statement
    (227) basic_statement -> . event_statement
    (228) basic_statement -> . wait_statement
    (229) basic_statement -> . forever_statement
    (230) basic_statement -> . block
    (231) basic_statement -> . namedblock
    (232) basic_statement -> . parallelblock
    (233) basic_statement -> . blocking_substitution
    (234) basic_statement -> . nonblocking_substitution
    (235) basic_statement -> . single_statement
    (262) if_statement -> . IF LPAREN cond RPAREN true_statement ELSE else_statement
    (263) if_statement -> . IF LPAREN cond RPAREN true_statement
    (264) if_statement -> . delays IF LPAREN cond RPAREN true_statement ELSE else_statement
    (265) if_statement -> . delays IF LPAREN cond RPAREN true_statement
    (280) case_statement -> . CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE
    (281) casex_statement -> . CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE
    (282) unique_case_statement -> . UNIQUE CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE
    (270) for_statement -> . FOR LPAREN forpre forcond forpost RPAREN forcontent_statement
    (278) while_statement -> . WHILE LPAREN cond RPAREN whilecontent_statement
    (292) event_statement -> . senslist SEMICOLON
    (293) wait_statement -> . WAIT LPAREN cond RPAREN waitcontent_statement
    (296) forever_statement -> . FOREVER basic_statement
    (245) block -> . BEGIN block_statements END
    (246) block -> . BEGIN END
    (250) namedblock -> . BEGIN COLON ID namedblock_statements END
    (251) namedblock -> . BEGIN COLON ID END
    (260) parallelblock -> . FORK block_statements JOIN
    (261) parallelblock -> . FORK JOIN
    (237) blocking_substitution -> . delays lvalue EQUALS delays rvalue SEMICOLON
    (239) nonblocking_substitution -> . delays lvalue LE delays rvalue SEMICOLON
    (397) single_statement -> . DELAY expression SEMICOLON
    (398) single_statement -> . systemcall SEMICOLON
    (399) single_statement -> . disable SEMICOLON
    (240) delays -> . DELAY LPAREN expression RPAREN
    (241) delays -> . DELAY identifier
    (242) delays -> . DELAY intnumber
    (243) delays -> . DELAY floatnumber
    (244) delays -> . empty
    (202) senslist -> . AT LPAREN edgesigs RPAREN
    (209) senslist -> . empty
    (210) senslist -> . AT levelsig
    (211) senslist -> . AT LPAREN levelsigs RPAREN
    (219) senslist -> . AT TIMES
    (220) senslist -> . AT LPAREN TIMES RPAREN
    (351) systemcall -> . DOLLER ID
    (352) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (353) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (396) disable -> . DISABLE ID
    (400) empty -> .

  ! shift/reduce conflict for IF resolved as shift
    IF              shift and go to state 192
    CASE            shift and go to state 194
    CASEX           shift and go to state 195
    UNIQUE          shift and go to state 196
    FOR             shift and go to state 197
    WHILE           shift and go to state 198
    WAIT            shift and go to state 200
    FOREVER         shift and go to state 201
    BEGIN           shift and go to state 202
    FORK            shift and go to state 203
    DELAY           shift and go to state 204
    AT              shift and go to state 171
    DOLLER          shift and go to state 107
    DISABLE         shift and go to state 208
    LBRACE          reduce using rule 400 (empty -> .)
    ID              reduce using rule 400 (empty -> .)
    SEMICOLON       reduce using rule 400 (empty -> .)

  ! IF              [ reduce using rule 400 (empty -> .) ]

    basic_statement                shift and go to state 761
    if_statement                   shift and go to state 177
    case_statement                 shift and go to state 178
    casex_statement                shift and go to state 179
    unique_case_statement          shift and go to state 180
    for_statement                  shift and go to state 181
    while_statement                shift and go to state 182
    event_statement                shift and go to state 183
    wait_statement                 shift and go to state 184
    forever_statement              shift and go to state 185
    block                          shift and go to state 186
    namedblock                     shift and go to state 187
    parallelblock                  shift and go to state 188
    blocking_substitution          shift and go to state 189
    nonblocking_substitution       shift and go to state 190
    single_statement               shift and go to state 191
    delays                         shift and go to state 193
    senslist                       shift and go to state 199
    systemcall                     shift and go to state 205
    disable                        shift and go to state 206
    empty                          shift and go to state 207

state 740

    (281) casex_statement -> CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE .

    ENDMODULE       reduce using rule 281 (casex_statement -> CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    GENERATE        reduce using rule 281 (casex_statement -> CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    INTEGER         reduce using rule 281 (casex_statement -> CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    REAL            reduce using rule 281 (casex_statement -> CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    PARAMETER       reduce using rule 281 (casex_statement -> CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    LOCALPARAM      reduce using rule 281 (casex_statement -> CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    GENVAR          reduce using rule 281 (casex_statement -> CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    ASSIGN          reduce using rule 281 (casex_statement -> CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    ALWAYS          reduce using rule 281 (casex_statement -> CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    ALWAYS_FF       reduce using rule 281 (casex_statement -> CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    ALWAYS_COMB     reduce using rule 281 (casex_statement -> CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    INITIAL         reduce using rule 281 (casex_statement -> CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    ID              reduce using rule 281 (casex_statement -> CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    SENS_OR         reduce using rule 281 (casex_statement -> CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    FUNCTION        reduce using rule 281 (casex_statement -> CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    TASK            reduce using rule 281 (casex_statement -> CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    LPAREN          reduce using rule 281 (casex_statement -> CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    INPUT           reduce using rule 281 (casex_statement -> CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    OUTPUT          reduce using rule 281 (casex_statement -> CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    INOUT           reduce using rule 281 (casex_statement -> CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    TRI             reduce using rule 281 (casex_statement -> CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    REG             reduce using rule 281 (casex_statement -> CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    LOGIC           reduce using rule 281 (casex_statement -> CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    WIRE            reduce using rule 281 (casex_statement -> CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    SIGNED          reduce using rule 281 (casex_statement -> CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    SUPPLY0         reduce using rule 281 (casex_statement -> CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    SUPPLY1         reduce using rule 281 (casex_statement -> CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    ENDGENERATE     reduce using rule 281 (casex_statement -> CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    IF              reduce using rule 281 (casex_statement -> CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    FOR             reduce using rule 281 (casex_statement -> CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    ELSE            reduce using rule 281 (casex_statement -> CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    END             reduce using rule 281 (casex_statement -> CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    CASE            reduce using rule 281 (casex_statement -> CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    CASEX           reduce using rule 281 (casex_statement -> CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    UNIQUE          reduce using rule 281 (casex_statement -> CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    WHILE           reduce using rule 281 (casex_statement -> CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    WAIT            reduce using rule 281 (casex_statement -> CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    FOREVER         reduce using rule 281 (casex_statement -> CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    BEGIN           reduce using rule 281 (casex_statement -> CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    FORK            reduce using rule 281 (casex_statement -> CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    DELAY           reduce using rule 281 (casex_statement -> CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    AT              reduce using rule 281 (casex_statement -> CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    DOLLER          reduce using rule 281 (casex_statement -> CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    DISABLE         reduce using rule 281 (casex_statement -> CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    LBRACE          reduce using rule 281 (casex_statement -> CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    SEMICOLON       reduce using rule 281 (casex_statement -> CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    JOIN            reduce using rule 281 (casex_statement -> CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    ENDFUNCTION     reduce using rule 281 (casex_statement -> CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    ENDTASK         reduce using rule 281 (casex_statement -> CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    ENDCASE         reduce using rule 281 (casex_statement -> CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    DEFAULT         reduce using rule 281 (casex_statement -> CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    MINUS           reduce using rule 281 (casex_statement -> CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    PLUS            reduce using rule 281 (casex_statement -> CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    LNOT            reduce using rule 281 (casex_statement -> CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    NOT             reduce using rule 281 (casex_statement -> CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    AND             reduce using rule 281 (casex_statement -> CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    NAND            reduce using rule 281 (casex_statement -> CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    NOR             reduce using rule 281 (casex_statement -> CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    OR              reduce using rule 281 (casex_statement -> CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    XOR             reduce using rule 281 (casex_statement -> CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    XNOR            reduce using rule 281 (casex_statement -> CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    INTNUMBER_DEC   reduce using rule 281 (casex_statement -> CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    SIGNED_INTNUMBER_DEC reduce using rule 281 (casex_statement -> CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    INTNUMBER_BIN   reduce using rule 281 (casex_statement -> CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    SIGNED_INTNUMBER_BIN reduce using rule 281 (casex_statement -> CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    INTNUMBER_OCT   reduce using rule 281 (casex_statement -> CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    SIGNED_INTNUMBER_OCT reduce using rule 281 (casex_statement -> CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    INTNUMBER_HEX   reduce using rule 281 (casex_statement -> CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    SIGNED_INTNUMBER_HEX reduce using rule 281 (casex_statement -> CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    FLOATNUMBER     reduce using rule 281 (casex_statement -> CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    STRING_LITERAL  reduce using rule 281 (casex_statement -> CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE .)


state 741

    (282) unique_case_statement -> UNIQUE CASE LPAREN case_comp RPAREN casecontent_statements . ENDCASE
    (284) casecontent_statements -> casecontent_statements . casecontent_statement
    (286) casecontent_statement -> . casecontent_condition COLON basic_statement
    (289) casecontent_statement -> . DEFAULT COLON basic_statement
    (287) casecontent_condition -> . casecontent_condition COMMA expression
    (288) casecontent_condition -> . expression
    (130) expression -> . MINUS expression
    (131) expression -> . PLUS expression
    (132) expression -> . LNOT expression
    (133) expression -> . NOT expression
    (134) expression -> . AND expression
    (135) expression -> . NAND expression
    (136) expression -> . NOR expression
    (137) expression -> . OR expression
    (138) expression -> . XOR expression
    (139) expression -> . XNOR expression
    (140) expression -> . expression POWER expression
    (141) expression -> . expression TIMES expression
    (142) expression -> . expression DIVIDE expression
    (143) expression -> . expression MOD expression
    (144) expression -> . expression PLUS expression
    (145) expression -> . expression MINUS expression
    (146) expression -> . expression LSHIFT expression
    (147) expression -> . expression RSHIFT expression
    (148) expression -> . expression LSHIFTA expression
    (149) expression -> . expression RSHIFTA expression
    (150) expression -> . expression LT expression
    (151) expression -> . expression GT expression
    (152) expression -> . expression LE expression
    (153) expression -> . expression GE expression
    (154) expression -> . expression EQ expression
    (155) expression -> . expression NE expression
    (156) expression -> . expression EQL expression
    (157) expression -> . expression NEL expression
    (158) expression -> . expression AND expression
    (159) expression -> . expression XOR expression
    (160) expression -> . expression XNOR expression
    (161) expression -> . expression OR expression
    (162) expression -> . expression LAND expression
    (163) expression -> . expression LOR expression
    (164) expression -> . expression COND expression COLON expression
    (165) expression -> . LPAREN expression RPAREN
    (166) expression -> . concat
    (167) expression -> . repeat
    (168) expression -> . partselect
    (169) expression -> . pointer
    (170) expression -> . functioncall
    (171) expression -> . systemcall
    (172) expression -> . identifier
    (173) expression -> . const_expression
    (174) concat -> . LBRACE concatlist RBRACE
    (177) repeat -> . LBRACE expression concat RBRACE
    (178) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (179) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (180) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (181) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (182) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (183) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (184) pointer -> . identifier LBRACKET expression RBRACKET
    (185) pointer -> . pointer LBRACKET expression RBRACKET
    (373) functioncall -> . identifier LPAREN func_args RPAREN
    (351) systemcall -> . DOLLER ID
    (352) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (353) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (392) identifier -> . ID
    (393) identifier -> . scope ID
    (186) const_expression -> . intnumber
    (187) const_expression -> . floatnumber
    (188) const_expression -> . stringliteral
    (394) scope -> . identifier DOT
    (395) scope -> . pointer DOT
    (190) intnumber -> . INTNUMBER_DEC
    (191) intnumber -> . SIGNED_INTNUMBER_DEC
    (192) intnumber -> . INTNUMBER_BIN
    (193) intnumber -> . SIGNED_INTNUMBER_BIN
    (194) intnumber -> . INTNUMBER_OCT
    (195) intnumber -> . SIGNED_INTNUMBER_OCT
    (196) intnumber -> . INTNUMBER_HEX
    (197) intnumber -> . SIGNED_INTNUMBER_HEX
    (189) floatnumber -> . FLOATNUMBER
    (198) stringliteral -> . STRING_LITERAL

    ENDCASE         shift and go to state 762
    DEFAULT         shift and go to state 689
    MINUS           shift and go to state 88
    PLUS            shift and go to state 89
    LNOT            shift and go to state 90
    NOT             shift and go to state 91
    AND             shift and go to state 92
    NAND            shift and go to state 93
    NOR             shift and go to state 94
    OR              shift and go to state 95
    XOR             shift and go to state 96
    XNOR            shift and go to state 97
    LPAREN          shift and go to state 85
    LBRACE          shift and go to state 106
    DOLLER          shift and go to state 107
    ID              shift and go to state 86
    INTNUMBER_DEC   shift and go to state 112
    SIGNED_INTNUMBER_DEC shift and go to state 113
    INTNUMBER_BIN   shift and go to state 114
    SIGNED_INTNUMBER_BIN shift and go to state 115
    INTNUMBER_OCT   shift and go to state 116
    SIGNED_INTNUMBER_OCT shift and go to state 117
    INTNUMBER_HEX   shift and go to state 118
    SIGNED_INTNUMBER_HEX shift and go to state 119
    FLOATNUMBER     shift and go to state 120
    STRING_LITERAL  shift and go to state 121

    casecontent_statement          shift and go to state 736
    casecontent_condition          shift and go to state 688
    expression                     shift and go to state 690
    concat                         shift and go to state 98
    repeat                         shift and go to state 99
    partselect                     shift and go to state 100
    pointer                        shift and go to state 101
    functioncall                   shift and go to state 102
    systemcall                     shift and go to state 103
    identifier                     shift and go to state 104
    const_expression               shift and go to state 105
    scope                          shift and go to state 108
    intnumber                      shift and go to state 109
    floatnumber                    shift and go to state 110
    stringliteral                  shift and go to state 111

state 742

    (270) for_statement -> FOR LPAREN forpre forcond forpost RPAREN . forcontent_statement
    (277) forcontent_statement -> . basic_statement
    (221) basic_statement -> . if_statement
    (222) basic_statement -> . case_statement
    (223) basic_statement -> . casex_statement
    (224) basic_statement -> . unique_case_statement
    (225) basic_statement -> . for_statement
    (226) basic_statement -> . while_statement
    (227) basic_statement -> . event_statement
    (228) basic_statement -> . wait_statement
    (229) basic_statement -> . forever_statement
    (230) basic_statement -> . block
    (231) basic_statement -> . namedblock
    (232) basic_statement -> . parallelblock
    (233) basic_statement -> . blocking_substitution
    (234) basic_statement -> . nonblocking_substitution
    (235) basic_statement -> . single_statement
    (262) if_statement -> . IF LPAREN cond RPAREN true_statement ELSE else_statement
    (263) if_statement -> . IF LPAREN cond RPAREN true_statement
    (264) if_statement -> . delays IF LPAREN cond RPAREN true_statement ELSE else_statement
    (265) if_statement -> . delays IF LPAREN cond RPAREN true_statement
    (280) case_statement -> . CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE
    (281) casex_statement -> . CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE
    (282) unique_case_statement -> . UNIQUE CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE
    (270) for_statement -> . FOR LPAREN forpre forcond forpost RPAREN forcontent_statement
    (278) while_statement -> . WHILE LPAREN cond RPAREN whilecontent_statement
    (292) event_statement -> . senslist SEMICOLON
    (293) wait_statement -> . WAIT LPAREN cond RPAREN waitcontent_statement
    (296) forever_statement -> . FOREVER basic_statement
    (245) block -> . BEGIN block_statements END
    (246) block -> . BEGIN END
    (250) namedblock -> . BEGIN COLON ID namedblock_statements END
    (251) namedblock -> . BEGIN COLON ID END
    (260) parallelblock -> . FORK block_statements JOIN
    (261) parallelblock -> . FORK JOIN
    (237) blocking_substitution -> . delays lvalue EQUALS delays rvalue SEMICOLON
    (239) nonblocking_substitution -> . delays lvalue LE delays rvalue SEMICOLON
    (397) single_statement -> . DELAY expression SEMICOLON
    (398) single_statement -> . systemcall SEMICOLON
    (399) single_statement -> . disable SEMICOLON
    (240) delays -> . DELAY LPAREN expression RPAREN
    (241) delays -> . DELAY identifier
    (242) delays -> . DELAY intnumber
    (243) delays -> . DELAY floatnumber
    (244) delays -> . empty
    (202) senslist -> . AT LPAREN edgesigs RPAREN
    (209) senslist -> . empty
    (210) senslist -> . AT levelsig
    (211) senslist -> . AT LPAREN levelsigs RPAREN
    (219) senslist -> . AT TIMES
    (220) senslist -> . AT LPAREN TIMES RPAREN
    (351) systemcall -> . DOLLER ID
    (352) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (353) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (396) disable -> . DISABLE ID
    (400) empty -> .

  ! shift/reduce conflict for IF resolved as shift
    IF              shift and go to state 192
    CASE            shift and go to state 194
    CASEX           shift and go to state 195
    UNIQUE          shift and go to state 196
    FOR             shift and go to state 197
    WHILE           shift and go to state 198
    WAIT            shift and go to state 200
    FOREVER         shift and go to state 201
    BEGIN           shift and go to state 202
    FORK            shift and go to state 203
    DELAY           shift and go to state 204
    AT              shift and go to state 171
    DOLLER          shift and go to state 107
    DISABLE         shift and go to state 208
    LBRACE          reduce using rule 400 (empty -> .)
    ID              reduce using rule 400 (empty -> .)
    SEMICOLON       reduce using rule 400 (empty -> .)

  ! IF              [ reduce using rule 400 (empty -> .) ]

    forcontent_statement           shift and go to state 763
    basic_statement                shift and go to state 764
    if_statement                   shift and go to state 177
    case_statement                 shift and go to state 178
    casex_statement                shift and go to state 179
    unique_case_statement          shift and go to state 180
    for_statement                  shift and go to state 181
    while_statement                shift and go to state 182
    event_statement                shift and go to state 183
    wait_statement                 shift and go to state 184
    forever_statement              shift and go to state 185
    block                          shift and go to state 186
    namedblock                     shift and go to state 187
    parallelblock                  shift and go to state 188
    blocking_substitution          shift and go to state 189
    nonblocking_substitution       shift and go to state 190
    single_statement               shift and go to state 191
    delays                         shift and go to state 193
    senslist                       shift and go to state 199
    systemcall                     shift and go to state 205
    disable                        shift and go to state 206
    empty                          shift and go to state 207

state 743

    (302) instance_body -> ID width LPAREN instance_ports RPAREN .

    SEMICOLON       reduce using rule 302 (instance_body -> ID width LPAREN instance_ports RPAREN .)
    COMMA           reduce using rule 302 (instance_body -> ID width LPAREN instance_ports RPAREN .)


state 744

    (317) param_arg -> DOT ID LPAREN expression . RPAREN
    (140) expression -> expression . POWER expression
    (141) expression -> expression . TIMES expression
    (142) expression -> expression . DIVIDE expression
    (143) expression -> expression . MOD expression
    (144) expression -> expression . PLUS expression
    (145) expression -> expression . MINUS expression
    (146) expression -> expression . LSHIFT expression
    (147) expression -> expression . RSHIFT expression
    (148) expression -> expression . LSHIFTA expression
    (149) expression -> expression . RSHIFTA expression
    (150) expression -> expression . LT expression
    (151) expression -> expression . GT expression
    (152) expression -> expression . LE expression
    (153) expression -> expression . GE expression
    (154) expression -> expression . EQ expression
    (155) expression -> expression . NE expression
    (156) expression -> expression . EQL expression
    (157) expression -> expression . NEL expression
    (158) expression -> expression . AND expression
    (159) expression -> expression . XOR expression
    (160) expression -> expression . XNOR expression
    (161) expression -> expression . OR expression
    (162) expression -> expression . LAND expression
    (163) expression -> expression . LOR expression
    (164) expression -> expression . COND expression COLON expression

    RPAREN          shift and go to state 765
    POWER           shift and go to state 236
    TIMES           shift and go to state 398
    DIVIDE          shift and go to state 237
    MOD             shift and go to state 238
    PLUS            shift and go to state 239
    MINUS           shift and go to state 240
    LSHIFT          shift and go to state 241
    RSHIFT          shift and go to state 242
    LSHIFTA         shift and go to state 243
    RSHIFTA         shift and go to state 244
    LT              shift and go to state 245
    GT              shift and go to state 246
    LE              shift and go to state 247
    GE              shift and go to state 248
    EQ              shift and go to state 249
    NE              shift and go to state 250
    EQL             shift and go to state 251
    NEL             shift and go to state 252
    AND             shift and go to state 253
    XOR             shift and go to state 254
    XNOR            shift and go to state 255
    OR              shift and go to state 256
    LAND            shift and go to state 257
    LOR             shift and go to state 258
    COND            shift and go to state 259


state 745

    (326) instance_port_arg -> DOT ID LPAREN identifier RPAREN .

    COMMA           reduce using rule 326 (instance_port_arg -> DOT ID LPAREN identifier RPAREN .)
    RPAREN          reduce using rule 326 (instance_port_arg -> DOT ID LPAREN identifier RPAREN .)


state 746

    (327) instance_port_arg -> DOT ID LPAREN expression RPAREN .

    COMMA           reduce using rule 327 (instance_port_arg -> DOT ID LPAREN expression RPAREN .)
    RPAREN          reduce using rule 327 (instance_port_arg -> DOT ID LPAREN expression RPAREN .)


state 747

    (342) generate_if -> IF LPAREN cond RPAREN gif_true_item ELSE gif_false_item .

    ENDGENERATE     reduce using rule 342 (generate_if -> IF LPAREN cond RPAREN gif_true_item ELSE gif_false_item .)
    IF              reduce using rule 342 (generate_if -> IF LPAREN cond RPAREN gif_true_item ELSE gif_false_item .)
    FOR             reduce using rule 342 (generate_if -> IF LPAREN cond RPAREN gif_true_item ELSE gif_false_item .)
    INTEGER         reduce using rule 342 (generate_if -> IF LPAREN cond RPAREN gif_true_item ELSE gif_false_item .)
    REAL            reduce using rule 342 (generate_if -> IF LPAREN cond RPAREN gif_true_item ELSE gif_false_item .)
    PARAMETER       reduce using rule 342 (generate_if -> IF LPAREN cond RPAREN gif_true_item ELSE gif_false_item .)
    LOCALPARAM      reduce using rule 342 (generate_if -> IF LPAREN cond RPAREN gif_true_item ELSE gif_false_item .)
    GENVAR          reduce using rule 342 (generate_if -> IF LPAREN cond RPAREN gif_true_item ELSE gif_false_item .)
    ASSIGN          reduce using rule 342 (generate_if -> IF LPAREN cond RPAREN gif_true_item ELSE gif_false_item .)
    ALWAYS          reduce using rule 342 (generate_if -> IF LPAREN cond RPAREN gif_true_item ELSE gif_false_item .)
    ALWAYS_FF       reduce using rule 342 (generate_if -> IF LPAREN cond RPAREN gif_true_item ELSE gif_false_item .)
    ALWAYS_COMB     reduce using rule 342 (generate_if -> IF LPAREN cond RPAREN gif_true_item ELSE gif_false_item .)
    INITIAL         reduce using rule 342 (generate_if -> IF LPAREN cond RPAREN gif_true_item ELSE gif_false_item .)
    ID              reduce using rule 342 (generate_if -> IF LPAREN cond RPAREN gif_true_item ELSE gif_false_item .)
    SENS_OR         reduce using rule 342 (generate_if -> IF LPAREN cond RPAREN gif_true_item ELSE gif_false_item .)
    FUNCTION        reduce using rule 342 (generate_if -> IF LPAREN cond RPAREN gif_true_item ELSE gif_false_item .)
    TASK            reduce using rule 342 (generate_if -> IF LPAREN cond RPAREN gif_true_item ELSE gif_false_item .)
    LPAREN          reduce using rule 342 (generate_if -> IF LPAREN cond RPAREN gif_true_item ELSE gif_false_item .)
    INPUT           reduce using rule 342 (generate_if -> IF LPAREN cond RPAREN gif_true_item ELSE gif_false_item .)
    OUTPUT          reduce using rule 342 (generate_if -> IF LPAREN cond RPAREN gif_true_item ELSE gif_false_item .)
    INOUT           reduce using rule 342 (generate_if -> IF LPAREN cond RPAREN gif_true_item ELSE gif_false_item .)
    TRI             reduce using rule 342 (generate_if -> IF LPAREN cond RPAREN gif_true_item ELSE gif_false_item .)
    REG             reduce using rule 342 (generate_if -> IF LPAREN cond RPAREN gif_true_item ELSE gif_false_item .)
    LOGIC           reduce using rule 342 (generate_if -> IF LPAREN cond RPAREN gif_true_item ELSE gif_false_item .)
    WIRE            reduce using rule 342 (generate_if -> IF LPAREN cond RPAREN gif_true_item ELSE gif_false_item .)
    SIGNED          reduce using rule 342 (generate_if -> IF LPAREN cond RPAREN gif_true_item ELSE gif_false_item .)
    SUPPLY0         reduce using rule 342 (generate_if -> IF LPAREN cond RPAREN gif_true_item ELSE gif_false_item .)
    SUPPLY1         reduce using rule 342 (generate_if -> IF LPAREN cond RPAREN gif_true_item ELSE gif_false_item .)
    ELSE            reduce using rule 342 (generate_if -> IF LPAREN cond RPAREN gif_true_item ELSE gif_false_item .)
    END             reduce using rule 342 (generate_if -> IF LPAREN cond RPAREN gif_true_item ELSE gif_false_item .)


state 748

    (346) gif_false_item -> generate_item .

    ELSE            reduce using rule 346 (gif_false_item -> generate_item .)
    ENDGENERATE     reduce using rule 346 (gif_false_item -> generate_item .)
    IF              reduce using rule 346 (gif_false_item -> generate_item .)
    FOR             reduce using rule 346 (gif_false_item -> generate_item .)
    INTEGER         reduce using rule 346 (gif_false_item -> generate_item .)
    REAL            reduce using rule 346 (gif_false_item -> generate_item .)
    PARAMETER       reduce using rule 346 (gif_false_item -> generate_item .)
    LOCALPARAM      reduce using rule 346 (gif_false_item -> generate_item .)
    GENVAR          reduce using rule 346 (gif_false_item -> generate_item .)
    ASSIGN          reduce using rule 346 (gif_false_item -> generate_item .)
    ALWAYS          reduce using rule 346 (gif_false_item -> generate_item .)
    ALWAYS_FF       reduce using rule 346 (gif_false_item -> generate_item .)
    ALWAYS_COMB     reduce using rule 346 (gif_false_item -> generate_item .)
    INITIAL         reduce using rule 346 (gif_false_item -> generate_item .)
    ID              reduce using rule 346 (gif_false_item -> generate_item .)
    SENS_OR         reduce using rule 346 (gif_false_item -> generate_item .)
    FUNCTION        reduce using rule 346 (gif_false_item -> generate_item .)
    TASK            reduce using rule 346 (gif_false_item -> generate_item .)
    LPAREN          reduce using rule 346 (gif_false_item -> generate_item .)
    INPUT           reduce using rule 346 (gif_false_item -> generate_item .)
    OUTPUT          reduce using rule 346 (gif_false_item -> generate_item .)
    INOUT           reduce using rule 346 (gif_false_item -> generate_item .)
    TRI             reduce using rule 346 (gif_false_item -> generate_item .)
    REG             reduce using rule 346 (gif_false_item -> generate_item .)
    LOGIC           reduce using rule 346 (gif_false_item -> generate_item .)
    WIRE            reduce using rule 346 (gif_false_item -> generate_item .)
    SIGNED          reduce using rule 346 (gif_false_item -> generate_item .)
    SUPPLY0         reduce using rule 346 (gif_false_item -> generate_item .)
    SUPPLY1         reduce using rule 346 (gif_false_item -> generate_item .)
    END             reduce using rule 346 (gif_false_item -> generate_item .)


state 749

    (347) gif_false_item -> generate_block .

    ELSE            reduce using rule 347 (gif_false_item -> generate_block .)
    ENDGENERATE     reduce using rule 347 (gif_false_item -> generate_block .)
    IF              reduce using rule 347 (gif_false_item -> generate_block .)
    FOR             reduce using rule 347 (gif_false_item -> generate_block .)
    INTEGER         reduce using rule 347 (gif_false_item -> generate_block .)
    REAL            reduce using rule 347 (gif_false_item -> generate_block .)
    PARAMETER       reduce using rule 347 (gif_false_item -> generate_block .)
    LOCALPARAM      reduce using rule 347 (gif_false_item -> generate_block .)
    GENVAR          reduce using rule 347 (gif_false_item -> generate_block .)
    ASSIGN          reduce using rule 347 (gif_false_item -> generate_block .)
    ALWAYS          reduce using rule 347 (gif_false_item -> generate_block .)
    ALWAYS_FF       reduce using rule 347 (gif_false_item -> generate_block .)
    ALWAYS_COMB     reduce using rule 347 (gif_false_item -> generate_block .)
    INITIAL         reduce using rule 347 (gif_false_item -> generate_block .)
    ID              reduce using rule 347 (gif_false_item -> generate_block .)
    SENS_OR         reduce using rule 347 (gif_false_item -> generate_block .)
    FUNCTION        reduce using rule 347 (gif_false_item -> generate_block .)
    TASK            reduce using rule 347 (gif_false_item -> generate_block .)
    LPAREN          reduce using rule 347 (gif_false_item -> generate_block .)
    INPUT           reduce using rule 347 (gif_false_item -> generate_block .)
    OUTPUT          reduce using rule 347 (gif_false_item -> generate_block .)
    INOUT           reduce using rule 347 (gif_false_item -> generate_block .)
    TRI             reduce using rule 347 (gif_false_item -> generate_block .)
    REG             reduce using rule 347 (gif_false_item -> generate_block .)
    LOGIC           reduce using rule 347 (gif_false_item -> generate_block .)
    WIRE            reduce using rule 347 (gif_false_item -> generate_block .)
    SIGNED          reduce using rule 347 (gif_false_item -> generate_block .)
    SUPPLY0         reduce using rule 347 (gif_false_item -> generate_block .)
    SUPPLY1         reduce using rule 347 (gif_false_item -> generate_block .)
    END             reduce using rule 347 (gif_false_item -> generate_block .)


state 750

    (340) generate_block -> BEGIN generate_items END .

    ELSE            reduce using rule 340 (generate_block -> BEGIN generate_items END .)
    ENDGENERATE     reduce using rule 340 (generate_block -> BEGIN generate_items END .)
    IF              reduce using rule 340 (generate_block -> BEGIN generate_items END .)
    FOR             reduce using rule 340 (generate_block -> BEGIN generate_items END .)
    INTEGER         reduce using rule 340 (generate_block -> BEGIN generate_items END .)
    REAL            reduce using rule 340 (generate_block -> BEGIN generate_items END .)
    PARAMETER       reduce using rule 340 (generate_block -> BEGIN generate_items END .)
    LOCALPARAM      reduce using rule 340 (generate_block -> BEGIN generate_items END .)
    GENVAR          reduce using rule 340 (generate_block -> BEGIN generate_items END .)
    ASSIGN          reduce using rule 340 (generate_block -> BEGIN generate_items END .)
    ALWAYS          reduce using rule 340 (generate_block -> BEGIN generate_items END .)
    ALWAYS_FF       reduce using rule 340 (generate_block -> BEGIN generate_items END .)
    ALWAYS_COMB     reduce using rule 340 (generate_block -> BEGIN generate_items END .)
    INITIAL         reduce using rule 340 (generate_block -> BEGIN generate_items END .)
    ID              reduce using rule 340 (generate_block -> BEGIN generate_items END .)
    SENS_OR         reduce using rule 340 (generate_block -> BEGIN generate_items END .)
    FUNCTION        reduce using rule 340 (generate_block -> BEGIN generate_items END .)
    TASK            reduce using rule 340 (generate_block -> BEGIN generate_items END .)
    LPAREN          reduce using rule 340 (generate_block -> BEGIN generate_items END .)
    INPUT           reduce using rule 340 (generate_block -> BEGIN generate_items END .)
    OUTPUT          reduce using rule 340 (generate_block -> BEGIN generate_items END .)
    INOUT           reduce using rule 340 (generate_block -> BEGIN generate_items END .)
    TRI             reduce using rule 340 (generate_block -> BEGIN generate_items END .)
    REG             reduce using rule 340 (generate_block -> BEGIN generate_items END .)
    LOGIC           reduce using rule 340 (generate_block -> BEGIN generate_items END .)
    WIRE            reduce using rule 340 (generate_block -> BEGIN generate_items END .)
    SIGNED          reduce using rule 340 (generate_block -> BEGIN generate_items END .)
    SUPPLY0         reduce using rule 340 (generate_block -> BEGIN generate_items END .)
    SUPPLY1         reduce using rule 340 (generate_block -> BEGIN generate_items END .)
    END             reduce using rule 340 (generate_block -> BEGIN generate_items END .)


state 751

    (341) generate_block -> BEGIN COLON ID . generate_items END
    (334) generate_items -> . empty
    (335) generate_items -> . generate_items generate_item
    (336) generate_items -> . generate_item
    (400) empty -> .
    (337) generate_item -> . standard_item
    (338) generate_item -> . generate_if
    (339) generate_item -> . generate_for
    (61) standard_item -> . decl
    (62) standard_item -> . integerdecl
    (63) standard_item -> . realdecl
    (64) standard_item -> . declassign
    (65) standard_item -> . parameterdecl
    (66) standard_item -> . localparamdecl
    (67) standard_item -> . genvardecl
    (68) standard_item -> . assignment
    (69) standard_item -> . always
    (70) standard_item -> . always_ff
    (71) standard_item -> . always_comb
    (72) standard_item -> . initial
    (73) standard_item -> . instance
    (74) standard_item -> . function
    (75) standard_item -> . task
    (76) standard_item -> . pragma
    (342) generate_if -> . IF LPAREN cond RPAREN gif_true_item ELSE gif_false_item
    (343) generate_if -> . IF LPAREN cond RPAREN gif_true_item
    (348) generate_for -> . FOR LPAREN forpre forcond forpost RPAREN generate_forcontent
    (77) decl -> . sigtypes declnamelist SEMICOLON
    (78) decl -> . sigtypes width declnamelist SEMICOLON
    (87) integerdecl -> . INTEGER integernamelist SEMICOLON
    (88) integerdecl -> . INTEGER SIGNED integernamelist SEMICOLON
    (92) realdecl -> . REAL realnamelist SEMICOLON
    (83) declassign -> . sigtypes declassign_element SEMICOLON
    (84) declassign -> . sigtypes width declassign_element SEMICOLON
    (96) parameterdecl -> . PARAMETER param_substitution_list SEMICOLON
    (97) parameterdecl -> . PARAMETER SIGNED param_substitution_list SEMICOLON
    (98) parameterdecl -> . PARAMETER width param_substitution_list SEMICOLON
    (99) parameterdecl -> . PARAMETER SIGNED width param_substitution_list SEMICOLON
    (100) parameterdecl -> . PARAMETER INTEGER param_substitution_list SEMICOLON
    (101) localparamdecl -> . LOCALPARAM param_substitution_list SEMICOLON
    (102) localparamdecl -> . LOCALPARAM SIGNED param_substitution_list SEMICOLON
    (103) localparamdecl -> . LOCALPARAM width param_substitution_list SEMICOLON
    (104) localparamdecl -> . LOCALPARAM SIGNED width param_substitution_list SEMICOLON
    (105) localparamdecl -> . LOCALPARAM INTEGER param_substitution_list SEMICOLON
    (329) genvardecl -> . GENVAR genvarlist SEMICOLON
    (109) assignment -> . ASSIGN lvalue EQUALS rvalue SEMICOLON
    (110) assignment -> . ASSIGN delays lvalue EQUALS delays rvalue SEMICOLON
    (199) always -> . ALWAYS senslist always_statement
    (200) always_ff -> . ALWAYS_FF senslist always_statement
    (201) always_comb -> . ALWAYS_COMB senslist always_statement
    (290) initial -> . INITIAL initial_statement
    (297) instance -> . ID parameterlist instance_bodylist SEMICOLON
    (298) instance -> . SENS_OR parameterlist instance_bodylist SEMICOLON
    (303) instance -> . ID instance_bodylist_noname SEMICOLON
    (304) instance -> . SENS_OR instance_bodylist_noname SEMICOLON
    (358) function -> . FUNCTION width ID SEMICOLON function_statement ENDFUNCTION
    (359) function -> . FUNCTION ID SEMICOLON function_statement ENDFUNCTION
    (377) task -> . TASK ID SEMICOLON task_statement ENDTASK
    (7) pragma -> . LPAREN TIMES ID EQUALS expression TIMES RPAREN
    (8) pragma -> . LPAREN TIMES ID TIMES RPAREN
    (35) sigtypes -> . sigtypes sigtype
    (36) sigtypes -> . sigtype
    (37) sigtype -> . INPUT
    (38) sigtype -> . OUTPUT
    (39) sigtype -> . INOUT
    (40) sigtype -> . TRI
    (41) sigtype -> . REG
    (42) sigtype -> . LOGIC
    (43) sigtype -> . WIRE
    (44) sigtype -> . SIGNED
    (45) sigtype -> . SUPPLY0
    (46) sigtype -> . SUPPLY1

  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for REAL resolved as shift
  ! shift/reduce conflict for PARAMETER resolved as shift
  ! shift/reduce conflict for LOCALPARAM resolved as shift
  ! shift/reduce conflict for GENVAR resolved as shift
  ! shift/reduce conflict for ASSIGN resolved as shift
  ! shift/reduce conflict for ALWAYS resolved as shift
  ! shift/reduce conflict for ALWAYS_FF resolved as shift
  ! shift/reduce conflict for ALWAYS_COMB resolved as shift
  ! shift/reduce conflict for INITIAL resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for SENS_OR resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for TASK resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for INPUT resolved as shift
  ! shift/reduce conflict for OUTPUT resolved as shift
  ! shift/reduce conflict for INOUT resolved as shift
  ! shift/reduce conflict for TRI resolved as shift
  ! shift/reduce conflict for REG resolved as shift
  ! shift/reduce conflict for LOGIC resolved as shift
  ! shift/reduce conflict for WIRE resolved as shift
  ! shift/reduce conflict for SIGNED resolved as shift
  ! shift/reduce conflict for SUPPLY0 resolved as shift
  ! shift/reduce conflict for SUPPLY1 resolved as shift
    END             reduce using rule 400 (empty -> .)
    IF              shift and go to state 130
    FOR             shift and go to state 131
    INTEGER         shift and go to state 47
    REAL            shift and go to state 49
    PARAMETER       shift and go to state 50
    LOCALPARAM      shift and go to state 51
    GENVAR          shift and go to state 52
    ASSIGN          shift and go to state 53
    ALWAYS          shift and go to state 54
    ALWAYS_FF       shift and go to state 55
    ALWAYS_COMB     shift and go to state 56
    INITIAL         shift and go to state 57
    ID              shift and go to state 58
    SENS_OR         shift and go to state 59
    FUNCTION        shift and go to state 60
    TASK            shift and go to state 61
    LPAREN          shift and go to state 8
    INPUT           shift and go to state 63
    OUTPUT          shift and go to state 64
    INOUT           shift and go to state 65
    TRI             shift and go to state 66
    REG             shift and go to state 67
    LOGIC           shift and go to state 68
    WIRE            shift and go to state 69
    SIGNED          shift and go to state 48
    SUPPLY0         shift and go to state 70
    SUPPLY1         shift and go to state 71

  ! IF              [ reduce using rule 400 (empty -> .) ]
  ! FOR             [ reduce using rule 400 (empty -> .) ]
  ! INTEGER         [ reduce using rule 400 (empty -> .) ]
  ! REAL            [ reduce using rule 400 (empty -> .) ]
  ! PARAMETER       [ reduce using rule 400 (empty -> .) ]
  ! LOCALPARAM      [ reduce using rule 400 (empty -> .) ]
  ! GENVAR          [ reduce using rule 400 (empty -> .) ]
  ! ASSIGN          [ reduce using rule 400 (empty -> .) ]
  ! ALWAYS          [ reduce using rule 400 (empty -> .) ]
  ! ALWAYS_FF       [ reduce using rule 400 (empty -> .) ]
  ! ALWAYS_COMB     [ reduce using rule 400 (empty -> .) ]
  ! INITIAL         [ reduce using rule 400 (empty -> .) ]
  ! ID              [ reduce using rule 400 (empty -> .) ]
  ! SENS_OR         [ reduce using rule 400 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 400 (empty -> .) ]
  ! TASK            [ reduce using rule 400 (empty -> .) ]
  ! LPAREN          [ reduce using rule 400 (empty -> .) ]
  ! INPUT           [ reduce using rule 400 (empty -> .) ]
  ! OUTPUT          [ reduce using rule 400 (empty -> .) ]
  ! INOUT           [ reduce using rule 400 (empty -> .) ]
  ! TRI             [ reduce using rule 400 (empty -> .) ]
  ! REG             [ reduce using rule 400 (empty -> .) ]
  ! LOGIC           [ reduce using rule 400 (empty -> .) ]
  ! WIRE            [ reduce using rule 400 (empty -> .) ]
  ! SIGNED          [ reduce using rule 400 (empty -> .) ]
  ! SUPPLY0         [ reduce using rule 400 (empty -> .) ]
  ! SUPPLY1         [ reduce using rule 400 (empty -> .) ]

    generate_items                 shift and go to state 766
    empty                          shift and go to state 125
    generate_item                  shift and go to state 126
    standard_item                  shift and go to state 127
    generate_if                    shift and go to state 128
    generate_for                   shift and go to state 129
    decl                           shift and go to state 29
    integerdecl                    shift and go to state 30
    realdecl                       shift and go to state 31
    declassign                     shift and go to state 32
    parameterdecl                  shift and go to state 33
    localparamdecl                 shift and go to state 34
    genvardecl                     shift and go to state 35
    assignment                     shift and go to state 36
    always                         shift and go to state 37
    always_ff                      shift and go to state 38
    always_comb                    shift and go to state 39
    initial                        shift and go to state 40
    instance                       shift and go to state 41
    function                       shift and go to state 42
    task                           shift and go to state 43
    pragma                         shift and go to state 44
    sigtypes                       shift and go to state 46
    sigtype                        shift and go to state 62

state 752

    (348) generate_for -> FOR LPAREN forpre forcond forpost RPAREN generate_forcontent .

    ENDGENERATE     reduce using rule 348 (generate_for -> FOR LPAREN forpre forcond forpost RPAREN generate_forcontent .)
    IF              reduce using rule 348 (generate_for -> FOR LPAREN forpre forcond forpost RPAREN generate_forcontent .)
    FOR             reduce using rule 348 (generate_for -> FOR LPAREN forpre forcond forpost RPAREN generate_forcontent .)
    INTEGER         reduce using rule 348 (generate_for -> FOR LPAREN forpre forcond forpost RPAREN generate_forcontent .)
    REAL            reduce using rule 348 (generate_for -> FOR LPAREN forpre forcond forpost RPAREN generate_forcontent .)
    PARAMETER       reduce using rule 348 (generate_for -> FOR LPAREN forpre forcond forpost RPAREN generate_forcontent .)
    LOCALPARAM      reduce using rule 348 (generate_for -> FOR LPAREN forpre forcond forpost RPAREN generate_forcontent .)
    GENVAR          reduce using rule 348 (generate_for -> FOR LPAREN forpre forcond forpost RPAREN generate_forcontent .)
    ASSIGN          reduce using rule 348 (generate_for -> FOR LPAREN forpre forcond forpost RPAREN generate_forcontent .)
    ALWAYS          reduce using rule 348 (generate_for -> FOR LPAREN forpre forcond forpost RPAREN generate_forcontent .)
    ALWAYS_FF       reduce using rule 348 (generate_for -> FOR LPAREN forpre forcond forpost RPAREN generate_forcontent .)
    ALWAYS_COMB     reduce using rule 348 (generate_for -> FOR LPAREN forpre forcond forpost RPAREN generate_forcontent .)
    INITIAL         reduce using rule 348 (generate_for -> FOR LPAREN forpre forcond forpost RPAREN generate_forcontent .)
    ID              reduce using rule 348 (generate_for -> FOR LPAREN forpre forcond forpost RPAREN generate_forcontent .)
    SENS_OR         reduce using rule 348 (generate_for -> FOR LPAREN forpre forcond forpost RPAREN generate_forcontent .)
    FUNCTION        reduce using rule 348 (generate_for -> FOR LPAREN forpre forcond forpost RPAREN generate_forcontent .)
    TASK            reduce using rule 348 (generate_for -> FOR LPAREN forpre forcond forpost RPAREN generate_forcontent .)
    LPAREN          reduce using rule 348 (generate_for -> FOR LPAREN forpre forcond forpost RPAREN generate_forcontent .)
    INPUT           reduce using rule 348 (generate_for -> FOR LPAREN forpre forcond forpost RPAREN generate_forcontent .)
    OUTPUT          reduce using rule 348 (generate_for -> FOR LPAREN forpre forcond forpost RPAREN generate_forcontent .)
    INOUT           reduce using rule 348 (generate_for -> FOR LPAREN forpre forcond forpost RPAREN generate_forcontent .)
    TRI             reduce using rule 348 (generate_for -> FOR LPAREN forpre forcond forpost RPAREN generate_forcontent .)
    REG             reduce using rule 348 (generate_for -> FOR LPAREN forpre forcond forpost RPAREN generate_forcontent .)
    LOGIC           reduce using rule 348 (generate_for -> FOR LPAREN forpre forcond forpost RPAREN generate_forcontent .)
    WIRE            reduce using rule 348 (generate_for -> FOR LPAREN forpre forcond forpost RPAREN generate_forcontent .)
    SIGNED          reduce using rule 348 (generate_for -> FOR LPAREN forpre forcond forpost RPAREN generate_forcontent .)
    SUPPLY0         reduce using rule 348 (generate_for -> FOR LPAREN forpre forcond forpost RPAREN generate_forcontent .)
    SUPPLY1         reduce using rule 348 (generate_for -> FOR LPAREN forpre forcond forpost RPAREN generate_forcontent .)
    ELSE            reduce using rule 348 (generate_for -> FOR LPAREN forpre forcond forpost RPAREN generate_forcontent .)
    END             reduce using rule 348 (generate_for -> FOR LPAREN forpre forcond forpost RPAREN generate_forcontent .)


state 753

    (349) generate_forcontent -> generate_item .

    ELSE            reduce using rule 349 (generate_forcontent -> generate_item .)
    ENDGENERATE     reduce using rule 349 (generate_forcontent -> generate_item .)
    IF              reduce using rule 349 (generate_forcontent -> generate_item .)
    FOR             reduce using rule 349 (generate_forcontent -> generate_item .)
    INTEGER         reduce using rule 349 (generate_forcontent -> generate_item .)
    REAL            reduce using rule 349 (generate_forcontent -> generate_item .)
    PARAMETER       reduce using rule 349 (generate_forcontent -> generate_item .)
    LOCALPARAM      reduce using rule 349 (generate_forcontent -> generate_item .)
    GENVAR          reduce using rule 349 (generate_forcontent -> generate_item .)
    ASSIGN          reduce using rule 349 (generate_forcontent -> generate_item .)
    ALWAYS          reduce using rule 349 (generate_forcontent -> generate_item .)
    ALWAYS_FF       reduce using rule 349 (generate_forcontent -> generate_item .)
    ALWAYS_COMB     reduce using rule 349 (generate_forcontent -> generate_item .)
    INITIAL         reduce using rule 349 (generate_forcontent -> generate_item .)
    ID              reduce using rule 349 (generate_forcontent -> generate_item .)
    SENS_OR         reduce using rule 349 (generate_forcontent -> generate_item .)
    FUNCTION        reduce using rule 349 (generate_forcontent -> generate_item .)
    TASK            reduce using rule 349 (generate_forcontent -> generate_item .)
    LPAREN          reduce using rule 349 (generate_forcontent -> generate_item .)
    INPUT           reduce using rule 349 (generate_forcontent -> generate_item .)
    OUTPUT          reduce using rule 349 (generate_forcontent -> generate_item .)
    INOUT           reduce using rule 349 (generate_forcontent -> generate_item .)
    TRI             reduce using rule 349 (generate_forcontent -> generate_item .)
    REG             reduce using rule 349 (generate_forcontent -> generate_item .)
    LOGIC           reduce using rule 349 (generate_forcontent -> generate_item .)
    WIRE            reduce using rule 349 (generate_forcontent -> generate_item .)
    SIGNED          reduce using rule 349 (generate_forcontent -> generate_item .)
    SUPPLY0         reduce using rule 349 (generate_forcontent -> generate_item .)
    SUPPLY1         reduce using rule 349 (generate_forcontent -> generate_item .)
    END             reduce using rule 349 (generate_forcontent -> generate_item .)


state 754

    (350) generate_forcontent -> generate_block .

    ELSE            reduce using rule 350 (generate_forcontent -> generate_block .)
    ENDGENERATE     reduce using rule 350 (generate_forcontent -> generate_block .)
    IF              reduce using rule 350 (generate_forcontent -> generate_block .)
    FOR             reduce using rule 350 (generate_forcontent -> generate_block .)
    INTEGER         reduce using rule 350 (generate_forcontent -> generate_block .)
    REAL            reduce using rule 350 (generate_forcontent -> generate_block .)
    PARAMETER       reduce using rule 350 (generate_forcontent -> generate_block .)
    LOCALPARAM      reduce using rule 350 (generate_forcontent -> generate_block .)
    GENVAR          reduce using rule 350 (generate_forcontent -> generate_block .)
    ASSIGN          reduce using rule 350 (generate_forcontent -> generate_block .)
    ALWAYS          reduce using rule 350 (generate_forcontent -> generate_block .)
    ALWAYS_FF       reduce using rule 350 (generate_forcontent -> generate_block .)
    ALWAYS_COMB     reduce using rule 350 (generate_forcontent -> generate_block .)
    INITIAL         reduce using rule 350 (generate_forcontent -> generate_block .)
    ID              reduce using rule 350 (generate_forcontent -> generate_block .)
    SENS_OR         reduce using rule 350 (generate_forcontent -> generate_block .)
    FUNCTION        reduce using rule 350 (generate_forcontent -> generate_block .)
    TASK            reduce using rule 350 (generate_forcontent -> generate_block .)
    LPAREN          reduce using rule 350 (generate_forcontent -> generate_block .)
    INPUT           reduce using rule 350 (generate_forcontent -> generate_block .)
    OUTPUT          reduce using rule 350 (generate_forcontent -> generate_block .)
    INOUT           reduce using rule 350 (generate_forcontent -> generate_block .)
    TRI             reduce using rule 350 (generate_forcontent -> generate_block .)
    REG             reduce using rule 350 (generate_forcontent -> generate_block .)
    LOGIC           reduce using rule 350 (generate_forcontent -> generate_block .)
    WIRE            reduce using rule 350 (generate_forcontent -> generate_block .)
    SIGNED          reduce using rule 350 (generate_forcontent -> generate_block .)
    SUPPLY0         reduce using rule 350 (generate_forcontent -> generate_block .)
    SUPPLY1         reduce using rule 350 (generate_forcontent -> generate_block .)
    END             reduce using rule 350 (generate_forcontent -> generate_block .)


state 755

    (238) blocking_substitution_base -> delays lvalue EQUALS . delays rvalue
    (240) delays -> . DELAY LPAREN expression RPAREN
    (241) delays -> . DELAY identifier
    (242) delays -> . DELAY intnumber
    (243) delays -> . DELAY floatnumber
    (244) delays -> . empty
    (400) empty -> .

    DELAY           shift and go to state 140
    MINUS           reduce using rule 400 (empty -> .)
    PLUS            reduce using rule 400 (empty -> .)
    LNOT            reduce using rule 400 (empty -> .)
    NOT             reduce using rule 400 (empty -> .)
    AND             reduce using rule 400 (empty -> .)
    NAND            reduce using rule 400 (empty -> .)
    NOR             reduce using rule 400 (empty -> .)
    OR              reduce using rule 400 (empty -> .)
    XOR             reduce using rule 400 (empty -> .)
    XNOR            reduce using rule 400 (empty -> .)
    LPAREN          reduce using rule 400 (empty -> .)
    LBRACE          reduce using rule 400 (empty -> .)
    DOLLER          reduce using rule 400 (empty -> .)
    ID              reduce using rule 400 (empty -> .)
    INTNUMBER_DEC   reduce using rule 400 (empty -> .)
    SIGNED_INTNUMBER_DEC reduce using rule 400 (empty -> .)
    INTNUMBER_BIN   reduce using rule 400 (empty -> .)
    SIGNED_INTNUMBER_BIN reduce using rule 400 (empty -> .)
    INTNUMBER_OCT   reduce using rule 400 (empty -> .)
    SIGNED_INTNUMBER_OCT reduce using rule 400 (empty -> .)
    INTNUMBER_HEX   reduce using rule 400 (empty -> .)
    SIGNED_INTNUMBER_HEX reduce using rule 400 (empty -> .)
    FLOATNUMBER     reduce using rule 400 (empty -> .)
    STRING_LITERAL  reduce using rule 400 (empty -> .)

    delays                         shift and go to state 767
    empty                          shift and go to state 141

state 756

    (262) if_statement -> IF LPAREN cond RPAREN true_statement ELSE else_statement .

    ENDMODULE       reduce using rule 262 (if_statement -> IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    GENERATE        reduce using rule 262 (if_statement -> IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    INTEGER         reduce using rule 262 (if_statement -> IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    REAL            reduce using rule 262 (if_statement -> IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    PARAMETER       reduce using rule 262 (if_statement -> IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    LOCALPARAM      reduce using rule 262 (if_statement -> IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    GENVAR          reduce using rule 262 (if_statement -> IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    ASSIGN          reduce using rule 262 (if_statement -> IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    ALWAYS          reduce using rule 262 (if_statement -> IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    ALWAYS_FF       reduce using rule 262 (if_statement -> IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    ALWAYS_COMB     reduce using rule 262 (if_statement -> IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    INITIAL         reduce using rule 262 (if_statement -> IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    ID              reduce using rule 262 (if_statement -> IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    SENS_OR         reduce using rule 262 (if_statement -> IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    FUNCTION        reduce using rule 262 (if_statement -> IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    TASK            reduce using rule 262 (if_statement -> IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    LPAREN          reduce using rule 262 (if_statement -> IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    INPUT           reduce using rule 262 (if_statement -> IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    OUTPUT          reduce using rule 262 (if_statement -> IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    INOUT           reduce using rule 262 (if_statement -> IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    TRI             reduce using rule 262 (if_statement -> IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    REG             reduce using rule 262 (if_statement -> IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    LOGIC           reduce using rule 262 (if_statement -> IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    WIRE            reduce using rule 262 (if_statement -> IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    SIGNED          reduce using rule 262 (if_statement -> IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    SUPPLY0         reduce using rule 262 (if_statement -> IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    SUPPLY1         reduce using rule 262 (if_statement -> IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    ENDGENERATE     reduce using rule 262 (if_statement -> IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    IF              reduce using rule 262 (if_statement -> IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    FOR             reduce using rule 262 (if_statement -> IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    ELSE            reduce using rule 262 (if_statement -> IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    END             reduce using rule 262 (if_statement -> IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    CASE            reduce using rule 262 (if_statement -> IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    CASEX           reduce using rule 262 (if_statement -> IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    UNIQUE          reduce using rule 262 (if_statement -> IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    WHILE           reduce using rule 262 (if_statement -> IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    WAIT            reduce using rule 262 (if_statement -> IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    FOREVER         reduce using rule 262 (if_statement -> IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    BEGIN           reduce using rule 262 (if_statement -> IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    FORK            reduce using rule 262 (if_statement -> IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    DELAY           reduce using rule 262 (if_statement -> IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    AT              reduce using rule 262 (if_statement -> IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    DOLLER          reduce using rule 262 (if_statement -> IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    DISABLE         reduce using rule 262 (if_statement -> IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    LBRACE          reduce using rule 262 (if_statement -> IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    SEMICOLON       reduce using rule 262 (if_statement -> IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    JOIN            reduce using rule 262 (if_statement -> IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    ENDFUNCTION     reduce using rule 262 (if_statement -> IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    ENDTASK         reduce using rule 262 (if_statement -> IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    ENDCASE         reduce using rule 262 (if_statement -> IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    DEFAULT         reduce using rule 262 (if_statement -> IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    MINUS           reduce using rule 262 (if_statement -> IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    PLUS            reduce using rule 262 (if_statement -> IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    LNOT            reduce using rule 262 (if_statement -> IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    NOT             reduce using rule 262 (if_statement -> IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    AND             reduce using rule 262 (if_statement -> IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    NAND            reduce using rule 262 (if_statement -> IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    NOR             reduce using rule 262 (if_statement -> IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    OR              reduce using rule 262 (if_statement -> IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    XOR             reduce using rule 262 (if_statement -> IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    XNOR            reduce using rule 262 (if_statement -> IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    INTNUMBER_DEC   reduce using rule 262 (if_statement -> IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    SIGNED_INTNUMBER_DEC reduce using rule 262 (if_statement -> IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    INTNUMBER_BIN   reduce using rule 262 (if_statement -> IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    SIGNED_INTNUMBER_BIN reduce using rule 262 (if_statement -> IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    INTNUMBER_OCT   reduce using rule 262 (if_statement -> IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    SIGNED_INTNUMBER_OCT reduce using rule 262 (if_statement -> IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    INTNUMBER_HEX   reduce using rule 262 (if_statement -> IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    SIGNED_INTNUMBER_HEX reduce using rule 262 (if_statement -> IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    FLOATNUMBER     reduce using rule 262 (if_statement -> IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    STRING_LITERAL  reduce using rule 262 (if_statement -> IF LPAREN cond RPAREN true_statement ELSE else_statement .)


state 757

    (269) else_statement -> ifcontent_statement .

    ENDMODULE       reduce using rule 269 (else_statement -> ifcontent_statement .)
    GENERATE        reduce using rule 269 (else_statement -> ifcontent_statement .)
    INTEGER         reduce using rule 269 (else_statement -> ifcontent_statement .)
    REAL            reduce using rule 269 (else_statement -> ifcontent_statement .)
    PARAMETER       reduce using rule 269 (else_statement -> ifcontent_statement .)
    LOCALPARAM      reduce using rule 269 (else_statement -> ifcontent_statement .)
    GENVAR          reduce using rule 269 (else_statement -> ifcontent_statement .)
    ASSIGN          reduce using rule 269 (else_statement -> ifcontent_statement .)
    ALWAYS          reduce using rule 269 (else_statement -> ifcontent_statement .)
    ALWAYS_FF       reduce using rule 269 (else_statement -> ifcontent_statement .)
    ALWAYS_COMB     reduce using rule 269 (else_statement -> ifcontent_statement .)
    INITIAL         reduce using rule 269 (else_statement -> ifcontent_statement .)
    ID              reduce using rule 269 (else_statement -> ifcontent_statement .)
    SENS_OR         reduce using rule 269 (else_statement -> ifcontent_statement .)
    FUNCTION        reduce using rule 269 (else_statement -> ifcontent_statement .)
    TASK            reduce using rule 269 (else_statement -> ifcontent_statement .)
    LPAREN          reduce using rule 269 (else_statement -> ifcontent_statement .)
    INPUT           reduce using rule 269 (else_statement -> ifcontent_statement .)
    OUTPUT          reduce using rule 269 (else_statement -> ifcontent_statement .)
    INOUT           reduce using rule 269 (else_statement -> ifcontent_statement .)
    TRI             reduce using rule 269 (else_statement -> ifcontent_statement .)
    REG             reduce using rule 269 (else_statement -> ifcontent_statement .)
    LOGIC           reduce using rule 269 (else_statement -> ifcontent_statement .)
    WIRE            reduce using rule 269 (else_statement -> ifcontent_statement .)
    SIGNED          reduce using rule 269 (else_statement -> ifcontent_statement .)
    SUPPLY0         reduce using rule 269 (else_statement -> ifcontent_statement .)
    SUPPLY1         reduce using rule 269 (else_statement -> ifcontent_statement .)
    ENDGENERATE     reduce using rule 269 (else_statement -> ifcontent_statement .)
    IF              reduce using rule 269 (else_statement -> ifcontent_statement .)
    FOR             reduce using rule 269 (else_statement -> ifcontent_statement .)
    ELSE            reduce using rule 269 (else_statement -> ifcontent_statement .)
    END             reduce using rule 269 (else_statement -> ifcontent_statement .)
    CASE            reduce using rule 269 (else_statement -> ifcontent_statement .)
    CASEX           reduce using rule 269 (else_statement -> ifcontent_statement .)
    UNIQUE          reduce using rule 269 (else_statement -> ifcontent_statement .)
    WHILE           reduce using rule 269 (else_statement -> ifcontent_statement .)
    WAIT            reduce using rule 269 (else_statement -> ifcontent_statement .)
    FOREVER         reduce using rule 269 (else_statement -> ifcontent_statement .)
    BEGIN           reduce using rule 269 (else_statement -> ifcontent_statement .)
    FORK            reduce using rule 269 (else_statement -> ifcontent_statement .)
    DELAY           reduce using rule 269 (else_statement -> ifcontent_statement .)
    AT              reduce using rule 269 (else_statement -> ifcontent_statement .)
    DOLLER          reduce using rule 269 (else_statement -> ifcontent_statement .)
    DISABLE         reduce using rule 269 (else_statement -> ifcontent_statement .)
    LBRACE          reduce using rule 269 (else_statement -> ifcontent_statement .)
    SEMICOLON       reduce using rule 269 (else_statement -> ifcontent_statement .)
    JOIN            reduce using rule 269 (else_statement -> ifcontent_statement .)
    ENDFUNCTION     reduce using rule 269 (else_statement -> ifcontent_statement .)
    ENDTASK         reduce using rule 269 (else_statement -> ifcontent_statement .)
    ENDCASE         reduce using rule 269 (else_statement -> ifcontent_statement .)
    DEFAULT         reduce using rule 269 (else_statement -> ifcontent_statement .)
    MINUS           reduce using rule 269 (else_statement -> ifcontent_statement .)
    PLUS            reduce using rule 269 (else_statement -> ifcontent_statement .)
    LNOT            reduce using rule 269 (else_statement -> ifcontent_statement .)
    NOT             reduce using rule 269 (else_statement -> ifcontent_statement .)
    AND             reduce using rule 269 (else_statement -> ifcontent_statement .)
    NAND            reduce using rule 269 (else_statement -> ifcontent_statement .)
    NOR             reduce using rule 269 (else_statement -> ifcontent_statement .)
    OR              reduce using rule 269 (else_statement -> ifcontent_statement .)
    XOR             reduce using rule 269 (else_statement -> ifcontent_statement .)
    XNOR            reduce using rule 269 (else_statement -> ifcontent_statement .)
    INTNUMBER_DEC   reduce using rule 269 (else_statement -> ifcontent_statement .)
    SIGNED_INTNUMBER_DEC reduce using rule 269 (else_statement -> ifcontent_statement .)
    INTNUMBER_BIN   reduce using rule 269 (else_statement -> ifcontent_statement .)
    SIGNED_INTNUMBER_BIN reduce using rule 269 (else_statement -> ifcontent_statement .)
    INTNUMBER_OCT   reduce using rule 269 (else_statement -> ifcontent_statement .)
    SIGNED_INTNUMBER_OCT reduce using rule 269 (else_statement -> ifcontent_statement .)
    INTNUMBER_HEX   reduce using rule 269 (else_statement -> ifcontent_statement .)
    SIGNED_INTNUMBER_HEX reduce using rule 269 (else_statement -> ifcontent_statement .)
    FLOATNUMBER     reduce using rule 269 (else_statement -> ifcontent_statement .)
    STRING_LITERAL  reduce using rule 269 (else_statement -> ifcontent_statement .)


state 758

    (264) if_statement -> delays IF LPAREN cond RPAREN true_statement ELSE . else_statement
    (269) else_statement -> . ifcontent_statement
    (267) ifcontent_statement -> . basic_statement
    (221) basic_statement -> . if_statement
    (222) basic_statement -> . case_statement
    (223) basic_statement -> . casex_statement
    (224) basic_statement -> . unique_case_statement
    (225) basic_statement -> . for_statement
    (226) basic_statement -> . while_statement
    (227) basic_statement -> . event_statement
    (228) basic_statement -> . wait_statement
    (229) basic_statement -> . forever_statement
    (230) basic_statement -> . block
    (231) basic_statement -> . namedblock
    (232) basic_statement -> . parallelblock
    (233) basic_statement -> . blocking_substitution
    (234) basic_statement -> . nonblocking_substitution
    (235) basic_statement -> . single_statement
    (262) if_statement -> . IF LPAREN cond RPAREN true_statement ELSE else_statement
    (263) if_statement -> . IF LPAREN cond RPAREN true_statement
    (264) if_statement -> . delays IF LPAREN cond RPAREN true_statement ELSE else_statement
    (265) if_statement -> . delays IF LPAREN cond RPAREN true_statement
    (280) case_statement -> . CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE
    (281) casex_statement -> . CASEX LPAREN case_comp RPAREN casecontent_statements ENDCASE
    (282) unique_case_statement -> . UNIQUE CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE
    (270) for_statement -> . FOR LPAREN forpre forcond forpost RPAREN forcontent_statement
    (278) while_statement -> . WHILE LPAREN cond RPAREN whilecontent_statement
    (292) event_statement -> . senslist SEMICOLON
    (293) wait_statement -> . WAIT LPAREN cond RPAREN waitcontent_statement
    (296) forever_statement -> . FOREVER basic_statement
    (245) block -> . BEGIN block_statements END
    (246) block -> . BEGIN END
    (250) namedblock -> . BEGIN COLON ID namedblock_statements END
    (251) namedblock -> . BEGIN COLON ID END
    (260) parallelblock -> . FORK block_statements JOIN
    (261) parallelblock -> . FORK JOIN
    (237) blocking_substitution -> . delays lvalue EQUALS delays rvalue SEMICOLON
    (239) nonblocking_substitution -> . delays lvalue LE delays rvalue SEMICOLON
    (397) single_statement -> . DELAY expression SEMICOLON
    (398) single_statement -> . systemcall SEMICOLON
    (399) single_statement -> . disable SEMICOLON
    (240) delays -> . DELAY LPAREN expression RPAREN
    (241) delays -> . DELAY identifier
    (242) delays -> . DELAY intnumber
    (243) delays -> . DELAY floatnumber
    (244) delays -> . empty
    (202) senslist -> . AT LPAREN edgesigs RPAREN
    (209) senslist -> . empty
    (210) senslist -> . AT levelsig
    (211) senslist -> . AT LPAREN levelsigs RPAREN
    (219) senslist -> . AT TIMES
    (220) senslist -> . AT LPAREN TIMES RPAREN
    (351) systemcall -> . DOLLER ID
    (352) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (353) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (396) disable -> . DISABLE ID
    (400) empty -> .

  ! shift/reduce conflict for IF resolved as shift
    IF              shift and go to state 192
    CASE            shift and go to state 194
    CASEX           shift and go to state 195
    UNIQUE          shift and go to state 196
    FOR             shift and go to state 197
    WHILE           shift and go to state 198
    WAIT            shift and go to state 200
    FOREVER         shift and go to state 201
    BEGIN           shift and go to state 202
    FORK            shift and go to state 203
    DELAY           shift and go to state 204
    AT              shift and go to state 171
    DOLLER          shift and go to state 107
    DISABLE         shift and go to state 208
    LBRACE          reduce using rule 400 (empty -> .)
    ID              reduce using rule 400 (empty -> .)
    SEMICOLON       reduce using rule 400 (empty -> .)

  ! IF              [ reduce using rule 400 (empty -> .) ]

    delays                         shift and go to state 193
    else_statement                 shift and go to state 768
    ifcontent_statement            shift and go to state 757
    basic_statement                shift and go to state 682
    if_statement                   shift and go to state 177
    case_statement                 shift and go to state 178
    casex_statement                shift and go to state 179
    unique_case_statement          shift and go to state 180
    for_statement                  shift and go to state 181
    while_statement                shift and go to state 182
    event_statement                shift and go to state 183
    wait_statement                 shift and go to state 184
    forever_statement              shift and go to state 185
    block                          shift and go to state 186
    namedblock                     shift and go to state 187
    parallelblock                  shift and go to state 188
    blocking_substitution          shift and go to state 189
    nonblocking_substitution       shift and go to state 190
    single_statement               shift and go to state 191
    senslist                       shift and go to state 199
    systemcall                     shift and go to state 205
    disable                        shift and go to state 206
    empty                          shift and go to state 207

state 759

    (286) casecontent_statement -> casecontent_condition COLON basic_statement .

    ENDCASE         reduce using rule 286 (casecontent_statement -> casecontent_condition COLON basic_statement .)
    DEFAULT         reduce using rule 286 (casecontent_statement -> casecontent_condition COLON basic_statement .)
    MINUS           reduce using rule 286 (casecontent_statement -> casecontent_condition COLON basic_statement .)
    PLUS            reduce using rule 286 (casecontent_statement -> casecontent_condition COLON basic_statement .)
    LNOT            reduce using rule 286 (casecontent_statement -> casecontent_condition COLON basic_statement .)
    NOT             reduce using rule 286 (casecontent_statement -> casecontent_condition COLON basic_statement .)
    AND             reduce using rule 286 (casecontent_statement -> casecontent_condition COLON basic_statement .)
    NAND            reduce using rule 286 (casecontent_statement -> casecontent_condition COLON basic_statement .)
    NOR             reduce using rule 286 (casecontent_statement -> casecontent_condition COLON basic_statement .)
    OR              reduce using rule 286 (casecontent_statement -> casecontent_condition COLON basic_statement .)
    XOR             reduce using rule 286 (casecontent_statement -> casecontent_condition COLON basic_statement .)
    XNOR            reduce using rule 286 (casecontent_statement -> casecontent_condition COLON basic_statement .)
    LPAREN          reduce using rule 286 (casecontent_statement -> casecontent_condition COLON basic_statement .)
    LBRACE          reduce using rule 286 (casecontent_statement -> casecontent_condition COLON basic_statement .)
    DOLLER          reduce using rule 286 (casecontent_statement -> casecontent_condition COLON basic_statement .)
    ID              reduce using rule 286 (casecontent_statement -> casecontent_condition COLON basic_statement .)
    INTNUMBER_DEC   reduce using rule 286 (casecontent_statement -> casecontent_condition COLON basic_statement .)
    SIGNED_INTNUMBER_DEC reduce using rule 286 (casecontent_statement -> casecontent_condition COLON basic_statement .)
    INTNUMBER_BIN   reduce using rule 286 (casecontent_statement -> casecontent_condition COLON basic_statement .)
    SIGNED_INTNUMBER_BIN reduce using rule 286 (casecontent_statement -> casecontent_condition COLON basic_statement .)
    INTNUMBER_OCT   reduce using rule 286 (casecontent_statement -> casecontent_condition COLON basic_statement .)
    SIGNED_INTNUMBER_OCT reduce using rule 286 (casecontent_statement -> casecontent_condition COLON basic_statement .)
    INTNUMBER_HEX   reduce using rule 286 (casecontent_statement -> casecontent_condition COLON basic_statement .)
    SIGNED_INTNUMBER_HEX reduce using rule 286 (casecontent_statement -> casecontent_condition COLON basic_statement .)
    FLOATNUMBER     reduce using rule 286 (casecontent_statement -> casecontent_condition COLON basic_statement .)
    STRING_LITERAL  reduce using rule 286 (casecontent_statement -> casecontent_condition COLON basic_statement .)


state 760

    (287) casecontent_condition -> casecontent_condition COMMA expression .
    (140) expression -> expression . POWER expression
    (141) expression -> expression . TIMES expression
    (142) expression -> expression . DIVIDE expression
    (143) expression -> expression . MOD expression
    (144) expression -> expression . PLUS expression
    (145) expression -> expression . MINUS expression
    (146) expression -> expression . LSHIFT expression
    (147) expression -> expression . RSHIFT expression
    (148) expression -> expression . LSHIFTA expression
    (149) expression -> expression . RSHIFTA expression
    (150) expression -> expression . LT expression
    (151) expression -> expression . GT expression
    (152) expression -> expression . LE expression
    (153) expression -> expression . GE expression
    (154) expression -> expression . EQ expression
    (155) expression -> expression . NE expression
    (156) expression -> expression . EQL expression
    (157) expression -> expression . NEL expression
    (158) expression -> expression . AND expression
    (159) expression -> expression . XOR expression
    (160) expression -> expression . XNOR expression
    (161) expression -> expression . OR expression
    (162) expression -> expression . LAND expression
    (163) expression -> expression . LOR expression
    (164) expression -> expression . COND expression COLON expression

    COLON           reduce using rule 287 (casecontent_condition -> casecontent_condition COMMA expression .)
    COMMA           reduce using rule 287 (casecontent_condition -> casecontent_condition COMMA expression .)
    POWER           shift and go to state 236
    TIMES           shift and go to state 398
    DIVIDE          shift and go to state 237
    MOD             shift and go to state 238
    PLUS            shift and go to state 239
    MINUS           shift and go to state 240
    LSHIFT          shift and go to state 241
    RSHIFT          shift and go to state 242
    LSHIFTA         shift and go to state 243
    RSHIFTA         shift and go to state 244
    LT              shift and go to state 245
    GT              shift and go to state 246
    LE              shift and go to state 247
    GE              shift and go to state 248
    EQ              shift and go to state 249
    NE              shift and go to state 250
    EQL             shift and go to state 251
    NEL             shift and go to state 252
    AND             shift and go to state 253
    XOR             shift and go to state 254
    XNOR            shift and go to state 255
    OR              shift and go to state 256
    LAND            shift and go to state 257
    LOR             shift and go to state 258
    COND            shift and go to state 259


state 761

    (289) casecontent_statement -> DEFAULT COLON basic_statement .

    ENDCASE         reduce using rule 289 (casecontent_statement -> DEFAULT COLON basic_statement .)
    DEFAULT         reduce using rule 289 (casecontent_statement -> DEFAULT COLON basic_statement .)
    MINUS           reduce using rule 289 (casecontent_statement -> DEFAULT COLON basic_statement .)
    PLUS            reduce using rule 289 (casecontent_statement -> DEFAULT COLON basic_statement .)
    LNOT            reduce using rule 289 (casecontent_statement -> DEFAULT COLON basic_statement .)
    NOT             reduce using rule 289 (casecontent_statement -> DEFAULT COLON basic_statement .)
    AND             reduce using rule 289 (casecontent_statement -> DEFAULT COLON basic_statement .)
    NAND            reduce using rule 289 (casecontent_statement -> DEFAULT COLON basic_statement .)
    NOR             reduce using rule 289 (casecontent_statement -> DEFAULT COLON basic_statement .)
    OR              reduce using rule 289 (casecontent_statement -> DEFAULT COLON basic_statement .)
    XOR             reduce using rule 289 (casecontent_statement -> DEFAULT COLON basic_statement .)
    XNOR            reduce using rule 289 (casecontent_statement -> DEFAULT COLON basic_statement .)
    LPAREN          reduce using rule 289 (casecontent_statement -> DEFAULT COLON basic_statement .)
    LBRACE          reduce using rule 289 (casecontent_statement -> DEFAULT COLON basic_statement .)
    DOLLER          reduce using rule 289 (casecontent_statement -> DEFAULT COLON basic_statement .)
    ID              reduce using rule 289 (casecontent_statement -> DEFAULT COLON basic_statement .)
    INTNUMBER_DEC   reduce using rule 289 (casecontent_statement -> DEFAULT COLON basic_statement .)
    SIGNED_INTNUMBER_DEC reduce using rule 289 (casecontent_statement -> DEFAULT COLON basic_statement .)
    INTNUMBER_BIN   reduce using rule 289 (casecontent_statement -> DEFAULT COLON basic_statement .)
    SIGNED_INTNUMBER_BIN reduce using rule 289 (casecontent_statement -> DEFAULT COLON basic_statement .)
    INTNUMBER_OCT   reduce using rule 289 (casecontent_statement -> DEFAULT COLON basic_statement .)
    SIGNED_INTNUMBER_OCT reduce using rule 289 (casecontent_statement -> DEFAULT COLON basic_statement .)
    INTNUMBER_HEX   reduce using rule 289 (casecontent_statement -> DEFAULT COLON basic_statement .)
    SIGNED_INTNUMBER_HEX reduce using rule 289 (casecontent_statement -> DEFAULT COLON basic_statement .)
    FLOATNUMBER     reduce using rule 289 (casecontent_statement -> DEFAULT COLON basic_statement .)
    STRING_LITERAL  reduce using rule 289 (casecontent_statement -> DEFAULT COLON basic_statement .)


state 762

    (282) unique_case_statement -> UNIQUE CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .

    ENDMODULE       reduce using rule 282 (unique_case_statement -> UNIQUE CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    GENERATE        reduce using rule 282 (unique_case_statement -> UNIQUE CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    INTEGER         reduce using rule 282 (unique_case_statement -> UNIQUE CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    REAL            reduce using rule 282 (unique_case_statement -> UNIQUE CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    PARAMETER       reduce using rule 282 (unique_case_statement -> UNIQUE CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    LOCALPARAM      reduce using rule 282 (unique_case_statement -> UNIQUE CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    GENVAR          reduce using rule 282 (unique_case_statement -> UNIQUE CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    ASSIGN          reduce using rule 282 (unique_case_statement -> UNIQUE CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    ALWAYS          reduce using rule 282 (unique_case_statement -> UNIQUE CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    ALWAYS_FF       reduce using rule 282 (unique_case_statement -> UNIQUE CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    ALWAYS_COMB     reduce using rule 282 (unique_case_statement -> UNIQUE CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    INITIAL         reduce using rule 282 (unique_case_statement -> UNIQUE CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    ID              reduce using rule 282 (unique_case_statement -> UNIQUE CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    SENS_OR         reduce using rule 282 (unique_case_statement -> UNIQUE CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    FUNCTION        reduce using rule 282 (unique_case_statement -> UNIQUE CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    TASK            reduce using rule 282 (unique_case_statement -> UNIQUE CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    LPAREN          reduce using rule 282 (unique_case_statement -> UNIQUE CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    INPUT           reduce using rule 282 (unique_case_statement -> UNIQUE CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    OUTPUT          reduce using rule 282 (unique_case_statement -> UNIQUE CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    INOUT           reduce using rule 282 (unique_case_statement -> UNIQUE CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    TRI             reduce using rule 282 (unique_case_statement -> UNIQUE CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    REG             reduce using rule 282 (unique_case_statement -> UNIQUE CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    LOGIC           reduce using rule 282 (unique_case_statement -> UNIQUE CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    WIRE            reduce using rule 282 (unique_case_statement -> UNIQUE CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    SIGNED          reduce using rule 282 (unique_case_statement -> UNIQUE CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    SUPPLY0         reduce using rule 282 (unique_case_statement -> UNIQUE CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    SUPPLY1         reduce using rule 282 (unique_case_statement -> UNIQUE CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    ENDGENERATE     reduce using rule 282 (unique_case_statement -> UNIQUE CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    IF              reduce using rule 282 (unique_case_statement -> UNIQUE CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    FOR             reduce using rule 282 (unique_case_statement -> UNIQUE CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    ELSE            reduce using rule 282 (unique_case_statement -> UNIQUE CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    END             reduce using rule 282 (unique_case_statement -> UNIQUE CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    CASE            reduce using rule 282 (unique_case_statement -> UNIQUE CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    CASEX           reduce using rule 282 (unique_case_statement -> UNIQUE CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    UNIQUE          reduce using rule 282 (unique_case_statement -> UNIQUE CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    WHILE           reduce using rule 282 (unique_case_statement -> UNIQUE CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    WAIT            reduce using rule 282 (unique_case_statement -> UNIQUE CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    FOREVER         reduce using rule 282 (unique_case_statement -> UNIQUE CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    BEGIN           reduce using rule 282 (unique_case_statement -> UNIQUE CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    FORK            reduce using rule 282 (unique_case_statement -> UNIQUE CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    DELAY           reduce using rule 282 (unique_case_statement -> UNIQUE CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    AT              reduce using rule 282 (unique_case_statement -> UNIQUE CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    DOLLER          reduce using rule 282 (unique_case_statement -> UNIQUE CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    DISABLE         reduce using rule 282 (unique_case_statement -> UNIQUE CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    LBRACE          reduce using rule 282 (unique_case_statement -> UNIQUE CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    SEMICOLON       reduce using rule 282 (unique_case_statement -> UNIQUE CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    JOIN            reduce using rule 282 (unique_case_statement -> UNIQUE CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    ENDFUNCTION     reduce using rule 282 (unique_case_statement -> UNIQUE CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    ENDTASK         reduce using rule 282 (unique_case_statement -> UNIQUE CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    ENDCASE         reduce using rule 282 (unique_case_statement -> UNIQUE CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    DEFAULT         reduce using rule 282 (unique_case_statement -> UNIQUE CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    MINUS           reduce using rule 282 (unique_case_statement -> UNIQUE CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    PLUS            reduce using rule 282 (unique_case_statement -> UNIQUE CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    LNOT            reduce using rule 282 (unique_case_statement -> UNIQUE CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    NOT             reduce using rule 282 (unique_case_statement -> UNIQUE CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    AND             reduce using rule 282 (unique_case_statement -> UNIQUE CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    NAND            reduce using rule 282 (unique_case_statement -> UNIQUE CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    NOR             reduce using rule 282 (unique_case_statement -> UNIQUE CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    OR              reduce using rule 282 (unique_case_statement -> UNIQUE CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    XOR             reduce using rule 282 (unique_case_statement -> UNIQUE CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    XNOR            reduce using rule 282 (unique_case_statement -> UNIQUE CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    INTNUMBER_DEC   reduce using rule 282 (unique_case_statement -> UNIQUE CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    SIGNED_INTNUMBER_DEC reduce using rule 282 (unique_case_statement -> UNIQUE CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    INTNUMBER_BIN   reduce using rule 282 (unique_case_statement -> UNIQUE CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    SIGNED_INTNUMBER_BIN reduce using rule 282 (unique_case_statement -> UNIQUE CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    INTNUMBER_OCT   reduce using rule 282 (unique_case_statement -> UNIQUE CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    SIGNED_INTNUMBER_OCT reduce using rule 282 (unique_case_statement -> UNIQUE CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    INTNUMBER_HEX   reduce using rule 282 (unique_case_statement -> UNIQUE CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    SIGNED_INTNUMBER_HEX reduce using rule 282 (unique_case_statement -> UNIQUE CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    FLOATNUMBER     reduce using rule 282 (unique_case_statement -> UNIQUE CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)
    STRING_LITERAL  reduce using rule 282 (unique_case_statement -> UNIQUE CASE LPAREN case_comp RPAREN casecontent_statements ENDCASE .)


state 763

    (270) for_statement -> FOR LPAREN forpre forcond forpost RPAREN forcontent_statement .

    ENDMODULE       reduce using rule 270 (for_statement -> FOR LPAREN forpre forcond forpost RPAREN forcontent_statement .)
    GENERATE        reduce using rule 270 (for_statement -> FOR LPAREN forpre forcond forpost RPAREN forcontent_statement .)
    INTEGER         reduce using rule 270 (for_statement -> FOR LPAREN forpre forcond forpost RPAREN forcontent_statement .)
    REAL            reduce using rule 270 (for_statement -> FOR LPAREN forpre forcond forpost RPAREN forcontent_statement .)
    PARAMETER       reduce using rule 270 (for_statement -> FOR LPAREN forpre forcond forpost RPAREN forcontent_statement .)
    LOCALPARAM      reduce using rule 270 (for_statement -> FOR LPAREN forpre forcond forpost RPAREN forcontent_statement .)
    GENVAR          reduce using rule 270 (for_statement -> FOR LPAREN forpre forcond forpost RPAREN forcontent_statement .)
    ASSIGN          reduce using rule 270 (for_statement -> FOR LPAREN forpre forcond forpost RPAREN forcontent_statement .)
    ALWAYS          reduce using rule 270 (for_statement -> FOR LPAREN forpre forcond forpost RPAREN forcontent_statement .)
    ALWAYS_FF       reduce using rule 270 (for_statement -> FOR LPAREN forpre forcond forpost RPAREN forcontent_statement .)
    ALWAYS_COMB     reduce using rule 270 (for_statement -> FOR LPAREN forpre forcond forpost RPAREN forcontent_statement .)
    INITIAL         reduce using rule 270 (for_statement -> FOR LPAREN forpre forcond forpost RPAREN forcontent_statement .)
    ID              reduce using rule 270 (for_statement -> FOR LPAREN forpre forcond forpost RPAREN forcontent_statement .)
    SENS_OR         reduce using rule 270 (for_statement -> FOR LPAREN forpre forcond forpost RPAREN forcontent_statement .)
    FUNCTION        reduce using rule 270 (for_statement -> FOR LPAREN forpre forcond forpost RPAREN forcontent_statement .)
    TASK            reduce using rule 270 (for_statement -> FOR LPAREN forpre forcond forpost RPAREN forcontent_statement .)
    LPAREN          reduce using rule 270 (for_statement -> FOR LPAREN forpre forcond forpost RPAREN forcontent_statement .)
    INPUT           reduce using rule 270 (for_statement -> FOR LPAREN forpre forcond forpost RPAREN forcontent_statement .)
    OUTPUT          reduce using rule 270 (for_statement -> FOR LPAREN forpre forcond forpost RPAREN forcontent_statement .)
    INOUT           reduce using rule 270 (for_statement -> FOR LPAREN forpre forcond forpost RPAREN forcontent_statement .)
    TRI             reduce using rule 270 (for_statement -> FOR LPAREN forpre forcond forpost RPAREN forcontent_statement .)
    REG             reduce using rule 270 (for_statement -> FOR LPAREN forpre forcond forpost RPAREN forcontent_statement .)
    LOGIC           reduce using rule 270 (for_statement -> FOR LPAREN forpre forcond forpost RPAREN forcontent_statement .)
    WIRE            reduce using rule 270 (for_statement -> FOR LPAREN forpre forcond forpost RPAREN forcontent_statement .)
    SIGNED          reduce using rule 270 (for_statement -> FOR LPAREN forpre forcond forpost RPAREN forcontent_statement .)
    SUPPLY0         reduce using rule 270 (for_statement -> FOR LPAREN forpre forcond forpost RPAREN forcontent_statement .)
    SUPPLY1         reduce using rule 270 (for_statement -> FOR LPAREN forpre forcond forpost RPAREN forcontent_statement .)
    ENDGENERATE     reduce using rule 270 (for_statement -> FOR LPAREN forpre forcond forpost RPAREN forcontent_statement .)
    IF              reduce using rule 270 (for_statement -> FOR LPAREN forpre forcond forpost RPAREN forcontent_statement .)
    FOR             reduce using rule 270 (for_statement -> FOR LPAREN forpre forcond forpost RPAREN forcontent_statement .)
    ELSE            reduce using rule 270 (for_statement -> FOR LPAREN forpre forcond forpost RPAREN forcontent_statement .)
    END             reduce using rule 270 (for_statement -> FOR LPAREN forpre forcond forpost RPAREN forcontent_statement .)
    CASE            reduce using rule 270 (for_statement -> FOR LPAREN forpre forcond forpost RPAREN forcontent_statement .)
    CASEX           reduce using rule 270 (for_statement -> FOR LPAREN forpre forcond forpost RPAREN forcontent_statement .)
    UNIQUE          reduce using rule 270 (for_statement -> FOR LPAREN forpre forcond forpost RPAREN forcontent_statement .)
    WHILE           reduce using rule 270 (for_statement -> FOR LPAREN forpre forcond forpost RPAREN forcontent_statement .)
    WAIT            reduce using rule 270 (for_statement -> FOR LPAREN forpre forcond forpost RPAREN forcontent_statement .)
    FOREVER         reduce using rule 270 (for_statement -> FOR LPAREN forpre forcond forpost RPAREN forcontent_statement .)
    BEGIN           reduce using rule 270 (for_statement -> FOR LPAREN forpre forcond forpost RPAREN forcontent_statement .)
    FORK            reduce using rule 270 (for_statement -> FOR LPAREN forpre forcond forpost RPAREN forcontent_statement .)
    DELAY           reduce using rule 270 (for_statement -> FOR LPAREN forpre forcond forpost RPAREN forcontent_statement .)
    AT              reduce using rule 270 (for_statement -> FOR LPAREN forpre forcond forpost RPAREN forcontent_statement .)
    DOLLER          reduce using rule 270 (for_statement -> FOR LPAREN forpre forcond forpost RPAREN forcontent_statement .)
    DISABLE         reduce using rule 270 (for_statement -> FOR LPAREN forpre forcond forpost RPAREN forcontent_statement .)
    LBRACE          reduce using rule 270 (for_statement -> FOR LPAREN forpre forcond forpost RPAREN forcontent_statement .)
    SEMICOLON       reduce using rule 270 (for_statement -> FOR LPAREN forpre forcond forpost RPAREN forcontent_statement .)
    JOIN            reduce using rule 270 (for_statement -> FOR LPAREN forpre forcond forpost RPAREN forcontent_statement .)
    ENDFUNCTION     reduce using rule 270 (for_statement -> FOR LPAREN forpre forcond forpost RPAREN forcontent_statement .)
    ENDTASK         reduce using rule 270 (for_statement -> FOR LPAREN forpre forcond forpost RPAREN forcontent_statement .)
    ENDCASE         reduce using rule 270 (for_statement -> FOR LPAREN forpre forcond forpost RPAREN forcontent_statement .)
    DEFAULT         reduce using rule 270 (for_statement -> FOR LPAREN forpre forcond forpost RPAREN forcontent_statement .)
    MINUS           reduce using rule 270 (for_statement -> FOR LPAREN forpre forcond forpost RPAREN forcontent_statement .)
    PLUS            reduce using rule 270 (for_statement -> FOR LPAREN forpre forcond forpost RPAREN forcontent_statement .)
    LNOT            reduce using rule 270 (for_statement -> FOR LPAREN forpre forcond forpost RPAREN forcontent_statement .)
    NOT             reduce using rule 270 (for_statement -> FOR LPAREN forpre forcond forpost RPAREN forcontent_statement .)
    AND             reduce using rule 270 (for_statement -> FOR LPAREN forpre forcond forpost RPAREN forcontent_statement .)
    NAND            reduce using rule 270 (for_statement -> FOR LPAREN forpre forcond forpost RPAREN forcontent_statement .)
    NOR             reduce using rule 270 (for_statement -> FOR LPAREN forpre forcond forpost RPAREN forcontent_statement .)
    OR              reduce using rule 270 (for_statement -> FOR LPAREN forpre forcond forpost RPAREN forcontent_statement .)
    XOR             reduce using rule 270 (for_statement -> FOR LPAREN forpre forcond forpost RPAREN forcontent_statement .)
    XNOR            reduce using rule 270 (for_statement -> FOR LPAREN forpre forcond forpost RPAREN forcontent_statement .)
    INTNUMBER_DEC   reduce using rule 270 (for_statement -> FOR LPAREN forpre forcond forpost RPAREN forcontent_statement .)
    SIGNED_INTNUMBER_DEC reduce using rule 270 (for_statement -> FOR LPAREN forpre forcond forpost RPAREN forcontent_statement .)
    INTNUMBER_BIN   reduce using rule 270 (for_statement -> FOR LPAREN forpre forcond forpost RPAREN forcontent_statement .)
    SIGNED_INTNUMBER_BIN reduce using rule 270 (for_statement -> FOR LPAREN forpre forcond forpost RPAREN forcontent_statement .)
    INTNUMBER_OCT   reduce using rule 270 (for_statement -> FOR LPAREN forpre forcond forpost RPAREN forcontent_statement .)
    SIGNED_INTNUMBER_OCT reduce using rule 270 (for_statement -> FOR LPAREN forpre forcond forpost RPAREN forcontent_statement .)
    INTNUMBER_HEX   reduce using rule 270 (for_statement -> FOR LPAREN forpre forcond forpost RPAREN forcontent_statement .)
    SIGNED_INTNUMBER_HEX reduce using rule 270 (for_statement -> FOR LPAREN forpre forcond forpost RPAREN forcontent_statement .)
    FLOATNUMBER     reduce using rule 270 (for_statement -> FOR LPAREN forpre forcond forpost RPAREN forcontent_statement .)
    STRING_LITERAL  reduce using rule 270 (for_statement -> FOR LPAREN forpre forcond forpost RPAREN forcontent_statement .)


state 764

    (277) forcontent_statement -> basic_statement .

    ENDMODULE       reduce using rule 277 (forcontent_statement -> basic_statement .)
    GENERATE        reduce using rule 277 (forcontent_statement -> basic_statement .)
    INTEGER         reduce using rule 277 (forcontent_statement -> basic_statement .)
    REAL            reduce using rule 277 (forcontent_statement -> basic_statement .)
    PARAMETER       reduce using rule 277 (forcontent_statement -> basic_statement .)
    LOCALPARAM      reduce using rule 277 (forcontent_statement -> basic_statement .)
    GENVAR          reduce using rule 277 (forcontent_statement -> basic_statement .)
    ASSIGN          reduce using rule 277 (forcontent_statement -> basic_statement .)
    ALWAYS          reduce using rule 277 (forcontent_statement -> basic_statement .)
    ALWAYS_FF       reduce using rule 277 (forcontent_statement -> basic_statement .)
    ALWAYS_COMB     reduce using rule 277 (forcontent_statement -> basic_statement .)
    INITIAL         reduce using rule 277 (forcontent_statement -> basic_statement .)
    ID              reduce using rule 277 (forcontent_statement -> basic_statement .)
    SENS_OR         reduce using rule 277 (forcontent_statement -> basic_statement .)
    FUNCTION        reduce using rule 277 (forcontent_statement -> basic_statement .)
    TASK            reduce using rule 277 (forcontent_statement -> basic_statement .)
    LPAREN          reduce using rule 277 (forcontent_statement -> basic_statement .)
    INPUT           reduce using rule 277 (forcontent_statement -> basic_statement .)
    OUTPUT          reduce using rule 277 (forcontent_statement -> basic_statement .)
    INOUT           reduce using rule 277 (forcontent_statement -> basic_statement .)
    TRI             reduce using rule 277 (forcontent_statement -> basic_statement .)
    REG             reduce using rule 277 (forcontent_statement -> basic_statement .)
    LOGIC           reduce using rule 277 (forcontent_statement -> basic_statement .)
    WIRE            reduce using rule 277 (forcontent_statement -> basic_statement .)
    SIGNED          reduce using rule 277 (forcontent_statement -> basic_statement .)
    SUPPLY0         reduce using rule 277 (forcontent_statement -> basic_statement .)
    SUPPLY1         reduce using rule 277 (forcontent_statement -> basic_statement .)
    ENDGENERATE     reduce using rule 277 (forcontent_statement -> basic_statement .)
    IF              reduce using rule 277 (forcontent_statement -> basic_statement .)
    FOR             reduce using rule 277 (forcontent_statement -> basic_statement .)
    ELSE            reduce using rule 277 (forcontent_statement -> basic_statement .)
    END             reduce using rule 277 (forcontent_statement -> basic_statement .)
    CASE            reduce using rule 277 (forcontent_statement -> basic_statement .)
    CASEX           reduce using rule 277 (forcontent_statement -> basic_statement .)
    UNIQUE          reduce using rule 277 (forcontent_statement -> basic_statement .)
    WHILE           reduce using rule 277 (forcontent_statement -> basic_statement .)
    WAIT            reduce using rule 277 (forcontent_statement -> basic_statement .)
    FOREVER         reduce using rule 277 (forcontent_statement -> basic_statement .)
    BEGIN           reduce using rule 277 (forcontent_statement -> basic_statement .)
    FORK            reduce using rule 277 (forcontent_statement -> basic_statement .)
    DELAY           reduce using rule 277 (forcontent_statement -> basic_statement .)
    AT              reduce using rule 277 (forcontent_statement -> basic_statement .)
    DOLLER          reduce using rule 277 (forcontent_statement -> basic_statement .)
    DISABLE         reduce using rule 277 (forcontent_statement -> basic_statement .)
    LBRACE          reduce using rule 277 (forcontent_statement -> basic_statement .)
    SEMICOLON       reduce using rule 277 (forcontent_statement -> basic_statement .)
    JOIN            reduce using rule 277 (forcontent_statement -> basic_statement .)
    ENDFUNCTION     reduce using rule 277 (forcontent_statement -> basic_statement .)
    ENDTASK         reduce using rule 277 (forcontent_statement -> basic_statement .)
    ENDCASE         reduce using rule 277 (forcontent_statement -> basic_statement .)
    DEFAULT         reduce using rule 277 (forcontent_statement -> basic_statement .)
    MINUS           reduce using rule 277 (forcontent_statement -> basic_statement .)
    PLUS            reduce using rule 277 (forcontent_statement -> basic_statement .)
    LNOT            reduce using rule 277 (forcontent_statement -> basic_statement .)
    NOT             reduce using rule 277 (forcontent_statement -> basic_statement .)
    AND             reduce using rule 277 (forcontent_statement -> basic_statement .)
    NAND            reduce using rule 277 (forcontent_statement -> basic_statement .)
    NOR             reduce using rule 277 (forcontent_statement -> basic_statement .)
    OR              reduce using rule 277 (forcontent_statement -> basic_statement .)
    XOR             reduce using rule 277 (forcontent_statement -> basic_statement .)
    XNOR            reduce using rule 277 (forcontent_statement -> basic_statement .)
    INTNUMBER_DEC   reduce using rule 277 (forcontent_statement -> basic_statement .)
    SIGNED_INTNUMBER_DEC reduce using rule 277 (forcontent_statement -> basic_statement .)
    INTNUMBER_BIN   reduce using rule 277 (forcontent_statement -> basic_statement .)
    SIGNED_INTNUMBER_BIN reduce using rule 277 (forcontent_statement -> basic_statement .)
    INTNUMBER_OCT   reduce using rule 277 (forcontent_statement -> basic_statement .)
    SIGNED_INTNUMBER_OCT reduce using rule 277 (forcontent_statement -> basic_statement .)
    INTNUMBER_HEX   reduce using rule 277 (forcontent_statement -> basic_statement .)
    SIGNED_INTNUMBER_HEX reduce using rule 277 (forcontent_statement -> basic_statement .)
    FLOATNUMBER     reduce using rule 277 (forcontent_statement -> basic_statement .)
    STRING_LITERAL  reduce using rule 277 (forcontent_statement -> basic_statement .)


state 765

    (317) param_arg -> DOT ID LPAREN expression RPAREN .

    RPAREN          reduce using rule 317 (param_arg -> DOT ID LPAREN expression RPAREN .)
    COMMA           reduce using rule 317 (param_arg -> DOT ID LPAREN expression RPAREN .)


state 766

    (341) generate_block -> BEGIN COLON ID generate_items . END
    (335) generate_items -> generate_items . generate_item
    (337) generate_item -> . standard_item
    (338) generate_item -> . generate_if
    (339) generate_item -> . generate_for
    (61) standard_item -> . decl
    (62) standard_item -> . integerdecl
    (63) standard_item -> . realdecl
    (64) standard_item -> . declassign
    (65) standard_item -> . parameterdecl
    (66) standard_item -> . localparamdecl
    (67) standard_item -> . genvardecl
    (68) standard_item -> . assignment
    (69) standard_item -> . always
    (70) standard_item -> . always_ff
    (71) standard_item -> . always_comb
    (72) standard_item -> . initial
    (73) standard_item -> . instance
    (74) standard_item -> . function
    (75) standard_item -> . task
    (76) standard_item -> . pragma
    (342) generate_if -> . IF LPAREN cond RPAREN gif_true_item ELSE gif_false_item
    (343) generate_if -> . IF LPAREN cond RPAREN gif_true_item
    (348) generate_for -> . FOR LPAREN forpre forcond forpost RPAREN generate_forcontent
    (77) decl -> . sigtypes declnamelist SEMICOLON
    (78) decl -> . sigtypes width declnamelist SEMICOLON
    (87) integerdecl -> . INTEGER integernamelist SEMICOLON
    (88) integerdecl -> . INTEGER SIGNED integernamelist SEMICOLON
    (92) realdecl -> . REAL realnamelist SEMICOLON
    (83) declassign -> . sigtypes declassign_element SEMICOLON
    (84) declassign -> . sigtypes width declassign_element SEMICOLON
    (96) parameterdecl -> . PARAMETER param_substitution_list SEMICOLON
    (97) parameterdecl -> . PARAMETER SIGNED param_substitution_list SEMICOLON
    (98) parameterdecl -> . PARAMETER width param_substitution_list SEMICOLON
    (99) parameterdecl -> . PARAMETER SIGNED width param_substitution_list SEMICOLON
    (100) parameterdecl -> . PARAMETER INTEGER param_substitution_list SEMICOLON
    (101) localparamdecl -> . LOCALPARAM param_substitution_list SEMICOLON
    (102) localparamdecl -> . LOCALPARAM SIGNED param_substitution_list SEMICOLON
    (103) localparamdecl -> . LOCALPARAM width param_substitution_list SEMICOLON
    (104) localparamdecl -> . LOCALPARAM SIGNED width param_substitution_list SEMICOLON
    (105) localparamdecl -> . LOCALPARAM INTEGER param_substitution_list SEMICOLON
    (329) genvardecl -> . GENVAR genvarlist SEMICOLON
    (109) assignment -> . ASSIGN lvalue EQUALS rvalue SEMICOLON
    (110) assignment -> . ASSIGN delays lvalue EQUALS delays rvalue SEMICOLON
    (199) always -> . ALWAYS senslist always_statement
    (200) always_ff -> . ALWAYS_FF senslist always_statement
    (201) always_comb -> . ALWAYS_COMB senslist always_statement
    (290) initial -> . INITIAL initial_statement
    (297) instance -> . ID parameterlist instance_bodylist SEMICOLON
    (298) instance -> . SENS_OR parameterlist instance_bodylist SEMICOLON
    (303) instance -> . ID instance_bodylist_noname SEMICOLON
    (304) instance -> . SENS_OR instance_bodylist_noname SEMICOLON
    (358) function -> . FUNCTION width ID SEMICOLON function_statement ENDFUNCTION
    (359) function -> . FUNCTION ID SEMICOLON function_statement ENDFUNCTION
    (377) task -> . TASK ID SEMICOLON task_statement ENDTASK
    (7) pragma -> . LPAREN TIMES ID EQUALS expression TIMES RPAREN
    (8) pragma -> . LPAREN TIMES ID TIMES RPAREN
    (35) sigtypes -> . sigtypes sigtype
    (36) sigtypes -> . sigtype
    (37) sigtype -> . INPUT
    (38) sigtype -> . OUTPUT
    (39) sigtype -> . INOUT
    (40) sigtype -> . TRI
    (41) sigtype -> . REG
    (42) sigtype -> . LOGIC
    (43) sigtype -> . WIRE
    (44) sigtype -> . SIGNED
    (45) sigtype -> . SUPPLY0
    (46) sigtype -> . SUPPLY1

    END             shift and go to state 769
    IF              shift and go to state 130
    FOR             shift and go to state 131
    INTEGER         shift and go to state 47
    REAL            shift and go to state 49
    PARAMETER       shift and go to state 50
    LOCALPARAM      shift and go to state 51
    GENVAR          shift and go to state 52
    ASSIGN          shift and go to state 53
    ALWAYS          shift and go to state 54
    ALWAYS_FF       shift and go to state 55
    ALWAYS_COMB     shift and go to state 56
    INITIAL         shift and go to state 57
    ID              shift and go to state 58
    SENS_OR         shift and go to state 59
    FUNCTION        shift and go to state 60
    TASK            shift and go to state 61
    LPAREN          shift and go to state 8
    INPUT           shift and go to state 63
    OUTPUT          shift and go to state 64
    INOUT           shift and go to state 65
    TRI             shift and go to state 66
    REG             shift and go to state 67
    LOGIC           shift and go to state 68
    WIRE            shift and go to state 69
    SIGNED          shift and go to state 48
    SUPPLY0         shift and go to state 70
    SUPPLY1         shift and go to state 71

    generate_item                  shift and go to state 281
    standard_item                  shift and go to state 127
    generate_if                    shift and go to state 128
    generate_for                   shift and go to state 129
    decl                           shift and go to state 29
    integerdecl                    shift and go to state 30
    realdecl                       shift and go to state 31
    declassign                     shift and go to state 32
    parameterdecl                  shift and go to state 33
    localparamdecl                 shift and go to state 34
    genvardecl                     shift and go to state 35
    assignment                     shift and go to state 36
    always                         shift and go to state 37
    always_ff                      shift and go to state 38
    always_comb                    shift and go to state 39
    initial                        shift and go to state 40
    instance                       shift and go to state 41
    function                       shift and go to state 42
    task                           shift and go to state 43
    pragma                         shift and go to state 44
    sigtypes                       shift and go to state 46
    sigtype                        shift and go to state 62

state 767

    (238) blocking_substitution_base -> delays lvalue EQUALS delays . rvalue
    (129) rvalue -> . expression
    (130) expression -> . MINUS expression
    (131) expression -> . PLUS expression
    (132) expression -> . LNOT expression
    (133) expression -> . NOT expression
    (134) expression -> . AND expression
    (135) expression -> . NAND expression
    (136) expression -> . NOR expression
    (137) expression -> . OR expression
    (138) expression -> . XOR expression
    (139) expression -> . XNOR expression
    (140) expression -> . expression POWER expression
    (141) expression -> . expression TIMES expression
    (142) expression -> . expression DIVIDE expression
    (143) expression -> . expression MOD expression
    (144) expression -> . expression PLUS expression
    (145) expression -> . expression MINUS expression
    (146) expression -> . expression LSHIFT expression
    (147) expression -> . expression RSHIFT expression
    (148) expression -> . expression LSHIFTA expression
    (149) expression -> . expression RSHIFTA expression
    (150) expression -> . expression LT expression
    (151) expression -> . expression GT expression
    (152) expression -> . expression LE expression
    (153) expression -> . expression GE expression
    (154) expression -> . expression EQ expression
    (155) expression -> . expression NE expression
    (156) expression -> . expression EQL expression
    (157) expression -> . expression NEL expression
    (158) expression -> . expression AND expression
    (159) expression -> . expression XOR expression
    (160) expression -> . expression XNOR expression
    (161) expression -> . expression OR expression
    (162) expression -> . expression LAND expression
    (163) expression -> . expression LOR expression
    (164) expression -> . expression COND expression COLON expression
    (165) expression -> . LPAREN expression RPAREN
    (166) expression -> . concat
    (167) expression -> . repeat
    (168) expression -> . partselect
    (169) expression -> . pointer
    (170) expression -> . functioncall
    (171) expression -> . systemcall
    (172) expression -> . identifier
    (173) expression -> . const_expression
    (174) concat -> . LBRACE concatlist RBRACE
    (177) repeat -> . LBRACE expression concat RBRACE
    (178) partselect -> . identifier LBRACKET expression COLON expression RBRACKET
    (179) partselect -> . identifier LBRACKET expression PLUSCOLON expression RBRACKET
    (180) partselect -> . identifier LBRACKET expression MINUSCOLON expression RBRACKET
    (181) partselect -> . pointer LBRACKET expression COLON expression RBRACKET
    (182) partselect -> . pointer LBRACKET expression PLUSCOLON expression RBRACKET
    (183) partselect -> . pointer LBRACKET expression MINUSCOLON expression RBRACKET
    (184) pointer -> . identifier LBRACKET expression RBRACKET
    (185) pointer -> . pointer LBRACKET expression RBRACKET
    (373) functioncall -> . identifier LPAREN func_args RPAREN
    (351) systemcall -> . DOLLER ID
    (352) systemcall -> . DOLLER ID LPAREN sysargs RPAREN
    (353) systemcall -> . DOLLER SIGNED LPAREN sysargs RPAREN
    (392) identifier -> . ID
    (393) identifier -> . scope ID
    (186) const_expression -> . intnumber
    (187) const_expression -> . floatnumber
    (188) const_expression -> . stringliteral
    (394) scope -> . identifier DOT
    (395) scope -> . pointer DOT
    (190) intnumber -> . INTNUMBER_DEC
    (191) intnumber -> . SIGNED_INTNUMBER_DEC
    (192) intnumber -> . INTNUMBER_BIN
    (193) intnumber -> . SIGNED_INTNUMBER_BIN
    (194) intnumber -> . INTNUMBER_OCT
    (195) intnumber -> . SIGNED_INTNUMBER_OCT
    (196) intnumber -> . INTNUMBER_HEX
    (197) intnumber -> . SIGNED_INTNUMBER_HEX
    (189) floatnumber -> . FLOATNUMBER
    (198) stringliteral -> . STRING_LITERAL

    MINUS           shift and go to state 88
    PLUS            shift and go to state 89
    LNOT            shift and go to state 90
    NOT             shift and go to state 91
    AND             shift and go to state 92
    NAND            shift and go to state 93
    NOR             shift and go to state 94
    OR              shift and go to state 95
    XOR             shift and go to state 96
    XNOR            shift and go to state 97
    LPAREN          shift and go to state 85
    LBRACE          shift and go to state 106
    DOLLER          shift and go to state 107
    ID              shift and go to state 86
    INTNUMBER_DEC   shift and go to state 112
    SIGNED_INTNUMBER_DEC shift and go to state 113
    INTNUMBER_BIN   shift and go to state 114
    SIGNED_INTNUMBER_BIN shift and go to state 115
    INTNUMBER_OCT   shift and go to state 116
    SIGNED_INTNUMBER_OCT shift and go to state 117
    INTNUMBER_HEX   shift and go to state 118
    SIGNED_INTNUMBER_HEX shift and go to state 119
    FLOATNUMBER     shift and go to state 120
    STRING_LITERAL  shift and go to state 121

    rvalue                         shift and go to state 770
    expression                     shift and go to state 448
    concat                         shift and go to state 98
    repeat                         shift and go to state 99
    partselect                     shift and go to state 100
    pointer                        shift and go to state 101
    functioncall                   shift and go to state 102
    systemcall                     shift and go to state 103
    identifier                     shift and go to state 104
    const_expression               shift and go to state 105
    scope                          shift and go to state 108
    intnumber                      shift and go to state 109
    floatnumber                    shift and go to state 110
    stringliteral                  shift and go to state 111

state 768

    (264) if_statement -> delays IF LPAREN cond RPAREN true_statement ELSE else_statement .

    ENDMODULE       reduce using rule 264 (if_statement -> delays IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    GENERATE        reduce using rule 264 (if_statement -> delays IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    INTEGER         reduce using rule 264 (if_statement -> delays IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    REAL            reduce using rule 264 (if_statement -> delays IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    PARAMETER       reduce using rule 264 (if_statement -> delays IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    LOCALPARAM      reduce using rule 264 (if_statement -> delays IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    GENVAR          reduce using rule 264 (if_statement -> delays IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    ASSIGN          reduce using rule 264 (if_statement -> delays IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    ALWAYS          reduce using rule 264 (if_statement -> delays IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    ALWAYS_FF       reduce using rule 264 (if_statement -> delays IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    ALWAYS_COMB     reduce using rule 264 (if_statement -> delays IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    INITIAL         reduce using rule 264 (if_statement -> delays IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    ID              reduce using rule 264 (if_statement -> delays IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    SENS_OR         reduce using rule 264 (if_statement -> delays IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    FUNCTION        reduce using rule 264 (if_statement -> delays IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    TASK            reduce using rule 264 (if_statement -> delays IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    LPAREN          reduce using rule 264 (if_statement -> delays IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    INPUT           reduce using rule 264 (if_statement -> delays IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    OUTPUT          reduce using rule 264 (if_statement -> delays IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    INOUT           reduce using rule 264 (if_statement -> delays IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    TRI             reduce using rule 264 (if_statement -> delays IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    REG             reduce using rule 264 (if_statement -> delays IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    LOGIC           reduce using rule 264 (if_statement -> delays IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    WIRE            reduce using rule 264 (if_statement -> delays IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    SIGNED          reduce using rule 264 (if_statement -> delays IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    SUPPLY0         reduce using rule 264 (if_statement -> delays IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    SUPPLY1         reduce using rule 264 (if_statement -> delays IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    ENDGENERATE     reduce using rule 264 (if_statement -> delays IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    IF              reduce using rule 264 (if_statement -> delays IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    FOR             reduce using rule 264 (if_statement -> delays IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    ELSE            reduce using rule 264 (if_statement -> delays IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    END             reduce using rule 264 (if_statement -> delays IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    CASE            reduce using rule 264 (if_statement -> delays IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    CASEX           reduce using rule 264 (if_statement -> delays IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    UNIQUE          reduce using rule 264 (if_statement -> delays IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    WHILE           reduce using rule 264 (if_statement -> delays IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    WAIT            reduce using rule 264 (if_statement -> delays IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    FOREVER         reduce using rule 264 (if_statement -> delays IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    BEGIN           reduce using rule 264 (if_statement -> delays IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    FORK            reduce using rule 264 (if_statement -> delays IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    DELAY           reduce using rule 264 (if_statement -> delays IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    AT              reduce using rule 264 (if_statement -> delays IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    DOLLER          reduce using rule 264 (if_statement -> delays IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    DISABLE         reduce using rule 264 (if_statement -> delays IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    LBRACE          reduce using rule 264 (if_statement -> delays IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    SEMICOLON       reduce using rule 264 (if_statement -> delays IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    JOIN            reduce using rule 264 (if_statement -> delays IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    ENDFUNCTION     reduce using rule 264 (if_statement -> delays IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    ENDTASK         reduce using rule 264 (if_statement -> delays IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    ENDCASE         reduce using rule 264 (if_statement -> delays IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    DEFAULT         reduce using rule 264 (if_statement -> delays IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    MINUS           reduce using rule 264 (if_statement -> delays IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    PLUS            reduce using rule 264 (if_statement -> delays IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    LNOT            reduce using rule 264 (if_statement -> delays IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    NOT             reduce using rule 264 (if_statement -> delays IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    AND             reduce using rule 264 (if_statement -> delays IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    NAND            reduce using rule 264 (if_statement -> delays IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    NOR             reduce using rule 264 (if_statement -> delays IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    OR              reduce using rule 264 (if_statement -> delays IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    XOR             reduce using rule 264 (if_statement -> delays IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    XNOR            reduce using rule 264 (if_statement -> delays IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    INTNUMBER_DEC   reduce using rule 264 (if_statement -> delays IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    SIGNED_INTNUMBER_DEC reduce using rule 264 (if_statement -> delays IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    INTNUMBER_BIN   reduce using rule 264 (if_statement -> delays IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    SIGNED_INTNUMBER_BIN reduce using rule 264 (if_statement -> delays IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    INTNUMBER_OCT   reduce using rule 264 (if_statement -> delays IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    SIGNED_INTNUMBER_OCT reduce using rule 264 (if_statement -> delays IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    INTNUMBER_HEX   reduce using rule 264 (if_statement -> delays IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    SIGNED_INTNUMBER_HEX reduce using rule 264 (if_statement -> delays IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    FLOATNUMBER     reduce using rule 264 (if_statement -> delays IF LPAREN cond RPAREN true_statement ELSE else_statement .)
    STRING_LITERAL  reduce using rule 264 (if_statement -> delays IF LPAREN cond RPAREN true_statement ELSE else_statement .)


state 769

    (341) generate_block -> BEGIN COLON ID generate_items END .

    ELSE            reduce using rule 341 (generate_block -> BEGIN COLON ID generate_items END .)
    ENDGENERATE     reduce using rule 341 (generate_block -> BEGIN COLON ID generate_items END .)
    IF              reduce using rule 341 (generate_block -> BEGIN COLON ID generate_items END .)
    FOR             reduce using rule 341 (generate_block -> BEGIN COLON ID generate_items END .)
    INTEGER         reduce using rule 341 (generate_block -> BEGIN COLON ID generate_items END .)
    REAL            reduce using rule 341 (generate_block -> BEGIN COLON ID generate_items END .)
    PARAMETER       reduce using rule 341 (generate_block -> BEGIN COLON ID generate_items END .)
    LOCALPARAM      reduce using rule 341 (generate_block -> BEGIN COLON ID generate_items END .)
    GENVAR          reduce using rule 341 (generate_block -> BEGIN COLON ID generate_items END .)
    ASSIGN          reduce using rule 341 (generate_block -> BEGIN COLON ID generate_items END .)
    ALWAYS          reduce using rule 341 (generate_block -> BEGIN COLON ID generate_items END .)
    ALWAYS_FF       reduce using rule 341 (generate_block -> BEGIN COLON ID generate_items END .)
    ALWAYS_COMB     reduce using rule 341 (generate_block -> BEGIN COLON ID generate_items END .)
    INITIAL         reduce using rule 341 (generate_block -> BEGIN COLON ID generate_items END .)
    ID              reduce using rule 341 (generate_block -> BEGIN COLON ID generate_items END .)
    SENS_OR         reduce using rule 341 (generate_block -> BEGIN COLON ID generate_items END .)
    FUNCTION        reduce using rule 341 (generate_block -> BEGIN COLON ID generate_items END .)
    TASK            reduce using rule 341 (generate_block -> BEGIN COLON ID generate_items END .)
    LPAREN          reduce using rule 341 (generate_block -> BEGIN COLON ID generate_items END .)
    INPUT           reduce using rule 341 (generate_block -> BEGIN COLON ID generate_items END .)
    OUTPUT          reduce using rule 341 (generate_block -> BEGIN COLON ID generate_items END .)
    INOUT           reduce using rule 341 (generate_block -> BEGIN COLON ID generate_items END .)
    TRI             reduce using rule 341 (generate_block -> BEGIN COLON ID generate_items END .)
    REG             reduce using rule 341 (generate_block -> BEGIN COLON ID generate_items END .)
    LOGIC           reduce using rule 341 (generate_block -> BEGIN COLON ID generate_items END .)
    WIRE            reduce using rule 341 (generate_block -> BEGIN COLON ID generate_items END .)
    SIGNED          reduce using rule 341 (generate_block -> BEGIN COLON ID generate_items END .)
    SUPPLY0         reduce using rule 341 (generate_block -> BEGIN COLON ID generate_items END .)
    SUPPLY1         reduce using rule 341 (generate_block -> BEGIN COLON ID generate_items END .)
    END             reduce using rule 341 (generate_block -> BEGIN COLON ID generate_items END .)


state 770

    (238) blocking_substitution_base -> delays lvalue EQUALS delays rvalue .

    RPAREN          reduce using rule 238 (blocking_substitution_base -> delays lvalue EQUALS delays rvalue .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for GENERATE in state 18 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 18 resolved as shift
WARNING: shift/reduce conflict for REAL in state 18 resolved as shift
WARNING: shift/reduce conflict for PARAMETER in state 18 resolved as shift
WARNING: shift/reduce conflict for LOCALPARAM in state 18 resolved as shift
WARNING: shift/reduce conflict for GENVAR in state 18 resolved as shift
WARNING: shift/reduce conflict for ASSIGN in state 18 resolved as shift
WARNING: shift/reduce conflict for ALWAYS in state 18 resolved as shift
WARNING: shift/reduce conflict for ALWAYS_FF in state 18 resolved as shift
WARNING: shift/reduce conflict for ALWAYS_COMB in state 18 resolved as shift
WARNING: shift/reduce conflict for INITIAL in state 18 resolved as shift
WARNING: shift/reduce conflict for ID in state 18 resolved as shift
WARNING: shift/reduce conflict for SENS_OR in state 18 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 18 resolved as shift
WARNING: shift/reduce conflict for TASK in state 18 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 18 resolved as shift
WARNING: shift/reduce conflict for INPUT in state 18 resolved as shift
WARNING: shift/reduce conflict for OUTPUT in state 18 resolved as shift
WARNING: shift/reduce conflict for INOUT in state 18 resolved as shift
WARNING: shift/reduce conflict for TRI in state 18 resolved as shift
WARNING: shift/reduce conflict for REG in state 18 resolved as shift
WARNING: shift/reduce conflict for LOGIC in state 18 resolved as shift
WARNING: shift/reduce conflict for WIRE in state 18 resolved as shift
WARNING: shift/reduce conflict for SIGNED in state 18 resolved as shift
WARNING: shift/reduce conflict for SUPPLY0 in state 18 resolved as shift
WARNING: shift/reduce conflict for SUPPLY1 in state 18 resolved as shift
WARNING: shift/reduce conflict for IF in state 45 resolved as shift
WARNING: shift/reduce conflict for FOR in state 45 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 45 resolved as shift
WARNING: shift/reduce conflict for REAL in state 45 resolved as shift
WARNING: shift/reduce conflict for PARAMETER in state 45 resolved as shift
WARNING: shift/reduce conflict for LOCALPARAM in state 45 resolved as shift
WARNING: shift/reduce conflict for GENVAR in state 45 resolved as shift
WARNING: shift/reduce conflict for ASSIGN in state 45 resolved as shift
WARNING: shift/reduce conflict for ALWAYS in state 45 resolved as shift
WARNING: shift/reduce conflict for ALWAYS_FF in state 45 resolved as shift
WARNING: shift/reduce conflict for ALWAYS_COMB in state 45 resolved as shift
WARNING: shift/reduce conflict for INITIAL in state 45 resolved as shift
WARNING: shift/reduce conflict for ID in state 45 resolved as shift
WARNING: shift/reduce conflict for SENS_OR in state 45 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 45 resolved as shift
WARNING: shift/reduce conflict for TASK in state 45 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 45 resolved as shift
WARNING: shift/reduce conflict for INPUT in state 45 resolved as shift
WARNING: shift/reduce conflict for OUTPUT in state 45 resolved as shift
WARNING: shift/reduce conflict for INOUT in state 45 resolved as shift
WARNING: shift/reduce conflict for TRI in state 45 resolved as shift
WARNING: shift/reduce conflict for REG in state 45 resolved as shift
WARNING: shift/reduce conflict for LOGIC in state 45 resolved as shift
WARNING: shift/reduce conflict for WIRE in state 45 resolved as shift
WARNING: shift/reduce conflict for SIGNED in state 45 resolved as shift
WARNING: shift/reduce conflict for SUPPLY0 in state 45 resolved as shift
WARNING: shift/reduce conflict for SUPPLY1 in state 45 resolved as shift
WARNING: shift/reduce conflict for ID in state 46 resolved as shift
WARNING: shift/reduce conflict for LBRACE in state 53 resolved as shift
WARNING: shift/reduce conflict for ID in state 53 resolved as shift
WARNING: shift/reduce conflict for AT in state 54 resolved as shift
WARNING: shift/reduce conflict for AT in state 55 resolved as shift
WARNING: shift/reduce conflict for AT in state 56 resolved as shift
WARNING: shift/reduce conflict for IF in state 57 resolved as shift
WARNING: shift/reduce conflict for ID in state 133 resolved as shift
WARNING: shift/reduce conflict for IF in state 170 resolved as shift
WARNING: shift/reduce conflict for IF in state 173 resolved as shift
WARNING: shift/reduce conflict for IF in state 174 resolved as shift
WARNING: shift/reduce conflict for IF in state 201 resolved as shift
WARNING: shift/reduce conflict for IF in state 202 resolved as shift
WARNING: shift/reduce conflict for IF in state 203 resolved as shift
WARNING: shift/reduce conflict for IF in state 351 resolved as shift
WARNING: shift/reduce conflict for IF in state 356 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 384 resolved as shift
WARNING: shift/reduce conflict for INPUT in state 384 resolved as shift
WARNING: shift/reduce conflict for OUTPUT in state 384 resolved as shift
WARNING: shift/reduce conflict for INOUT in state 384 resolved as shift
WARNING: shift/reduce conflict for TRI in state 384 resolved as shift
WARNING: shift/reduce conflict for REG in state 384 resolved as shift
WARNING: shift/reduce conflict for LOGIC in state 384 resolved as shift
WARNING: shift/reduce conflict for WIRE in state 384 resolved as shift
WARNING: shift/reduce conflict for SIGNED in state 384 resolved as shift
WARNING: shift/reduce conflict for SUPPLY0 in state 384 resolved as shift
WARNING: shift/reduce conflict for SUPPLY1 in state 384 resolved as shift
WARNING: shift/reduce conflict for IF in state 496 resolved as shift
WARNING: shift/reduce conflict for IF in state 519 resolved as shift
WARNING: shift/reduce conflict for IF in state 525 resolved as shift
WARNING: shift/reduce conflict for IF in state 589 resolved as shift
WARNING: shift/reduce conflict for IF in state 597 resolved as shift
WARNING: shift/reduce conflict for IF in state 598 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 598 resolved as shift
WARNING: shift/reduce conflict for IF in state 599 resolved as shift
WARNING: shift/reduce conflict for POWER in state 647 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 647 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 647 resolved as shift
WARNING: shift/reduce conflict for MOD in state 647 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 647 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 647 resolved as shift
WARNING: shift/reduce conflict for LSHIFT in state 647 resolved as shift
WARNING: shift/reduce conflict for RSHIFT in state 647 resolved as shift
WARNING: shift/reduce conflict for LSHIFTA in state 647 resolved as shift
WARNING: shift/reduce conflict for RSHIFTA in state 647 resolved as shift
WARNING: shift/reduce conflict for LT in state 647 resolved as shift
WARNING: shift/reduce conflict for GT in state 647 resolved as shift
WARNING: shift/reduce conflict for LE in state 647 resolved as shift
WARNING: shift/reduce conflict for GE in state 647 resolved as shift
WARNING: shift/reduce conflict for EQ in state 647 resolved as shift
WARNING: shift/reduce conflict for NE in state 647 resolved as shift
WARNING: shift/reduce conflict for EQL in state 647 resolved as shift
WARNING: shift/reduce conflict for NEL in state 647 resolved as shift
WARNING: shift/reduce conflict for AND in state 647 resolved as shift
WARNING: shift/reduce conflict for XOR in state 647 resolved as shift
WARNING: shift/reduce conflict for XNOR in state 647 resolved as shift
WARNING: shift/reduce conflict for OR in state 647 resolved as shift
WARNING: shift/reduce conflict for LAND in state 647 resolved as shift
WARNING: shift/reduce conflict for LOR in state 647 resolved as shift
WARNING: shift/reduce conflict for COND in state 647 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 658 resolved as shift
WARNING: shift/reduce conflict for IF in state 661 resolved as shift
WARNING: shift/reduce conflict for FOR in state 661 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 661 resolved as shift
WARNING: shift/reduce conflict for REAL in state 661 resolved as shift
WARNING: shift/reduce conflict for PARAMETER in state 661 resolved as shift
WARNING: shift/reduce conflict for LOCALPARAM in state 661 resolved as shift
WARNING: shift/reduce conflict for GENVAR in state 661 resolved as shift
WARNING: shift/reduce conflict for ASSIGN in state 661 resolved as shift
WARNING: shift/reduce conflict for ALWAYS in state 661 resolved as shift
WARNING: shift/reduce conflict for ALWAYS_FF in state 661 resolved as shift
WARNING: shift/reduce conflict for ALWAYS_COMB in state 661 resolved as shift
WARNING: shift/reduce conflict for INITIAL in state 661 resolved as shift
WARNING: shift/reduce conflict for ID in state 661 resolved as shift
WARNING: shift/reduce conflict for SENS_OR in state 661 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 661 resolved as shift
WARNING: shift/reduce conflict for TASK in state 661 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 661 resolved as shift
WARNING: shift/reduce conflict for INPUT in state 661 resolved as shift
WARNING: shift/reduce conflict for OUTPUT in state 661 resolved as shift
WARNING: shift/reduce conflict for INOUT in state 661 resolved as shift
WARNING: shift/reduce conflict for TRI in state 661 resolved as shift
WARNING: shift/reduce conflict for REG in state 661 resolved as shift
WARNING: shift/reduce conflict for LOGIC in state 661 resolved as shift
WARNING: shift/reduce conflict for WIRE in state 661 resolved as shift
WARNING: shift/reduce conflict for SIGNED in state 661 resolved as shift
WARNING: shift/reduce conflict for SUPPLY0 in state 661 resolved as shift
WARNING: shift/reduce conflict for SUPPLY1 in state 661 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 680 resolved as shift
WARNING: shift/reduce conflict for IF in state 683 resolved as shift
WARNING: shift/reduce conflict for RPAREN in state 706 resolved as shift
WARNING: shift/reduce conflict for IF in state 731 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 732 resolved as shift
WARNING: shift/reduce conflict for IF in state 737 resolved as shift
WARNING: shift/reduce conflict for IF in state 739 resolved as shift
WARNING: shift/reduce conflict for IF in state 742 resolved as shift
WARNING: shift/reduce conflict for IF in state 751 resolved as shift
WARNING: shift/reduce conflict for FOR in state 751 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 751 resolved as shift
WARNING: shift/reduce conflict for REAL in state 751 resolved as shift
WARNING: shift/reduce conflict for PARAMETER in state 751 resolved as shift
WARNING: shift/reduce conflict for LOCALPARAM in state 751 resolved as shift
WARNING: shift/reduce conflict for GENVAR in state 751 resolved as shift
WARNING: shift/reduce conflict for ASSIGN in state 751 resolved as shift
WARNING: shift/reduce conflict for ALWAYS in state 751 resolved as shift
WARNING: shift/reduce conflict for ALWAYS_FF in state 751 resolved as shift
WARNING: shift/reduce conflict for ALWAYS_COMB in state 751 resolved as shift
WARNING: shift/reduce conflict for INITIAL in state 751 resolved as shift
WARNING: shift/reduce conflict for ID in state 751 resolved as shift
WARNING: shift/reduce conflict for SENS_OR in state 751 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 751 resolved as shift
WARNING: shift/reduce conflict for TASK in state 751 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 751 resolved as shift
WARNING: shift/reduce conflict for INPUT in state 751 resolved as shift
WARNING: shift/reduce conflict for OUTPUT in state 751 resolved as shift
WARNING: shift/reduce conflict for INOUT in state 751 resolved as shift
WARNING: shift/reduce conflict for TRI in state 751 resolved as shift
WARNING: shift/reduce conflict for REG in state 751 resolved as shift
WARNING: shift/reduce conflict for LOGIC in state 751 resolved as shift
WARNING: shift/reduce conflict for WIRE in state 751 resolved as shift
WARNING: shift/reduce conflict for SIGNED in state 751 resolved as shift
WARNING: shift/reduce conflict for SUPPLY0 in state 751 resolved as shift
WARNING: shift/reduce conflict for SUPPLY1 in state 751 resolved as shift
WARNING: shift/reduce conflict for IF in state 758 resolved as shift
